#201203#
#
# Max Kraftueberwachung zugeschalten

# XXX h fuer Ansicht home
# XXX q fuer verschieben
# XXX d + Rechte Maustaste Punkte Loeschen
# Achtung bei Datei Pfaden : PandaModule schaun anders aus als python Module
# XXX This is Status work in progress !!!
# XXX Features: 
# XXX Kraftmodul          



# Seilkraftueberwachung gehoert auf wirkliche Seilkraft umstellen und in Silmulation gepackt

# Bei initcontrols Error bei Tabelleninitialisiertung behoben



import cPickle
import wxversion


import os
wxversion.select('2.8')
import wx
from wx import xrc
import time
from datetime import datetime
import math
import socket
import numpy
import hashlib

import logging
import logging.handlers

import copy

import sys
from numpy import arange, cos, linspace, pi, sin, random, amax 
from random import randint, random
from scipy.interpolate import splprep, splev, interp1d ,UnivariateSpline
from scipy.integrate import romberg
#from scipy.optimize import minimize_scalar

from pandac.PandaModules import Material
from pandac.PandaModules import VBase4
from direct.task import Task
from direct.showbase.ShowBase import ShowBase
from direct.showbase import DirectObject
from pandac.PandaModules import *
from pandac.PandaModules import Filename
from pandac.PandaModules import Material
from pandac.PandaModules import VBase4
from direct.directbase import DirectStart
from direct.gui.OnscreenText import OnscreenText
from direct.showutil.Rope import Rope

from GrenzVel import GrenzVel

from CameraHandlerClass import CameraHandler
from CameraHandlerClassA import CameraHandlerPers
from CameraHandlerClassA import CameraHandlerFront
from CameraHandlerClassA import CameraHandlerTop
from CameraHandlerClassA import DisplayRegionSizer

#from direct.showbase.ShowBase import ShowBase
#from direct.showbase import DirectObject

#from thread import start_new_thread

from direct.tkpanels.Inspector import inspect

from ctypes import windll
user32dllHandle = windll.user32

from pandac.PandaModules import loadPrcFileData
loadPrcFileData("","window-type none")

#loadPrcFileData("","framebuffer-multisample 1")
#loadPrcFileData("","multisamples 2")
loadPrcFileData("","want-pstats 1")
#from pandac.PandaModules import PStatCollector
import collections as co

# PANDA3D Messenger
#messenger.toggleVerbose()
#taskMgr.popupControls()
#sys.stdout = open("test.txt", 'a')

myMaterial = Material()
myMaterial.setShininess(5.0) #Make this material shiny
myMaterial.setAmbient(VBase4(0,0,1,1)) #Make this material blue

#----------------------------------------------------------------------
# There are better ways to do IDs, but this demo requires that the window
# IDs be in a specific range. There are better ways to do that, too, but
# this will do for purposes of this demo.

#ANTON  = ("172.16.17.1", 15001,"172.16.17.5", 15001)
#BURT   = ("172.16.17.2", 15001,"172.16.17.5", 15002)
#CECIL  = ("172.16.17.3", 15001,"172.16.17.5", 15003)
#DEBBY  = ("172.16.17.4", 15001,"172.16.17.5", 15004)

ACHSEN     = {'Anton' : ("172.16.17.1", 15001,"172.16.17.5", 15001),
              'Burt'  : ("172.16.17.2", 15001,"172.16.17.5", 15002),
              'Cecil' : ("172.16.17.3", 15001,"172.16.17.5", 15003),
              'Debby' : ("172.16.17.4", 15001,"172.16.17.5", 15004),
              'Eugene': ("172.16.17.5", 15001,"172.16.17.5", 15005),
              'Fred'  : ("172.16.17.6", 15001,"172.16.17.5", 15006),
              'SIMUL' : ("127.0.0.1", 15001,"127.0.0.1", 15005)}



ID_Menu_OpenPos        = 5005
ID_Menu_OpenEnv        = 5006
ID_Menu_SavePos        = 5007
ID_Menu_Exit           = 5008
ID_Menu_OpenEngines    = 5009
ID_Menu_SaveEngines    = 5010
ID_Menu                = 5011

ID_WINDOW_PANDA     = 5000
ID_WINDOW_TOP       = 5001
ID_WINDOW_LEFT1     = 5002
ID_WINDOW_LEFT2     = 5003
ID_WINDOW_BOTTOM    = 5004

#TestTKCP = [([0.,0.,0.,0.,0.12812584,0.24459942,0.50114625,0.76612645,1.,1.,1.,1.]),
            #[([ 0.08731752,  1.11506322,  3.99416078, 11.33227897, 18.20872362, 25.30739366,  33.36570704,  36.2906925]),
             #([ 0.06257548, -1.47087011, -3.30561348, -5.09293159, -7.14529766, -8.76211713, -10.39719564, -10.1796305]),
             #([50.09783148, 49.83594656, 49.98026792, 50.50023384, 45.04604929, 36.48810102,  38.05977388,  37.80970101])],3]

#!DelTest pfad von 0/0/50 TestTCKP =[([0.,0.,0.,0.,1.,1.,1.,1.]),
                                    #[([1.06294578e-15,4.66666667e+00,9.33333302e+00,1.40000000e+01]),
                                     #([10.,10.,10.,10.]),
                                     #([50.,50.,50.,50.])],3]

LOG_FILENAME = '3DSteuerung.log'
class DiagrammWeg(wx.Panel):
    def __init__(self,parent):
        wx.Panel.__init__(self,parent)
        self.p=parent
        self.clientSizeOld = self.p.GetClientSize()
        self.clientSize = self.clientSizeOld
        self.InitData()
        self.InitBuffer()
        
        self.Bind(wx.EVT_PAINT,self.OnPaint)        
        self.Bind(wx.EVT_LEFT_DOWN,self.OnLeftDown)
        self.Bind(wx.EVT_SIZE,self.OnSize)
        
        self.temp = 0

    def InitData(self):        
        self.SystemMaxSpeed = 100.0
        self.SystemMaxAcc   = 100.0
        self.PathLength     = 100.0
        self.DataLoaded     = False

    def OnLeftDown(self,evt):
        #print 'Left Down'
        #print evt.GetPosition()
        #print self.CDC.GetPixel(evt.GetPosition()[0],evt.GetPosition()[1])
        pass

    

    def OnSize(self,evt):
        self.InitBuffer()

    def OnPaint(self,evt):
        self.clientSize = self.p.GetClientSize()
        if self.clientSizeOld != self.clientSize:
            self.InitBuffer()            
        dc = wx.BufferedPaintDC(self,self.buffer)
        dc.SetBackground(wx.Brush(wx.Colour(0.1, 0.1, 0.2)))   
    def InitBuffer(self):
        size = self.p.GetClientSize() 
        self.SetClientSize(size)
        self.buffer = wx.EmptyBitmap(size[0],size[1])
        self.CDC=wx.ClientDC(self)
        dc = wx.BufferedDC(self.CDC,self.buffer)
        dc.SetBrush(wx.Brush((25,25,50), wx.SOLID))        
        dc.DrawRectangle(0,0,size.x,size.y) 
        self.InitGraph(dc)
        

    def SetData(self,ProzentValue,PathLength , TotalPathTime , meanVel, Grenz ,
                Value, maxVel, maxAcc):

        self.Grenz         = Grenz
        self.Value         = Value
        self.ProzentValue  = ProzentValue
       
           
        self.SystemMaxSpeed = maxVel
        self.SystemMaxAcc   = maxAcc
        self.PathLength     = PathLength
        self.TotalPathTime  = TotalPathTime
        self.meanVel        = meanVel
        self.DataLoaded = True

        dc = wx.BufferedDC(self.CDC,self.buffer)
        dc.Clear()
        self.DrawGraph(dc)
        
    def InitGraph(self,dc):
        
        dc.SetPen(wx.Pen((200,0,0),1,wx.SHORT_DASH))
        self.Draw75ProzentLines(dc)
        #dc.SetPen(wx.Pen((125,125,0),1))
        #self.DrawAscendDLines(dc)
        #self.DrawDescendDLines(dc)
        dc.SetPen(wx.Pen((0,234,0),1))
        self.DrawAxes(dc)
        self.DrawGraph(dc)
       
    def DrawGraph(self,dc):
        size = dc.GetSize()
        dc.SetBrush(wx.Brush((25,25,50), wx.SOLID))        
        dc.DrawRectangle(0,0,size.x,size.y)        
        
        dc.SetPen(wx.Pen((200,0,0),1,wx.SHORT_DASH))
        self.Draw75ProzentLines(dc)
        if self.DataLoaded == True:
            self.DrawTextVelAcc(dc)
            
            dc.SetPen(wx.Pen((200,200,0),1))        
            self.DrawSplineOben(dc,self.Grenz)
            self.DrawSplineUnten(dc,self.Grenz)
            dc.SetPen(wx.Pen((0,200,0),1))
            self.DrawSplineOben(dc,self.Value)
            self.DrawSplineUnten(dc,self.Value)
            dc.SetPen(wx.Pen((0,200,200),1))
            self.DrawSplineOben(dc,self.ProzentValue)
            self.DrawSplineUnten(dc,self.ProzentValue)            

        dc.SetPen(wx.Pen((125,125,0),1))
        dc.SetPen(wx.Pen((0,234,0),1))
        self.DrawAxes(dc)

        #self.DrawPolyline(dc)
    def ShowUpdate(self):
        
        dc = wx.BufferedDC(self.CDC,self.buffer)
        size = dc.GetSize()
        dc.SetTextForeground((220,1,1))     #
        dc.SetFont(wx.Font(36, wx.SWISS, wx.NORMAL, wx.NORMAL)) 
        dc.DrawText('UPDATING',size.x/2-100,size.y/2-50)
        
    def ShowUpdateNeeded(self):
        
        dc = wx.BufferedDC(self.CDC,self.buffer)
        size = dc.GetSize()
        dc.SetTextForeground((220,1,1))     #
        dc.SetFont(wx.Font(36, wx.SWISS, wx.NORMAL, wx.NORMAL)) 
        dc.DrawText('UPDATE NEEDED',size.x/2-250,size.y/2-50)    
        
    def DrawTextVelAcc(self,dc):
        size = dc.GetSize()
        x= float(size.width)
        y= float(size.height)
        
        dc.SetTextForeground((0,200,200))     #
        dc.SetFont(wx.Font(9, wx.SWISS, wx.NORMAL, wx.NORMAL)) 
        dc.DrawText('Max Vel = %3.2f m/s' %self.SystemMaxSpeed,x-250,0)
        dc.DrawText('Max Acc = %3.2f m/ss' %self.SystemMaxAcc,x-130,0)
        dc.DrawText('m/s',35,0)
        
        dc.DrawText('s',35,(y/2)+1)
        for i in range(1,8):
            p = (i*self.TotalPathTime/8.0)
            if round(p) <= 100 and round(p) > 10 :
                dc.DrawText('%3.1f'%p,int(i*(x-38)/8)+5,(y/2)+1) # 1/8
            elif round(p) <= 10:
                dc.DrawText('%3.1f'%p,int(i*(x-38)/8)+13,(y/2)+1) # 1/8
            else:
                dc.DrawText('%3.1f'%p,int(i*(x-38)/8)-2,(y/2)+1) # 1/8
        p = (8*self.TotalPathTime/8.0)
        if round(p) <= 100 and round(p) > 10 :
            dc.DrawText('%3.1f'%p,int(8*(x-38)/8)+7,(y/2)+1) # 1/8
        elif round(p) <= 10:
            dc.DrawText('%3.1f'%p,int(8*(x-38)/8)+21,(y/2)+1) # 1/8
        else:
            dc.DrawText('%3.1f'%p,int(8*(x-38)/8),(y/2)+1) # 1/8
        
        dc.DrawText('%3.2f' %(self.SystemMaxSpeed),1,0) # 1/16            
        dc.DrawText('0.0',1,(y/2)-14) # 1/16
        dc.DrawText('%3.2f' %(self.SystemMaxSpeed/2),1,(y/4)-14) # 1/16
        dc.DrawText('%3.2f' %(self.SystemMaxSpeed/2),1,(3*y/4)-14) # 1/16 
        dc.DrawText('%3.2f' %(self.SystemMaxSpeed),1,(y/2+7*y/16))
        dc.DrawText('m/s',35,(y/2+7*y/16))
 
        dc.SetTextForeground((200,200,200))
        dc.DrawText('m',x -14,(y/2)-14)
        for i in range(1,16,2):
            p = (i*self.PathLength/16.0)
            if round(p) <= 100 and round(p) > 10 :
                dc.DrawText('%3.1f'%p,int(i*(x-38)/16)+5,(y/2)-14) # 1/8
            elif round(p) <= 10:
                dc.DrawText('%3.1f'%p,int(i*(x-38)/16)+13,(y/2)-14) # 1/8
            else:
                dc.DrawText('%3.1f'%p,int(i*(x-38)/16)-2,(y/2)-14) # 1/8

          
    
    def DrawCircle(self,dc,Data):
        size = dc.GetSize()
        x= size.width        

        for i in range(len(Data)):
            Data[i] = x*Data[i]
            dc.DrawCircle(Data[i],0.0,3)
        
    def DrawAxes(self,dc):
        size = dc.GetSize()
        x= size.width
        y= size.height        
        dc.DrawLine(-1,(y/2),x,(y/2))
        dc.DrawLine(33,-1,33,y+1)
        dc.DrawLine(int((x-38)/8)+20,(y/2)-5,int((x-38)/8)+20,(y/2)+2)
        dc.DrawLine(int(2*(x-38)/8)+20,(y/2)-8,int(2*(x-38)/8)+20,(y/2)+2)
        dc.DrawLine(int(3*(x-38)/8)+20,(y/2)-5,int(3*(x-38)/8)+20,(y/2)+2)
        dc.DrawLine(int(4*(x-38)/8)+20,(y/2)-10,int(4*(x-38)/8)+20,(y/2)+2)
        dc.DrawLine(int(5*(x-38)/8)+20,(y/2)-5,int(5*(x-38)/8)+20,(y/2)+2)
        dc.DrawLine(int(6*(x-38)/8)+20,(y/2)-8,int(6*(x-38)/8)+20,(y/2)+2)
        dc.DrawLine(int(7*(x-38)/8)+20,(y/2)-5,int(7*(x-38)/8)+20,(y/2)+2)
        for i in range(1,16):
            dc.DrawLine(int(i*(x-38)/16)+20,(y/2)-3,int(i*(x-38)/16)+20,(y/2)+3)
        #dc.DrawLine(int(8*(x-38)/8)+20,(y/2+7*y/16)+38,int(8*(x-38)/8)+20,(y/2+7*y/16))
        dc.DrawLine(30,(y/2),43,(y/2))
        dc.DrawLine(30,(y/4),38,(y/4))
        dc.DrawLine(30,(3*y/4),38,(3*y/4))
  
        
        
    def Draw75ProzentLines(self,dc):
        
        size = dc.GetSize()
        x= float(size.width)
        y= float(size.height)
        dc.DrawLine(33,(y/2+7*y/16),x,(y/2+7*y/16))
        dc.DrawLine(33,(y/2-7*y/16),x,(y/2-7*y/16))
        
    
    def DrawSplineOben(self,dc,Data): 
        
        SplineData = self.Data2DrawDataOben(dc,Data)

        dc.DrawSpline(SplineData)

    def DrawSplineUnten(self,dc,Data):
        
        SplineData = self.Data2DrawDataUnten(dc,Data)

        dc.DrawSpline(SplineData)
    def Data2DrawDataOben(self,dc,PathData):
        # PathData: ndarray [[0,i],[1,i]]
        size = self.p.GetClientSize()
        x= float(size.width)
        y= float(size.height)
        fx = (x-43)/self.PathLength
        fy = (y/2-y/16)/self.SystemMaxSpeed
        
        DrawData = []        
        for i in range(0,PathData.shape[1]):
            z=((fx*PathData[0,i]+33),((y/2-7*y/16)+fy*(self.SystemMaxSpeed-PathData[1,i])))
            DrawData.append(z)
            
        return DrawData
    
    def Data2DrawDataUnten(self,dc,PathData):
         # PathData: ndarray [[0,i],[1,i]]
        size = self.p.GetClientSize()
        x= float(size.width)
        y= float(size.height)
        fx = (x-43)/self.PathLength
        fy = (y/2-y/16)/self.SystemMaxSpeed
        
        DrawData = [] 
        for i in range(0,PathData.shape[1]):
            z=((fx*PathData[0,i]+33),((y/2+7*y/16)-fy*(self.SystemMaxSpeed-PathData[1,i])))
                 
            DrawData.append(z)
        return DrawData

    def FindMax(self, PathData):
        Listx=[]
        Listy=[]
        for i in range(len(PathData)):
            Listx.append(PathData[i][0])
            Listy.append(PathData[i][1])
        MaxX=max(Listx)
        MaxY=max(Listy)
        MinX=min(Listx)
        MinY=min(Listy)

        return MaxX,MaxY,MinX,MinY
    
    
    

class DiagrammZeit(wx.Panel):
    def __init__(self,parent):
        wx.Panel.__init__(self,parent)
        self.p=parent
        self.clientSizeOld = self.p.GetClientSize()
        self.clientSize = self.clientSizeOld
        self.InitData()
        self.InitBuffer()
        
        self.Bind(wx.EVT_PAINT,self.OnPaint)        
        self.Bind(wx.EVT_LEFT_DOWN,self.OnLeftDown)
        self.Bind(wx.EVT_SIZE,self.OnSize)
        
        self.temp = 0

    def InitData(self):        
        self.SystemMaxSpeed = 100.0
        self.SystemMaxAcc   = 100.0
        self.PathLength     = 100.0
        self.DataLoaded     = False

    def OnLeftDown(self,evt):
        #print 'Left Down'
        #print evt.GetPosition()
        #print self.CDC.GetPixel(evt.GetPosition()[0],evt.GetPosition()[1])
        pass
    

    def OnSize(self,evt):
        self.InitBuffer()

    def OnPaint(self,evt):
        self.clientSize = self.p.GetClientSize()
        if self.clientSizeOld != self.clientSize:
            self.InitBuffer()            
        dc = wx.BufferedPaintDC(self,self.buffer)
        dc.SetBackground(wx.Brush(wx.Colour(0.1, 0.1, 0.2)))
    
    def InitBuffer(self):
        size = self.p.GetClientSize() 
        self.SetClientSize(size)
        self.buffer = wx.EmptyBitmap(size[0],size[1])
        self.CDC=wx.ClientDC(self)
        dc = wx.BufferedDC(self.CDC,self.buffer)
        dc.SetBrush(wx.Brush((25,25,50), wx.SOLID))        
        dc.DrawRectangle(0,0,size.x,size.y) 
        self.InitGraph(dc)
        

    def SetData(self,PathLength , TotalPathTime , meanVel, AccData ,
                Value, Differential, maxVel, maxAcc):

        self.Grenz         = AccData
        self.Value         = Value
        self.Differential  = Differential
           
        self.SystemMaxSpeed = maxVel
        self.SystemMaxAcc   = maxAcc
        self.PathLength     = PathLength
        self.TotalPathTime  = TotalPathTime
        self.meanVel        = meanVel
        
        self.DataLoaded = True
        dc = wx.BufferedDC(self.CDC,self.buffer)
        
        dc.Clear()
        self.DrawGraph(dc)
        
    def InitGraph(self,dc):
        dc.SetPen(wx.Pen((200,0,0),1,wx.SHORT_DASH))
        self.Draw75ProzentLines(dc)
        #dc.SetPen(wx.Pen((125,125,0),1))
        #self.DrawAscendDLines(dc)
        #self.DrawDescendDLines(dc)
        dc.SetPen(wx.Pen((0,234,0),1))
        self.DrawAxes(dc)
        self.DrawGraph(dc)
       
    def DrawGraph(self,dc):
        size = dc.GetSize()
        dc.SetBrush(wx.Brush((25,25,50), wx.SOLID))        
        dc.DrawRectangle(0,0,size.x,size.y) 
        
        dc.SetPen(wx.Pen((200,0,0),1,wx.SHORT_DASH))
        self.Draw75ProzentLines(dc)
        if self.DataLoaded == True:
            self.DrawTextVelAcc(dc)            
            dc.SetPen(wx.Pen((200,200,0),1))        
            self.DrawSplineOben(dc,self.Grenz)
            dc.SetPen(wx.Pen((0,200,200),1))
            self.DrawSplineOben(dc,self.Value)

        dc.SetPen(wx.Pen((0,234,0),1))
        self.DrawAxes(dc)

        #self.DrawPolyline(dc)
    def ShowUpdate(self):
        
        dc = wx.BufferedDC(self.CDC,self.buffer)
        size = dc.GetSize()
        dc.SetTextForeground((220,1,1))     #
        dc.SetFont(wx.Font(36, wx.SWISS, wx.NORMAL, wx.NORMAL)) 
        dc.DrawText('UPDATING',size.x/2-100,size.y/2-50) 
        
    def ShowUpdateNeeded(self):
        
        dc = wx.BufferedDC(self.CDC,self.buffer)
        size = dc.GetSize()
        dc.SetTextForeground((220,1,1))     #
        dc.SetFont(wx.Font(36, wx.SWISS, wx.NORMAL, wx.NORMAL)) 
        dc.DrawText('UPDATE NEEDED',size.x/2-250,size.y/2-50)     
    def DrawTextVelAcc(self,dc):
        size = dc.GetSize()
        x= float(size.width)
        y= float(size.height)
        
        dc.SetTextForeground((0,200,200))     #
        dc.SetFont(wx.Font(9, wx.SWISS, wx.NORMAL, wx.NORMAL)) 
        dc.DrawText('Max Vel = %3.2f m/s' %self.SystemMaxSpeed,x-250,0)
        dc.DrawText('Max Acc = %3.2f m/ss' %self.SystemMaxAcc,x-120,0)
        dc.DrawText('m/s',35,0)
        
        dc.DrawText('s',35,(y/2+7*y/16)+1)
        for i in range(1,8):
            p = (i*self.TotalPathTime/8.0)
            if round(p) <= 100 and round(p) > 10 :
                dc.DrawText('%3.1f'%p,int(i*(x-38)/8)+5,(y/2+7*y/16)+1) # 1/8
            elif round(p) <= 10:
                dc.DrawText('%3.1f'%p,int(i*(x-38)/8)+13,(y/2+7*y/16)+1) # 1/8
            else:
                dc.DrawText('%3.1f'%p,int(i*(x-38)/8)-2,(y/2+7*y/16)+1) # 1/8
        p = (8*self.TotalPathTime/8.0)
        if round(p) <= 100 and round(p) > 10 :
            dc.DrawText('%3.1f'%p,int(8*(x-38)/8)+7,(y/2+7*y/16)+1) # 1/8
        elif round(p) <= 10:
            dc.DrawText('%3.1f'%p,int(8*(x-38)/8)+21,(y/2+7*y/16)+1) # 1/8
        else:
            dc.DrawText('%3.1f'%p,int(8*(x-38)/8),(y/2+7*y/16)+1) # 1/8
        
        dc.DrawText('%3.2f' %(self.SystemMaxSpeed),1,0) # 1/16            
        dc.DrawText('%3.2f' %(self.SystemMaxSpeed/2),1,(y/2)-14) # 1/16
        dc.DrawText('%3.2f' %(3*self.SystemMaxSpeed/4),1,(y/4)-14) # 1/16
        dc.DrawText('%3.2f' %(self.SystemMaxSpeed/4),1,(3*y/4)-14) # 1/16        
 
        dc.SetTextForeground((200,200,200))
        dc.DrawText('m',x -14,(y/2+7*y/16)-14)
        for i in range(1,16,2):
            p = (i*self.PathLength/16.0)
            if round(p) <= 100 and round(p) > 10 :
                dc.DrawText('%3.1f'%p,int(i*(x-38)/16)+5,(y/2+7*y/16)-14) # 1/8
            elif round(p) <= 10:
                dc.DrawText('%3.1f'%p,int(i*(x-38)/16)+13,(y/2+7*y/16)-14) # 1/8
            else:
                dc.DrawText('%3.1f'%p,int(i*(x-38)/16)-2,(y/2+7*y/16)-14) # 1/8     
    
    def DrawCircle(self,dc,Data):
        size = dc.GetSize()
        x= size.width        

        for i in range(len(Data)):
            Data[i] = x*Data[i]
            dc.DrawCircle(Data[i],0.0,3)
        
    def DrawAxes(self,dc):
        size = dc.GetSize()
        x= size.width
        y= size.height        
        dc.DrawLine(-1,(y/2+7*y/16),x,(y/2+7*y/16))
        dc.DrawLine(33,-1,33,y+1)
        dc.DrawLine(int((x-38)/8)+20,(y/2+7*y/16)-5,int((x-38)/8)+20,(y/2+7*y/16)+2)
        dc.DrawLine(int(2*(x-38)/8)+20,(y/2+7*y/16)-8,int(2*(x-38)/8)+20,(y/2+7*y/16)+2)
        dc.DrawLine(int(3*(x-38)/8)+20,(y/2+7*y/16)-5,int(3*(x-38)/8)+20,(y/2+7*y/16)+2)
        dc.DrawLine(int(4*(x-38)/8)+20,(y/2+7*y/16)-10,int(4*(x-38)/8)+20,(y/2+7*y/16)+2)
        dc.DrawLine(int(5*(x-38)/8)+20,(y/2+7*y/16)-5,int(5*(x-38)/8)+20,(y/2+7*y/16)+2)
        dc.DrawLine(int(6*(x-38)/8)+20,(y/2+7*y/16)-8,int(6*(x-38)/8)+20,(y/2+7*y/16)+2)
        dc.DrawLine(int(7*(x-38)/8)+20,(y/2+7*y/16)-5,int(7*(x-38)/8)+20,(y/2+7*y/16)+2)
        for i in range(1,16):
            dc.DrawLine(int(i*(x-38)/16)+20,(y/2+7*y/16)-3,int(i*(x-38)/16)+20,(y/2+7*y/16)+3)
        #dc.DrawLine(int(8*(x-38)/8)+20,(y/2+7*y/16)+38,int(8*(x-38)/8)+20,(y/2+7*y/16))
        dc.DrawLine(30,(y/2),43,(y/2))
        dc.DrawLine(30,(y/4),38,(y/4))
        dc.DrawLine(30,(3*y/4),38,(3*y/4))
        
        
        

    def Draw75ProzentLines(self,dc):
        
        size = dc.GetSize()
        x= float(size.width)
        y= float(size.height)
        dc.DrawLine(0,(y/2+7*y/16),x,(y/2+7*y/16))
        dc.DrawLine(0,(y/2-7*y/16),x,(y/2-7*y/16))
        
    
    def DrawSplineOben(self,dc,Data): 
        
        SplineData = self.Data2DrawDataOben(dc,Data)

        dc.DrawSpline(SplineData)
        
    def Data2DrawDataOben(self,dc,PathData):
        # PathData: ndarray [[0,i],[1,i]]
        size = self.p.GetClientSize()
        x= float(size.width)
        y= float(size.height)
        mx = amax(PathData,1)[0]
        my = amax(PathData,1)[1]
        fx = (x-43)/self.TotalPathTime
        fy = (y -2*y/16)/self.SystemMaxSpeed
        
        DrawData = []        
        for i in range(0,PathData.shape[1]):
            z=((fx*PathData[0,i]+33),((y-y/16)-fy*(PathData[1,i])))
            DrawData.append(z)
            
        return DrawData

    def FindMax(self, PathData):
        Listx=[]
        Listy=[]
        for i in range(len(PathData)):
            Listx.append(PathData[i][0])
            Listy.append(PathData[i][1])
        MaxX=max(Listx)
        MaxY=max(Listy)
        MinX=min(Listx)
        MinY=min(Listy)

        return MaxX,MaxY,MinX,MinY
    
    
    


class NumValidator(wx.PyValidator):
    ''' Validates data as it is entered into the text controls. '''

    #----------------------------------------------------------------------
    def __init__(self,flag):
        wx.PyValidator.__init__(self)
        self.flag = flag
        self.Bind(wx.EVT_CHAR, self.OnChar)

    #----------------------------------------------------------------------
    def Clone(self):
        '''Required Validator method'''
        return NumValidator(self.flag)

    #----------------------------------------------------------------------
    def Validate(self, win):
        return True

    #----------------------------------------------------------------------
    def TransferToWindow(self):
        return True

    #----------------------------------------------------------------------
    def TransferFromWindow(self):
        return True

    #----------------------------------------------------------------------
    def OnChar(self, event):
        keycode = int(event.GetKeyCode())
        if keycode != 8:            
            if keycode < 256:
                key = chr(keycode)
                if self.flag == 'digit' and not(key in "-.0123456789"):
                    return
                if self.flag == 'positivdigit' and not(key in ".0123456789"):
                                    return                
        event.Skip()
class Achse():
    def __init__(self,KontaktData):
        
        self.Host    = ACHSEN[KontaktData][0]
        self.Port    = ACHSEN[KontaktData][1]
        self.RecHost = ACHSEN[KontaktData][2]
        self.RecPort = ACHSEN[KontaktData][3] 
        
        self.recaddr = (self.RecHost,self.RecPort)
        self.initProperties()
        self.timeOld = time.clock()
        self.SpeedOld = 0.0

        if self.Host <> "127.0.0.1":
            try:
                #print 'init sendSock'
                self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            except:
                #print "ERROR: Adress already in use"
                pass
            try:
                #print 'init recsock'
                self.recUDPSock = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
                self.recUDPSock.settimeout(0.25)
            except:
                raise
            try:
                self.recUDPSock.bind(self.recaddr)
                #print str(KontaktData) + '  UDP Bind'
            except socket.error, (value,message):
                if value == 10048:
                    pass
                    dlg=wx.MessageDialog(None,'Another GUI has control','Error Another GUI',wx.OK|wx.ICON_EXCLAMATION)
                    result=dlg.ShowModal()
                    dlg.Destroy
                raise 
            #self.receive()
        else:
            self.time       = time.clock()
            self.IntervallR = time.clock()-self.timeOld
            self.timeOld    = self.time
            self.Simulate()
            try:
                self.recUDPSock.close()
                #print str(KontaktData) + '  UDP Close'
            except:
                pass

    def initProperties(self):
        self.LTold             = "0"
        self.Modus             = "Modus"
        self.OwnPID            = "0"
        self.ControlingPIDTx   = "ControlingPIDTx"
        self.ControlingPIDRx   = "0"
        self.Intent            = "False"
        self.Enable            = "Enable"
        self.GuideControl      = "GuideControl"
        self.SpeedSoll         = "0.0"
        self.GuideSpeedSoll    = "GuideSpeedSoll"
        self.PosSoll           = "0"
        self.EStopReset        = "0"
        self.ReSync            = "0"
        self.AccMax            = "1.0"
        self.DccMax            = "1.0"
        self.PosHardMax        = "300.0"
        self.PosUserMax        = "300.0"
        self.PosUserMin        = "-300.0"
        self.PosHardMin        = "-300.0"
        self.SpeedMax          = "5.0"
        self.AccMax            = "1.0"
        self.DccMax            = "1.0"
        self.MaxAmp            = "150"
        self.FilterP           = "FilterP"
        self.FilterI           = "FilterI"
        self.FilterD           = "FilterD"
        self.FilterIL          = "FilterIL"
        self.GuidePitch        = "-6.3"
        self.GuidePosMax       = "GuidePosMax"
        self.GuidePosMaxMax    = "GuidePosMaxMax"
        self.GuidePosMin       = "GuidePosMin"
        self.ControlingPID     = "ControlingPID"
        self.LifetickUItx      = "LifetickUItx"
        self.Status            = "Status"
        self.GuideStatus       = "GuideStatus"
        self.PosIst            = "0.0"
        self.PosCut            = "0.0"
        self.SpeedIstUI        = "0.0"
        self.MasterMomentUI    = "60.0"
        self.CabTemperature    = "CabTemperature"
        self.Name              = "Name"
        self.GearToUI          = "GearToUI"
        self.GuidePosIstUI     = "GuidePosIstUI"
        self.GuideIstSpeedUI   = "GuideIstSpeedUI"
        self.MotAuslastUI      = "MotAuslastUI"
        self.ActCurUI          = "ActCurUI"
        self.SpeedMaxForUI     = "SpeedMaxforUI"
        self.PosDiffForUI      = "PosDifForUI"
        self.RopeSWLL          = "RopeSWLL"
        self.RopeDiameter      = "RopeDiameter"
        self.RopeType          = "RopeType"
        self.RopeNumber        = "RopeNumber"
        self.RopeLength        = "RopeLength"
        self.VelOrPos          = "Vel"
        self.PosWin            = "0.01"
        self.VelWin            = "0.01"
        self.AccTot            = "5.00"
        self.Rampform          = "undef"
        self.InitAchse         = 1
        self.EStopCutPos       = "0.0"
        self.EStopCutVel       = "0.0"
        self.EStopCutTime      = "CutTime"
        self.EStopReset        = "0"
        self.Offset            = 0
        #self.PulleyPos         = Vec3(0.0,0.0,0.0)
        self.receivedBuff = "0;0;0;0;0;0;0;0;waiting;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;"        
        self.Es30kWOK        = False #
        self.EsG3OUT         = False #
        self.EsG3COM         = False #
        self.EsG3FB          = False #
        self.EsG2OUT         = False #
        self.EsG2COM         = False #
        self.EsG2FB          = False #
        self.EsG1OUT         = False #
        self.EsG1COM         = False #
        self.EsG1FB          = False #
        self.EsSlave         = False #
        self.EsNetwork       = False #
        self.EsMaster        = False #
        self.EsResetAble     = False #
        self.EsEStop1        = False #
        self.EsEstop2        = False #
        self.EsSteuerwort    = False #
        self.Es05kWOK        = False #
        self.EsB1OK          = False #
        self.EsB2OK          = False # 
        self.EsDCSOK         = False #
        self.EsSPSOK         = False #
        self.EsBRK2KB        = False #
        self.EsFTBOK         = False #
        self.EsPosWin        = False #
        self.EsVelWin        = False #
        self.EsEndlage       = False #
        self.EsSchluessel1   = False #
        self.EsSchluessel2   = False #
        self.EsTaster        = False #
        self.EsSchuetz       = False #
        self.EsReady         = False #
        self.EsOneMore       = True
        self.GUINotHalt      = 1

    def comunicateServer(self):
        if self.Host <> "127.0.0.1":
            try:
                if self.ControlingPIDRx == '0' or str(self.OwnPID) == self.ControlingPIDRx or self.ControlingPIDRx == '0000':
                    SendData=self.packSendstringToSPS()
                    self.sock.sendto(SendData, (self.Host, self.Port)) 
            except:
                #print "Send Server error"
                pass
               
            self.receive()
        else:
            self.time       = time.clock()
            self.IntervallR = time.clock()-self.timeOld
            self.timeOld    = self.time
            self.Simulate()

    def receive(self):
        if self.Host <> "127.0.0.1":
            if self.ControlingPIDRx == '0' or self.OwnPID == self.ControlingPIDRx or self.ControlingPIDRx == '0000':
                #try:
                #    self.recUDPSock = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
                #except:
                #    raise
                #try:
                #    self.recUDPSock.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
                #    self.recUDPSock.bind(self.recaddr) 
                #except socket.error, (value,message):
                    #if value == 10048:
                     #   pass
                     #   dlg=wx.MessageDialog(None,'Another GUI has control','Error Another GUI',wx.OK|wx.ICON_EXCLAMATION)
                     #   result=dlg.ShowModal()
                     #   dlg.Destroy
                     #   sys.exit(1) 
                   # raise
                try:
                    self.received,addr = self.recUDPSock.recvfrom(601)
                    self.receivedBuff = self.received
                    #self.recUDPSock.close()
                except socket.timeout:
                    #print 'TimeOut'
                    self.received = self.receivedBuff
                else:
                    #print "Rec Server error"
                    self.received = self.receivedBuff
        else:
            self.received = self.receivedBuff


        self.unpackRecStringFromSPS(self.received)
        if self.InitAchse == 1:            
            self.PosSoll = self.PosIst
            if self.Host <> "127.0.0.1":
                try:
                    SendData=self.packSendstringToSPS()
                    self.sock.sendto(SendData, (self.Host, self.Port)) 
                except:
                    #print "Send Server error"
                    pass
            self.InitAchse = 0

        return

    def Simulate(self):
        
        fa="%3.2f"
        self.ControlingPIDRx              = str(self.OwnPID)            #[0] Controling PID
        self.LTold                        = 1                                     
        self.Status                       = "SIMUL"
        self.GuideStatus                  = "SIMUL"
        
               
        if self.Enable == 1:
        #self.SpeedIstUI 
            SpeedIstIntern = float(self.SpeedIstUI)
            SpeedSollIntern = min(float(self.SpeedSoll),float(self.SpeedMax))
            SpeedSollIntern = max(float(self.SpeedSoll),-float(self.SpeedMax))

            PosDiffG = float(self.PosUserMax) - float(self.PosIst)
            if PosDiffG > 0 :
                SpeedMaxG = math.sqrt(float(self.DccMax)*PosDiffG)
                SpeedSollIntern = min(SpeedSollIntern,SpeedMaxG)
                #print " Ausserer Anschlag"
            else:
                if SpeedSollIntern > 0:
                    SpeedSollIntern = 0.0
                    #print "auserhalb Ausserer Anschlag"

            PosDiffG = float(self.PosIst) - float(self.PosUserMin)
            if PosDiffG > 0:
                SpeedMaxG = math.sqrt(float(self.DccMax)*PosDiffG);
                SpeedSollIntern = max(SpeedSollIntern,-SpeedMaxG)
                #print " Innerer Anschlag"
            else:
                if SpeedSollIntern < 0:
                    SpeedSollIntern= 0.0
                   #print "auserhalb innerenr Anschlag"

           #print "SpeedSoll "+str(fa%(float(self.SpeedSoll)))+
           #     "  Speed SollIntern "+str(fa%(float(SpeedSollIntern)))+
           #     "   SpeedIstIntern "+ str(fa%(float(SpeedIstIntern)))+
           #     "   PosIst "+fa%(float(self.PosIst))

            
            if (SpeedSollIntern > 0 and SpeedSollIntern >= SpeedIstIntern):
                SpeedIstIntern = (SpeedIstIntern+float(self.AccMax)*self.IntervallR)
                #print "werden Schneller in Plus Richtung"
                if SpeedIstIntern > SpeedSollIntern:
                    SpeedIstIntern = SpeedSollIntern
                    #print "Soll Gesch erreicht von Unten Richtung Plus"
            elif (SpeedSollIntern >= 0 and SpeedSollIntern < SpeedIstIntern):
                SpeedIstIntern = (SpeedIstIntern-float(self.DccMax)*self.IntervallR)
               #print "werden langsamer in Plus Richtung"
                if SpeedIstIntern < SpeedSollIntern:
                    SpeedIstIntern = SpeedSollIntern
                    #print "Soll Gesch erreicht von Oben Richtung Plus"
            elif (SpeedSollIntern <= 0 and SpeedSollIntern < SpeedIstIntern):
                SpeedIstIntern = (SpeedIstIntern-float(self.AccMax)*self.IntervallR)
                #print "werden Schneller in Minus Richtung"
                if SpeedIstIntern < SpeedSollIntern :
                    SpeedIstIntern = SpeedSollIntern
                    #print "Soll Gesch erreicht von Oben Richtung Minus"
            elif (SpeedSollIntern <= 0 and SpeedSollIntern >= SpeedIstIntern):
                SpeedIstIntern = (SpeedIstIntern+float(self.DccMax)*self.IntervallR)
                #print "werden Langsamer in Minus Richtung"
                if SpeedIstIntern > SpeedSollIntern:
                    SpeedIstIntern = SpeedSollIntern
                    #print "Soll Gesch erreicht von Unten Richtung Minus"

        #self.PosIst
            self.PosIst = str(float(self.PosIst)+SpeedIstIntern*self.IntervallR)
            self.SpeedIstUI = str(SpeedIstIntern)
        else:
            self.SpeedIstUI = "0.0"


        self.MasterMomentUI               = "0.0"                         #[6] AxisAmp
        self.CabTemperature               = "22.2"                         #[7] AxisTemp        
        self.GuidePosIstUI                = "0.0"                         #zu rechnen
        self.GuideIstSpeedUI              = "0.0"                         #zu rechnen
        self.SpeedMaxForUI                = "16.25"                         #[37]VelMaxMot
        self.PosDiffForUI                 = "SIMUL"                         #zu rechnen
        self.Name                         = "SIMUL"                         #[8]  Name
        self.GearToUI                     = "13.0"                         #[9]  Gear
        self.PosHardMax                   = self.PosHardMax                 #[10] PosHardMax
        self.PosUserMax                   = self.PosUserMax                 #[11] PosUserMax
        self.PosUserMin                   = self.PosUserMin                 #[12] PosUserMin
        self.PosHardMin                   = self.PosHardMin                 #[13] PosHardMin
        self.SpeedMax                     = self.SpeedMax                   #[14] VelMax
        self.AccMax                       = self.AccMax                     #[15] AccMax
        self.DccMax                       = self.DccMax                     #[16] DccMax
        self.MaxAmp                       = "150"                         #[17] AmpMax
        self.FilterP                      = "1.0"                         #[18] FilterP
        self.FilterI                      = "1.0"                         #[19] FilterI
        self.FilterD                      = "1.0"                         #[20] FilterD
        self.FilterIL                     = "1.0"                         #[21] FilterIL
        self.RopeSWLL                     = "2500.0"                         #[22] SWLL
        self.RopeDiameter                 = "5.0"                         #[23] Rope Diam    
        self.RopeType                     = "SIMUL"                         #[24] Rope Type 
        self.RopeNumber                   = "SIMUL"                         #[25] Rope Number     
        self.RopeLength                   = "200"                         #[26] Rope Length   
        self.GuidePitch                   = "-6.3"                         #[27] Pitch       
        self.GuidePosMax                  = "0.97"                         #[28] Guide Pos Max
        self.GuidePosMaxMax               = "0.97"                         #[41] Guide Pos MaxMax 
        self.GuidePosMin                  = "0.01"                         #[29] Guide Pos Min
        self.PosWin                       = "0.01"                          #[38] PosWin
        self.VelWin                       = "0.01"                          #[39] VelWin
        self.AccTot                       = "5.00"                          #[40] AccTot
        self.EStopStatus                  = 2048
        self.EsNetwork                    = True
        self.EsTaster                     = True
        self.EStopTime                    = 0
        self.EStopCutPos                  = 0
        self.EStopCutVel                  = 0
        self.EsEStop2                     = False

    def packSendstringToSPS(self):
        try:
            SendData = str(self.LTold)
            SendData = (SendData +';'
                        +str(self.Modus) +';'
                        +str(self.OwnPID) +';'
                        +str(self.ControlingPIDTx) +';'
                        +str(self.Intent) + ';'
                        +str(self.Enable) + ';'
                        +str(self.GuideControl) + ';' #GuideControl
                        +str(self.SpeedSoll) + ';'
                        +str(self.GuideSpeedSoll) +';'
                        +str(self.PosSoll) +';'
                        +str(self.EStopReset) +';'
                        +str(self.ReSync)+ ';'
                        +str(self.GUINotHalt)+ ';'
                        # Setupdaten..................
                        +str(self.AccMax) + ';' 
                        +str(self.DccMax) + ';'      # Gewuenschte Maximalbeschl.
                        +str(self.PosHardMax) + ';'
                        +str(self.PosUserMax) + ';'
                        +str(self.PosUserMin) + ';'
                        +str(self.PosHardMin) + ';'
                        +str(self.SpeedMax) + ';'
                        +str(self.AccMax) + ';'
                        +str(self.DccMax) + ';'       # Hardwarebedingte Maximalbeschl.
                        +str(self.MaxAmp) + ';'
                        +str(self.FilterP) + ';'
                        +str(self.FilterI) + ';'
                        +str(self.FilterD) + ';'
                        +str(self.FilterIL) + ';'
                        +str(self.GuidePitch) + ';'
                        +str(self.GuidePosMax) + ';'
                        +str(self.GuidePosMin)+ ';'
                        +str(self.VelOrPos)+ ';'
                        +str(self.PosWin)+ ';'
                        +str(self.VelWin)+ ';'
                        +str(self.AccTot)+ ';'
                        +'EOD')
            return SendData
        except:
            #print "Send Data Error"
            pass

    def unpackRecStringFromSPS(self,Data):
        try:
            fa="%3.2f"
            fb="%2.3f"
            fc="%2.0f"
            fd="%3.1f"
            fe="%1.4f"
            Data=Data.split(';')
            self.ControlingPIDRx              = Data[0]                         #[0] Controling PID
            self.LTold                        = int(Data[1])                    #[1] lifeTick                                
            self.Status                       = Data[2]
            self.GuideStatus                  = Data[3]
            self.PosIst                       = fa%float(Data[4])
            self.SpeedIstUI                   = fa%float(Data[5])
            self.MasterMomentUI               = fa%(float(Data[6])/1000*60)     #[6] AxisAmp
            self.CabTemperature               = fc%float(Data[7])               #[7] AxisTemp        
            self.GuidePosIstUI                = fb%float(Data[30])              #[30]GuidePos
            self.GuideIstSpeedUI              = fb%float(Data[31])              #[31]GuideVel
            self.SpeedMaxForUI                = fb%float(Data[34])              #[34]SpeedMaxForUI
            self.PosDiffForUI                 = fb%float(Data[35])              #[35]PosDiffForUI
            self.Name                         = Data[8]                         #[8]  Name
            self.GearToUI                     = Data[9]                         #[9]  Gear
            self.PosHardMax                   = str(fa%float(Data[10]))         #[10] PosHardMax
            self.PosUserMax                   = fa%float(Data[11])              #[11] PosUserMax
            self.PosUserMin                   = fa%float(Data[12])              #[12] PosUserMin
            self.PosHardMin                   = fa%float(Data[13])              #[13] PosHardMin
            self.SpeedMax                     = fa%float(Data[14])              #[14] VelMax
            self.AccMax                       = fa%float(Data[15])              #[15] AccMax
            self.DccMax                       = fa%float(Data[16])              #[16] DccMax
            self.MaxAmp                       = fa%float(Data[17])              #[17] AmpMax
            self.FilterP                      = fb%float(Data[18])              #[18] FilterP
            self.FilterI                      = fb%float(Data[19])              #[19] FilterI
            self.FilterD                      = fb%float(Data[20])              #[20] FilterD
            self.FilterIL                     = fd%float(Data[21])              #[21] FilterIL
            self.Rampform                     = Data[36]                        #[36] Rampform
            self.RopeSWLL                     = Data[22]                        #[22] SWLL
            self.RopeDiameter                 = Data[23]                        #[23] Rope Diam    
            self.RopeType                     = Data[24]                        #[24] Rope Type 
            self.RopeNumber                   = Data[25]                        #[25] Rope Number     
            self.RopeLength                   = Data[26]                        #[26] Rope Length   
            self.GuidePitch                   = fb%float(Data[27])              #[27] Pitch       
            self.GuidePosMax                  = fb%float(Data[28])              #[28] Guide Pos Max
            self.GuidePosMaxMax               = 1.111#fb%float(Data[45])              #[28] Guide Pos MaxMax
            self.GuidePosMin                  = fe%float(Data[29])              #[29] Guide Pos Min
            self.PosWin                       = fe%float(Data[42])              #[38] PosWin
            self.VelWin                       = fe%float(Data[43])              #[39] VelWin
            self.AccTot                       = fa%float(Data[44])              #[40] AccTot
            self.EStopStatus                  = int(Data[37])
            self.EStopCutTime                 = Data[39]
            self.EStopCutPos                  = Data[40]
            self.EStopCutVel                  = Data[41] 
            #print self.Name +'   ' +self.EStopCutTime+'    '+self.EStopCutPos+'    '+self.EStopCutVel 
            #print self.Name +'   'fb%float(Data[45])
        except:
            # To be investigated
            #print "unpack Error"
            pass
        self.DecodeEStopStatus()
        
    def DecodeEStopStatus(self):

        if (self.EStopStatus & 65536): # Bit 16
            self.Es30kWOK  = True
        else:
            self.Es30kWOK     = False                
        if (self.EStopStatus & 32768): # Bit 15
            self.EsSteuerwort  = True
        else:
            self.EsSteuerwort    = False 

        if (self.EStopStatus & 131072): # Bit 17
            self.Es05kWOK  = True
        else:
            self.Es05kWOK     = False
        


        if (self.EStopStatus & 16777216): # Bit 24
            self.EsPosWin  = True
        else:
            self.EsPosWin     = False 
        if (self.EStopStatus & 33554432): # Bit 25
            self.EsVelWin  = True
        else:
            self.EsVelWin     = False 
        if (self.EStopStatus & 67108864): # Bit 26
            self.EsEndlage  = True
        else:
            self.EsEndlage     = False
        
        if (self.EStopStatus & 8192): # Bit 13
            self.EsEStop1  = True
        else:
            self.EsEStop1    = False 
        if (self.EStopStatus & 16384): # Bit 14
            self.EsEStop2  = True
        else:
            self.EsEStop2    = False
            
        if (self.EStopStatus & 262144): # Bit 18
            self.EsB1OK  = True
        else:
            self.EsB1OK     = False 
        if (self.EStopStatus & 524288): # Bit 19
            self.EsB2OK  = True
        else:
            self.EsB2OK     = False             
        if (self.EStopStatus & 1048576): # Bit 20
            self.EsDCSOK  = True
        else:
            self.EsDCSOK     = False 
        if (self.EStopStatus & 2097152): # Bit 21
            self.EsSPSOK  = True
        else:
            self.EsSPSOK     = False 
        if (self.EStopStatus & 4194304): # Bit 22
            self.EsBRK2KB  = True
        else:
            self.EsBRK2KB     = False 
        if (self.EStopStatus & 8388608): # Bit 23
            self.EsFTBOK  = True
        else:
            self.EsFTBOK     = False         
       
       
        if (self.EStopStatus & 1): # Bit 0
            self.EsG3OUT = False
        else:
            self.EsG3OUT = True        
        if (self.EStopStatus & 2): # Bit 1
            self.EsG3COM    = False
        else:
            self.EsG3COM    = True
        if (self.EStopStatus & 4): # Bit 2
            self.EsG3FB     = False
        else:
            self.EsG3FB     = True
        if (self.EStopStatus & 8): # Bit 3
            self.EsG2OUT    = False
        else:
            self.EsG2OUT    = True            
        if (self.EStopStatus & 16): # Bit 4
            self.EsG2COM    = False
        else:
            self.EsG2COM    = True            
        if (self.EStopStatus & 32): # Bit 5
            self.EsG2FB     = False
        else:
            self.EsG2FB     = True            
        if (self.EStopStatus & 64): # Bit 6
            self.EsG1OUT    = False
        else:
            self.EsG1OUT    = True
        if (self.EStopStatus & 128): # Bit 7
            self.EsG1COM    = False
        else:
            self.EsG1COM    = True
        if (self.EStopStatus & 256): # Bit 8
            self.EsG1FB     = False
        else:
            self.EsG1FB     = True
        if (self.EStopStatus & 1024): # Bit 10
            self.EsSlave    = True
        else:
            self.EsSlave    = False
        if (self.EStopStatus & 2048): # Bit 11
            self.EsNetwork  = True
        else:
            self.EsNetwork  = False
        if (self.EStopStatus & 512): # Bit 9
            self.EsMaster   = True
        else:
            self.EsMaster   = False
        if (self.EStopStatus & 4096): # Bit 12
            self.EsResetAble   = True
        else:
            self.EsResetAble   = False
         

        if (self.EStopStatus & 1073741824): # Bit 30
            self.EsSchluessel1 = True
        else:
            self.EsSchluessel1 = False 
        if (self.EStopStatus & 2147483648): # Bit 31
            self.EsSchluessel2 = True
        else:
            self.EsSchluessel2 = False
            
        if (self.EStopStatus & 134217728): # Bit 27
            self.EsTaster = True
        else:
            self.EsTaster = False
        if (self.EStopStatus & 268435456): # Bit 28
            self.EsSchuetz = True
        else:
            self.EsSchuetz = False 
        if (self.EStopStatus & 536870912):#Bit 29
            self.EsReady = True
        else:
            self.EsReady = False        
        
    def Enable(self):
        self.Enable = 1

    def Disable(self):
        self.Enable = 0

    def SaveAccData(self,filename):
        file = open(filename,'wb')
        cPickle.dump(self.d,file,protocol = 2)
        file.close()        
        

class P3dViewport(wx.Panel):
    # this panel contains the panda 3d window
    def __init__(self, *args, **kwargs):
        wx.Panel.__init__(self, *args, **kwargs)

    def initialize(self):
    # the panda3d window must be put into the panel after the wx-window has
    # been created
        self.Bind(wx.EVT_SIZE,self.OnResize)
        self.Create3Views()
        #self.OnResize(1)
  

    def Create3Views(self):
        assert self.GetHandle() != 0
        w, h = self.ClientSize.GetWidth(), self.ClientSize.GetHeight()
        wp = WindowProperties()
        wp.setOrigin(0, 0)
        wp.setSize(1657, 725)
        wp.setParentWindow(self.GetHandle())
        
        self.OutputWindow = base.openDefaultWindow(props=wp,makeCamera = False, gsg=None)
        #self.camBackNP = base.makeCamera(base.win, camName = "camPers",
        #                               displayRegion= (0,0.669,0,1))
        self.camBackNP = base.makeCamera(base.win, camName = "camPers",
                                       displayRegion= (0,1,0,1))
        render.hide(BitMask32.bit(0))
        self.camBackNP.node().setCameraMask(BitMask32.bit(0))
        self.DisplayBack = self.camBackNP.node().getDisplayRegion(0)
        self.DisplayBack.setClearColor(VBase4(0.0, 0.9, 0.5, 1))
        self.DisplayBack.setClearColorActive(True)
        self.DisplayBack.setClearDepthActive(True)
        self.MouswatcherBack = MouseWatcher()
        base.mouseWatcher.getParent().attachNewNode(self.MouswatcherBack)
        self.MouswatcherBack.setDisplayRegion(self.DisplayBack)
        
       
        self.DisplayPersA = base.win.makeDisplayRegion(0,0.665,0,1)
        self.DisplayPersA.setClearColor(VBase4(0.098, 0.098, 0.196, 1))
        self.DisplayPersA.setClearColorActive(True)
        self.DisplayPersA.setClearDepthActive(True)
        self.MouseWatcherPersA = MouseWatcher()
        base.mouseWatcher.getParent().attachNewNode(self.MouseWatcherPersA)
        self.MouseWatcherPersA.setDisplayRegion(self.DisplayPersA)        
        self.CamPersANP = render.attachNewNode(Camera('camPersA'))
        self.DisplayPersA.setCamera(self.CamPersANP)
        self.lensPers = self.CamPersANP.node().getLens()
        dr1h = float(self.DisplayPersA.getPixelHeight())
        AspectRatio1 = (self.DisplayPersA.getPixelWidth()/dr1h)
        self.lensPers.setAspectRatio(AspectRatio1)
        self.CamPersANP.reparentTo(render)
        
        
        self.camHandlerPers = CameraHandlerPers(self.CamPersANP,self.MouseWatcherPersA)
        self.pushBias=0.4
        self.ambient=0.2 
        mci = NodePath(PandaNode("Main Camera Initializer"))
        if (base.win.getGsg().getSupportsShadowFilter()):
            mci.setShader(Shader.load('shadow.sha'))
        else:
            mci.setShader(Shader.load('shadow-nosupport.sha'))
        #base.cam.node().setInitialState(mci.getState())
        self.CamPersANP.node().setInitialState(mci.getState())
        render.setShaderInput('push',self.pushBias,self.pushBias,self.pushBias,0)        

        
        self.DisplayTop = base.win.makeDisplayRegion(0.67,1,0.5,1)
        self.DisplayTop.setClearColor(VBase4(0.098, 0.098, 0.196, 1))
        self.DisplayTop.setClearColorActive(True)
        self.DisplayTop.setClearDepthActive(True)
        self.MouseWatcherTop = MouseWatcher()
        base.mouseWatcher.getParent().attachNewNode(self.MouseWatcherTop)
        self.MouseWatcherTop.setDisplayRegion(self.DisplayTop)        
        self.CamTopNP = render.attachNewNode(Camera('camTop'))
        self.DisplayTop.setCamera(self.CamTopNP)
        self.CamTopNP.reparentTo(render)
        self.lensTop = OrthographicLens()
        self.lensTop.setFilmSize(220,100)
        dr2h = float(self.DisplayTop.getPixelHeight())
        AspectRatio2 = (self.DisplayTop.getPixelWidth()/dr2h)
        self.lensTop.setAspectRatio(AspectRatio2)
        self.CamTopNP.node().setLens(self.lensTop)
        self.CamTopNP.setPos(0,0,250)
        self.CamTopNP.lookAt(0,0,0)
        self.camHandlerTop = CameraHandlerTop(self.CamTopNP,self.MouseWatcherTop)
        
        self.DisplayFront = base.win.makeDisplayRegion(0.67,1,0,0.490)
        self.DisplayFront.setClearColor(VBase4(0.098, 0.098, 0.196, 1))
        self.DisplayFront.setClearColorActive(True)
        self.DisplayFront.setClearDepthActive(True)
        self.MouseWatcherFront = MouseWatcher()
        base.mouseWatcher.getParent().attachNewNode(self.MouseWatcherFront)
        self.MouseWatcherFront.setDisplayRegion(self.DisplayFront)        
        self.CamFrontNP = render.attachNewNode(Camera('camFront'))
        self.DisplayFront.setCamera(self.CamFrontNP)
        self.CamFrontNP.reparentTo(render)
        self.lensFront = OrthographicLens()
        self.lensFront.setFilmSize(220,100)
        dr2h = float(self.DisplayFront.getPixelHeight())
        AspectRatio3 = (self.DisplayFront.getPixelWidth()/dr2h)
        self.lensFront.setAspectRatio(AspectRatio3)        
        self.CamFrontNP.node().setLens(self.lensFront)
        self.CamFrontNP.setPos( 0,-50,50)
        self.CamFrontNP.lookAt(0,0,50)          
        self.camHandlerFront = CameraHandlerFront(self.CamFrontNP,self.MouseWatcherFront)
      
        self.DisplayRegionSizer = DisplayRegionSizer(self.CamPersANP,self.CamTopNP,self.CamFrontNP,
                                                     self.DisplayPersA,self.DisplayTop,self.DisplayFront,
                                                     self.MouswatcherBack,self.MouseWatcherPersA,
                                                     self.MouseWatcherTop,self.MouseWatcherFront)  
        

        base.accept('shift-p', self.PerspectiveMain)
        base.accept('shift-f', self.FrontMain)
        base.accept('shift-t', self.TopMain)
    
    def PerspectiveMain(self):
        #print "Perspective Main"
        self.DisplayPersA.setDimensions(0,0.895,0,1)
        self.DisplayTop.setDimensions(0.9,1,0.5,1)
        self.DisplayFront.setDimensions(0.9,1,0,0.490)
        AspectRatio1 = (self.DisplayPersA.getPixelWidth()/float(self.DisplayPersA.getPixelHeight()))
        AspectRatio2 = (self.DisplayTop.getPixelWidth()/float(self.DisplayTop.getPixelHeight()))
        AspectRatio3 = (self.DisplayFront.getPixelWidth()/float(self.DisplayFront.getPixelHeight()))
        self.lensPers.setAspectRatio(AspectRatio1)
        self.lensTop.setAspectRatio(AspectRatio2)
        self.lensFront.setAspectRatio(AspectRatio3)
        
    def FrontMain(self):
        #print "Front Main"
        self.DisplayPersA.setDimensions(0,0.05,0,1)
        self.DisplayTop.setDimensions(0.055,1,0.9,1)
        self.DisplayFront.setDimensions(0.055,1,0,0.895)
        AspectRatio1 = (self.DisplayPersA.getPixelWidth()/float(self.DisplayPersA.getPixelHeight()))
        AspectRatio2 = (self.DisplayTop.getPixelWidth()/float(self.DisplayTop.getPixelHeight()))
        AspectRatio3 = (self.DisplayFront.getPixelWidth()/float(self.DisplayFront.getPixelHeight()))
        self.lensPers.setAspectRatio(AspectRatio1)
        self.lensTop.setAspectRatio(AspectRatio2)
        self.lensFront.setAspectRatio(AspectRatio3)
            
    def TopMain(self):
        #print "Top Main"
        self.DisplayPersA.setDimensions(0,0.05,0,1)
        self.DisplayTop.setDimensions(0.055,1,0.1,1)
        self.DisplayFront.setDimensions(0.055,1,0,0.095)
        AspectRatio1 = (self.DisplayPersA.getPixelWidth()/float(self.DisplayPersA.getPixelHeight()))
        AspectRatio2 = (self.DisplayTop.getPixelWidth()/float(self.DisplayTop.getPixelHeight()))
        AspectRatio3 = (self.DisplayFront.getPixelWidth()/float(self.DisplayFront.getPixelHeight()))
        self.lensPers.setAspectRatio(AspectRatio1)
        self.lensTop.setAspectRatio(AspectRatio2)
        self.lensFront.setAspectRatio(AspectRatio3) 

    def OnResize(self, event):
    # when the wx-panel is resized, fit the panda3d window into it
        frame_size = event.GetSize()
        wp = WindowProperties()
        wp.setOrigin(0,0)
        wp.setSize(frame_size.GetWidth()-7, frame_size.GetHeight()-5)
        base.win.requestProperties(wp)

class MyParentFrame(wx.MDIParentFrame):
    def __init__(self):
        wx.MDIParentFrame.__init__(self, None, -1, "LARA 3D",
                                   size=(1930,930),pos =(-3,115),
                                   style = wx.DEFAULT_FRAME_STYLE | wx.HSCROLL | wx.VSCROLL)

        self.winCount = 0
        self.res = xrc.XmlResource('WWLayout0-12a.xrc')
        File = wx.Menu()
        openEnv = File.Append(ID_Menu_OpenEnv,'Open Environment','This opens the environment')
        openPos = File.Append(ID_Menu_OpenPos,'Open Positions','This opens the Positions')
        openEngines = File.Append(ID_Menu_OpenEngines,'Open Engines','This opens the Engine Setups')
        File.AppendSeparator()
        savePos = File.Append(ID_Menu_SavePos,'Save Positions','This saves the Positions')
        saveEngines = File.Append(ID_Menu_SaveEngines,'Save Engines','This saves the Engine Setup')
        File.AppendSeparator()        
        exit = File.Append(ID_Menu_Exit,'Exit','This exits the Program without saving anything')

        self.menuBar = wx.MenuBar(ID_Menu)        
        self.menuBar.Append(File,'File')
        self.SetMenuBar(self.menuBar)

#-------------------------------------------------------------------------------

        self.CreateStatusBar()

        #self.Bind(wx.EVT_MENU, self.OnNewWindow, id=ID_Menu_Open)
        #self.Bind(wx.EVT_MENU, self.OnExit, exit)
        #self.Bind(wx.EVT_MENU, self.OnExit,id=

        self.Bind(
            wx.EVT_SASH_DRAGGED_RANGE, self.OnSashDrag, id=ID_WINDOW_TOP, 
            id2=ID_WINDOW_BOTTOM
            )

        self.Bind(wx.EVT_SIZE, self.OnSize)

        self.MainWindow = self.res.LoadFrame(None,'Main')
        self.p3dViewport = P3dViewport(self.MainWindow)
        self.MainWindow.SetWindowStyle(wx.NO_BORDER)
        self.MainWindow.Refresh()
        self.MainWindow.Reparent(self)
        self.MainWindow.Show() 
        self.MainWindow.Update()
        # update the p3d window
        self.p3dViewport.initialize()

        self.CreateTopPanel()
        self.CreateBottomPanel()                
        self.CreateLeftPanel()
        self.CreateRightPanel()
        
    def CreateTopPanel(self):
        #Create TopPanel
        win = wx.SashLayoutWindow(self,ID_WINDOW_PANDA,style=wx.SW_3D | wx.NO_BORDER)
        win = wx.SashLayoutWindow(self, ID_WINDOW_TOP, style=wx.NO_BORDER|wx.SW_3D)
        win.SetDefaultSize((690, 60))
        win.SetOrientation(wx.LAYOUT_HORIZONTAL)
        win.SetAlignment(wx.LAYOUT_TOP)
        win.SetBackgroundColour(wx.Colour(0.1, 0.1, 0.2))
        #win.SetSashVisible(wx.SASH_BOTTOM, True)
        Toppanel = self.res.LoadPanel(win,'TopPanel')


        self.topWindow = win

    def CreateBottomPanel(self):
        #Create BottomPanel
        win = wx.SashLayoutWindow(self, ID_WINDOW_BOTTOM, style=wx.NO_BORDER|wx.SW_3D)
        win.SetDefaultSize((690,73))    #690,90 #690,73
        win.SetOrientation(wx.LAYOUT_HORIZONTAL)
        win.SetAlignment(wx.LAYOUT_BOTTOM)
        win.SetBackgroundColour(wx.Colour(0.1, 0.1, 0.2))
        win.SetSashVisible(wx.SASH_TOP, True)
        panel = self.res.LoadPanel(win,'BottomPanel')
        self.bottomWindow = win

    def CreateLeftPanel(self):
        #Create LeftPanel
        win =  wx.SashLayoutWindow(self, ID_WINDOW_LEFT1, style=wx.NO_BORDER|wx.SW_3D)
        win.SetDefaultSize((130, 645)) # ohne force 83 breit
        win.SetOrientation(wx.LAYOUT_VERTICAL)
        win.SetAlignment(wx.LAYOUT_LEFT)
        win.SetBackgroundColour(wx.Colour(0.1, 0.1, 0.2))
        #win.SetSashVisible(wx.SASH_RIGHT, True)
        #win.SetExtraBorderSize(10)
        panel = self.res.LoadPanel(win,'LeftPanel')

        self.leftWindow1 = win

    def CreateRightPanel(self):
        #Create RightPanel
        win = wx.SashLayoutWindow(self, ID_WINDOW_LEFT2, style=wx.NO_BORDER|wx.SW_3D)
        win.SetDefaultSize((130, 645))
        win.SetOrientation(wx.LAYOUT_VERTICAL)
        win.SetAlignment(wx.LAYOUT_RIGHT)
        win.SetBackgroundColour(wx.Colour(0.1, 0.1, 0.2))
        #win.SetSashVisible(wx.SASH_LEFT, True)
        panel = self.res.LoadPanel(win,'RightPanel')
        

        self.leftWindow2 = win


    def OnSashDrag(self, event):
        if event.GetDragStatus() == wx.SASH_STATUS_OUT_OF_RANGE:
            return

        eID = event.GetId()

        if eID == ID_WINDOW_TOP:
            self.topWindow.SetDefaultSize((1000, event.GetDragRect().height))

        elif eID == ID_WINDOW_LEFT1:
            self.leftWindow1.SetDefaultSize((event.GetDragRect().width, 1000))

        elif eID == ID_WINDOW_LEFT2:
            self.leftWindow2.SetDefaultSize((event.GetDragRect().width, 1000))

        elif eID == ID_WINDOW_BOTTOM:
            if event.GetDragRect().height < 70:
                d = 70
            elif event.GetDragRect().height > 170:
                d = 170
            else:
                d = event.GetDragRect().height            
            self.bottomWindow.SetDefaultSize((1000, d))
            
        wx.LayoutAlgorithm().LayoutMDIFrame(self)
        xsize = self.GetSize().width-265 #ohne force 189; 248
        ysize = self.GetSize().height-133 #227
        self.MainWindow.SetSize((xsize,(ysize-d)))
        self.MainWindow.SetPosition((128,52))        
        self.GetClientWindow().Refresh()


    def OnSize(self, event):
        try:
            wx.LayoutAlgorithm().LayoutMDIFrame(self)
            xsize = self.GetSize().width-265 #ohne force 189; 248
            ysize = self.GetSize().height-self.bottomWindow.GetSize().height -133 #227
            self.MainWindow.SetSize((xsize,ysize))
            self.MainWindow.SetPosition((128,52))
            self.topWindow.Refresh()
            self.bottomWindow.Refresh()
            self.MainWindow.Refresh()
            self.leftWindow1.Refresh()
            self.leftWindow2.Refresh()
            self.Refresh()
        except:
            pass

    def OnExit(self, evt):
        #print('OnExit')
        self.Close(True)


    def OnNewWindow(self, evt):
        #print('OnNewWindow')
        self.winCount = self.winCount + 1
        win = wx.MDIChildFrame(self, -1, "Child Window: %d" % self.winCount)
        canvas = ScrolledWindow.MyCanvas(win)
        win.Show(True)


#----------------------------------------------------------------------
class YellowAxisUI(wx.Frame):
    def __init__(self, parent, id, title):
        wx.Frame.__init__(self, parent, id, title,(225,40), (742, 428),
                          style =wx.FRAME_FLOAT_ON_PARENT|wx.FRAME_NO_TASKBAR)
        self.res = xrc.XmlResource("AchsSteuerungAxisSelectState1.xrc")
        ##self.res = xrc.XmlResource("AchsSteuerungRecover.xrc")        
        self.RootPanel = self.res.LoadPanel(self,'RootPanel')
        
        self.AxisSelected=False
        self.ControlingPIDRx=0
        self.Modus = 'rE' # initialisieren im read Edit Mode
        self.ClutchStatus = 1        
        self.init_Mainframe()
        self.init_MainframeEvents()
        self.DisableControls()        
        self.EStopReset =0
        self.Decode = Decode()
        self.ReSync = 0
        self.Recover = 0
        self.Modus = 0
        self.refreshSelect = "Blue"

        self.EnableOld = 0
        self.VX = 0
        self.Pos0 = 0
        self.T1Old  = time.clock()
        self.EStopMode = 'EStop'

    def init_Mainframe(self):
        self.ControlsEnabeled = False
        self.StatusPanelColour = "RedBrown"        
        '''Initialisiert die Objekte des Mainframes'''      
        self.StatusPanel        = xrc.XRCCTRL(self.RootPanel,'StatusPanel')
        self.SetupPanel         = xrc.XRCCTRL(self.RootPanel,'SetupPanel')
        self.SliderPanel        = xrc.XRCCTRL(self.RootPanel,'SliderPanel')
        self.SetupPositionPanel = xrc.XRCCTRL(self.RootPanel,'SetupPosition')
        self.SetupVelPanel      = xrc.XRCCTRL(self.RootPanel,'SetupVel')
        self.SetupGuidePanel    = xrc.XRCCTRL(self.RootPanel,'SetupGuide')
        self.SetupFilterPanel   = xrc.XRCCTRL(self.RootPanel,'SetupFilter')
        self.SetupRopePanel     = xrc.XRCCTRL(self.RootPanel,'SetupRope')
        self.EStopPanel         = xrc.XRCCTRL(self.RootPanel,'EStopPanel')
        self.BitPanel           = xrc.XRCCTRL(self.RootPanel,'BitPanel')
        self.RecoverPanel       = xrc.XRCCTRL(self.RootPanel,'RecoverPanel')

        # Kinder vom StatusPanel
        self.cmbAxisName       = xrc.XRCCTRL(self.StatusPanel,'cmbAxisName')
        self.cmbAxisName.SetEditable( False )
        self.Achsen=ACHSEN.keys()
        for a in range(len(ACHSEN.keys())):
            self.cmbAxisName.SetString(a,ACHSEN.keys()[a])
       
        self.txtAxisPos        = xrc.XRCCTRL(self.StatusPanel,'txtAxisPos')
        self.txtAxisPos.SetEditable( False )

        self.txtAxisVel        = xrc.XRCCTRL(self.StatusPanel,'txtAxisVel')
        self.txtAxisVel.SetEditable( False )

        self.txtAxisAmp        = xrc.XRCCTRL(self.StatusPanel,'txtAxisAmp')
        self.txtAxisAmp.SetEditable( False )
        self.sldAxisVel        = xrc.XRCCTRL(self.StatusPanel,'sldAxisVel')
        self.sldAxisVel.Enable(False)
        self.txtAxisError      = xrc.XRCCTRL(self.StatusPanel,'txtAxisError')
        self.txtAxisError.SetEditable( False )
        self.btnAxisReset      = xrc.XRCCTRL(self.StatusPanel,'btnAxisReset')    
        self.txtAxisTemp       = xrc.XRCCTRL(self.StatusPanel,'txtAxisTemp')
        self.txtAxisTemp.SetEditable( False )

        self.txtTimeTick       = xrc.XRCCTRL(self.StatusPanel,'txtTimeTick')
        self.txtTimeTick.SetEditable( False )
        
        self.rFBT              = xrc.XRCCTRL(self.BitPanel,'rFBT')
        self.rbReady           = xrc.XRCCTRL(self.BitPanel,'rbReady')
        self.rbPowered         = xrc.XRCCTRL(self.BitPanel,'rbPowered')
        self.rbBrake1          = xrc.XRCCTRL(self.BitPanel,'rbBrake1')
        self.rbBrake2          = xrc.XRCCTRL(self.BitPanel,'rbBrake2')
        self.txtSelected1       = xrc.XRCCTRL(self.BitPanel,'txtSelected1')
        self.txtSelected2       = xrc.XRCCTRL(self.BitPanel,'txtSelected2')

        self.txtCutPos         = xrc.XRCCTRL(self.RecoverPanel,'txtEStopCutPosition')
        self.txtCutVel         = xrc.XRCCTRL(self.RecoverPanel,'txtEStopCutVel')
        self.txtCutTime        = xrc.XRCCTRL(self.RecoverPanel,'txtEStopCutTime')
        self.txtPosDiff        = xrc.XRCCTRL(self.RecoverPanel,'txtEStopPosDiff')
        self.txtPosDiff.SetValue('0')
        self.btnRecover        = xrc.XRCCTRL(self.RecoverPanel,'btnRecover')
        self.btnReSync         = xrc.XRCCTRL(self.RecoverPanel,'btnReSync')
        
        # Kinder vom SetupPositionPanel
        self.btnAxisSetupPosEdit    = xrc.XRCCTRL(self.SetupPositionPanel,'btnAxisSetupPosEdit')
        
        self.txtAxisSetupPosHardMax = xrc.XRCCTRL(self.SetupPositionPanel,'txtAxisSetupPosHardMax')
        self.txtAxisSetupPosHardMax.SetValidator(NumValidator("digit"))
        self.txtAxisSetupPosHardMax.SetEditable( False )
        self.txtAxisSetupPosHardMax.SetValue('300.0')
        
        self.txtAxisSetupPosUserMax = xrc.XRCCTRL(self.SetupPositionPanel,'txtAxisSetupPosUserMax')
        self.txtAxisSetupPosUserMax.SetValidator(NumValidator("digit"))
        self.txtAxisSetupPosUserMax.SetEditable( False )
        self.txtAxisSetupPosUserMax.SetValue('300.0')
        
        self.txtAxisSetupPosIst     = xrc.XRCCTRL(self.SetupPositionPanel,'txtAxisSetupPosIst')
        self.txtAxisSetupPosIst.SetEditable( False )
        self.txtAxisSetupPosUserMin = xrc.XRCCTRL(self.SetupPositionPanel,'txtAxisSetupPosUserMin')
        self.txtAxisSetupPosUserMin.SetValidator(NumValidator("digit"))
        self.txtAxisSetupPosUserMin.SetEditable( False )
        self.txtAxisSetupPosUserMin.SetValue('-300.0')
        
        self.txtAxisSetupPosHardMin = xrc.XRCCTRL(self.SetupPositionPanel,'txtAxisSetupPosHardMin')
        self.txtAxisSetupPosHardMin.SetValidator(NumValidator("digit"))
        self.txtAxisSetupPosHardMin.SetEditable( False )
        self.txtAxisSetupPosHardMin.SetValue('-300.0')
        
        self.txtAxisSetupPosPosWin = xrc.XRCCTRL(self.SetupPositionPanel,'txtAxisSetupPosPosWin')
        self.txtAxisSetupPosPosWin.SetValidator(NumValidator("digit"))
        self.txtAxisSetupPosPosWin.SetEditable( False )
        self.txtAxisSetupPosPosWin.SetValue('1.50')
        
        self.btnAxisSetupPosWrite    = xrc.XRCCTRL(self.SetupPositionPanel,'btnAxisSetupPosWrite')
        self.btnAxisSetupPosCancel    = xrc.XRCCTRL(self.SetupPositionPanel,'btnAxisSetupPosCancel')
        
        # Kinder vom SetupVelPanel
        
        self.btnAxisSetupVelEdit = xrc.XRCCTRL(self.SetupVelPanel,'btnAxisSetupVelEdit')
        
        self.txtAxisSetupVelMaxMot  = xrc.XRCCTRL(self.SetupVelPanel,'txtAxisSetupVelMaxMot')
        self.txtAxisSetupVelMaxMot.SetEditable( False )
        
        self.txtAxisSetupVelMax  = xrc.XRCCTRL(self.SetupVelPanel,'txtAxisSetupVelMax')
        self.txtAxisSetupVelMax.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupVelMax.SetEditable( False )
        self.txtAxisSetupVelMax.SetValue('8.0')
        
        self.txtAxisSetupAccMax  = xrc.XRCCTRL(self.SetupVelPanel,'txtAxisSetupAccMax')
        self.txtAxisSetupAccMax.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupAccMax.SetEditable( False )
        self.txtAxisSetupAccMax.SetValue('5.5')
        
        self.txtAxisSetupDccMax  = xrc.XRCCTRL(self.SetupVelPanel,'txtAxisSetupDccMax')
        self.txtAxisSetupDccMax.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupDccMax.SetEditable( False )
        self.txtAxisSetupDccMax.SetValue('5.5')
        
        self.txtAxisSetupAccTot = xrc.XRCCTRL(self.SetupVelPanel,'txtAxisSetupAccTot')
        self.txtAxisSetupAccTot.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupAccTot.SetEditable( False )
        self.txtAxisSetupAccTot.SetValue('5.5')
        
        self.txtAxisSetupMaxAmp  = xrc.XRCCTRL(self.SetupVelPanel,'txtAxisSetupMaxAmp')
        self.txtAxisSetupMaxAmp.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupMaxAmp.SetEditable( False )
        self.txtAxisSetupMaxAmp.SetValue('150')
        
        self.txtAxisSetupVelWin  = xrc.XRCCTRL(self.SetupVelPanel,'txtAxisSetupVelWin')
        self.txtAxisSetupMaxAmp.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupVelWin.SetEditable( False )
        self.txtAxisSetupVelWin.SetValue('1.5')
        
        self.btnAxisSetupVelWrite    = xrc.XRCCTRL(self.SetupVelPanel,'btnAxisSetupVelWrite')
        self.btnAxisSetupVelCancel    = xrc.XRCCTRL(self.SetupVelPanel,'btnAxisSetupVelCancel')

        # Kinder vom SetupGuidePanel
        
        self.txtAxisSetupGuidePos = xrc.XRCCTRL(self.SetupGuidePanel, 'txtAxisSetupGuidePos')
        self.txtAxisSetupGuidePos.SetEditable( False )
        
        self.txtAxisSetupGuideVel = xrc.XRCCTRL(self.SetupGuidePanel, 'txtAxisSetupGuideVel')
        self.txtAxisSetupGuideVel.SetEditable( False )
        
        self.sldAxisSetupGuideVel        = xrc.XRCCTRL(self.SetupGuidePanel,'sldAxisSetupGuideVel')
        self.sldAxisSetupGuideVel.Enable(False)
        
        self.btnAxisSetupGuideSetup  = xrc.XRCCTRL(self.SetupGuidePanel,'btnAxisSetupGuideSetup')
        
        self.txtAxisSetupGuideError  = xrc.XRCCTRL(self.SetupGuidePanel,'txtAxisSetupGuideError')
        self.txtAxisSetupGuideError.SetEditable( False )
        
        self.btnAxisSetupGuideReset  = xrc.XRCCTRL(self.SetupGuidePanel,'btnAxisSetupGuideReset')
        self.btnAxisSetupGuideReset.Enable(False)
        
        self.txtAxisSetupGuidePitch  = xrc.XRCCTRL(self.SetupGuidePanel,'txtAxisSetupGuidePitch')
        self.txtAxisSetupGuidePitch.SetValidator(NumValidator("digit"))
        self.txtAxisSetupGuidePitch.SetEditable( False )
        
        self.btnAxisSetupGuideWrite    = xrc.XRCCTRL(self.SetupGuidePanel,'btnAxisSetupGuideWrite')
        
        self.txtAxisSetupGuidePosMax = xrc.XRCCTRL(self.SetupGuidePanel,'txtAxisSetupGuidePosMax')
        self.txtAxisSetupGuidePosMax.SetValidator(NumValidator("digit"))
        self.txtAxisSetupGuidePosMax.SetEditable( False )
        
        self.txtAxisSetupGuidePosMaxMax = xrc.XRCCTRL(self.SetupGuidePanel,'txtAxisSetupGuidePosMaxMax')
        self.txtAxisSetupGuidePosMaxMax.SetEditable( False )        
        
        self.txtAxisSetupGuidePosMin = xrc.XRCCTRL(self.SetupGuidePanel,'txtAxisSetupGuidePosMin')
        self.txtAxisSetupGuidePosMin.SetValidator(NumValidator("digit"))
        self.txtAxisSetupGuidePosMin.SetEditable( False )
        self.txtAxisSetupGuidePosMin.SetValue('0.0')
        
        self.btnAxisSetupGuideCancel    = xrc.XRCCTRL(self.SetupGuidePanel,'btnAxisSetupGuideCancel')
        
        self.btnAxisSetupGuideClutch    = xrc.XRCCTRL(self.SetupGuidePanel,'btnAxisSetupGuideClutch')
        self.btnAxisSetupGuideClutch.SetValue(True)
        
        self.btnAxisSetupGuideMoveLeft  = xrc.XRCCTRL(self.SetupGuidePanel,'btnAxisSetupGuideMoveLeft')
        self.btnAxisSetupGuideMoveStop  = xrc.XRCCTRL(self.SetupGuidePanel,'btnAxisSetupGuideMoveStop')
        self.btnAxisSetupGuideMoveRight = xrc.XRCCTRL(self.SetupGuidePanel,'btnAxisSetupGuideMoveRight')
        
        self.rbSReady           = xrc.XRCCTRL(self.SetupGuidePanel,'rbSReady')
        self.rbSPowered         = xrc.XRCCTRL(self.SetupGuidePanel,'rbSPowered')
        


        # Kinder vom SetupFilterPanel
        self.btnAxisSetupFilterEdit = xrc.XRCCTRL(self.SetupFilterPanel,'btnAxisSetupFilterEdit')
        self.txtAxisSetupFilterLagError    = xrc.XRCCTRL(self.SetupFilterPanel,'txtAxisSetupFilterLagError')
        self.txtAxisSetupFilterLagError.SetEditable( False )
        self.txtAxisSetupFilterP    = xrc.XRCCTRL(self.SetupFilterPanel,'txtAxisSetupFilterP')
        self.txtAxisSetupFilterP.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupFilterP.SetEditable( False )
        self.txtAxisSetupFilterI    = xrc.XRCCTRL(self.SetupFilterPanel,'txtAxisSetupFilterI')
        self.txtAxisSetupFilterI.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupFilterI.SetEditable( False )
        self.txtAxisSetupFilterD    = xrc.XRCCTRL(self.SetupFilterPanel,'txtAxisSetupFilterD')
        self.txtAxisSetupFilterD.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupFilterD.SetEditable( False )
        self.txtAxisSetupFilterIL    = xrc.XRCCTRL(self.SetupFilterPanel,'txtAxisSetupFilterIL')
        self.txtAxisSetupFilterIL.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupFilterIL.SetEditable( False )
        self.txtAxisSetupFilterRampform = xrc.XRCCTRL(self.SetupFilterPanel,'txtAxisSetupFilterRampform')
        self.txtAxisSetupFilterRampform.SetEditable( False )
        self.btnAxisSetupFilterWrite    = xrc.XRCCTRL(self.SetupFilterPanel,'btnAxisSetupFilterWrite')
        self.btnAxisSetupFilterCancel    = xrc.XRCCTRL(self.SetupFilterPanel,'btnAxisSetupFilterCancel')

        # Kinder vom SetupRopePanel
        
        self.btnAxisSetupRopeEdit     = xrc.XRCCTRL(self.SetupRopePanel,'btnAxisSetupRopeEdit')
        self.btnAxisSetupRopeEdit.Enable(False)
        self.txtAxisSetupRopeSWLL     = xrc.XRCCTRL(self.SetupRopePanel,'txtAxisSetupRopeSWLL')
        self.txtAxisSetupRopeSWLL.SetEditable( False )
        self.txtAxisSetupRopeDiameter = xrc.XRCCTRL(self.SetupRopePanel,'txtAxisSetupRopeDiameter')
        self.txtAxisSetupRopeDiameter.SetEditable( False )
        self.txtAxisSetupRopeType     = xrc.XRCCTRL(self.SetupRopePanel,'txtAxisSetupRopeType')
        self.txtAxisSetupRopeType.SetEditable( False )
        self.txtAxisSetupRopeNumber   = xrc.XRCCTRL(self.SetupRopePanel,'txtAxisSetupRopeNumber')
        self.txtAxisSetupRopeNumber.SetEditable( False )
        self.txtAxisSetupRopeLength   = xrc.XRCCTRL(self.SetupRopePanel,'txtAxisSetupRopeLength')
        self.txtAxisSetupRopeLength.SetEditable( False )
        self.btnAxisSetupRopeWrite    = xrc.XRCCTRL(self.SetupRopePanel,'btnAxisSetupRopeWrite')
        self.btnAxisSetupRopeCancel    = xrc.XRCCTRL(self.SetupRopePanel,'btnAxisSetupRopeCancel')
        
        # Kinder vom EStopPanel
        
        self.rMaster          = xrc.XRCCTRL(self.EStopPanel,'rMaster')
        self.rMaster.SetValue(True)
         
        self.rSlave           = xrc.XRCCTRL(self.EStopPanel,'rSlave')
        self.rSlave.SetValue(True)
        
        self.rNetwork         = xrc.XRCCTRL(self.EStopPanel,'rNetwork')
        self.rNetwork.SetValue(True)
        
        self.btnEReset        = xrc.XRCCTRL(self.EStopPanel,'btnEReset')
        
        self.rEStop1          = xrc.XRCCTRL(self.EStopPanel,'rEStop1')
        self.rEStop1.SetValue(True)
        
        self.rEStop2          = xrc.XRCCTRL(self.EStopPanel,'rEStop2')
        self.rEStop2.SetValue(True)
        
        self.rSteuerwort       = xrc.XRCCTRL(self.EStopPanel,'rSteuerwort')
        self.rSteuerwort.SetValue(True)
        
        self.r30kWOK          = xrc.XRCCTRL(self.EStopPanel,'r30kWOK')
        self.r30kWOK.SetValue(True)
        
        self.r05kWOK          = xrc.XRCCTRL(self.EStopPanel,'r05kWOK')
        self.r05kWOK.SetValue(True)
        
        self.rB1OK            = xrc.XRCCTRL(self.EStopPanel,'rB1OK')
        self.rB1OK.SetValue(True)
        
        self.rB2OK            = xrc.XRCCTRL(self.EStopPanel,'rB2OK')
        self.rB2OK.SetValue(True)
        
        self.rDSC             = xrc.XRCCTRL(self.EStopPanel,'rDCS')
        self.rDSC.SetValue(True)
        
        self.rSPSOK          = xrc.XRCCTRL(self.EStopPanel,'rSPSOK')
        self.rSPSOK.SetValue(True)
        
        self.rBRK2KB         = xrc.XRCCTRL(self.EStopPanel,'rBRK2KB')
        self.rBRK2KB.SetValue(True)
        
        self.rPosWin          = xrc.XRCCTRL(self.EStopPanel,'rPosWin')
        self.rPosWin.SetValue(True)
        
        self.rVelWin          = xrc.XRCCTRL(self.EStopPanel,'rVelWin')
        self.rVelWin.SetValue(True)
        
        self.rEndlage         = xrc.XRCCTRL(self.EStopPanel,'rEndlage')
        self.rEndlage.SetValue(True)
        
        self.rG1COM           = xrc.XRCCTRL(self.EStopPanel,'rG1COM')
        self.rG1COM.SetValue(True)
        
        self.rG1OUT           = xrc.XRCCTRL(self.EStopPanel,'rG1OUT')
        self.rG1OUT.SetValue(True)
        
        self.rG1FB            = xrc.XRCCTRL(self.EStopPanel,'rG1FB')
        self.rG1FB.SetValue(True)
        
        self.rG2COM           = xrc.XRCCTRL(self.EStopPanel,'rG2COM')
        self.rG2COM.SetValue(True)
        
        self.rG2OUT           = xrc.XRCCTRL(self.EStopPanel,'rG2OUT')
        self.rG2OUT.SetValue(True)
        
        self.rG2FB            = xrc.XRCCTRL(self.EStopPanel,'rG2FB')
        self.rG2FB.SetValue(True)
        
        self.rG3COM           = xrc.XRCCTRL(self.EStopPanel,'rG3COM')
        self.rG3COM.SetValue(True)
        
        self.rG3OUT           = xrc.XRCCTRL(self.EStopPanel,'rG3OUT')
        self.rG3OUT.SetValue(True)
       
        self.rG3FB            = xrc.XRCCTRL(self.EStopPanel,'rG3FB')
        self.rG3FB.SetValue(True)      

    def init_MainframeEvents(self):
        self.Command = 0
        self.EnableStatus = 0
        self.Controlle = False
        self.Online    = False
        self.Bind(wx.EVT_COMBOBOX, self.OnAxisSelect, id=xrc.XRCID('cmbAxisName'))
        self.Bind(wx.EVT_TOGGLEBUTTON, self.OnAxisReset, id=xrc.XRCID('btnAxisReset'))

        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupPosEdit, id=xrc.XRCID('btnAxisSetupPosEdit'))
        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupPosWrite, id=xrc.XRCID('btnAxisSetupPosWrite'))
        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupPosCancel, id=xrc.XRCID('btnAxisSetupPosCancel'))

        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupVelEdit, id=xrc.XRCID('btnAxisSetupVelEdit'))
        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupVelWrite, id=xrc.XRCID('btnAxisSetupVelWrite'))
        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupVelCancel, id=xrc.XRCID('btnAxisSetupVelCancel'))

        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupGuideSetup, id=xrc.XRCID('btnAxisSetupGuideSetup'))
        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupGuideWrite, id=xrc.XRCID('btnAxisSetupGuideWrite'))
        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupGuideCancel, id=xrc.XRCID('btnAxisSetupGuideCancel'))
        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupGuideReset,  id=xrc.XRCID('btnAxisSetupGuideReset'))

        self.Bind(wx.EVT_TOGGLEBUTTON, self.OnAxisSetupGuideClutch, id=xrc.XRCID('btnAxisSetupGuideClutch'))

        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupFilterEdit, id=xrc.XRCID('btnAxisSetupFilterEdit'))        
        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupFilterWrite, id=xrc.XRCID('btnAxisSetupFilterWrite'))
        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupFilterCancel, id=xrc.XRCID('btnAxisSetupFilterCancel'))
        
        self.Bind(wx.EVT_TOGGLEBUTTON, self.OnEReset, id=xrc.XRCID('btnEReset'))
        self.Bind(wx.EVT_BUTTON, self.OnReSync, id = xrc.XRCID('btnReSync'))
        
        self.txtAxisError.Bind(wx.EVT_LEFT_DOWN, self.OnAxisErrorClick, id=xrc.XRCID('txtAxisError'))
        self.txtAxisSetupGuideError.Bind(wx.EVT_LEFT_DOWN, self.OnAxisGuideErrorClick, id=xrc.XRCID('txtAxisSetupGuideError'))
        
        self.Bind(wx.EVT_BUTTON, self.OnRecoverClick, id=xrc.XRCID('btnRecover'))

    def OnRecoverClick(self,evt):        
        if self.btnRecover.GetLabel() != 'Running':
            self.btnRecover.SetLabel('Running')    
            self.Modus ='recover'
        else:
            self.btnRecover.SetLabel('Recover')
            self.Modus = 'r'
        evt.Skip()

    def OnReSync(self,evt):
        #print 'ReSync'
        App.Yellow.ReSync = 1
        for i in range(10):
            App.Yellow.comunicateServer()
        App.Yellow.ReSync = 0
        
    def OnAxisErrorClick(self,evt):
        
        ##rect = self.GetRect()
        ##x1, y1 = rect.GetTopLeft() 
        ##a=self.Decode.Decode(self.Achse.Status)                                                    #[2] Axis Status  
        ##self.test = wx.TipWindow(self, str(a[0]))
        ##self.test.SetBoundingRect(wx.Rect(x1+480,y1+20,x1+580,y1+100))
        
        try:
            App.Yellow
            App.Green
            App.Cyan
            App.Magenta
            AchsenInitialisiert=True
        except:
            AchsenInitialisiert=False
        if AchsenInitialisiert:
            rect = self.GetRect()
            x1, y1 = rect.GetTopLeft() 
            a=self.Decode.Decode(App.Yellow.Status)                                                    #[2] Axis Status  
            self.test = wx.TipWindow(self, str(a[0]))
            self.test.SetBoundingRect(wx.Rect(x1+400,y1,x1+580,y1+200))
    
    def OnAxisGuideErrorClick(self,evt):
        
        ##rect = self.GetRect()
        ##x1, y1 = rect.GetTopLeft() 
        ##a=self.Decode.Decode(self.Achse.GuideStatus)                                                    #[2] Axis Status  
        ##self.test = wx.TipWindow(self, str(a[0]))
        ##self.test.SetBoundingRect(wx.Rect(x1+285,y1+20,x1+580,y1+100))
        
        try:
            App.Yellow
            App.Green
            App.Cyan
            App.Magenta
            AchsenInitialisiert=True
        except:
            AchsenInitialisiert=False
        if AchsenInitialisiert:
            rect = self.GetRect()
            x1, y1 = rect.GetTopLeft() 
            a=self.Decode.Decode(App.Yellow.GuideStatus)                                                    #[2] Axis Status  
            self.test = wx.TipWindow(self, str(a[0]))
            self.test.SetBoundingRect(wx.Rect(x1+285,y1,x1+580,y1+200))
            
    def OnAxisReset(self, evt):
        
        if self.btnAxisReset.GetValue():
            self.btnAxisReset.SetLabel("reseting")
        else:        
            self.btnAxisReset.SetLabel("Reset")
    def OnAxisEnable(self,evt):

        if self.btnAxisReset.GetValue():
            self.EnableStatus = 64
        else:
            if self.Modus == 'JoyEnabeled' or self.Modus == 'recover' :
                self.cmbAxisName.Enable(False)
                self.EnableStatus = 1
            else:
                self.EnableStatus = 0
                self.Modus = 'r'
               
        if (evt & 32):
            if self.StatusPanelColour != "Green":
                self.StatusPanel.SetBackgroundColour((0,150,0))
                self.StatusPanel.Refresh()
                self.sldAxisVel.Refresh
                self.StatusPanelColour = "Green"
        else:
            if self.StatusPanelColour != "RedBrown":             
                self.StatusPanel.SetBackgroundColour((128,128,128))
                self.StatusPanel.Refresh()
                self.sldAxisVel.Refresh
                self.StatusPanelColour = "RedBrown"                
            #Clutch
                


    #--------------------------------------------------------------- 
    def OnAxisSetupPosEdit(self, evt):
        #print "AxisSetupPosEdit"
        self.DisableControls()
        self.Modus = 'E' # Setup Pos Edit
        self.btnAxisSetupPosWrite.Enable(True)
        self.btnAxisSetupPosCancel.Enable(True)

        self.PosHardMax     = self.txtAxisSetupPosHardMax.GetValue()
        self.PosUserMax     = self.txtAxisSetupPosUserMax.GetValue()
        self.PosUserMin     = self.txtAxisSetupPosUserMin.GetValue()
        self.PosHardMin     = self.txtAxisSetupPosHardMin.GetValue()
        self.PosWin         = self.txtAxisSetupPosPosWin.GetValue()

        self.txtAxisSetupPosHardMax.SetEditable( True )
        self.txtAxisSetupPosUserMax.SetEditable( True )
        self.txtAxisSetupPosUserMin.SetEditable( True )
        self.txtAxisSetupPosHardMin.SetEditable( True )
        self.txtAxisSetupPosPosWin.SetEditable( True )
        self.txtAxisSetupPosHardMax.SetBackgroundColour(wx.Colour(255,255,255))
        self.txtAxisSetupPosUserMax.SetBackgroundColour(wx.Colour(255,255,255))
        #self.txtAxisSetupPosIst.SetBackgroundColour(wx.Colour(255,255,255))
        self.txtAxisSetupPosUserMin.SetBackgroundColour(wx.Colour(255,255,255))
        self.txtAxisSetupPosHardMin.SetBackgroundColour(wx.Colour(255,255,255))
        self.txtAxisSetupPosPosWin.SetBackgroundColour(wx.Colour(255,255,255))

    def OnAxisSetupPosWrite(self, evt):
        #print "AxisSetupPosWrite"  
        self.EnableControls()
        self.btnAxisSetupPosWrite.Enable(False)
        self.btnAxisSetupPosCancel.Enable(False)
        
        
        if not((float(self.txtAxisSetupPosHardMax.GetValue()) >= float(self.txtAxisSetupPosUserMax.GetValue())) and
               (float(self.txtAxisSetupPosUserMax.GetValue()) >  float(self.txtAxisSetupPosUserMin.GetValue())) and
               (float(self.txtAxisSetupPosUserMin.GetValue()) >= float(self.txtAxisSetupPosHardMin.GetValue()))):
            dlg=wx.MessageDialog(None,'Limits not monotone! Values uncanged','Error User Limit',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy
            self.txtAxisSetupPosHardMax.SetValue(str(self.PosHardMax))
            self.txtAxisSetupPosUserMax.SetValue(str(self.PosUserMax))
            self.txtAxisSetupPosUserMin.SetValue(str(self.PosUserMin))
            self.txtAxisSetupPosHardMin.SetValue(str(self.PosHardMin))
            self.txtAxisSetupPosHardMax.Refresh()
            self.txtAxisSetupPosUserMax.Refresh()
            self.txtAxisSetupPosUserMin.Refresh()
            self.txtAxisSetupPosHardMin.Refresh()

        #PosWin            
        if ((float(self.txtAxisSetupPosPosWin.GetValue()) > 1.5 ) or
            float(self.txtAxisSetupPosPosWin.GetValue()) < 0.01):
            dlg=wx.MessageDialog(None,'0.01 m < PosWin < 1.5 m ; Reset to Last Value','Error Wrong Input',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy        
            self.txtAxisSetupPosPosWin.SetValue(self.PosWin)
            self.txtAxisSetupPosPosWin.Refresh()
        else:             
            self.PosPosWin    = float(self.txtAxisSetupPosPosWin.GetValue()) 



        self.Modus = 'w'

        self.txtAxisSetupPosHardMax.SetEditable( False )
        self.txtAxisSetupPosUserMax.SetEditable( False )
        self.txtAxisSetupPosUserMin.SetEditable( False )
        self.txtAxisSetupPosHardMin.SetEditable( False )
        self.txtAxisSetupPosPosWin.SetEditable( False )
        self.txtAxisSetupPosHardMax.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupPosUserMax.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupPosIst.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupPosUserMin.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupPosHardMin.SetBackgroundColour(wx.Colour(187,187,187)) 
        self.txtAxisSetupPosPosWin.SetBackgroundColour(wx.Colour(187,187,187))

    def OnAxisSetupPosCancel(self, evt):
        #print "AxisSetupPosCancel" 
        self.EnableControls()
        self.Modus = 'r'#setup Pos Cancel
        self.btnAxisSetupPosWrite.Enable(False)
        self.btnAxisSetupPosCancel.Enable(False)

        self.txtAxisSetupPosHardMax.SetValue(self.PosHardMax)
        self.txtAxisSetupPosUserMax.SetValue(self.PosUserMax)
        self.txtAxisSetupPosUserMin.SetValue(self.PosUserMin)
        self.txtAxisSetupPosHardMin.SetValue(self.PosHardMin)
        self.txtAxisSetupPosPosWin.SetValue(self.PosWin)

        self.txtAxisSetupPosHardMax.SetEditable( False )
        self.txtAxisSetupPosUserMax.SetEditable( False )
        self.txtAxisSetupPosUserMin.SetEditable( False )
        self.txtAxisSetupPosHardMin.SetEditable( False )
        self.txtAxisSetupPosPosWin.SetEditable( False )
        self.txtAxisSetupPosHardMax.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupPosUserMax.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupPosIst.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupPosUserMin.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupPosHardMin.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupPosPosWin.SetBackgroundColour(wx.Colour(187,187,187))

    #---------------------------------------------------------------
    def OnAxisSetupVelEdit(self, evt):
        #print "AxisSetupVelEdit"  
        self.DisableControls()
        self.Modus = 'E'#setup Vel Edit
        self.btnAxisSetupVelWrite.Enable(True)
        self.btnAxisSetupVelCancel.Enable(True)

        self.VelMax     = abs(float(self.txtAxisSetupVelMax.GetValue()))           
        self.AccMax     = abs(float(self.txtAxisSetupAccMax.GetValue()))
        self.DccMax     = abs(float(self.txtAxisSetupDccMax.GetValue()))
        self.AccTot     = abs(float(self.txtAxisSetupAccTot.GetValue()))
        self.MaxAmp     = abs(float(self.txtAxisSetupMaxAmp.GetValue()))
        self.VelWin     = abs(float(self.txtAxisSetupVelWin.GetValue()))        

        self.txtAxisSetupVelMax.SetEditable( True )
        self.txtAxisSetupAccMax.SetEditable( True )
        self.txtAxisSetupDccMax.SetEditable( True )
        self.txtAxisSetupAccTot.SetEditable( True )
        self.txtAxisSetupMaxAmp.SetEditable( True )
        self.txtAxisSetupVelWin.SetEditable( True )
        self.txtAxisSetupVelMax.SetBackgroundColour(wx.Colour(255,255,255))        
        self.txtAxisSetupAccMax.SetBackgroundColour(wx.Colour(255,255,255))
        self.txtAxisSetupDccMax.SetBackgroundColour(wx.Colour(255,255,255))       
        self.txtAxisSetupAccTot.SetBackgroundColour(wx.Colour(255,255,255))        
        self.txtAxisSetupMaxAmp.SetBackgroundColour(wx.Colour(255,255,255))
        self.txtAxisSetupVelWin.SetBackgroundColour(wx.Colour(255,255,255))

    def OnAxisSetupVelWrite(self, evt):
        #print "AxisSetupVelWrite" 
        self.EnableControls()
        #self.btnAxisSetupVelWrite.Enable(False)
        #self.btnAxisSetupVelCancel.Enable(False)
        #MaxVel
        if (abs(float(self.txtAxisSetupVelMax.GetValue())) > 
            abs(float(self.txtAxisSetupVelMaxMot.GetValue()))):
            dlg=wx.MessageDialog(None,'MaxVel larger than MaxVel Motor; Value uncanged','Error User Limit',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy
            modifyMaxVel = False
        else:
            modifyMaxVel = True       
        #MaxAmp
        if (float(self.txtAxisSetupMaxAmp.GetValue()) > 150.0 or 
            float(self.txtAxisSetupMaxAmp.GetValue()) < 50 ):
            dlg=wx.MessageDialog(None,'50% < MaxAmp < 150% ; Reset to Last Value','Error Wrong Input',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy        
            modifyMaxAmp = False
        else:             
            modifyMaxAmp = True           
        #VelWin       
        if (float(self.txtAxisSetupVelWin.GetValue()) > 1.5 or 
            float(self.txtAxisSetupVelWin.GetValue()) < 0.01):
            dlg=wx.MessageDialog(None,'0.01 m/s < VelWin < 1.5 m/s; Reset to Last Value','Error Wrong Input',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy        
            modifyVelWin = False
        else:             
            modifyVelWin = True
            #AccMove        
        if (float(self.txtAxisSetupAccTot.GetValue()) > 10.0 or 
            float(self.txtAxisSetupAccTot.GetValue()) < 1.5 ):
            dlg=wx.MessageDialog(None,'1.5 m/ss< Acc Move < 10 m/ss; Value uncanged','Error Wrong Input',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy        
            modifyAccMove = False
        else:
            modifyAccMove = True         
        #AccMax    
        if (abs(float(self.txtAxisSetupAccMax.GetValue())) > abs(float(self.txtAxisSetupAccTot.GetValue())) or
            abs(float(self.txtAxisSetupDccMax.GetValue())) > abs(float(self.txtAxisSetupAccTot.GetValue()))):
            dlg=wx.MessageDialog(None,'Acc/Dcc/AccMove Mismatch; Values unchanged','Error AccMax',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy
            modifyAccDccAccMove = False
        else:
            modifyAccDccAccMove = True
               
        
        if modifyMaxVel and modifyMaxAmp and modifyVelWin and modifyAccDccAccMove and modifyAccMove :
            self.VelMax     = abs(float(self.txtAxisSetupVelMax.GetValue()))
            self.MaxAmp     = float(self.txtAxisSetupMaxAmp.GetValue())
            self.VelWin     = float(self.txtAxisSetupVelWin.GetValue()) 
            self.AccMax     = abs(float(self.txtAxisSetupAccMax.GetValue()))
            self.DccMax     = abs(float(self.txtAxisSetupDccMax.GetValue()))
            self.AccTot     = abs(float(self.txtAxisSetupAccTot.GetValue()))
            self.btnAxisSetupVelWrite.Enable(False)
            self.btnAxisSetupVelCancel.Enable(False)            
        else:
            self.txtAxisSetupVelMax.SetValue(str(self.VelMax))
            self.txtAxisSetupMaxAmp.SetValue(str(self.MaxAmp))
            self.txtAxisSetupVelWin.SetValue(str(self.VelWin))            
            self.txtAxisSetupAccMax.SetValue(str(abs(self.AccMax)))     
            self.txtAxisSetupDccMax.SetValue(str(abs(self.DccMax)))     
            self.txtAxisSetupAccTot.SetValue(str(abs(self.AccTot)))
            self.btnAxisSetupVelWrite.Enable(True)
            self.btnAxisSetupVelCancel.Enable(True)            
            

        self.Modus = 'w'

        self.txtAxisSetupVelMax.SetEditable( False )
        self.txtAxisSetupAccMax.SetEditable( False )
        self.txtAxisSetupDccMax.SetEditable( False )
        self.txtAxisSetupAccTot.SetEditable( False )
        self.txtAxisSetupMaxAmp.SetEditable( False )
        self.txtAxisSetupVelWin.SetEditable( False )
        self.txtAxisSetupVelMax.SetBackgroundColour(wx.Colour(187,187,187))        
        self.txtAxisSetupAccMax.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupDccMax.SetBackgroundColour(wx.Colour(187,187,187))       
        self.txtAxisSetupAccTot.SetBackgroundColour(wx.Colour(187,187,187))        
        self.txtAxisSetupMaxAmp.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupVelWin.SetBackgroundColour(wx.Colour(187,187,187))


    def OnAxisSetupVelCancel(self, evt):
        #print "AxisSetupVelCancel" 
        self.EnableControls()
        self.Modus = 'r'#setup Vel Cancel
        self.btnAxisSetupVelWrite.Enable(False)
        self.btnAxisSetupVelCancel.Enable(False)

        self.txtAxisSetupVelMax.SetValue(str(self.VelMax))
        self.txtAxisSetupAccMax.SetValue(str(self.AccMax))
        self.txtAxisSetupDccMax.SetValue(str(self.DccMax))
        self.txtAxisSetupAccTot.SetValue(str(self.AccTot))
        self.txtAxisSetupMaxAmp.SetValue(str(self.MaxAmp))
        self.txtAxisSetupVelWin.SetValue(str(self.VelWin))
        

        self.txtAxisSetupVelMax.SetEditable( False )
        self.txtAxisSetupAccMax.SetEditable( False )
        self.txtAxisSetupDccMax.SetEditable( False )
        self.txtAxisSetupAccTot.SetEditable( False )
        self.txtAxisSetupMaxAmp.SetEditable( False )
        self.txtAxisSetupVelWin.SetEditable( False )
        self.txtAxisSetupVelMax.SetBackgroundColour(wx.Colour(187,187,187))        
        self.txtAxisSetupAccMax.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupDccMax.SetBackgroundColour(wx.Colour(187,187,187))       
        self.txtAxisSetupAccTot.SetBackgroundColour(wx.Colour(187,187,187))        
        self.txtAxisSetupMaxAmp.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupVelWin.SetBackgroundColour(wx.Colour(187,187,187)) 

#----------------------------------------------------------------
    def OnAxisSetupGuideSetup(self, evt):
        #print "AxisSetupGuideSetup"
        self.DisableControls()
        self.Modus = 'E' # Setup Pos Edit

        self.btnAxisSetupGuideReset.Enable(False)
        self.btnAxisSetupGuideWrite.Enable(True)
        self.btnAxisSetupGuideCancel.Enable(True)


        self.GuidePitch     = self.txtAxisSetupGuidePitch.GetValue()
        self.GuidePosMax    = self.txtAxisSetupGuidePosMax.GetValue()
        self.GuidePosMin    = self.txtAxisSetupGuidePosMin.GetValue()

        self.txtAxisSetupGuidePitch.SetEditable( True )
        self.txtAxisSetupGuidePosMax.SetEditable( True )
        #self.txtAxisSetupGuidePosMin.SetEditable( True ) # Muss erst in SPS implementiert werden
        self.txtAxisSetupGuidePitch.SetBackgroundColour(wx.Colour(255,255,255))
        self.txtAxisSetupGuidePosMax.SetBackgroundColour(wx.Colour(255,255,255))
        #self.txtAxisSetupGuidePosMin.SetBackgroundColour(wx.Colour(255,255,255)) # Muss erst in SPS implementiert werden

    def OnAxisSetupGuideWrite(self, evt):
        #print "AxisSetupGuideWrite"
        self.EnableControls()
        self.btnAxisSetupGuideReset.Enable(True)

        self.btnAxisSetupGuideWrite.Enable(False)
        self.btnAxisSetupGuideCancel.Enable(False)
        
        if (abs(float(self.txtAxisSetupGuidePitch.GetValue())) > 15 ):
            dlg=wx.MessageDialog(None,'Guide Pitch > 15mm; Value uncanged','Error Pitch',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy
            self.txtAxisSetupGuidePitch.SetValue(str(self.GuidePitch))
            self.txtAxisSetupGuidePitch.Refresh() 
            
        if ((float(self.txtAxisSetupGuidePosMax.GetValue())) < 0.05 or
            (float(self.txtAxisSetupGuidePosMax.GetValue())) > (float(self.txtAxisSetupGuidePosMaxMax.GetValue())) ):
            dlg=wx.MessageDialog(None,'Pos Max Guider out of bounds; Value unchanged','Error Pos Max',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy
            self.txtAxisSetupGuidePosMax.SetValue(str(self.GuidePosMax))
            self.txtAxisSetupGuidePosMax.Refresh()
            
        self.GuidePitch     = self.txtAxisSetupGuidePitch.GetValue()
        self.GuidePosMax    = self.txtAxisSetupGuidePosMax.GetValue()
        self.GuidePosMin    = self.txtAxisSetupGuidePosMin.GetValue()

        self.Modus = 'w'

        self.txtAxisSetupGuidePitch.SetEditable( False )
        self.txtAxisSetupGuidePosMax.SetEditable( False )
        self.txtAxisSetupGuidePosMin.SetEditable( False )
        self.txtAxisSetupGuidePitch.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupGuidePosMax.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupGuidePosMin.SetBackgroundColour(wx.Colour(187,187,187)) 

    def OnAxisSetupGuideCancel(self, evt):
        #print "AxisSetupGuideCancel" 
        self.EnableControls()
        
        self.Modus ='r'

        self.btnAxisSetupGuideReset.Enable(True)
        self.btnAxisSetupGuideWrite.Enable(False)
        self.btnAxisSetupGuideCancel.Enable(False)

        self.txtAxisSetupGuidePitch.SetValue(self.GuidePitch )
        self.txtAxisSetupGuidePosMax.SetValue(self.GuidePosMax)
        self.txtAxisSetupGuidePosMin.SetValue(self.GuidePosMin)

        self.txtAxisSetupGuidePitch.SetEditable( False )
        self.txtAxisSetupGuidePosMax.SetEditable( False )
        self.txtAxisSetupGuidePosMin.SetEditable( False )
        self.txtAxisSetupGuidePitch.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupGuidePosMax.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupGuidePosMin.SetBackgroundColour(wx.Colour(187,187,187)) 


    def OnAxisSetupGuideReset(self, evt):
        #print "AxisSetupGuideReset"
        self.btnAxisSetupGuideClutch.SetLabel('reseting')
        dlg=wx.MessageDialog(None,'Pls Cycle DeadMan Switch after closing this Dialog and wait for the reset to complete','Slave reset',wx.OK|wx.ICON_EXCLAMATION)
        result=dlg.ShowModal()
        dlg.Destroy         
        
    def OnAxisSetupGuideClutch(self, evt):
        #print "AxisSetupGuideClutch"        
        if self.btnAxisSetupGuideClutch.GetValue():
            #print "  engage Clutch"
            self.ClutchStatus = 1
            self.GuideControl = 5
            self.DisableGuideControls() 
            self.btnAxisSetupGuideClutch.SetLabel('engaged')
        else:

            #print "  Dis-engage Clutch"
            self.ClutchStatus = 0
            self.GuideControl = 2
            self.EnableGuideControls()
            self.btnAxisSetupGuideClutch.SetLabel('dis-engaged')

    
#----------------------------------------------------------------
    def OnAxisSetupFilterEdit(self, evt):
        #print "AxisSetupFilterEdit" 
        self.DisableControls()
        self.Modus = 'E'#setup Filter Edit
        self.btnAxisSetupFilterWrite.Enable(True)
        self.btnAxisSetupFilterCancel.Enable(True)

        self.P      = self.txtAxisSetupFilterP.GetValue()
        self.I      = self.txtAxisSetupFilterI.GetValue()
        self.D     = self.txtAxisSetupFilterD.GetValue()
        self.IL     = self.txtAxisSetupFilterIL.GetValue()

        self.txtAxisSetupFilterP.SetEditable( True )
        self.txtAxisSetupFilterI.SetEditable( True )
        self.txtAxisSetupFilterD.SetEditable( True )
        self.txtAxisSetupFilterIL.SetEditable( True )
        self.txtAxisSetupFilterP.SetBackgroundColour(wx.Colour(255,255,255))        
        self.txtAxisSetupFilterI.SetBackgroundColour(wx.Colour(255,255,255))        
        self.txtAxisSetupFilterD.SetBackgroundColour(wx.Colour(255,255,255))
        self.txtAxisSetupFilterIL.SetBackgroundColour(wx.Colour(255,255,255))

    def OnAxisSetupFilterWrite(self, evt):
        #print "AxisSetupFilterWrite"
        self.EnableControls()
        self.btnAxisSetupFilterWrite.Enable(False)
        self.btnAxisSetupFilterCancel.Enable(False)

        self.P     = self.txtAxisSetupFilterP.GetValue()
        self.I      = self.txtAxisSetupFilterI.GetValue()
        self.D     = self.txtAxisSetupFilterD.GetValue()
        self.IL    = self.txtAxisSetupFilterIL.GetValue()

        self.Modus = 'w'

        self.txtAxisSetupFilterP.SetEditable( False )
        self.txtAxisSetupFilterI.SetEditable( False )
        self.txtAxisSetupFilterD.SetEditable( False )
        self.txtAxisSetupFilterIL.SetEditable( False )
        self.txtAxisSetupFilterP.SetBackgroundColour(wx.Colour(187,187,187))        
        self.txtAxisSetupFilterI.SetBackgroundColour(wx.Colour(187,187,187))        
        self.txtAxisSetupFilterD.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupFilterIL.SetBackgroundColour(wx.Colour(187,187,187)) 

    def OnAxisSetupFilterCancel(self, evt):
        #print "AxisSetupFilterCancel" 
        self.EnableControls()
        self.Modus = 'r'#setup Filter Cancel
        self.btnAxisSetupFilterWrite.Enable(False)
        self.btnAxisSetupFilterCancel.Enable(False)

        self.txtAxisSetupFilterP.SetValue(self.P)
        self.txtAxisSetupFilterI.SetValue(self.I)
        self.txtAxisSetupFilterD.SetValue(self.D)
        self.txtAxisSetupFilterIL.SetValue(self.IL)

        self.txtAxisSetupFilterP.SetEditable( False )
        self.txtAxisSetupFilterI.SetEditable( False )
        self.txtAxisSetupFilterD.SetEditable( False )
        self.txtAxisSetupFilterIL.SetEditable( False )
        self.txtAxisSetupFilterP.SetBackgroundColour(wx.Colour(187,187,187))        
        self.txtAxisSetupFilterI.SetBackgroundColour(wx.Colour(187,187,187))        
        self.txtAxisSetupFilterD.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupFilterIL.SetBackgroundColour(wx.Colour(187,187,187)) 

#-------------------------------------------------------------------------------
    def OnEReset(self,evt):
        if self.btnEReset.GetValue():
            App.Yellow.PosSoll = App.Yellow.PosIst
            App.Yellow.EStopReset = 1
            for i in range(10):
                App.Yellow.comunicateServer()
            App.Yellow.EStopReset = 0
            if abs(float(self.txtPosDiff.GetValue())) < 0.01:
                self.OnReSync(1)
            self.btnEReset.SetValue(False)

            
    def EnableGuideControls(self):
        #print "Enabel Guide Controls" 
        self.btnAxisSetupGuideReset.Enable(True) 

    def DisableGuideControls(self):
        #print "Disabel Guide Controls" 

        self.btnAxisSetupGuideReset.Enable(False)

#----------------------------------------------------------------    
    def GoOnline(self):
        # Pruefe ob anderer Client das Commando hat
        if self.Online == False: 
            #print " Going Online" 
            App.Yellow.Intent  = 'False'
            self.EnableControls()
            self.Modus = 'r'#setup Rope Cancel
            self.txtTimeTick.SetBackgroundColour(wx.Colour(0 ,150,0))
            self.cmbAxisName.SetBackgroundColour(wx.Colour(0 ,150,0))
            self.txtTimeTick.Refresh()
            self.cmbAxisName.Refresh()
            self.Online = True


    def GoOffline(self):
        #if self.Online == True:
        #print " Going Offline" 
        self.Online = False
        self.DisableControls()
        self.Modus = 'rE'#setup Rope Cancel
        self.txtTimeTick.SetBackgroundColour(wx.Colour(255,255,255))
        self.cmbAxisName.SetBackgroundColour(wx.Colour(255,255,255))
        self.txtTimeTick.Refresh()
        self.cmbAxisName.Refresh()
        return

    def PermitOnline(self):
        if self.Controlle == False:
            #print "Online Permission"
            App.Yellow.Intent  = 'True'
            self.Controlle = True


    def DenyOnline(self):
        if self.Controlle == True:
            #print "Online forbidden"  
            App.Yellow.Intent = 'False'
            self.Controlle = False

    def DisableControls(self):
        if self.ControlsEnabeled:
            #print 'Disabeling Controls'
            self.btnAxisReset.Enable(False)
            self.btnAxisSetupPosEdit.Enable(False)
            self.btnAxisSetupPosWrite.Enable(False)
            self.btnAxisSetupPosCancel.Enable(False)
            self.txtAxisSetupPosHardMax.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupPosUserMax.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupPosIst.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupPosUserMin.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupPosHardMin.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupPosPosWin.SetBackgroundColour(wx.Colour(187,187,187)) 
            self.btnAxisSetupVelEdit.Enable(False)
            self.btnAxisSetupVelWrite.Enable(False)
            self.btnAxisSetupVelCancel.Enable(False)
            self.txtAxisSetupVelMaxMot.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupVelMaxMot.SetForegroundColour(wx.Colour(255,0,0))
            self.txtAxisSetupVelMax.SetBackgroundColour(wx.Colour(187,187,187))        
            self.txtAxisSetupAccMax.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupDccMax.SetBackgroundColour(wx.Colour(187,187,187))       
            self.txtAxisSetupAccTot.SetBackgroundColour(wx.Colour(187,187,187))        
            self.txtAxisSetupMaxAmp.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupVelWin.SetBackgroundColour(wx.Colour(187,187,187))
            self.btnAxisSetupGuideSetup.Enable(False)
            self.btnAxisSetupGuideWrite.Enable(False)
            self.btnAxisSetupGuideCancel.Enable(False)
            self.btnAxisSetupGuideReset.Enable(False)              
            self.btnAxisSetupGuideClutch.Enable(False)
    
            self.txtAxisSetupGuidePitch.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupGuidePosMax.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupGuidePosMin.SetBackgroundColour(wx.Colour(187,187,187))        
            self.btnAxisSetupFilterEdit.Enable(False)        
            self.btnAxisSetupFilterWrite.Enable(False)
            self.btnAxisSetupFilterCancel.Enable(False)
            self.txtAxisSetupFilterLagError.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupFilterP.SetBackgroundColour(wx.Colour(187,187,187))        
            self.txtAxisSetupFilterI.SetBackgroundColour(wx.Colour(187,187,187))        
            self.txtAxisSetupFilterD.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupFilterIL.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupFilterRampform.SetBackgroundColour(wx.Colour(187,187,187))
            self.btnAxisSetupRopeEdit.Enable(False)
            self.btnAxisSetupRopeWrite.Enable(False)
            self.btnAxisSetupRopeCancel.Enable(False)
            self.txtAxisSetupRopeSWLL.SetBackgroundColour(wx.Colour(187,187,187))        
            self.txtAxisSetupRopeDiameter.SetBackgroundColour(wx.Colour(187,187,187))        
            self.txtAxisSetupRopeType.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupRopeNumber.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupRopeLength.SetBackgroundColour(wx.Colour(187,187,187))
            self.ControlsEnabeled = False
            self.btnRecover.Enable(False)
            self.btnReSync.Enable(False)
    def EnableControls(self):
        if not(self.ControlsEnabeled):
            #print 'Enabeling Controls'
            self.btnAxisReset.Enable(True)
            self.btnAxisSetupPosEdit.Enable(True)
            self.btnAxisSetupVelEdit.Enable(True)
            self.btnAxisSetupGuideSetup.Enable(True)
            self.btnAxisSetupGuideReset.Enable(True)              
            self.btnAxisSetupGuideClutch.Enable(True)
            self.btnAxisSetupFilterEdit.Enable(True)        
            #self.btnAxisSetupRopeEdit.Enable(True)
            #self.btnRecover.Enable(True)
            self.ControlsEnabeled = True
            
    def OnAxisSelect(self,evt):
        try:
            App.Yellow            
            item = evt.GetSelection()
            if App.Yellow.Name <> self.Achsen[item]:

                dlg = wx.MessageDialog(None, 'Are you sure you want to reassign Yellow Axis ?','Question', wx.OK | wx.CANCEL | wx.NO_DEFAULT | wx.ICON_QUESTION)
                result = dlg.ShowModal()
                dlg.Destroy()
                if result == wx.ID_OK:
                    try:
                        Temp = Achse(self.Achsen[item]) # Achse item laesst sich assignen
                    except: # wenn anderes GUI kontrolle dann auf SIMUL
                        dlg = wx.MessageDialog(None, 'Yellow Axis set to SIMUL !','Reset to SIMUL', wx.OK | wx.ICON_EXCLAMATION)
                        result = dlg.ShowModal()
                        dlg.Destroy()                        
                        del App.Yellow
                        App.Yellow = Achse('SIMUL')
                        App.Yellow.OwnPID= '0'#str(os.getpid())
                        #print 'Axis '+self.Achsen[item]+ ' as Yellow selected'
                        App.Yellow.comunicateServer()
                        taskMgr.add(self.AxisTask,'YellowAxisTask')
                    else:
                        #print 'Gelb lsst sich auf ' + str(self.Achsen[item]) + ' assignen'
                        try:
                            del Temp
                        except:
                            pass
                        
                        self.ResetAxis()
                else:
                    #print ' Accessing App.Yellow '
                    self.ReadDatafromAchse()
        except: # Noch kein Achsobjekt
            self.ResetAxis()

    def AxisReadJoystick(self):
        self.initJoystick()
        self.keepGoing                       = True
        self.LTold                           = 0
        self.ControlingPIDTx                 = 0
        self.ControlingPIDRx                 = 0
        self.Progression                     = 0.0001
        self.WriteZaehler = 0
        self.T1Old = 0
        self.VX = 0
        self.Pos0 = 0
        self.EnableOld = 0
        self.PoweredOld = 0
        self.Decode  = Decode()
        self.InitAxis = 1
        self.FahrbefehlOld = 1
        self.refreshEstopPanel = "Yellow"
        self.refreshBitPanel = "RedBrown"
        self.refreshRecoverPanel = "RedBrown"
        self.refreshSelect = "Blue"
        self.GuideControlOld = 2
        self.ValueSLDMain = 0
        self.ValueSLDSlave = 0
        self.SetupVelMax = 0

        taskMgr.add(self.AxisTask,'YellowAxisTask')
        
    def LoadFromFileQuit(self):

        taskMgr.remove("YellowAxisTask")
        
    def ResetAxis(self):
        
        self.initJoystick()
        self.keepGoing                       = True
        self.LTold                           = 0
        self.ControlingPIDTx                 = 0
        self.ControlingPIDRx                 = 0
        self.Progression                     = 0.0001
        self.WriteZaehler = 0
        self.T1Old = 0
        self.VX = 0
        self.Pos0 = 0
        self.EnableOld = 0
        self.PoweredOld = 0
        self.Decode  = Decode()
        self.InitAxis = 1
        self.FahrbefehlOld = 1
        self.refreshEstopPanel = "Yellow"
        self.refreshBitPanel = "RedBrown"
        self.refreshRecoverPanel = "RedBrown"
        self.refreshSelect = "Blue"
        self.GuideControlOld = 2
        self.ValueSLDMain = 0
        self.ValueSLDSlave = 0
        self.SetupVelMax = 0

        self.Modus = 'rE' # initialisieren im read Edit Mode
        self.Command=False
        self.DisableControls()
        try:
            App.Yellow
            AxisExists = True
            #print 'Gelb existiert'
        except: # Noch kein Achsobjekt
            AxisExists = False
            #print 'Gelb non exist'
            
        if not(AxisExists): # noch kein Achsobjekt -> neues instanzieren
            #print 'bauen neues Gelb'
            item=self.cmbAxisName.GetCurrentSelection()
            App.Yellow = Achse(self.Achsen[item])
            App.Yellow.OwnPID= str(os.getpid())
            #print 'Axis '+self.Achsen[item]+ ' as Yellow selected'
            App.Yellow.comunicateServer()
        else:
            del App.Yellow
            #print 'del Yellow'
            item=self.cmbAxisName.GetCurrentSelection()
            App.Yellow = Achse(self.Achsen[item])
            App.Yellow.OwnPID= '0'#str(os.getpid())
            #print 'Neues Neues Gelb'
            #print 'Axis '+self.Achsen[item]+ ' as Yellow selected'
            App.Yellow.comunicateServer()            
            
        taskMgr.add(self.AxisTask,'YellowAxisTask') 
        
        return True
        
    def Loadfromfile(self,item):
        
        self.initJoystick()
        self.keepGoing                       = True
        self.LTold                           = 0
        self.ControlingPIDTx                 = 0
        self.ControlingPIDRx                 = 0
        self.Progression                     = 0.0001
        self.WriteZaehler = 0
        self.T1Old = 0
        self.VX = 0
        self.Pos0 = 0
        self.EnableOld = 0
        self.PoweredOld = 0
        self.Decode  = Decode()
        self.InitAxis = 1
        self.FahrbefehlOld = 1
        self.refreshEstopPanel = "Yellow"
        self.refreshBitPanel = "RedBrown"
        self.refreshRecoverPanel = "RedBrown"
        self.refreshSelect = "Blue"
        self.GuideControlOld = 2
        self.ValueSLDMain = 0
        self.ValueSLDSlave = 0
        self.SetupVelMax = 0
        
        self.Modus = 'rE' # initialisieren im read Edit Mode
        self.Command=False
        self.DisableControls()
        
        
        try:
            App.Yellow
            YellowExists = True
        except:
            YellowExists = False
        if not(YellowExists):
            App.Yellow = Achse(item.rstrip('\n'))
            App.Yellow.OwnPID= str(os.getpid())
            #print 'Axis '+item.rstrip('\n')+ ' as Yellow selected'
        else:
            taskMgr.remove('YellowAxisTask')
            del App.Yellow
            App.Yellow = Achse(item.rstrip('\n'))
            App.Yellow.OwnPID= str(os.getpid())
            
        App.Yellow.comunicateServer()

        taskMgr.add(self.AxisTask,'YellowAxisTask')        


    def AxisTask(self,task):
        
        self.refresh()
        return task.cont
    
    
    def refresh(self):
        
        self.readJoystick()
        self.readDataFromGUI()
        self.RampGenerator()        
        self.comunicateServer()
        self.writeDataToGUI()
        self.CheckStatus()
        
    def readDataFromGUI(self):

        App.Yellow.ControlingPIDTx = 0
        App.Yellow.Intent          = self.Command
        App.Yellow.Enable          = self.EnableStatus
        ##App.Yellow.EStopReset      = str(self.EStopReset)
        
        if App.Yellow.EStopReset == '1':
            self.Pos0 = App.Yellow.PosIst
        if self.btnAxisSetupGuideClutch.GetLabel() == "reseting":
            App.Yellow.GuideControl   = 5
            b=self.Decode.Decode(App.Yellow.GuideStatus)
            if b[1][0][2] == "Save Stop" or b[1][0][2] == "Not Enabled" or b[1][0][2] == "Ready":
                self.btnAxisSetupGuideClutch.SetLabel("Reset")
                if self.btnAxisSetupGuideClutch.GetValue():
                    self.btnAxisSetupGuideClutch.SetLabel("engaged")
                else:
                    self.btnAxisSetupGuideClutch.SetLabel("dis-engaged")
        else:
            if self.ClutchStatus == 1:
                App.Yellow.GuideControl   = 5
            else:
                if self.buttons & 128:
                    App.Yellow.GuideControl   = 17
                else:
                    App.Yellow.GuideControl   = 2 
                    
        if self.btnAxisReset.GetLabel() == "reseting":
            b=self.Decode.Decode(App.Yellow.Status)
            if b[1][0][2] == "Save Stop" or b[1][0][2] == "Not Enabled" or b[1][0][2] == "Ready":
                self.btnAxisReset.SetLabel("Reset") 
                self.btnAxisReset.SetValue(0)
        try:
            App.Yellow.Modus         = self.Modus
            App.Yellow.SpeedSoll     = self.VX
            App.Yellow.GuideSpeedSoll= self.sldAxisSetupGuideVel.GetValue()*20
            if not (self.txtAxisSetupPosHardMax.GetValue() == "-" or self.txtAxisSetupPosHardMax.GetValue() ==""):
                App.Yellow.PosHardMax    = float(self.txtAxisSetupPosHardMax.GetValue())
            if not (self.txtAxisSetupPosUserMax.GetValue() == "-" or self.txtAxisSetupPosUserMax.GetValue() == "") :
                App.Yellow.PosUserMax    = float(self.txtAxisSetupPosUserMax.GetValue())
            if not (self.txtAxisSetupPosUserMin.GetValue() == "-"  or self.txtAxisSetupPosUserMin.GetValue() == ""):
                App.Yellow.PosUserMin    = float(self.txtAxisSetupPosUserMin.GetValue())
            if not (self.txtAxisSetupPosHardMin.GetValue() == "-" or self.txtAxisSetupPosHardMin.GetValue() == "" ):
                App.Yellow.PosHardMin    = float(self.txtAxisSetupPosHardMin.GetValue())
            if not (self.txtAxisSetupPosPosWin.GetValue() == "-"  or self.txtAxisSetupPosPosWin.GetValue() == ""):
                App.Yellow.PosWin           = abs(float(self.txtAxisSetupPosPosWin.GetValue()))
            if not (self.txtAxisSetupVelMax.GetValue() == "-" or self.txtAxisSetupVelMax.GetValue() == ""):
                App.Yellow.SpeedMax         = abs(float(self.txtAxisSetupVelMax.GetValue()))
            if not (self.txtAxisSetupAccMax.GetValue() == "-" or self.txtAxisSetupAccMax.GetValue() == ""):
                App.Yellow.AccMax           = abs(float(self.txtAxisSetupAccMax.GetValue()))
            if not (self.txtAxisSetupDccMax.GetValue() == "-" or self.txtAxisSetupDccMax.GetValue() == ""):
                App.Yellow.DccMax           = abs(float(self.txtAxisSetupDccMax.GetValue()))
            if not (self.txtAxisSetupAccTot.GetValue() == "-" or self.txtAxisSetupAccTot.GetValue() == ""):
                App.Yellow.AccTot           = abs(float(self.txtAxisSetupAccTot.GetValue()))
            if not (self.txtAxisSetupMaxAmp.GetValue() == "-" or self.txtAxisSetupMaxAmp.GetValue() == ""):
                App.Yellow.MaxAmp           = abs(float(self.txtAxisSetupMaxAmp.GetValue()))
            if not (self.txtAxisSetupVelWin.GetValue() == "-" or self.txtAxisSetupVelWin.GetValue() == ""):
                App.Yellow.VelWin           = abs(float(self.txtAxisSetupVelWin.GetValue()))
            if not (self.txtAxisSetupFilterP.GetValue() == "-" or self.txtAxisSetupFilterP.GetValue() == ""):
                App.Yellow.FilterP          = abs(float(self.txtAxisSetupFilterP.GetValue()))
            if not (self.txtAxisSetupFilterI.GetValue() == "-" or self.txtAxisSetupFilterI.GetValue() == ""):
                App.Yellow.FilterI          = abs(float(self.txtAxisSetupFilterI.GetValue()))
            if not (self.txtAxisSetupFilterD.GetValue() == "-" or self.txtAxisSetupFilterD.GetValue() == ""):
                App.Yellow.FilterD          = abs(float(self.txtAxisSetupFilterD.GetValue()))
            if not (self.txtAxisSetupFilterIL.GetValue() == "-" or self.txtAxisSetupFilterIL.GetValue() == ""):
                App.Yellow.FilterIL         = abs(float(self.txtAxisSetupFilterIL.GetValue()))
            if not (self.txtAxisSetupRopeSWLL.GetValue() == "-" or self.txtAxisSetupRopeSWLL.GetValue() == ""):
                App.Yellow.RopeSWLL         = abs(float(self.txtAxisSetupRopeSWLL.GetValue()))
            if not (self.txtAxisSetupRopeDiameter.GetValue() == "-" or self.txtAxisSetupRopeDiameter.GetValue() == ""):
                App.Yellow.RopeDiameter     = abs(float(self.txtAxisSetupRopeDiameter.GetValue()))
            App.Yellow.RopeType         = self.txtAxisSetupRopeType.GetValue()
            App.Yellow.RopeNumber       = self.txtAxisSetupRopeNumber.GetValue()
            if not (self.txtAxisSetupRopeLength.GetValue() == "-" or self.txtAxisSetupRopeLength.GetValue() == ""):
                App.Yellow.RopeLength       = abs(float(self.txtAxisSetupRopeLength.GetValue()))
            if not (self.txtAxisSetupGuidePitch.GetValue() == "-" or self.txtAxisSetupGuidePitch.GetValue() == "-"):
                App.Yellow.GuidePitch       = float(self.txtAxisSetupGuidePitch.GetValue())
            if not (self.txtAxisSetupGuidePosMax.GetValue() == "-" or self.txtAxisSetupGuidePosMax.GetValue() == ""):
                App.Yellow.GuidePosMax      = abs(float(self.txtAxisSetupGuidePosMax.GetValue()))
            App.Yellow.GuidePosMaxMax   = float(self.txtAxisSetupGuidePosMaxMax.GetValue())
            if not (self.txtAxisSetupGuidePosMin.GetValue() == "-" or self.txtAxisSetupGuidePosMin.GetValue() == ""):
                App.Yellow.GuidePosMin      = float(self.txtAxisSetupGuidePosMin.GetValue())
        except ValueError:
            dlg=wx.MessageDialog(None,'Please use just numbers, minus and . as comma. Like 123.45  Use <Backspace> to correct the error!','Syntax ERROR',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy
            self.txtAxisSetupPosHardMax.SetValue(str(App.Yellow.PosHardMax))
            self.txtAxisSetupPosUserMax.SetValue(str(App.Yellow.PosUserMax))
            self.txtAxisSetupPosUserMin.SetValue(str(App.Yellow.PosUserMin))
            self.txtAxisSetupPosHardMin.SetValue(str(App.Yellow.PosHardMin))
            self.txtAxisSetupPosPosWin.SetValue(str(App.Yellow.PosWin))
            self.txtAxisSetupVelMax.SetValue(str(App.Yellow.SpeedMax))
            self.txtAxisSetupAccMax.SetValue(str(App.Yellow.AccMax))
            self.txtAxisSetupDccMax.SetValue(str(App.Yellow.DccMax))
            self.txtAxisSetupAccTot.SetValue(str(App.Yellow.AccTot))
            self.txtAxisSetupMaxAmp.SetValue(str(App.Yellow.MaxAmp))
            self.txtAxisSetupVelWin.SetValue(str(App.Yellow.VelWin))
            self.txtAxisSetupFilterP.SetValue(str(App.Yellow.FilterP))
            self.txtAxisSetupFilterI.SetValue(str(App.Yellow.FilterI))
            self.txtAxisSetupFilterD.SetValue(str(App.Yellow.FilterD))
            self.txtAxisSetupFilterIL.SetValue(str(App.Yellow.FilterIL))
            self.txtAxisSetupRopeSWLL.SetValue(str(App.Yellow.RopeSWLL))
            self.txtAxisSetupRopeDiameter.SetValue(str(App.Yellow.RopeDiameter))
            self.txtAxisSetupRopeType.SetValue(str(App.Yellow.RopeType))
            self.txtAxisSetupRopeNumber.SetValue(str(App.Yellow.RopeNumber))
            self.txtAxisSetupRopeLength.SetValue(str(App.Yellow.RopeLength))
            self.txtAxisSetupGuidePitch.SetValue(str(App.Yellow.GuidePitch))
            self.txtAxisSetupGuidePosMax.SetValue(str(App.Yellow.GuidePosMax))
            self.txtAxisSetupGuidePosMaxMax.SetValue(str(App.Yellow.GuidePosMaxMax))
            self.txtAxisSetupGuidePosMin.SetValue(str(App.Yellow.GuidePosMin))
            self.readDataFromGUI()

    def ReadDatafromAchse(self):
        
        self.Command          = App.Yellow.Intent           
        self.Enable           = App.Yellow.Enable
        if App.Yellow.GuideControl   == 5:
            self.btnAxisSetupGuideClutch.SetValue(True)    # Noch nicht passend        
        elif App.Yellow.GuideControl   == 17:              # Noch nicht passend  
            self.btnAxisSetupGuideEnable.SetValue(True)    # Noch nicht passend                 
        else:                                              # Noch nicht passend  
            self.btnAxisSetupGuideClutch.SetValue(True)    # Noch nicht passend  
            self.btnAxisSetupGuideEnable.SetValue(True)    # Noch nicht passend 
        self.Modus = App.Yellow.Modus 
        
        self.cmbAxisName.SetSelection(self.cmbAxisName.GetItems().index(unicode(App.Yellow.Name)))
        
        self.sldAxisVel.SetValue(500)    # Noch nicht passend 
        self.sldAxisSetupGuideVel.SetValue(50)
        self.txtAxisPos.SetValue(App.Yellow.PosIst)
        self.txtAxisSetupPosIst.SetValue(App.Yellow.PosIst)
        self.txtAxisSetupPosHardMax.SetValue(str(App.Yellow.PosHardMax)) 
        self.txtAxisSetupPosUserMax.SetValue(str(App.Yellow.PosUserMax))
        self.txtAxisSetupPosUserMin.SetValue(str(App.Yellow.PosUserMin))
        self.txtAxisSetupPosHardMin.SetValue(str(App.Yellow.PosHardMin))
        self.txtAxisSetupVelMax.SetValue(str(App.Yellow.SpeedMax))
        self.txtAxisSetupAccMax.SetValue(str(App.Yellow.AccMax))
        self.txtAxisSetupDccMax.SetValue(str(App.Yellow.DccMax))
        if App.Yellow.MaxAmp == 0.0:
            self.txtAxisSetupMaxAmp.SetValue("SIMUL")                
        else:
            self.txtAxisSetupMaxAmp.SetValue(str(App.Yellow.MaxAmp))
        self.txtAxisSetupFilterP.SetValue(App.Yellow.FilterP)
        self.txtAxisSetupFilterI.SetValue(App.Yellow.FilterI)
        self.txtAxisSetupFilterD.SetValue(App.Yellow.FilterD)
        self.txtAxisSetupFilterIL.SetValue(App.Yellow.FilterIL)
        self.txtAxisSetupGuidePitch.SetValue(App.Yellow.GuidePitch)
        self.txtAxisSetupGuidePosMax.SetValue(App.Yellow.GuidePosMax)
        self.txtAxisSetupGuidePosMin.SetValue(App.Yellow.GuidePosMin)
        


    def comunicateServer(self):
        App.Yellow.comunicateServer()

    def RampGenerator(self):
        if self.InitAxis == 1:
            self.Pos0 = App.Yellow.PosIst
            self.InitAxis = 0
        self.Pos0=App.Yellow.PosSoll        
        T1     = time.clock()
        self.DiffT= T1-self.T1Old
        self.T1Old  = T1
        # Fahrbefehlstaster gedrueckt Programm reagiert normal auf Joystick
        if App.Yellow.EsTaster:
            if self.FahrbefehlOld == 1:
                self.Pos0 = App.Yellow.PosIst
                self.FahrbefehlOld = 0
                
            d=self.Decode.Decode(App.Yellow.Status) #schauen ob Verstaerker in TechOpt ist
            if d[1][0][1] == "10"and (self.buttons & 32 and self.buttons & 1):
                if self.Modus != 'recover':
                    #self.SetupVelMax = float(self.txtAxisSetupVelMax.GetValue())
                    self.SetupVelMax = max((float(self.txtAxisSetupVelMax.GetValue()))/10,1.0) #3D Aktivieren
                else:
                    self.SetupVelMax = max((float(self.txtAxisSetupVelMax.GetValue()))/10,1.0)
                x = (self.sldAxisVel.GetValue() - 500) * 2 *self.SetupVelMax/1000  # 20 = 1000mm / 50 fuer Prozent
            else:
                x=0
            #VelX
            if self.VX < x:
                self.VX = self.VX + float(App.Yellow.AccMax)*(self.DiffT)
                if self.VX >= x:
                    self.VX = x
            elif self.VX > x:
                self.VX = self.VX - float(App.Yellow.DccMax)*(self.DiffT)
                if self.VX <= x:
                        self.VX = x  
        # Abfangen der Endpositionen *)
        #Bei Fahrt Richtung oberes Ende Beginn
            PosDiffG = float(App.Yellow.PosUserMax) - float(App.Yellow.PosIst)
            if PosDiffG > 0 :
                SpeedMaxG = math.sqrt(float(App.Yellow.DccMax)*0.8*PosDiffG)
                self.VX = min(self.VX,SpeedMaxG);
            else:
                if self.VX > 0:
                    self.VX = 0.0;
            #Bei Fahrt Richtung oberes Ende End
            #Bei Fahrt Richtung unteres Ende Beginn
            PosDiffG = float(App.Yellow.PosIst) - float(App.Yellow.PosUserMin)
            if PosDiffG > 0 :
                SpeedMaxG = math.sqrt(float(App.Yellow.DccMax)*0.8*PosDiffG)
                self.VX = max(self.VX,-SpeedMaxG);
            else:
                if self.VX < 0 :
                    self.VX = 0.0
            #Bei Fahrt Richtung unteres Ende End
# Fahrbefehlstaster offen Programm steuert Motor mit AccTot zum Stillstand
        else:
            x = 0.0
            if self.VX < x:
                self.VX = self.VX + float(App.Yellow.AccTot)*(self.DiffT)
                if self.VX >= x:
                    self.VX = x
            elif self.VX > x:
                self.VX = self.VX - float(App.Yellow.AccTot)*(self.DiffT)
                if self.VX <= x:
                        self.VX = x 
            self.FahrbefehlOld = 1
            
        App.Yellow.PosSoll= str(float(self.Pos0)+self.VX*(self.DiffT))        

    
    
    def writeDataToGUI(self):        
        a=self.Decode.Decode(App.Yellow.Status)                         
        b=self.Decode.Decode(App.Yellow.GuideStatus)
        if App.Yellow.EsTaster:
            self.DisableControls()
            self.btnAxisSetupGuideClutch.Enable(False)
            self.btnAxisSetupGuideReset.Enable(False)            
            self.cmbAxisName.Enable(False)
        else:
            if self.Modus != 'E':
                self.EnableControls()
                self.cmbAxisName.Enable(True)
                self.btnAxisSetupGuideClutch.Enable(True)
                #if self.ClutchStatus == 0:
                self.btnAxisSetupGuideReset.Enable(True)
            
        if App.Yellow.EsResetAble:
            self.btnEReset.Enable(False)
        else:
            self.btnEReset.Enable(True)
            
        self.SliderPanel.Update()

        if not(abs(float(self.txtPosDiff.GetValue())) < 0.01):
            if self.refreshRecoverPanel != 'Yellow':
                self.RecoverPanel.SetBackgroundColour((250,198,12))
                self.RecoverPanel.Refresh()
                self.refreshRecoverPanel = 'Yellow'               
        else:
            if self.refreshRecoverPanel != 'Green':
                self.RecoverPanel.SetBackgroundColour((0,150,0))
                self.RecoverPanel.Refresh()
                self.refreshRecoverPanel = 'Green'
                
        if not(App.Yellow.EsNetwork) :            
            if self.refreshEstopPanel != "Yellow":
                self.EStopPanel.SetBackgroundColour((250,198,12))
                self.EStopPanel.Refresh()
                self.refreshEstopPanel = "Yellow"
        else:
            if self.refreshEstopPanel != "Green":
                self.EStopPanel.SetBackgroundColour((0,150,0))
                self.EStopPanel.Refresh()
                self.refreshEstopPanel = "Green" 
                
        if App.Yellow.Modus !='E':
            if not(App.Yellow.EsNetwork) : 
                self.btnRecover.Enable(False)
                self.btnReSync.Enable(False)
            else:
                if (abs(float(self.txtPosDiff.GetValue())) < 0.01):
                    self.btnRecover.Enable(False)
                else:
                    self.btnRecover.Enable(True)
                if (App.Yellow.EsTaster or abs(float(self.txtPosDiff.GetValue())) < 0.01 or
                    self.btnRecover.GetLabel() == 'Running'):
                    self.btnReSync.Enable(False)
                else:     
                    self.btnReSync.Enable(True) 
        else:
            self.btnRecover.Enable(False)
            self.btnReSync.Enable(False)
            
        if (not(App.Yellow.EsNetwork)):          #Gelb
            if self.refreshBitPanel != "Yellow":
                self.BitPanel.SetBackgroundColour((250,198,12)) 
                self.BitPanel.Refresh()
                self.refreshBitPanel = "Yellow"
        else:
            if ((App.Yellow.EsReady and abs(float(self.txtPosDiff.GetValue())) >= 0.01) or
                ((App.Yellow.EsReady and abs(float(self.txtPosDiff.GetValue())) < 0.01))):
                if self.refreshBitPanel != "LightGreen":
                    self.BitPanel.SetBackgroundColour((0,150,0))
                    self.BitPanel.Refresh()
                    self.refreshBitPanel = "LightGreen"
            else:
                if (not(App.Yellow.EsReady) and abs(float(self.txtPosDiff.GetValue())) > 0.01) :
                    if self.refreshBitPanel != "Yellow":
                        self.BitPanel.SetBackgroundColour((250,198,12)) 
                        self.BitPanel.Refresh()
                        self.refreshBitPanel = "Yellow"
                else:
                    if self.refreshBitPanel != "RedBrown":
                        self.BitPanel.SetBackgroundColour((128,128,128)) 
                        self.BitPanel.Refresh()
                        self.refreshBitPanel = "RedBrown"

        if (App.Yellow.Modus == 'r' or 
            App.Yellow.Modus == 'rE' or 
            App.Yellow.Modus == 'JoyEnabeled' or
            App.Yellow.Modus == 'recover'):
            fa="%3.2f"
            fb="%2.3f"
            fc="%2.0f"
            fd="%3.1f"
            fe="%1.4f"
            self.ControlingPIDRx = App.Yellow.ControlingPIDRx                                         #[0] Controling PID
            self.txtTimeTick.SetValue(str(App.Yellow.LTold-self.LTold))
            #self.txtTimeTick.SetValue(str(self.Achse.GetLTold()-self.LTold))
            self.LTold =int(App.Yellow.LTold)                                        
            self.txtAxisError.SetValue(a[1][0][2])
            self.txtAxisError.SetBackgroundColour(a[1][0][3])
            #self.txtAxisError.SetToolTipString(str(a[0]))
                                                              #[3] Guide Status
            self.txtAxisSetupGuideError.SetValue(b[1][0][2])
            self.txtAxisSetupGuideError.SetBackgroundColour(b[1][0][3])
            #self.txtAxisSetupGuideError.SetToolTipString(str(b[0]))
            self.txtAxisPos.SetValue(str(fa%(float(App.Yellow.PosIst)) +' m'))                              #[4] AxisPos
            self.txtAxisSetupPosIst.SetValue(str(fa%(float(App.Yellow.PosIst))))
            self.txtAxisVel.SetValue(str(fa%(float(App.Yellow.SpeedIstUI)) +' m/s'))                        #[5] AxisVel
            self.txtAxisAmp.SetValue(str(fa%(float(App.Yellow.MasterMomentUI )/1000*60)+' A'))  #[6] AxisAmp
            self.txtAxisTemp.SetValue(str(App.Yellow.CabTemperature +' C'))                     #[7] AxisTemp        
            self.txtAxisSetupGuidePos.SetValue(str(App.Yellow.GuidePosIstUI))                   #[30]GuidePos
            self.txtAxisSetupGuideVel.SetValue(str(App.Yellow.GuideIstSpeedUI))                 #[31]GuideVel
            self.txtAxisSetupVelMaxMot.SetValue(str(abs(float(App.Yellow.SpeedMaxForUI))))                  #[37]VelMaxMot
            self.txtAxisSetupFilterLagError.SetValue(str(App.Yellow.PosDiffForUI ))             #[38]Lag Error
            self.cmbAxisName.SetValue(str(App.Yellow.Name))                                     #[8]  Name
            self.txtAxisSetupPosHardMax.SetValue(str(App.Yellow.PosHardMax))                    #[10] PosHardMax
            self.txtAxisSetupPosUserMax.SetValue(str(App.Yellow.PosUserMax))                    #[11] PosUserMax
            self.txtAxisSetupPosUserMin.SetValue(str(App.Yellow.PosUserMin))                    #[12] PosUserMin
            self.txtAxisSetupPosHardMin.SetValue(str(App.Yellow.PosHardMin))                    #[13] PosHardMin
            self.txtAxisSetupPosPosWin.SetValue(str(App.Yellow.PosWin))                            #[38] PosWin
            self.txtAxisSetupVelMax.SetValue(str(App.Yellow.SpeedMax))                          #[14] VelMax
            self.txtAxisSetupAccMax.SetValue(str(App.Yellow.AccMax))                            #[15] AccMax
            self.txtAxisSetupDccMax.SetValue(str(App.Yellow.DccMax))                            #[16] DccMax
            self.txtAxisSetupAccTot.SetValue(str(App.Yellow.AccTot))                            #[40] AccTot
            self.txtAxisSetupMaxAmp.SetValue(str(App.Yellow.MaxAmp))                            #[17] AmpMax
            self.txtAxisSetupVelWin.SetValue(str(App.Yellow.VelWin))                            #[39] VelWin
            self.txtAxisSetupFilterP.SetValue(str(App.Yellow.FilterP))                          #[18] FilterP
            self.txtAxisSetupFilterI.SetValue(str(App.Yellow.FilterI))                          #[19] FilterI
            self.txtAxisSetupFilterD.SetValue(str(App.Yellow.FilterD))                          #[20] FilterD
            self.txtAxisSetupFilterIL.SetValue(str(App.Yellow.FilterIL))                        #[21] FilterIL
            self.txtAxisSetupFilterRampform.SetValue(str(App.Yellow.Rampform))                  #[36] Rampform
            self.txtAxisSetupRopeSWLL.SetValue(str(App.Yellow.RopeSWLL))                        #[22] SWLL
            self.txtAxisSetupRopeDiameter.SetValue(str(App.Yellow.RopeDiameter))                #[23] Rope Diam    
            self.txtAxisSetupRopeType.SetValue(str(App.Yellow.RopeType))                        #[24] Rope Type 
            self.txtAxisSetupRopeNumber.SetValue(str(App.Yellow.RopeNumber))                    #[25] Rope Number     
            self.txtAxisSetupRopeLength.SetValue(str(App.Yellow.RopeLength))                    #[26] Rope Length   
            self.txtAxisSetupGuidePitch.SetValue(str(App.Yellow.GuidePitch))                    #[27] Pitch       
            self.txtAxisSetupGuidePosMax.SetValue(str(App.Yellow.GuidePosMax))                  #[28] Guide Pos Max
            self.txtAxisSetupGuidePosMaxMax.SetValue(str(App.Yellow.GuidePosMaxMax))            #[41] Guide Pos MaxMax
            self.txtAxisSetupGuidePosMin.SetValue(str(App.Yellow.GuidePosMin))                  #[29] Guide Pos Min
            self.txtCutPos.SetValue(str(fa%(float(App.Yellow.EStopCutPos))))
            self.txtCutVel.SetValue(str(fa%(float(App.Yellow.EStopCutVel))))
            self.txtPosDiff.SetValue(str(fa%(float(App.Yellow.EStopCutPos)-float(App.Yellow.PosIst))))
            self.txtCutTime.SetValue(str(App.Yellow.EStopCutTime))

        
        self.rMaster.SetValue(App.Yellow.EsMaster)
        self.rSlave.SetValue(App.Yellow.EsSlave)
        self.rNetwork.SetValue(App.Yellow.EsNetwork)            
        self.rEStop1.SetValue(App.Yellow.EsEStop1)
        self.rEStop2.SetValue(App.Yellow.EsEStop2)
        self.rSteuerwort.SetValue(App.Yellow.EsSteuerwort)
        self.r30kWOK.SetValue(App.Yellow.Es30kWOK )
        self.r05kWOK.SetValue(App.Yellow.Es05kWOK)
        self.rB1OK.SetValue(not(App.Yellow.EsB1OK ^ App.Yellow.EsTaster))
        self.rB2OK.SetValue(not (App.Yellow.EsB2OK ^ App.Yellow.EsTaster))
        #self.rB1OK.SetValue(App.Yellow.EsB1OK )
        #self.rB2OK.SetValue(App.Yellow.EsB2OK )        
        self.rDSC.SetValue(App.Yellow.EsDCSOK)    
        self.rSPSOK.SetValue(App.Yellow.EsSPSOK)
        self.rBRK2KB.SetValue(App.Yellow.EsBRK2KB)
        self.rPosWin.SetValue(App.Yellow.EsPosWin)
        self.rVelWin.SetValue(App.Yellow.EsVelWin)
        self.rEndlage.SetValue(App.Yellow.EsEndlage) 
        
        self.rG1COM.SetValue(App.Yellow.EsG1COM)
        self.rG1FB.SetValue(App.Yellow.EsG1FB)
        self.rG1OUT.SetValue(App.Yellow.EsG1OUT)
        self.rG2COM.SetValue(App.Yellow.EsG2COM)
        self.rG2FB.SetValue(App.Yellow.EsG2FB)
        self.rG2OUT.SetValue(App.Yellow.EsG2OUT)
        self.rG3COM.SetValue(App.Yellow.EsG3COM)
        self.rG3FB.SetValue(App.Yellow.EsG3FB)
        self.rG3OUT.SetValue(App.Yellow.EsG3OUT)
        
        if App.Yellow.EsSchluessel1:                      # Nur Master          
            font = wx.Font(8,wx.DEFAULT,wx.NORMAL,wx.BOLD)
            if App.Yellow.EsTaster:
                self.btnAxisSetupGuideClutch.Enable(False)
                self.btnAxisSetupGuideSetup.Enable(False)
            else:
                self.btnAxisSetupGuideClutch.Enable(True)
                self.btnAxisSetupGuideSetup.Enable(True)
            self.rMaster.SetFont(font)
            self.rEStop1.SetFont(font)
            self.rEStop2.SetFont(font)
            self.rSteuerwort.SetFont(font)
            self.r30kWOK.SetFont(font)
            self.rB1OK.SetFont(font)
            self.rSPSOK.SetFont(font)
            self.rBRK2KB.SetFont(font)
            self.rPosWin.SetFont(font)
            self.rVelWin.SetFont(font)
            self.rEndlage.SetFont(font)            
            font = wx.Font(8,wx.DEFAULT,wx.NORMAL,wx.LIGHT)
            self.rSlave.SetFont(font)
            self.rNetwork.SetFont(font)            
            self.r05kWOK.SetFont(font)
            self.rB2OK.SetFont(font)
            self.rDSC.SetFont(font)            
            self.rG1COM.SetFont(font) 
            self.rG1FB.SetFont(font) 
            self.rG1OUT.SetFont(font) 
            self.rG2COM.SetFont(font) 
            self.rG2FB.SetFont(font) 
            self.rG2OUT.SetFont(font) 
            self.rG3COM.SetFont(font) 
            self.rG3FB.SetFont(font) 
            self.rG3OUT.SetFont(font)            
        elif App.Yellow.EsSchluessel2:
            font = wx.Font(8,wx.DEFAULT,wx.NORMAL,wx.BOLD)          # Master und Slave
            self.btnAxisSetupGuideClutch.Enable(False)
            self.btnAxisSetupGuideSetup.Enable(False)
            self.rMaster.SetFont(font)
            self.rSlave.SetFont(font)
            self.rEStop1.SetFont(font)
            self.rEStop2.SetFont(font)
            self.rSteuerwort.SetFont(font)
            self.r30kWOK.SetFont(font)
            self.rB1OK.SetFont(font)
            self.rSPSOK.SetFont(font)
            self.rBRK2KB.SetFont(font)
            self.rPosWin.SetFont(font)
            self.rVelWin.SetFont(font)
            self.rEndlage.SetFont(font) 
            font = wx.Font(8,wx.DEFAULT,wx.NORMAL,wx.LIGHT)
            self.rNetwork.SetFont(font)            
            self.rG1COM.SetFont(font) 
            self.rG1FB.SetFont(font) 
            self.rG1OUT.SetFont(font) 
            self.rG2COM.SetFont(font) 
            self.rG2FB.SetFont(font) 
            self.rG2OUT.SetFont(font) 
            self.rG3COM.SetFont(font) 
            self.rG3FB.SetFont(font) 
            self.rG3OUT.SetFont(font) 
        else:
            font = wx.Font(8,wx.DEFAULT,wx.NORMAL,wx.BOLD)              # Master Slave und Netzwerk
            self.btnAxisSetupGuideClutch.Enable(False)
            self.btnAxisSetupGuideSetup.Enable(False)
            self.rMaster.SetFont(font)
            self.rSlave.SetFont(font)
            self.rEStop1.SetFont(font)
            self.rEStop2.SetFont(font)
            self.rSteuerwort.SetFont(font)
            self.r30kWOK.SetFont(font)
            self.rB1OK.SetFont(font)
            self.rSPSOK.SetFont(font)
            self.rBRK2KB.SetFont(font)
            self.rPosWin.SetFont(font)
            self.rVelWin.SetFont(font)
            self.rEndlage.SetFont(font) 
            self.rNetwork.SetFont(font)            
            self.r05kWOK.SetFont(font)
            self.rB2OK.SetFont(font)
            self.rDSC.SetFont(font)            
            self.rG1COM.SetFont(font) 
            self.rG1FB.SetFont(font) 
            self.rG1OUT.SetFont(font) 
            self.rG2COM.SetFont(font) 
            self.rG2FB.SetFont(font) 
            self.rG2OUT.SetFont(font) 
            self.rG3COM.SetFont(font) 
            self.rG3FB.SetFont(font) 
            self.rG3OUT.SetFont(font)
        
        if(self.rG1COM.GetValue() and
           self.rG1FB.GetValue() and
           self.rG1OUT.GetValue() and
           self.rG2COM.GetValue() and
           self.rG2FB.GetValue() and
           self.rG2OUT.GetValue() and
           self.rG3COM.GetValue() and
           self.rG3FB.GetValue() and
           self.rG3OUT.GetValue()):
            pass
            self.EStopReset =0              

        self.rbReady.SetValue(a[1][2])
        self.rbPowered.SetValue(a[1][1])
        self.rbBrake1.SetValue(App.Yellow.EsB1OK)
        self.rbBrake2.SetValue(App.Yellow.EsB2OK)
        self.rFBT.SetValue(not(App.Yellow.EsFTBOK))
        
        self.rbSReady.SetValue(b[1][2])
        self.rbSPowered.SetValue(b[1][1])
            

        if self.Modus =='w':
            self.WriteZaehler = self.WriteZaehler+1
            self.readDataFromGUI()
            App.Yellow.comunicateServer()
            if self.WriteZaehler > 4:   # Das ist naemlich so. Wenn die Werte runter geschrieben werden, braucht's eine Zeit bis sie auch
                                        # entsprechend aktualisiert wieder zurueckkommen. So etwa 5 Zyklen.
                                        # Wenn also Modus-w eintritt warten wir einige Zyklen bevor wir die Ueberpruefung beginnen.

                if (self.cmbAxisName.GetValue()                            == App.Yellow.Name          and               
                    "%.2f"%float(self.txtAxisSetupPosHardMax.GetValue())   == App.Yellow.PosHardMax    and
                    "%.2f"%float(self.txtAxisSetupPosUserMax.GetValue())   == App.Yellow.PosUserMax    and
                    "%.2f"%float(self.txtAxisSetupPosUserMin.GetValue())   == App.Yellow.PosUserMin    and
                    "%.2f"%float(self.txtAxisSetupPosHardMin.GetValue())   == App.Yellow.PosHardMin    and
                    "%.4f"%float(self.txtAxisSetupPosPosWin.GetValue())    == App.Yellow.PosWin        and
                    "%.2f"%float(self.txtAxisSetupVelMax.GetValue())       == App.Yellow.SpeedMax      and
                    "%.2f"%float(self.txtAxisSetupAccMax.GetValue())       == App.Yellow.AccMax        and
                    "%.2f"%float(self.txtAxisSetupDccMax.GetValue())       == App.Yellow.DccMax        and
                    "%.2f"%float(self.txtAxisSetupAccTot.GetValue())       == App.Yellow.AccTot        and
                    "%.2f"%float(self.txtAxisSetupMaxAmp.GetValue())       == App.Yellow.MaxAmp        and
                    "%.4f"%float(self.txtAxisSetupVelWin.GetValue())       == App.Yellow.VelWin        and
                    "%.3f"%float(self.txtAxisSetupFilterP.GetValue())      == App.Yellow.FilterP       and
                    "%.3f"%float(self.txtAxisSetupFilterI.GetValue())      == App.Yellow.FilterI       and
                    "%.3f"%float(self.txtAxisSetupFilterD.GetValue())      == App.Yellow.FilterD       and
                    "%.1f"%float(self.txtAxisSetupFilterIL.GetValue())     == App.Yellow.FilterIL      and
                    "%.3f"%float(self.txtAxisSetupGuidePitch.GetValue())   == App.Yellow.GuidePitch): # and        
                    #"%.3f"%float(self.txtAxisSetupGuidePosMax.GetValue())  == self.Achse.GuidePosMax)   and        
                    #"%.4f"%float(self.txtAxisSetupGuidePosMin.GetValue())  == self.Achse.GuidePosMin):
                    pass
                    #print 'Daten transfer OK'
                else:
                    #print 'Data transfer recheck'
                    dlg=wx.MessageDialog(None,'Data transfer: Pls Check Data','Data transfer',wx.OK|wx.ICON_EXCLAMATION)
                    result=dlg.ShowModal()
                    dlg.Destroy                                  
                self.Modus = 'rE'
                self.WriteZaehler = 0
    def readJoystick(self):

        if not((self.Modus ==  'E') or (self.Modus ==  'w')):
            self.buttons=self.stick.GetButtonState()
            a=self.stick.GetPosition().y
            d=self.stick.GetPosition().x
            b=a/32767.0-1
            e=d/32767.0-1
            # Achse
            if b>0:            
                c=b*(1-self.Progression)+b*b*self.Progression
            else:
                c=b*(1-self.Progression)-b*b*self.Progression
            self.ValueSLDMain = int(c*500.0+500)
            # Slider
            if e>0:            
                f=e*(1-self.Progression)+e*e*self.Progression
            else:
                f=e*(1-self.Progression)-e*e*self.Progression
            self.ValueSLDSlave = int(f*1000)

            if self.buttons & 1 :
                if self.refreshSelect != "Blue":
                    self.txtSelected1.SetBackgroundColour((0,200,0))
                    self.txtSelected2.SetBackgroundColour((0,200,0))
                    self.txtSelected1.SetLabel('Selected')
                    self.txtSelected2.SetLabel('Selected') 
                    self.txtSelected1.Refresh()
                    self.txtSelected2.Refresh()
                    self.refreshSelect = "Blue"
            else:
                if self.refreshSelect != "White":
                    self.txtSelected1.SetBackgroundColour((255,240,0))
                    self.txtSelected2.SetBackgroundColour((255,240,0))
                    self.txtSelected1.SetLabel('De-Selected')
                    self.txtSelected2.SetLabel('De-Selected')                     
                    self.txtSelected1.Refresh()
                    self.txtSelected2.Refresh()
                    self.refreshSelect = "White"    

            if self.Modus != "recover":
                if self.buttons & 32 and self.buttons & 1:
                    self.Modus ='JoyEnabeled'
                    if abs(float(self.txtPosDiff.GetValue())) > 0.01:
                        self.ValueSLDMain = 500
                    self.OnAxisEnable(self.buttons)
                elif not(self.buttons & 32):
                    self.Modus ='JoyDisabeled'
                    self.OnAxisEnable(self.buttons)
            else:
                if abs(float(self.txtPosDiff.GetValue())) < 0.01:
                    self.btnRecover.SetLabel('Recover')
                    self.OnReSync(1)
                    self.Modus ='r'
                    self.OnAxisEnable(self.buttons)
                self.OnAxisEnable(self.buttons)
                di= float(self.txtPosDiff.GetValue())
                PVel =  math.atan(di)/(math.pi/2)*500
                Vel = 500+PVel
                b=self.Decode.Decode(App.Yellow.GuideStatus)
                if b[1][0][1] == "10":
                    self.ValueSLDMain = Vel
                else:
                    self.ValueSLDMain = 500
      
            self.sldAxisVel.SetValue(self.ValueSLDMain)
            #self.sldAxisVel.Refresh()
            #self.SliderPanel.Refresh()
            self.sldAxisSetupGuideVel.SetValue(self.ValueSLDSlave)
            #self.sldAxisVel.Refresh()
            #self.SliderPanel.Refresh()

    def initJoystick(self):                
        #Joystick auslesen und Umrechnungen vorbereiten
        self.stick = wx.Joystick()
        self.min0 = self.stick.GetXMin()
        self.max0 = self.stick.GetXMax()
        self.diff0 = float((self.max0-self.min0)/2)
        self.min1 = self.stick.GetYMin()
        self.max1 = self.stick.GetYMax()
        self.diff1 = float((self.max1-self.min1)/2)
        self.min2 = self.stick.GetRudderMin()
        self.max2 = self.stick.GetRudderMax()
        self.diff2 = float((self.max2-self.min2)/2)
        self.min3 = self.stick.GetZMin()
        self.max3 = self.stick.GetZMax()
        self.diff3 = float((self.max3-self.min3)/2)
        if self.diff0 == 0.0 or self.diff1 == 0.0 or self.diff2 == 0.0 or self.diff3 == 0.0:
            dlg = wx.MessageDialog(self.frame, ' Joystick configuration error',' Joystick configuration error!', wx.OK|wx.ICON_EXCLAMATION)
            self.logger.debug('No Joystick')
            if dlge.ShowModal() == wx.ID_OK:
                dlge.Destroy() 
        #print       self.min0
        #print       self.max0
        #print       self.diff0
        #print       self.min1
        #print       self.max1
        #print       self.diff1
        #print       self.min2
        #print       self.max2
        #print       self.diff2
        #print       self.min3
        #print       self.max3
        #print       self.diff3
        
        
        
        
    def CheckStatus(self):
        ##if self.ControlingPIDRx == "0"   or self.ControlingPIDRx == str(App.Yellow.OwnPID) :
        if (self.ControlingPIDRx == "0" or self.ControlingPIDRx == str(App.Yellow.OwnPID) or self.ControlingPIDRx == '0000' ):     # If the system is available
            self.PermitOnline()
        else:
            self.DenyOnline()

        if (self.ControlingPIDRx == str(App.Yellow.OwnPID)) :       # If we are connected
        ##if (self.ControlingPIDRx == str(self.frame.Achse.OwnPID)) :       # If we are connected
            self.GoOnline()
        else:
            self.GoOffline()


    def OnClose(self,evt):

        try:
            App.Yellow.LTold              = 0
            App.Yellow.Modus              = 0
            App.Yellow.OwnPID             = 0
            App.Yellow.ControlingPIDTx    = 0
            App.Yellow.Intent             = 0
            App.Yellow.Enable             = 0
            App.Yellow.GuideControl       = 5
            App.Yellow.SpeedSoll          = 0
            App.Yellow.GuideSpeedSoll     = 0
            #print "Clean Exit"                  
            App.Yellow.comunicateServer()
            ##self.keepGoing = False
            taskMgr.remove("YellowAxisTask")
        except:
            ##self.keepGoing = False
            taskMgr.remove("YellowAxisTask")
            #print "Exit"
        
                             
#-------------------------------------------------------------------------------
class GreenAxisUI(wx.Frame):
    def __init__(self, parent, id, title):
        wx.Frame.__init__(self, parent, id, title,(225,473), (742, 428),
                          style =wx.FRAME_FLOAT_ON_PARENT|wx.FRAME_NO_TASKBAR)
        self.res = xrc.XmlResource("AchsSteuerungAxisSelectState1.xrc")
        ##self.res = xrc.XmlResource("AchsSteuerungRecover.xrc")        
        self.RootPanel = self.res.LoadPanel(self,'RootPanel')
        
        self.AxisSelected=False
        self.ControlingPIDRx=0
        self.Modus = 'rE' # initialisieren im read Edit Mode
        self.ClutchStatus = 1        
        self.init_Mainframe()
        self.init_MainframeEvents()
        self.DisableControls()        
        self.EStopReset =0
        self.Decode = Decode()
        self.ReSync = 0
        self.Recover = 0
        self.Modus = 0
        self.refreshSelect = "Blue"

        self.EnableOld = 0
        self.VX = 0
        self.Pos0 = 0
        self.T1Old  = time.clock()
        self.EStopMode = 'EStop'

    def init_Mainframe(self):
        self.ControlsEnabeled = False
        self.StatusPanelColour = "RedBrown"        
        '''Initialisiert die Objekte des Mainframes'''      
        self.StatusPanel        = xrc.XRCCTRL(self.RootPanel,'StatusPanel')
        self.SetupPanel         = xrc.XRCCTRL(self.RootPanel,'SetupPanel')
        self.SliderPanel        = xrc.XRCCTRL(self.RootPanel,'SliderPanel')
        self.SetupPositionPanel = xrc.XRCCTRL(self.RootPanel,'SetupPosition')
        self.SetupVelPanel      = xrc.XRCCTRL(self.RootPanel,'SetupVel')
        self.SetupGuidePanel    = xrc.XRCCTRL(self.RootPanel,'SetupGuide')
        self.SetupFilterPanel   = xrc.XRCCTRL(self.RootPanel,'SetupFilter')
        self.SetupRopePanel     = xrc.XRCCTRL(self.RootPanel,'SetupRope')
        self.EStopPanel         = xrc.XRCCTRL(self.RootPanel,'EStopPanel')
        self.BitPanel           = xrc.XRCCTRL(self.RootPanel,'BitPanel')
        self.RecoverPanel       = xrc.XRCCTRL(self.RootPanel,'RecoverPanel')

        # Kinder vom StatusPanel
        self.cmbAxisName       = xrc.XRCCTRL(self.StatusPanel,'cmbAxisName')
        self.cmbAxisName.SetEditable( False )
        self.Achsen=ACHSEN.keys()
        for a in range(len(ACHSEN.keys())):
            self.cmbAxisName.SetString(a,ACHSEN.keys()[a])
       
        self.txtAxisPos        = xrc.XRCCTRL(self.StatusPanel,'txtAxisPos')
        self.txtAxisPos.SetEditable( False )

        self.txtAxisVel        = xrc.XRCCTRL(self.StatusPanel,'txtAxisVel')
        self.txtAxisVel.SetEditable( False )

        self.txtAxisAmp        = xrc.XRCCTRL(self.StatusPanel,'txtAxisAmp')
        self.txtAxisAmp.SetEditable( False )
        self.sldAxisVel        = xrc.XRCCTRL(self.StatusPanel,'sldAxisVel')
        self.sldAxisVel.Enable(False)
        self.txtAxisError      = xrc.XRCCTRL(self.StatusPanel,'txtAxisError')
        self.txtAxisError.SetEditable( False )
        self.btnAxisReset      = xrc.XRCCTRL(self.StatusPanel,'btnAxisReset')    
        self.txtAxisTemp       = xrc.XRCCTRL(self.StatusPanel,'txtAxisTemp')
        self.txtAxisTemp.SetEditable( False )

        self.txtTimeTick       = xrc.XRCCTRL(self.StatusPanel,'txtTimeTick')
        self.txtTimeTick.SetEditable( False )
        
        self.rFBT              = xrc.XRCCTRL(self.BitPanel,'rFBT')
        self.rbReady           = xrc.XRCCTRL(self.BitPanel,'rbReady')
        self.rbPowered         = xrc.XRCCTRL(self.BitPanel,'rbPowered')
        self.rbBrake1          = xrc.XRCCTRL(self.BitPanel,'rbBrake1')
        self.rbBrake2          = xrc.XRCCTRL(self.BitPanel,'rbBrake2')
        self.txtSelected1       = xrc.XRCCTRL(self.BitPanel,'txtSelected1')
        self.txtSelected2       = xrc.XRCCTRL(self.BitPanel,'txtSelected2')
    
        self.txtCutPos         = xrc.XRCCTRL(self.RecoverPanel,'txtEStopCutPosition')
        self.txtCutVel         = xrc.XRCCTRL(self.RecoverPanel,'txtEStopCutVel')
        self.txtCutTime        = xrc.XRCCTRL(self.RecoverPanel,'txtEStopCutTime')
        self.txtPosDiff        = xrc.XRCCTRL(self.RecoverPanel,'txtEStopPosDiff')
        self.txtPosDiff.SetValue('0')
        self.btnRecover        = xrc.XRCCTRL(self.RecoverPanel,'btnRecover')
        self.btnReSync         = xrc.XRCCTRL(self.RecoverPanel,'btnReSync')
        
        # Kinder vom SetupPositionPanel
        self.btnAxisSetupPosEdit    = xrc.XRCCTRL(self.SetupPositionPanel,'btnAxisSetupPosEdit')
        
        self.txtAxisSetupPosHardMax = xrc.XRCCTRL(self.SetupPositionPanel,'txtAxisSetupPosHardMax')
        self.txtAxisSetupPosHardMax.SetValidator(NumValidator("digit"))
        self.txtAxisSetupPosHardMax.SetEditable( False )
        self.txtAxisSetupPosHardMax.SetValue('300.0')
        
        self.txtAxisSetupPosUserMax = xrc.XRCCTRL(self.SetupPositionPanel,'txtAxisSetupPosUserMax')
        self.txtAxisSetupPosUserMax.SetValidator(NumValidator("digit"))
        self.txtAxisSetupPosUserMax.SetEditable( False )
        self.txtAxisSetupPosUserMax.SetValue('300.0')
        
        self.txtAxisSetupPosIst     = xrc.XRCCTRL(self.SetupPositionPanel,'txtAxisSetupPosIst')
        self.txtAxisSetupPosIst.SetEditable( False )
        self.txtAxisSetupPosUserMin = xrc.XRCCTRL(self.SetupPositionPanel,'txtAxisSetupPosUserMin')
        self.txtAxisSetupPosUserMin.SetValidator(NumValidator("digit"))
        self.txtAxisSetupPosUserMin.SetEditable( False )
        self.txtAxisSetupPosUserMin.SetValue('-300.0')
        
        self.txtAxisSetupPosHardMin = xrc.XRCCTRL(self.SetupPositionPanel,'txtAxisSetupPosHardMin')
        self.txtAxisSetupPosHardMin.SetValidator(NumValidator("digit"))
        self.txtAxisSetupPosHardMin.SetEditable( False )
        self.txtAxisSetupPosHardMin.SetValue('-300.0')
        
        self.txtAxisSetupPosPosWin = xrc.XRCCTRL(self.SetupPositionPanel,'txtAxisSetupPosPosWin')
        self.txtAxisSetupPosPosWin.SetValidator(NumValidator("digit"))
        self.txtAxisSetupPosPosWin.SetEditable( False )
        self.txtAxisSetupPosPosWin.SetValue('1.50')
        
        self.btnAxisSetupPosWrite    = xrc.XRCCTRL(self.SetupPositionPanel,'btnAxisSetupPosWrite')
        self.btnAxisSetupPosCancel    = xrc.XRCCTRL(self.SetupPositionPanel,'btnAxisSetupPosCancel')
        
        # Kinder vom SetupVelPanel
        
        self.btnAxisSetupVelEdit = xrc.XRCCTRL(self.SetupVelPanel,'btnAxisSetupVelEdit')
        
        self.txtAxisSetupVelMaxMot  = xrc.XRCCTRL(self.SetupVelPanel,'txtAxisSetupVelMaxMot')
        self.txtAxisSetupVelMaxMot.SetEditable( False )
        
        self.txtAxisSetupVelMax  = xrc.XRCCTRL(self.SetupVelPanel,'txtAxisSetupVelMax')
        self.txtAxisSetupVelMax.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupVelMax.SetEditable( False )
        self.txtAxisSetupVelMax.SetValue('8.0')
        
        self.txtAxisSetupAccMax  = xrc.XRCCTRL(self.SetupVelPanel,'txtAxisSetupAccMax')
        self.txtAxisSetupAccMax.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupAccMax.SetEditable( False )
        self.txtAxisSetupAccMax.SetValue('5.5')
        
        self.txtAxisSetupDccMax  = xrc.XRCCTRL(self.SetupVelPanel,'txtAxisSetupDccMax')
        self.txtAxisSetupDccMax.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupDccMax.SetEditable( False )
        self.txtAxisSetupDccMax.SetValue('5.5')
        
        self.txtAxisSetupAccTot = xrc.XRCCTRL(self.SetupVelPanel,'txtAxisSetupAccTot')
        self.txtAxisSetupAccTot.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupAccTot.SetEditable( False )
        self.txtAxisSetupAccTot.SetValue('5.5')
        
        self.txtAxisSetupMaxAmp  = xrc.XRCCTRL(self.SetupVelPanel,'txtAxisSetupMaxAmp')
        self.txtAxisSetupMaxAmp.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupMaxAmp.SetEditable( False )
        self.txtAxisSetupMaxAmp.SetValue('150')
        
        self.txtAxisSetupVelWin  = xrc.XRCCTRL(self.SetupVelPanel,'txtAxisSetupVelWin')
        self.txtAxisSetupMaxAmp.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupVelWin.SetEditable( False )
        self.txtAxisSetupVelWin.SetValue('1.5')
        
        self.btnAxisSetupVelWrite    = xrc.XRCCTRL(self.SetupVelPanel,'btnAxisSetupVelWrite')
        self.btnAxisSetupVelCancel    = xrc.XRCCTRL(self.SetupVelPanel,'btnAxisSetupVelCancel')

        # Kinder vom SetupGuidePanel
        
        self.txtAxisSetupGuidePos = xrc.XRCCTRL(self.SetupGuidePanel, 'txtAxisSetupGuidePos')
        self.txtAxisSetupGuidePos.SetEditable( False )
        
        self.txtAxisSetupGuideVel = xrc.XRCCTRL(self.SetupGuidePanel, 'txtAxisSetupGuideVel')
        self.txtAxisSetupGuideVel.SetEditable( False )
        
        self.sldAxisSetupGuideVel        = xrc.XRCCTRL(self.SetupGuidePanel,'sldAxisSetupGuideVel')
        self.sldAxisSetupGuideVel.Enable(False)
        
        self.btnAxisSetupGuideSetup  = xrc.XRCCTRL(self.SetupGuidePanel,'btnAxisSetupGuideSetup')
        
        self.txtAxisSetupGuideError  = xrc.XRCCTRL(self.SetupGuidePanel,'txtAxisSetupGuideError')
        self.txtAxisSetupGuideError.SetEditable( False )
        
        self.btnAxisSetupGuideReset  = xrc.XRCCTRL(self.SetupGuidePanel,'btnAxisSetupGuideReset')
        self.btnAxisSetupGuideReset.Enable(False)
        
        self.txtAxisSetupGuidePitch  = xrc.XRCCTRL(self.SetupGuidePanel,'txtAxisSetupGuidePitch')
        self.txtAxisSetupGuidePitch.SetValidator(NumValidator("digit"))
        self.txtAxisSetupGuidePitch.SetEditable( False )
        
        self.btnAxisSetupGuideWrite    = xrc.XRCCTRL(self.SetupGuidePanel,'btnAxisSetupGuideWrite')
        
        self.txtAxisSetupGuidePosMax = xrc.XRCCTRL(self.SetupGuidePanel,'txtAxisSetupGuidePosMax')
        self.txtAxisSetupGuidePosMax.SetValidator(NumValidator("digit"))
        self.txtAxisSetupGuidePosMax.SetEditable( False )
        
        self.txtAxisSetupGuidePosMaxMax = xrc.XRCCTRL(self.SetupGuidePanel,'txtAxisSetupGuidePosMaxMax')
        self.txtAxisSetupGuidePosMaxMax.SetEditable( False )        
        
        self.txtAxisSetupGuidePosMin = xrc.XRCCTRL(self.SetupGuidePanel,'txtAxisSetupGuidePosMin')
        self.txtAxisSetupGuidePosMin.SetValidator(NumValidator("digit"))
        self.txtAxisSetupGuidePosMin.SetEditable( False )
        self.txtAxisSetupGuidePosMin.SetValue('0.0')
        
        self.btnAxisSetupGuideCancel    = xrc.XRCCTRL(self.SetupGuidePanel,'btnAxisSetupGuideCancel')
        
        self.btnAxisSetupGuideClutch    = xrc.XRCCTRL(self.SetupGuidePanel,'btnAxisSetupGuideClutch')
        self.btnAxisSetupGuideClutch.SetValue(True)
        
        self.btnAxisSetupGuideMoveLeft  = xrc.XRCCTRL(self.SetupGuidePanel,'btnAxisSetupGuideMoveLeft')
        self.btnAxisSetupGuideMoveStop  = xrc.XRCCTRL(self.SetupGuidePanel,'btnAxisSetupGuideMoveStop')
        self.btnAxisSetupGuideMoveRight = xrc.XRCCTRL(self.SetupGuidePanel,'btnAxisSetupGuideMoveRight')
        
        self.rbSReady           = xrc.XRCCTRL(self.SetupGuidePanel,'rbSReady')
        self.rbSPowered         = xrc.XRCCTRL(self.SetupGuidePanel,'rbSPowered')
        


        # Kinder vom SetupFilterPanel
        self.btnAxisSetupFilterEdit = xrc.XRCCTRL(self.SetupFilterPanel,'btnAxisSetupFilterEdit')
        self.txtAxisSetupFilterLagError    = xrc.XRCCTRL(self.SetupFilterPanel,'txtAxisSetupFilterLagError')
        self.txtAxisSetupFilterLagError.SetEditable( False )
        self.txtAxisSetupFilterP    = xrc.XRCCTRL(self.SetupFilterPanel,'txtAxisSetupFilterP')
        self.txtAxisSetupFilterP.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupFilterP.SetEditable( False )
        self.txtAxisSetupFilterI    = xrc.XRCCTRL(self.SetupFilterPanel,'txtAxisSetupFilterI')
        self.txtAxisSetupFilterI.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupFilterI.SetEditable( False )
        self.txtAxisSetupFilterD    = xrc.XRCCTRL(self.SetupFilterPanel,'txtAxisSetupFilterD')
        self.txtAxisSetupFilterD.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupFilterD.SetEditable( False )
        self.txtAxisSetupFilterIL    = xrc.XRCCTRL(self.SetupFilterPanel,'txtAxisSetupFilterIL')
        self.txtAxisSetupFilterIL.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupFilterIL.SetEditable( False )
        self.txtAxisSetupFilterRampform = xrc.XRCCTRL(self.SetupFilterPanel,'txtAxisSetupFilterRampform')
        self.txtAxisSetupFilterRampform.SetEditable( False )
        self.btnAxisSetupFilterWrite    = xrc.XRCCTRL(self.SetupFilterPanel,'btnAxisSetupFilterWrite')
        self.btnAxisSetupFilterCancel    = xrc.XRCCTRL(self.SetupFilterPanel,'btnAxisSetupFilterCancel')

        # Kinder vom SetupRopePanel
        
        self.btnAxisSetupRopeEdit     = xrc.XRCCTRL(self.SetupRopePanel,'btnAxisSetupRopeEdit')
        self.btnAxisSetupRopeEdit.Enable(False)
        self.txtAxisSetupRopeSWLL     = xrc.XRCCTRL(self.SetupRopePanel,'txtAxisSetupRopeSWLL')
        self.txtAxisSetupRopeSWLL.SetEditable( False )
        self.txtAxisSetupRopeDiameter = xrc.XRCCTRL(self.SetupRopePanel,'txtAxisSetupRopeDiameter')
        self.txtAxisSetupRopeDiameter.SetEditable( False )
        self.txtAxisSetupRopeType     = xrc.XRCCTRL(self.SetupRopePanel,'txtAxisSetupRopeType')
        self.txtAxisSetupRopeType.SetEditable( False )
        self.txtAxisSetupRopeNumber   = xrc.XRCCTRL(self.SetupRopePanel,'txtAxisSetupRopeNumber')
        self.txtAxisSetupRopeNumber.SetEditable( False )
        self.txtAxisSetupRopeLength   = xrc.XRCCTRL(self.SetupRopePanel,'txtAxisSetupRopeLength')
        self.txtAxisSetupRopeLength.SetEditable( False )
        self.btnAxisSetupRopeWrite    = xrc.XRCCTRL(self.SetupRopePanel,'btnAxisSetupRopeWrite')
        self.btnAxisSetupRopeCancel    = xrc.XRCCTRL(self.SetupRopePanel,'btnAxisSetupRopeCancel')
        
        # Kinder vom EStopPanel
        
        self.rMaster          = xrc.XRCCTRL(self.EStopPanel,'rMaster')
        self.rMaster.SetValue(True)
         
        self.rSlave           = xrc.XRCCTRL(self.EStopPanel,'rSlave')
        self.rSlave.SetValue(True)
        
        self.rNetwork         = xrc.XRCCTRL(self.EStopPanel,'rNetwork')
        self.rNetwork.SetValue(True)
        
        self.btnEReset        = xrc.XRCCTRL(self.EStopPanel,'btnEReset')
        
        self.rEStop1          = xrc.XRCCTRL(self.EStopPanel,'rEStop1')
        self.rEStop1.SetValue(True)
        
        self.rEStop2          = xrc.XRCCTRL(self.EStopPanel,'rEStop2')
        self.rEStop2.SetValue(True)
        
        self.rSteuerwort       = xrc.XRCCTRL(self.EStopPanel,'rSteuerwort')
        self.rSteuerwort.SetValue(True)
        
        self.r30kWOK          = xrc.XRCCTRL(self.EStopPanel,'r30kWOK')
        self.r30kWOK.SetValue(True)
        
        self.r05kWOK          = xrc.XRCCTRL(self.EStopPanel,'r05kWOK')
        self.r05kWOK.SetValue(True)
        
        self.rB1OK            = xrc.XRCCTRL(self.EStopPanel,'rB1OK')
        self.rB1OK.SetValue(True)
        
        self.rB2OK            = xrc.XRCCTRL(self.EStopPanel,'rB2OK')
        self.rB2OK.SetValue(True)
        
        self.rDSC             = xrc.XRCCTRL(self.EStopPanel,'rDCS')
        self.rDSC.SetValue(True)
        
        self.rSPSOK          = xrc.XRCCTRL(self.EStopPanel,'rSPSOK')
        self.rSPSOK.SetValue(True)
        
        self.rBRK2KB         = xrc.XRCCTRL(self.EStopPanel,'rBRK2KB')
        self.rBRK2KB.SetValue(True)
        
        self.rPosWin          = xrc.XRCCTRL(self.EStopPanel,'rPosWin')
        self.rPosWin.SetValue(True)
        
        self.rVelWin          = xrc.XRCCTRL(self.EStopPanel,'rVelWin')
        self.rVelWin.SetValue(True)
        
        self.rEndlage         = xrc.XRCCTRL(self.EStopPanel,'rEndlage')
        self.rEndlage.SetValue(True)
        
        self.rG1COM           = xrc.XRCCTRL(self.EStopPanel,'rG1COM')
        self.rG1COM.SetValue(True)
        
        self.rG1OUT           = xrc.XRCCTRL(self.EStopPanel,'rG1OUT')
        self.rG1OUT.SetValue(True)
        
        self.rG1FB            = xrc.XRCCTRL(self.EStopPanel,'rG1FB')
        self.rG1FB.SetValue(True)
        
        self.rG2COM           = xrc.XRCCTRL(self.EStopPanel,'rG2COM')
        self.rG2COM.SetValue(True)
        
        self.rG2OUT           = xrc.XRCCTRL(self.EStopPanel,'rG2OUT')
        self.rG2OUT.SetValue(True)
        
        self.rG2FB            = xrc.XRCCTRL(self.EStopPanel,'rG2FB')
        self.rG2FB.SetValue(True)
        
        self.rG3COM           = xrc.XRCCTRL(self.EStopPanel,'rG3COM')
        self.rG3COM.SetValue(True)
        
        self.rG3OUT           = xrc.XRCCTRL(self.EStopPanel,'rG3OUT')
        self.rG3OUT.SetValue(True)
       
        self.rG3FB            = xrc.XRCCTRL(self.EStopPanel,'rG3FB')
        self.rG3FB.SetValue(True)      

    def init_MainframeEvents(self):
        self.Command = 0
        self.EnableStatus = 0
        self.Controlle = False
        self.Online    = False
        self.Bind(wx.EVT_COMBOBOX, self.OnAxisSelect, id=xrc.XRCID('cmbAxisName'))
        self.Bind(wx.EVT_TOGGLEBUTTON, self.OnAxisReset, id=xrc.XRCID('btnAxisReset'))

        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupPosEdit, id=xrc.XRCID('btnAxisSetupPosEdit'))
        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupPosWrite, id=xrc.XRCID('btnAxisSetupPosWrite'))
        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupPosCancel, id=xrc.XRCID('btnAxisSetupPosCancel'))

        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupVelEdit, id=xrc.XRCID('btnAxisSetupVelEdit'))
        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupVelWrite, id=xrc.XRCID('btnAxisSetupVelWrite'))
        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupVelCancel, id=xrc.XRCID('btnAxisSetupVelCancel'))

        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupGuideSetup, id=xrc.XRCID('btnAxisSetupGuideSetup'))
        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupGuideWrite, id=xrc.XRCID('btnAxisSetupGuideWrite'))
        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupGuideCancel, id=xrc.XRCID('btnAxisSetupGuideCancel'))
        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupGuideReset,  id=xrc.XRCID('btnAxisSetupGuideReset'))

        self.Bind(wx.EVT_TOGGLEBUTTON, self.OnAxisSetupGuideClutch, id=xrc.XRCID('btnAxisSetupGuideClutch'))

        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupFilterEdit, id=xrc.XRCID('btnAxisSetupFilterEdit'))        
        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupFilterWrite, id=xrc.XRCID('btnAxisSetupFilterWrite'))
        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupFilterCancel, id=xrc.XRCID('btnAxisSetupFilterCancel'))
        
        self.Bind(wx.EVT_TOGGLEBUTTON, self.OnEReset, id=xrc.XRCID('btnEReset'))
        self.Bind(wx.EVT_BUTTON, self.OnReSync, id = xrc.XRCID('btnReSync'))
        
        self.txtAxisError.Bind(wx.EVT_LEFT_DOWN, self.OnAxisErrorClick, id=xrc.XRCID('txtAxisError'))
        self.txtAxisSetupGuideError.Bind(wx.EVT_LEFT_DOWN, self.OnAxisGuideErrorClick, id=xrc.XRCID('txtAxisSetupGuideError'))
        
        self.Bind(wx.EVT_BUTTON, self.OnRecoverClick, id=xrc.XRCID('btnRecover'))

    def OnRecoverClick(self,evt):        
        if self.btnRecover.GetLabel() != 'Running':
            self.btnRecover.SetLabel('Running')    
            self.Modus ='recover'
        else:
            self.btnRecover.SetLabel('Recover')
            self.Modus = 'r'
        evt.Skip()

    def OnReSync(self,evt):
        #print 'ReSync'
        App.Green.ReSync = 1
        for i in range(10):
            App.Green.comunicateServer()
        App.Green.ReSync = 0
        
    def OnAxisErrorClick(self,evt):
        
        ##rect = self.GetRect()
        ##x1, y1 = rect.GetTopLeft() 
        ##a=self.Decode.Decode(self.Achse.Status)                                                    #[2] Axis Status  
        ##self.test = wx.TipWindow(self, str(a[0]))
        ##self.test.SetBoundingRect(wx.Rect(x1+480,y1+20,x1+580,y1+100))
        
        try:
            App.Yellow
            App.Green
            App.Cyan
            App.Magenta
            AchsenInitialisiert=True
        except:
            AchsenInitialisiert=False
        if AchsenInitialisiert:
            rect = self.GetRect()
            x1, y1 = rect.GetTopLeft() 
            a=self.Decode.Decode(App.Green.Status)                                                    #[2] Axis Status  
            self.test = wx.TipWindow(self, str(a[0]))
            self.test.SetBoundingRect(wx.Rect(x1+400,y1,x1+580,y1+200))
    
    def OnAxisGuideErrorClick(self,evt):
        
        ##rect = self.GetRect()
        ##x1, y1 = rect.GetTopLeft() 
        ##a=self.Decode.Decode(self.Achse.GuideStatus)                                                    #[2] Axis Status  
        ##self.test = wx.TipWindow(self, str(a[0]))
        ##self.test.SetBoundingRect(wx.Rect(x1+285,y1+20,x1+580,y1+100))
        
        try:
            App.Yellow
            App.Green
            App.Cyan
            App.Magenta
            AchsenInitialisiert=True
        except:
            AchsenInitialisiert=False
        if AchsenInitialisiert:
            rect = self.GetRect()
            x1, y1 = rect.GetTopLeft() 
            a=self.Decode.Decode(App.Green.GuideStatus)                                                    #[2] Axis Status  
            self.test = wx.TipWindow(self, str(a[0]))
            self.test.SetBoundingRect(wx.Rect(x1+285,y1,x1+580,y1+200))
            
    def OnAxisReset(self, evt):
        
        if self.btnAxisReset.GetValue():
            self.btnAxisReset.SetLabel("reseting")
        else:        
            self.btnAxisReset.SetLabel("Reset")
    def OnAxisEnable(self,evt):

        if self.btnAxisReset.GetValue():
            self.EnableStatus = 64
        else:
            if self.Modus == 'JoyEnabeled' or self.Modus == 'recover' :
                self.cmbAxisName.Enable(False)
                self.EnableStatus = 1
            else:
                self.EnableStatus = 0
                self.Modus = 'r'
               
        if (evt & 32):
            if self.StatusPanelColour != "Green":
                self.StatusPanel.SetBackgroundColour((0,150,0))
                self.StatusPanel.Refresh()
                self.sldAxisVel.Refresh
                self.StatusPanelColour = "Green"
        else:
            if self.StatusPanelColour != "RedBrown":             
                self.StatusPanel.SetBackgroundColour((128,128,128))
                self.StatusPanel.Refresh()
                self.sldAxisVel.Refresh
                self.StatusPanelColour = "RedBrown"                
            #Clutch
                


    #--------------------------------------------------------------- 
    def OnAxisSetupPosEdit(self, evt):
        #print "AxisSetupPosEdit"
        self.DisableControls()
        self.Modus = 'E' # Setup Pos Edit
        self.btnAxisSetupPosWrite.Enable(True)
        self.btnAxisSetupPosCancel.Enable(True)

        self.PosHardMax     = self.txtAxisSetupPosHardMax.GetValue()
        self.PosUserMax     = self.txtAxisSetupPosUserMax.GetValue()
        self.PosUserMin     = self.txtAxisSetupPosUserMin.GetValue()
        self.PosHardMin     = self.txtAxisSetupPosHardMin.GetValue()
        self.PosWin         = self.txtAxisSetupPosPosWin.GetValue()

        self.txtAxisSetupPosHardMax.SetEditable( True )
        self.txtAxisSetupPosUserMax.SetEditable( True )
        self.txtAxisSetupPosUserMin.SetEditable( True )
        self.txtAxisSetupPosHardMin.SetEditable( True )
        self.txtAxisSetupPosPosWin.SetEditable( True )
        self.txtAxisSetupPosHardMax.SetBackgroundColour(wx.Colour(255,255,255))
        self.txtAxisSetupPosUserMax.SetBackgroundColour(wx.Colour(255,255,255))
        #self.txtAxisSetupPosIst.SetBackgroundColour(wx.Colour(255,255,255))
        self.txtAxisSetupPosUserMin.SetBackgroundColour(wx.Colour(255,255,255))
        self.txtAxisSetupPosHardMin.SetBackgroundColour(wx.Colour(255,255,255))
        self.txtAxisSetupPosPosWin.SetBackgroundColour(wx.Colour(255,255,255))

    def OnAxisSetupPosWrite(self, evt):
        #print "AxisSetupPosWrite"  
        self.EnableControls()
        self.btnAxisSetupPosWrite.Enable(False)
        self.btnAxisSetupPosCancel.Enable(False)
        
        
        if not((float(self.txtAxisSetupPosHardMax.GetValue()) >= float(self.txtAxisSetupPosUserMax.GetValue())) and
               (float(self.txtAxisSetupPosUserMax.GetValue()) >  float(self.txtAxisSetupPosUserMin.GetValue())) and
               (float(self.txtAxisSetupPosUserMin.GetValue()) >= float(self.txtAxisSetupPosHardMin.GetValue()))):
            dlg=wx.MessageDialog(None,'Limits not monotone! Values uncanged','Error User Limit',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy
            self.txtAxisSetupPosHardMax.SetValue(str(self.PosHardMax))
            self.txtAxisSetupPosUserMax.SetValue(str(self.PosUserMax))
            self.txtAxisSetupPosUserMin.SetValue(str(self.PosUserMin))
            self.txtAxisSetupPosHardMin.SetValue(str(self.PosHardMin))
            self.txtAxisSetupPosHardMax.Refresh()
            self.txtAxisSetupPosUserMax.Refresh()
            self.txtAxisSetupPosUserMin.Refresh()
            self.txtAxisSetupPosHardMin.Refresh()

        #PosWin            
        if ((float(self.txtAxisSetupPosPosWin.GetValue()) > 1.5 ) or
            float(self.txtAxisSetupPosPosWin.GetValue()) < 0.01):
            dlg=wx.MessageDialog(None,'0.01 m < PosWin < 1.5 m ; Reset to Last Value','Error Wrong Input',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy        
            self.txtAxisSetupPosPosWin.SetValue(self.PosWin)
            self.txtAxisSetupPosPosWin.Refresh()
        else:             
            self.PosPosWin    = float(self.txtAxisSetupPosPosWin.GetValue()) 



        self.Modus = 'w'

        self.txtAxisSetupPosHardMax.SetEditable( False )
        self.txtAxisSetupPosUserMax.SetEditable( False )
        self.txtAxisSetupPosUserMin.SetEditable( False )
        self.txtAxisSetupPosHardMin.SetEditable( False )
        self.txtAxisSetupPosPosWin.SetEditable( False )
        self.txtAxisSetupPosHardMax.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupPosUserMax.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupPosIst.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupPosUserMin.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupPosHardMin.SetBackgroundColour(wx.Colour(187,187,187)) 
        self.txtAxisSetupPosPosWin.SetBackgroundColour(wx.Colour(187,187,187))

    def OnAxisSetupPosCancel(self, evt):
        #print "AxisSetupPosCancel" 
        self.EnableControls()
        self.Modus = 'r'#setup Pos Cancel
        self.btnAxisSetupPosWrite.Enable(False)
        self.btnAxisSetupPosCancel.Enable(False)

        self.txtAxisSetupPosHardMax.SetValue(self.PosHardMax)
        self.txtAxisSetupPosUserMax.SetValue(self.PosUserMax)
        self.txtAxisSetupPosUserMin.SetValue(self.PosUserMin)
        self.txtAxisSetupPosHardMin.SetValue(self.PosHardMin)
        self.txtAxisSetupPosPosWin.SetValue(self.PosWin)

        self.txtAxisSetupPosHardMax.SetEditable( False )
        self.txtAxisSetupPosUserMax.SetEditable( False )
        self.txtAxisSetupPosUserMin.SetEditable( False )
        self.txtAxisSetupPosHardMin.SetEditable( False )
        self.txtAxisSetupPosPosWin.SetEditable( False )
        self.txtAxisSetupPosHardMax.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupPosUserMax.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupPosIst.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupPosUserMin.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupPosHardMin.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupPosPosWin.SetBackgroundColour(wx.Colour(187,187,187))

    #---------------------------------------------------------------
    def OnAxisSetupVelEdit(self, evt):
        #print "AxisSetupVelEdit"  
        self.DisableControls()
        self.Modus = 'E'#setup Vel Edit
        self.btnAxisSetupVelWrite.Enable(True)
        self.btnAxisSetupVelCancel.Enable(True)

        self.VelMax     = abs(float(self.txtAxisSetupVelMax.GetValue()))           
        self.AccMax     = abs(float(self.txtAxisSetupAccMax.GetValue()))
        self.DccMax     = abs(float(self.txtAxisSetupDccMax.GetValue()))
        self.AccTot     = abs(float(self.txtAxisSetupAccTot.GetValue()))
        self.MaxAmp     = abs(float(self.txtAxisSetupMaxAmp.GetValue()))
        self.VelWin     = abs(float(self.txtAxisSetupVelWin.GetValue()))        

        self.txtAxisSetupVelMax.SetEditable( True )
        self.txtAxisSetupAccMax.SetEditable( True )
        self.txtAxisSetupDccMax.SetEditable( True )
        self.txtAxisSetupAccTot.SetEditable( True )
        self.txtAxisSetupMaxAmp.SetEditable( True )
        self.txtAxisSetupVelWin.SetEditable( True )
        self.txtAxisSetupVelMax.SetBackgroundColour(wx.Colour(255,255,255))        
        self.txtAxisSetupAccMax.SetBackgroundColour(wx.Colour(255,255,255))
        self.txtAxisSetupDccMax.SetBackgroundColour(wx.Colour(255,255,255))       
        self.txtAxisSetupAccTot.SetBackgroundColour(wx.Colour(255,255,255))        
        self.txtAxisSetupMaxAmp.SetBackgroundColour(wx.Colour(255,255,255))
        self.txtAxisSetupVelWin.SetBackgroundColour(wx.Colour(255,255,255))

    def OnAxisSetupVelWrite(self, evt):
        #print "AxisSetupVelWrite" 
        self.EnableControls()
        #self.btnAxisSetupVelWrite.Enable(False)
        #self.btnAxisSetupVelCancel.Enable(False)
        #MaxVel
        if (abs(float(self.txtAxisSetupVelMax.GetValue())) > 
            abs(float(self.txtAxisSetupVelMaxMot.GetValue()))):
            dlg=wx.MessageDialog(None,'MaxVel larger than MaxVel Motor; Value uncanged','Error User Limit',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy
            modifyMaxVel = False
        else:
            modifyMaxVel = True       
        #MaxAmp
        if (float(self.txtAxisSetupMaxAmp.GetValue()) > 150.0 or 
            float(self.txtAxisSetupMaxAmp.GetValue()) < 50 ):
            dlg=wx.MessageDialog(None,'50% < MaxAmp < 150% ; Reset to Last Value','Error Wrong Input',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy        
            modifyMaxAmp = False
        else:             
            modifyMaxAmp = True           
        #VelWin       
        if (float(self.txtAxisSetupVelWin.GetValue()) > 1.5 or 
            float(self.txtAxisSetupVelWin.GetValue()) < 0.01):
            dlg=wx.MessageDialog(None,'0.01 m/s < VelWin < 1.5 m/s; Reset to Last Value','Error Wrong Input',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy        
            modifyVelWin = False
        else:             
            modifyVelWin = True
            #AccMove        
        if (float(self.txtAxisSetupAccTot.GetValue()) > 10.0 or 
            float(self.txtAxisSetupAccTot.GetValue()) < 1.5 ):
            dlg=wx.MessageDialog(None,'1.5 m/ss< Acc Move < 10 m/ss; Value uncanged','Error Wrong Input',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy        
            modifyAccMove = False
        else:
            modifyAccMove = True         
        #AccMax    
        if (abs(float(self.txtAxisSetupAccMax.GetValue())) > abs(float(self.txtAxisSetupAccTot.GetValue())) or
            abs(float(self.txtAxisSetupDccMax.GetValue())) > abs(float(self.txtAxisSetupAccTot.GetValue()))):
            dlg=wx.MessageDialog(None,'Acc/Dcc/AccMove Mismatch; Values unchanged','Error AccMax',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy
            modifyAccDccAccMove = False
        else:
            modifyAccDccAccMove = True
               
        
        if modifyMaxVel and modifyMaxAmp and modifyVelWin and modifyAccDccAccMove and modifyAccMove :
            self.VelMax     = abs(float(self.txtAxisSetupVelMax.GetValue()))
            self.MaxAmp     = float(self.txtAxisSetupMaxAmp.GetValue())
            self.VelWin     = float(self.txtAxisSetupVelWin.GetValue()) 
            self.AccMax     = abs(float(self.txtAxisSetupAccMax.GetValue()))
            self.DccMax     = abs(float(self.txtAxisSetupDccMax.GetValue()))
            self.AccTot     = abs(float(self.txtAxisSetupAccTot.GetValue()))
            self.btnAxisSetupVelWrite.Enable(False)
            self.btnAxisSetupVelCancel.Enable(False)            
        else:
            self.txtAxisSetupVelMax.SetValue(str(self.VelMax))
            self.txtAxisSetupMaxAmp.SetValue(str(self.MaxAmp))
            self.txtAxisSetupVelWin.SetValue(str(self.VelWin))            
            self.txtAxisSetupAccMax.SetValue(str(abs(self.AccMax)))     
            self.txtAxisSetupDccMax.SetValue(str(abs(self.DccMax)))     
            self.txtAxisSetupAccTot.SetValue(str(abs(self.AccTot)))
            self.btnAxisSetupVelWrite.Enable(True)
            self.btnAxisSetupVelCancel.Enable(True)            
            

        self.Modus = 'w'

        self.txtAxisSetupVelMax.SetEditable( False )
        self.txtAxisSetupAccMax.SetEditable( False )
        self.txtAxisSetupDccMax.SetEditable( False )
        self.txtAxisSetupAccTot.SetEditable( False )
        self.txtAxisSetupMaxAmp.SetEditable( False )
        self.txtAxisSetupVelWin.SetEditable( False )
        self.txtAxisSetupVelMax.SetBackgroundColour(wx.Colour(187,187,187))        
        self.txtAxisSetupAccMax.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupDccMax.SetBackgroundColour(wx.Colour(187,187,187))       
        self.txtAxisSetupAccTot.SetBackgroundColour(wx.Colour(187,187,187))        
        self.txtAxisSetupMaxAmp.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupVelWin.SetBackgroundColour(wx.Colour(187,187,187))


    def OnAxisSetupVelCancel(self, evt):
        #print "AxisSetupVelCancel" 
        self.EnableControls()
        self.Modus = 'r'#setup Vel Cancel
        self.btnAxisSetupVelWrite.Enable(False)
        self.btnAxisSetupVelCancel.Enable(False)

        self.txtAxisSetupVelMax.SetValue(str(self.VelMax))
        self.txtAxisSetupAccMax.SetValue(str(self.AccMax))
        self.txtAxisSetupDccMax.SetValue(str(self.DccMax))
        self.txtAxisSetupAccTot.SetValue(str(self.AccTot))
        self.txtAxisSetupMaxAmp.SetValue(str(self.MaxAmp))
        self.txtAxisSetupVelWin.SetValue(str(self.VelWin))
        

        self.txtAxisSetupVelMax.SetEditable( False )
        self.txtAxisSetupAccMax.SetEditable( False )
        self.txtAxisSetupDccMax.SetEditable( False )
        self.txtAxisSetupAccTot.SetEditable( False )
        self.txtAxisSetupMaxAmp.SetEditable( False )
        self.txtAxisSetupVelWin.SetEditable( False )
        self.txtAxisSetupVelMax.SetBackgroundColour(wx.Colour(187,187,187))        
        self.txtAxisSetupAccMax.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupDccMax.SetBackgroundColour(wx.Colour(187,187,187))       
        self.txtAxisSetupAccTot.SetBackgroundColour(wx.Colour(187,187,187))        
        self.txtAxisSetupMaxAmp.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupVelWin.SetBackgroundColour(wx.Colour(187,187,187)) 

#----------------------------------------------------------------
    def OnAxisSetupGuideSetup(self, evt):
        #print "AxisSetupGuideSetup"
        self.DisableControls()
        self.Modus = 'E' # Setup Pos Edit

        self.btnAxisSetupGuideReset.Enable(False)
        self.btnAxisSetupGuideWrite.Enable(True)
        self.btnAxisSetupGuideCancel.Enable(True)


        self.GuidePitch     = self.txtAxisSetupGuidePitch.GetValue()
        self.GuidePosMax    = self.txtAxisSetupGuidePosMax.GetValue()
        self.GuidePosMin    = self.txtAxisSetupGuidePosMin.GetValue()

        self.txtAxisSetupGuidePitch.SetEditable( True )
        self.txtAxisSetupGuidePosMax.SetEditable( True )
        #self.txtAxisSetupGuidePosMin.SetEditable( True ) # Muss erst in SPS implementiert werden
        self.txtAxisSetupGuidePitch.SetBackgroundColour(wx.Colour(255,255,255))
        self.txtAxisSetupGuidePosMax.SetBackgroundColour(wx.Colour(255,255,255))
        #self.txtAxisSetupGuidePosMin.SetBackgroundColour(wx.Colour(255,255,255)) # Muss erst in SPS implementiert werden

    def OnAxisSetupGuideWrite(self, evt):
        #print "AxisSetupGuideWrite"
        self.EnableControls()
        self.btnAxisSetupGuideReset.Enable(True)

        self.btnAxisSetupGuideWrite.Enable(False)
        self.btnAxisSetupGuideCancel.Enable(False)
        
        if (abs(float(self.txtAxisSetupGuidePitch.GetValue())) > 15 ):
            dlg=wx.MessageDialog(None,'Guide Pitch > 15mm; Value uncanged','Error Pitch',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy
            self.txtAxisSetupGuidePitch.SetValue(str(self.GuidePitch))
            self.txtAxisSetupGuidePitch.Refresh() 
            
        if ((float(self.txtAxisSetupGuidePosMax.GetValue())) < 0.05 or
            (float(self.txtAxisSetupGuidePosMax.GetValue())) > (float(self.txtAxisSetupGuidePosMaxMax.GetValue())) ):
            dlg=wx.MessageDialog(None,'Pos Max Guider out of bounds; Value unchanged','Error Pos Max',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy
            self.txtAxisSetupGuidePosMax.SetValue(str(self.GuidePosMax))
            self.txtAxisSetupGuidePosMax.Refresh()
            
        self.GuidePitch     = self.txtAxisSetupGuidePitch.GetValue()
        self.GuidePosMax    = self.txtAxisSetupGuidePosMax.GetValue()
        self.GuidePosMin    = self.txtAxisSetupGuidePosMin.GetValue()

        self.Modus = 'w'

        self.txtAxisSetupGuidePitch.SetEditable( False )
        self.txtAxisSetupGuidePosMax.SetEditable( False )
        self.txtAxisSetupGuidePosMin.SetEditable( False )
        self.txtAxisSetupGuidePitch.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupGuidePosMax.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupGuidePosMin.SetBackgroundColour(wx.Colour(187,187,187)) 

    def OnAxisSetupGuideCancel(self, evt):
        #print "AxisSetupGuideCancel" 
        self.EnableControls()
        
        self.Modus= 'r'

        self.btnAxisSetupGuideReset.Enable(True)
        self.btnAxisSetupGuideWrite.Enable(False)
        self.btnAxisSetupGuideCancel.Enable(False)

        self.txtAxisSetupGuidePitch.SetValue(self.GuidePitch )
        self.txtAxisSetupGuidePosMax.SetValue(self.GuidePosMax)
        self.txtAxisSetupGuidePosMin.SetValue(self.GuidePosMin)

        self.txtAxisSetupGuidePitch.SetEditable( False )
        self.txtAxisSetupGuidePosMax.SetEditable( False )
        self.txtAxisSetupGuidePosMin.SetEditable( False )
        self.txtAxisSetupGuidePitch.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupGuidePosMax.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupGuidePosMin.SetBackgroundColour(wx.Colour(187,187,187)) 


    def OnAxisSetupGuideReset(self, evt):
        #print "AxisSetupGuideReset"
        self.btnAxisSetupGuideClutch.SetLabel('reseting')
        dlg=wx.MessageDialog(None,'Pls Cycle Activation Switch after closing this Dialog','Slave reset',wx.OK|wx.ICON_EXCLAMATION)
        result=dlg.ShowModal()
        dlg.Destroy          
        
    def OnAxisSetupGuideClutch(self, evt):
        #print "AxisSetupGuideClutch"        
        if self.btnAxisSetupGuideClutch.GetValue():
            #print "  engage Clutch"
            self.ClutchStatus = 1
            self.GuideControl = 5
            self.DisableGuideControls() 
            self.btnAxisSetupGuideClutch.SetLabel('engaged')
        else:

            #print "  Dis-engage Clutch"
            self.ClutchStatus = 0
            self.GuideControl = 2
            self.EnableGuideControls()
            self.btnAxisSetupGuideClutch.SetLabel('dis-engaged')

    
#----------------------------------------------------------------
    def OnAxisSetupFilterEdit(self, evt):
        #print "AxisSetupFilterEdit" 
        self.DisableControls()
        self.Modus = 'E'#setup Filter Edit
        self.btnAxisSetupFilterWrite.Enable(True)
        self.btnAxisSetupFilterCancel.Enable(True)

        self.P      = self.txtAxisSetupFilterP.GetValue()
        self.I      = self.txtAxisSetupFilterI.GetValue()
        self.D     = self.txtAxisSetupFilterD.GetValue()
        self.IL     = self.txtAxisSetupFilterIL.GetValue()

        self.txtAxisSetupFilterP.SetEditable( True )
        self.txtAxisSetupFilterI.SetEditable( True )
        self.txtAxisSetupFilterD.SetEditable( True )
        self.txtAxisSetupFilterIL.SetEditable( True )
        self.txtAxisSetupFilterP.SetBackgroundColour(wx.Colour(255,255,255))        
        self.txtAxisSetupFilterI.SetBackgroundColour(wx.Colour(255,255,255))        
        self.txtAxisSetupFilterD.SetBackgroundColour(wx.Colour(255,255,255))
        self.txtAxisSetupFilterIL.SetBackgroundColour(wx.Colour(255,255,255))

    def OnAxisSetupFilterWrite(self, evt):
        #print "AxisSetupFilterWrite"
        self.EnableControls()
        self.btnAxisSetupFilterWrite.Enable(False)
        self.btnAxisSetupFilterCancel.Enable(False)

        self.P     = self.txtAxisSetupFilterP.GetValue()
        self.I      = self.txtAxisSetupFilterI.GetValue()
        self.D     = self.txtAxisSetupFilterD.GetValue()
        self.IL    = self.txtAxisSetupFilterIL.GetValue()

        self.Modus = 'w'

        self.txtAxisSetupFilterP.SetEditable( False )
        self.txtAxisSetupFilterI.SetEditable( False )
        self.txtAxisSetupFilterD.SetEditable( False )
        self.txtAxisSetupFilterIL.SetEditable( False )
        self.txtAxisSetupFilterP.SetBackgroundColour(wx.Colour(187,187,187))        
        self.txtAxisSetupFilterI.SetBackgroundColour(wx.Colour(187,187,187))        
        self.txtAxisSetupFilterD.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupFilterIL.SetBackgroundColour(wx.Colour(187,187,187)) 

    def OnAxisSetupFilterCancel(self, evt):
        #print "AxisSetupFilterCancel" 
        self.EnableControls()
        self.Modus = 'r'#setup Filter Cancel
        self.btnAxisSetupFilterWrite.Enable(False)
        self.btnAxisSetupFilterCancel.Enable(False)

        self.txtAxisSetupFilterP.SetValue(self.P)
        self.txtAxisSetupFilterI.SetValue(self.I)
        self.txtAxisSetupFilterD.SetValue(self.D)
        self.txtAxisSetupFilterIL.SetValue(self.IL)

        self.txtAxisSetupFilterP.SetEditable( False )
        self.txtAxisSetupFilterI.SetEditable( False )
        self.txtAxisSetupFilterD.SetEditable( False )
        self.txtAxisSetupFilterIL.SetEditable( False )
        self.txtAxisSetupFilterP.SetBackgroundColour(wx.Colour(187,187,187))        
        self.txtAxisSetupFilterI.SetBackgroundColour(wx.Colour(187,187,187))        
        self.txtAxisSetupFilterD.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupFilterIL.SetBackgroundColour(wx.Colour(187,187,187)) 

#-------------------------------------------------------------------------------
    def OnEReset(self,evt):
        if self.btnEReset.GetValue():
            App.Green.PosSoll = App.Green.PosIst
            App.Green.EStopReset = 1
            for i in range(10):
                App.Green.comunicateServer()
            App.Green.EStopReset = 0
            if abs(float(self.txtPosDiff.GetValue())) < 0.01:
                self.OnReSync(1)
            self.btnEReset.SetValue(False)

            
    def EnableGuideControls(self):
        #print "Enabel Guide Controls" 
        self.btnAxisSetupGuideReset.Enable(True) 

    def DisableGuideControls(self):
        #print "Disabel Guide Controls" 

        self.btnAxisSetupGuideReset.Enable(False)

#----------------------------------------------------------------    
    def GoOnline(self):
        # Pruefe ob anderer Client das Commando hat
        if self.Online == False: 
            #print " Going Online" 
            App.Green.Intent  = 'False'
            self.EnableControls()
            self.Modus = 'r'#setup Rope Cancel
            self.txtTimeTick.SetBackgroundColour(wx.Colour(0 ,150,0))
            self.cmbAxisName.SetBackgroundColour(wx.Colour(0 ,150,0))
            self.txtTimeTick.Refresh()
            self.cmbAxisName.Refresh()
            self.Online = True


    def GoOffline(self):
        #if self.Online == True:
        #print " Going Offline" 
        self.Online = False
        self.DisableControls()
        self.Modus = 'rE'#setup Rope Cancel
        self.txtTimeTick.SetBackgroundColour(wx.Colour(255,255,255))
        self.cmbAxisName.SetBackgroundColour(wx.Colour(255,255,255))
        self.txtTimeTick.Refresh()
        self.cmbAxisName.Refresh()
        return

    def PermitOnline(self):
        if self.Controlle == False:
            #print "Online Permission"
            App.Green.Intent  = 'True'
            self.Controlle = True


    def DenyOnline(self):
        if self.Controlle == True:
            #print "Online forbidden"  
            App.Green.Intent = 'False'
            self.Controlle = False

    def DisableControls(self):
        if self.ControlsEnabeled:
            #print 'Disabeling Controls'
            self.btnAxisReset.Enable(False)
            self.btnAxisSetupPosEdit.Enable(False)
            self.btnAxisSetupPosWrite.Enable(False)
            self.btnAxisSetupPosCancel.Enable(False)
            self.txtAxisSetupPosHardMax.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupPosUserMax.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupPosIst.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupPosUserMin.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupPosHardMin.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupPosPosWin.SetBackgroundColour(wx.Colour(187,187,187)) 
            self.btnAxisSetupVelEdit.Enable(False)
            self.btnAxisSetupVelWrite.Enable(False)
            self.btnAxisSetupVelCancel.Enable(False)
            self.txtAxisSetupVelMaxMot.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupVelMaxMot.SetForegroundColour(wx.Colour(255,0,0))
            self.txtAxisSetupVelMax.SetBackgroundColour(wx.Colour(187,187,187))        
            self.txtAxisSetupAccMax.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupDccMax.SetBackgroundColour(wx.Colour(187,187,187))       
            self.txtAxisSetupAccTot.SetBackgroundColour(wx.Colour(187,187,187))        
            self.txtAxisSetupMaxAmp.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupVelWin.SetBackgroundColour(wx.Colour(187,187,187))
            self.btnAxisSetupGuideSetup.Enable(False)
            self.btnAxisSetupGuideWrite.Enable(False)
            self.btnAxisSetupGuideCancel.Enable(False)
            self.btnAxisSetupGuideReset.Enable(False)              
            self.btnAxisSetupGuideClutch.Enable(False)
    
            self.txtAxisSetupGuidePitch.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupGuidePosMax.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupGuidePosMin.SetBackgroundColour(wx.Colour(187,187,187))        
            self.btnAxisSetupFilterEdit.Enable(False)        
            self.btnAxisSetupFilterWrite.Enable(False)
            self.btnAxisSetupFilterCancel.Enable(False)
            self.txtAxisSetupFilterLagError.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupFilterP.SetBackgroundColour(wx.Colour(187,187,187))        
            self.txtAxisSetupFilterI.SetBackgroundColour(wx.Colour(187,187,187))        
            self.txtAxisSetupFilterD.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupFilterIL.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupFilterRampform.SetBackgroundColour(wx.Colour(187,187,187))
            self.btnAxisSetupRopeEdit.Enable(False)
            self.btnAxisSetupRopeWrite.Enable(False)
            self.btnAxisSetupRopeCancel.Enable(False)
            self.txtAxisSetupRopeSWLL.SetBackgroundColour(wx.Colour(187,187,187))        
            self.txtAxisSetupRopeDiameter.SetBackgroundColour(wx.Colour(187,187,187))        
            self.txtAxisSetupRopeType.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupRopeNumber.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupRopeLength.SetBackgroundColour(wx.Colour(187,187,187))
            self.ControlsEnabeled = False
            self.btnRecover.Enable(False)
            self.btnReSync.Enable(False)
    def EnableControls(self):
        if not(self.ControlsEnabeled):
            #print 'Enabeling Controls'
            self.btnAxisReset.Enable(True)
            self.btnAxisSetupPosEdit.Enable(True)
            self.btnAxisSetupVelEdit.Enable(True)
            self.btnAxisSetupGuideSetup.Enable(True)
            self.btnAxisSetupGuideReset.Enable(True)              
            self.btnAxisSetupGuideClutch.Enable(True)
            self.btnAxisSetupFilterEdit.Enable(True)        
            #self.btnAxisSetupRopeEdit.Enable(True)
            #self.btnRecover.Enable(True)
            self.ControlsEnabeled = True
            
    def OnAxisSelect(self,evt):
        try:
            App.Green            
            item = evt.GetSelection()
            if App.Green.Name <> self.Achsen[item]:

                dlg = wx.MessageDialog(None, 'Are you sure you want to reassign Green Axis ?','Question', wx.OK | wx.CANCEL | wx.NO_DEFAULT | wx.ICON_QUESTION)
                result = dlg.ShowModal()
                dlg.Destroy()
                if result == wx.ID_OK:
                    try:
                        Temp = Achse(self.Achsen[item]) # Achse item laesst sich assignen
                    except: # wenn anderes GUI kontrolle dann auf SIMUL
                        dlg = wx.MessageDialog(None, 'Green Axis set to SIMUL !','Reset to SIMUL', wx.OK | wx.ICON_EXCLAMATION)
                        result = dlg.ShowModal()
                        dlg.Destroy()                        
                        del App.Green
                        App.Green = Achse('SIMUL')
                        App.Green.OwnPID= '0'#str(os.getpid())
                        #print 'Axis '+self.Achsen[item]+ ' as Green selected'
                        App.Green.comunicateServer()
                        taskMgr.add(self.AxisTask,'GreenAxisTask')
                    else:
                        #print 'Gren lsst sich auf ' + str(self.Achsen[item]) + 'assignen'
                        try:
                            del Temp
                        except:
                            pass
                        #print self.Achsen[item]
                        self.ResetAxis()
                else:
                    #print ' Accessing App.Green '
                    self.ReadDatafromAchse()
        except: # Noch kein Achsobjekt
            self.ResetAxis()
            
    def AxisReadJoystick(self):
        self.initJoystick()
        self.keepGoing                       = True
        self.LTold                           = 0
        self.ControlingPIDTx                 = 0
        self.ControlingPIDRx                 = 0
        self.Progression                     = 0.0001
        self.WriteZaehler = 0
        self.T1Old = 0
        self.VX = 0
        self.Pos0 = 0
        self.EnableOld = 0
        self.PoweredOld = 0
        self.Decode  = Decode()
        self.InitAxis = 1
        self.FahrbefehlOld = 1
        self.refreshEstopPanel = "Yellow"
        self.refreshBitPanel = "RedBrown"
        self.refreshRecoverPanel = "RedBrown"
        self.refreshSelect = "Blue"
        self.GuideControlOld = 2
        self.ValueSLDMain = 0
        self.ValueSLDSlave = 0
        self.SetupVelMax = 0

        taskMgr.add(self.AxisTask,'GreenAxisTask')
        
    def LoadFromFileQuit(self):

        taskMgr.remove("GreenAxisTask")
        
    def ResetAxis(self):
        
        self.initJoystick()
        self.keepGoing                       = True
        self.LTold                           = 0
        self.ControlingPIDTx                 = 0
        self.ControlingPIDRx                 = 0
        self.Progression                     = 0.0001
        self.WriteZaehler = 0
        self.T1Old = 0
        self.VX = 0
        self.Pos0 = 0
        self.EnableOld = 0
        self.PoweredOld = 0
        self.Decode  = Decode()
        self.InitAxis = 1
        self.FahrbefehlOld = 1
        self.refreshEstopPanel = "Yellow"
        self.refreshBitPanel = "RedBrown"
        self.refreshRecoverPanel = "RedBrown"
        self.refreshSelect = "Blue"
        self.GuideControlOld = 2
        self.ValueSLDMain = 0
        self.ValueSLDSlave = 0
        self.SetupVelMax = 0

        self.Modus = 'rE' # initialisieren im read Edit Mode
        self.Command=False
        self.DisableControls()
        try:
            App.Green
            AxisExists = True
            #print 'Green existiert'
        except: # Noch kein Achsobjekt
            AxisExists = False
            #print 'Green non exist'
            
        if not(AxisExists): # noch kein Achsobjekt -> neues instanzieren
            #print 'bauen neues Green'
            item=self.cmbAxisName.GetCurrentSelection()
            App.Green = Achse(self.Achsen[item])
            App.Green.OwnPID= str(os.getpid())
            #print 'Axis '+self.Achsen[item]+ ' as Green selected'
            App.Green.comunicateServer()
        else:
            del App.Green
            #print 'del Green'
            item=self.cmbAxisName.GetCurrentSelection()
            App.Green = Achse(self.Achsen[item])
            App.Green.OwnPID= '0'#str(os.getpid())
            #print 'Neues Neues Green'
            #print 'Axis '+self.Achsen[item]+ ' as Green selected'
            App.Green.comunicateServer()            
            
        taskMgr.add(self.AxisTask,'GreenAxisTask')
        
        return True
        
    def Loadfromfile(self,item):
        
        self.initJoystick()
        self.keepGoing                       = True
        self.LTold                           = 0
        self.ControlingPIDTx                 = 0
        self.ControlingPIDRx                 = 0
        self.Progression                     = 0.0001
        self.WriteZaehler = 0
        self.T1Old = 0
        self.VX = 0
        self.Pos0 = 0
        self.EnableOld = 0
        self.PoweredOld = 0
        self.Decode  = Decode()
        self.InitAxis = 1
        self.FahrbefehlOld = 1
        self.refreshEstopPanel = "Yellow"
        self.refreshBitPanel = "RedBrown"
        self.refreshRecoverPanel = "RedBrown"
        self.refreshSelect = "Blue"
        self.GuideControlOld = 2
        self.ValueSLDMain = 0
        self.ValueSLDSlave = 0
        self.SetupVelMax = 0
        
        self.Modus = 'rE' # initialisieren im read Edit Mode
        self.Command=False
        self.DisableControls()
        
        
        try:
            App.Green
            GreenExists = True
        except:
            GreenExists = False
        if not(GreenExists):
            App.Green = Achse(item.rstrip('\n'))
            App.Green.OwnPID= str(os.getpid())
            #print 'Axis '+item.rstrip('\n')+ ' as Green selected'
        else:
            taskMgr.remove('GreenAxisTask')
            del App.Green
            App.Green = Achse(item.rstrip('\n'))
            App.Green.OwnPID= str(os.getpid())
            
        App.Green.comunicateServer()

        taskMgr.add(self.AxisTask,'GreenAxisTask')          


    def AxisTask(self,task):
        self.refresh()
        return task.cont
    
    
    def refresh(self):
        
        self.readJoystick()
        self.readDataFromGUI()
        self.RampGenerator()        
        self.comunicateServer()
        self.writeDataToGUI()
        self.CheckStatus()
        
    def readDataFromGUI(self):

        App.Green.ControlingPIDTx = 0
        App.Green.Intent          = self.Command
        App.Green.Enable          = self.EnableStatus
        ##App.Green.EStopReset      = str(self.EStopReset)
        
        if App.Green.EStopReset == '1':
            self.Pos0 = App.Green.PosIst
        if self.btnAxisSetupGuideClutch.GetLabel() == "reseting":
            App.Green.GuideControl   = 5
            b=self.Decode.Decode(App.Green.GuideStatus)
            if b[1][0][2] == "Save Stop" or b[1][0][2] == "Not Enabled" or b[1][0][2] == "Ready":
                self.btnAxisSetupGuideClutch.SetLabel("Reset")
                if self.btnAxisSetupGuideClutch.GetValue():
                    self.btnAxisSetupGuideClutch.SetLabel("engaged")
                else:
                    self.btnAxisSetupGuideClutch.SetLabel("dis-engaged")
        else:
            if self.ClutchStatus == 1:
                App.Green.GuideControl   = 5
            else:
                if self.buttons & 128:
                    App.Green.GuideControl   = 17
                else:
                    App.Green.GuideControl   = 2 
                    
        if self.btnAxisReset.GetLabel() == "reseting":
            b=self.Decode.Decode(App.Green.Status)
            if b[1][0][2] == "Save Stop" or b[1][0][2] == "Not Enabled" or b[1][0][2] == "Ready":
                self.btnAxisReset.SetLabel("Reset") 
                self.btnAxisReset.SetValue(0)
        try:
            App.Green.Modus         = self.Modus
            App.Green.SpeedSoll     = self.VX
            App.Green.GuideSpeedSoll= self.sldAxisSetupGuideVel.GetValue()*20
            if not (self.txtAxisSetupPosHardMax.GetValue() == "-" or self.txtAxisSetupPosHardMax.GetValue() ==""):
                App.Green.PosHardMax    = float(self.txtAxisSetupPosHardMax.GetValue())
            if not (self.txtAxisSetupPosUserMax.GetValue() == "-" or self.txtAxisSetupPosUserMax.GetValue() == "") :
                App.Green.PosUserMax    = float(self.txtAxisSetupPosUserMax.GetValue())
            if not (self.txtAxisSetupPosUserMin.GetValue() == "-"  or self.txtAxisSetupPosUserMin.GetValue() == ""):
                App.Green.PosUserMin    = float(self.txtAxisSetupPosUserMin.GetValue())
            if not (self.txtAxisSetupPosHardMin.GetValue() == "-" or self.txtAxisSetupPosHardMin.GetValue() == "" ):
                App.Green.PosHardMin    = float(self.txtAxisSetupPosHardMin.GetValue())
            if not (self.txtAxisSetupPosPosWin.GetValue() == "-"  or self.txtAxisSetupPosPosWin.GetValue() == ""):
                App.Green.PosWin           = abs(float(self.txtAxisSetupPosPosWin.GetValue()))
            if not (self.txtAxisSetupVelMax.GetValue() == "-" or self.txtAxisSetupVelMax.GetValue() == ""):
                App.Green.SpeedMax         = abs(float(self.txtAxisSetupVelMax.GetValue()))
            if not (self.txtAxisSetupAccMax.GetValue() == "-" or self.txtAxisSetupAccMax.GetValue() == ""):
                App.Green.AccMax           = abs(float(self.txtAxisSetupAccMax.GetValue()))
            if not (self.txtAxisSetupDccMax.GetValue() == "-" or self.txtAxisSetupDccMax.GetValue() == ""):
                App.Green.DccMax           = abs(float(self.txtAxisSetupDccMax.GetValue()))
            if not (self.txtAxisSetupAccTot.GetValue() == "-" or self.txtAxisSetupAccTot.GetValue() == ""):
                App.Green.AccTot           = abs(float(self.txtAxisSetupAccTot.GetValue()))
            if not (self.txtAxisSetupMaxAmp.GetValue() == "-" or self.txtAxisSetupMaxAmp.GetValue() == ""):
                App.Green.MaxAmp           = abs(float(self.txtAxisSetupMaxAmp.GetValue()))
            if not (self.txtAxisSetupVelWin.GetValue() == "-" or self.txtAxisSetupVelWin.GetValue() == ""):
                App.Green.VelWin           = abs(float(self.txtAxisSetupVelWin.GetValue()))
            if not (self.txtAxisSetupFilterP.GetValue() == "-" or self.txtAxisSetupFilterP.GetValue() == ""):
                App.Green.FilterP          = abs(float(self.txtAxisSetupFilterP.GetValue()))
            if not (self.txtAxisSetupFilterI.GetValue() == "-" or self.txtAxisSetupFilterI.GetValue() == ""):
                App.Green.FilterI          = abs(float(self.txtAxisSetupFilterI.GetValue()))
            if not (self.txtAxisSetupFilterD.GetValue() == "-" or self.txtAxisSetupFilterD.GetValue() == ""):
                App.Green.FilterD          = abs(float(self.txtAxisSetupFilterD.GetValue()))
            if not (self.txtAxisSetupFilterIL.GetValue() == "-" or self.txtAxisSetupFilterIL.GetValue() == ""):
                App.Green.FilterIL         = abs(float(self.txtAxisSetupFilterIL.GetValue()))
            if not (self.txtAxisSetupRopeSWLL.GetValue() == "-" or self.txtAxisSetupRopeSWLL.GetValue() == ""):
                App.Green.RopeSWLL         = abs(float(self.txtAxisSetupRopeSWLL.GetValue()))
            if not (self.txtAxisSetupRopeDiameter.GetValue() == "-" or self.txtAxisSetupRopeDiameter.GetValue() == ""):
                App.Green.RopeDiameter     = abs(float(self.txtAxisSetupRopeDiameter.GetValue()))
            App.Green.RopeType         = self.txtAxisSetupRopeType.GetValue()
            App.Green.RopeNumber       = self.txtAxisSetupRopeNumber.GetValue()
            if not (self.txtAxisSetupRopeLength.GetValue() == "-" or self.txtAxisSetupRopeLength.GetValue() == ""):
                App.Green.RopeLength       = abs(float(self.txtAxisSetupRopeLength.GetValue()))
            if not (self.txtAxisSetupGuidePitch.GetValue() == "-" or self.txtAxisSetupGuidePitch.GetValue() == "-"):
                App.Green.GuidePitch       = float(self.txtAxisSetupGuidePitch.GetValue())
            if not (self.txtAxisSetupGuidePosMax.GetValue() == "-" or self.txtAxisSetupGuidePosMax.GetValue() == ""):
                App.Green.GuidePosMax      = abs(float(self.txtAxisSetupGuidePosMax.GetValue()))
            App.Green.GuidePosMaxMax   = float(self.txtAxisSetupGuidePosMaxMax.GetValue())
            if not (self.txtAxisSetupGuidePosMin.GetValue() == "-" or self.txtAxisSetupGuidePosMin.GetValue() == ""):
                App.Green.GuidePosMin      = float(self.txtAxisSetupGuidePosMin.GetValue())
        except ValueError:
            dlg=wx.MessageDialog(None,'Please use just numbers, minus and . as comma. Like 123.45  Use <Backspace> to correct the error!','Syntax ERROR',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy
            self.txtAxisSetupPosHardMax.SetValue(str(App.Green.PosHardMax))
            self.txtAxisSetupPosUserMax.SetValue(str(App.Green.PosUserMax))
            self.txtAxisSetupPosUserMin.SetValue(str(App.Green.PosUserMin))
            self.txtAxisSetupPosHardMin.SetValue(str(App.Green.PosHardMin))
            self.txtAxisSetupPosPosWin.SetValue(str(App.Green.PosWin))
            self.txtAxisSetupVelMax.SetValue(str(App.Green.SpeedMax))
            self.txtAxisSetupAccMax.SetValue(str(App.Green.AccMax))
            self.txtAxisSetupDccMax.SetValue(str(App.Green.DccMax))
            self.txtAxisSetupAccTot.SetValue(str(App.Green.AccTot))
            self.txtAxisSetupMaxAmp.SetValue(str(App.Green.MaxAmp))
            self.txtAxisSetupVelWin.SetValue(str(App.Green.VelWin))
            self.txtAxisSetupFilterP.SetValue(str(App.Green.FilterP))
            self.txtAxisSetupFilterI.SetValue(str(App.Green.FilterI))
            self.txtAxisSetupFilterD.SetValue(str(App.Green.FilterD))
            self.txtAxisSetupFilterIL.SetValue(str(App.Green.FilterIL))
            self.txtAxisSetupRopeSWLL.SetValue(str(App.Green.RopeSWLL))
            self.txtAxisSetupRopeDiameter.SetValue(str(App.Green.RopeDiameter))
            self.txtAxisSetupRopeType.SetValue(str(App.Green.RopeType))
            self.txtAxisSetupRopeNumber.SetValue(str(App.Green.RopeNumber))
            self.txtAxisSetupRopeLength.SetValue(str(App.Green.RopeLength))
            self.txtAxisSetupGuidePitch.SetValue(str(App.Green.GuidePitch))
            self.txtAxisSetupGuidePosMax.SetValue(str(App.Green.GuidePosMax))
            self.txtAxisSetupGuidePosMaxMax.SetValue(str(App.Green.GuidePosMaxMax))
            self.txtAxisSetupGuidePosMin.SetValue(str(App.Green.GuidePosMin))
            self.readDataFromGUI()

    def ReadDatafromAchse(self):
        
        self.Command          = App.Green.Intent           
        self.Enable           = App.Green.Enable
        if App.Green.GuideControl   == 5:
            self.btnAxisSetupGuideClutch.SetValue(True)    # Noch nicht passend        
        elif App.Green.GuideControl   == 17:              # Noch nicht passend  
            self.btnAxisSetupGuideEnable.SetValue(True)    # Noch nicht passend                 
        else:                                              # Noch nicht passend  
            self.btnAxisSetupGuideClutch.SetValue(True)    # Noch nicht passend  
            self.btnAxisSetupGuideEnable.SetValue(True)    # Noch nicht passend 
        self.Modus = App.Green.Modus 
        
        self.cmbAxisName.SetSelection(self.cmbAxisName.GetItems().index(unicode(App.Green.Name)))
        
        self.sldAxisVel.SetValue(500)    # Noch nicht passend 
        self.sldAxisSetupGuideVel.SetValue(50)
        self.txtAxisPos.SetValue(App.Green.PosIst)
        self.txtAxisSetupPosIst.SetValue(App.Green.PosIst)
        self.txtAxisSetupPosHardMax.SetValue(str(App.Green.PosHardMax)) 
        self.txtAxisSetupPosUserMax.SetValue(str(App.Green.PosUserMax))
        self.txtAxisSetupPosUserMin.SetValue(str(App.Green.PosUserMin))
        self.txtAxisSetupPosHardMin.SetValue(str(App.Green.PosHardMin))
        self.txtAxisSetupVelMax.SetValue(str(App.Green.SpeedMax))
        self.txtAxisSetupAccMax.SetValue(str(App.Green.AccMax))
        self.txtAxisSetupDccMax.SetValue(str(App.Green.DccMax))
        if App.Green.MaxAmp == 0.0:
            self.txtAxisSetupMaxAmp.SetValue("SIMUL")                
        else:
            self.txtAxisSetupMaxAmp.SetValue(str(App.Green.MaxAmp))
        self.txtAxisSetupFilterP.SetValue(App.Green.FilterP)
        self.txtAxisSetupFilterI.SetValue(App.Green.FilterI)
        self.txtAxisSetupFilterD.SetValue(App.Green.FilterD)
        self.txtAxisSetupFilterIL.SetValue(App.Green.FilterIL)
        self.txtAxisSetupGuidePitch.SetValue(App.Green.GuidePitch)
        self.txtAxisSetupGuidePosMax.SetValue(App.Green.GuidePosMax)
        self.txtAxisSetupGuidePosMin.SetValue(App.Green.GuidePosMin)
        


    def comunicateServer(self):
        App.Green.comunicateServer()

    def RampGenerator(self):
        if self.InitAxis == 1:
            self.Pos0 = App.Green.PosIst
            self.InitAxis = 0
        self.Pos0=App.Green.PosSoll        
        T1     = time.clock()
        self.DiffT= T1-self.T1Old
        self.T1Old  = T1
        # Fahrbefehlstaster gedrueckt Programm reagiert normal auf Joystick
        if App.Green.EsTaster:
            if self.FahrbefehlOld == 1:
                self.Pos0 = App.Green.PosIst
                self.FahrbefehlOld = 0
                
            d=self.Decode.Decode(App.Green.Status) #schauen ob Verstaerker in TechOpt ist
            if d[1][0][1] == "10"and (self.buttons & 32 and self.buttons & 2):
                if self.Modus != 'recover':
                    self.SetupVelMax = float(self.txtAxisSetupVelMax.GetValue())
                    self.SetupVelMax = max((float(self.txtAxisSetupVelMax.GetValue()))/10,1.0) #3D Aktivieren
                else:
                    self.SetupVelMax = max((float(self.txtAxisSetupVelMax.GetValue()))/10,1.0)
                x = (self.sldAxisVel.GetValue() - 500) * 2 *self.SetupVelMax/1000  # 20 = 1000mm / 50 fuer Prozent
            else:
                x=0
            #VelX
            if self.VX < x:
                self.VX = self.VX + float(App.Green.AccMax)*(self.DiffT)
                if self.VX >= x:
                    self.VX = x
            elif self.VX > x:
                self.VX = self.VX - float(App.Green.DccMax)*(self.DiffT)
                if self.VX <= x:
                        self.VX = x  
        # Abfangen der Endpositionen *)
        #Bei Fahrt Richtung oberes Ende Beginn
            PosDiffG = float(App.Green.PosUserMax) - float(App.Green.PosIst)
            if PosDiffG > 0 :
                SpeedMaxG = math.sqrt(float(App.Green.DccMax)*0.8*PosDiffG)
                self.VX = min(self.VX,SpeedMaxG);
            else:
                if self.VX > 0:
                    self.VX = 0.0;
            #Bei Fahrt Richtung oberes Ende End
            #Bei Fahrt Richtung unteres Ende Beginn
            PosDiffG = float(App.Green.PosIst) - float(App.Green.PosUserMin)
            if PosDiffG > 0 :
                SpeedMaxG = math.sqrt(float(App.Green.DccMax)*0.8*PosDiffG)
                self.VX = max(self.VX,-SpeedMaxG);
            else:
                if self.VX < 0 :
                    self.VX = 0.0
            #Bei Fahrt Richtung unteres Ende End
# Fahrbefehlstaster offen Programm steuert Motor mit AccTot zum Stillstand
        else:
            x = 0.0
            if self.VX < x:
                self.VX = self.VX + float(App.Green.AccTot)*(self.DiffT)
                if self.VX >= x:
                    self.VX = x
            elif self.VX > x:
                self.VX = self.VX - float(App.Green.AccTot)*(self.DiffT)
                if self.VX <= x:
                        self.VX = x 
            self.FahrbefehlOld = 1
            
        App.Green.PosSoll= str(float(self.Pos0)+self.VX*(self.DiffT))        

    
    
    def writeDataToGUI(self):        
        a=self.Decode.Decode(App.Green.Status)                         
        b=self.Decode.Decode(App.Green.GuideStatus)
        if App.Green.EsTaster:
            self.DisableControls()
            self.btnAxisSetupGuideClutch.Enable(False)
            self.btnAxisSetupGuideReset.Enable(False)            
            self.cmbAxisName.Enable(False)
        else:
            if self.Modus != 'E':
                self.EnableControls()
                self.cmbAxisName.Enable(True)
                self.btnAxisSetupGuideClutch.Enable(True)
                #if self.ClutchStatus == 0:
                self.btnAxisSetupGuideReset.Enable(True)
            
        if App.Green.EsResetAble:
            self.btnEReset.Enable(False)
        else:
            self.btnEReset.Enable(True)
            
        self.SliderPanel.Update()

        if not(abs(float(self.txtPosDiff.GetValue())) < 0.01):
            if self.refreshRecoverPanel != 'Yellow':
                self.RecoverPanel.SetBackgroundColour((250,198,12))
                self.RecoverPanel.Refresh()
                self.refreshRecoverPanel = 'Yellow'               
        else:
            if self.refreshRecoverPanel != 'Green':
                self.RecoverPanel.SetBackgroundColour((0,150,0))
                self.RecoverPanel.Refresh()
                self.refreshRecoverPanel = 'Green'
                
        if not(App.Green.EsNetwork) :            
            if self.refreshEstopPanel != "Yellow":
                self.EStopPanel.SetBackgroundColour((250,198,12))
                self.EStopPanel.Refresh()
                self.refreshEstopPanel = "Yellow"
        else:
            if self.refreshEstopPanel != "Green":
                self.EStopPanel.SetBackgroundColour((0,150,0))
                self.EStopPanel.Refresh()
                self.refreshEstopPanel = "Green" 
                
        if App.Green.Modus !='E':
            if not(App.Green.EsNetwork) : 
                self.btnRecover.Enable(False)
                self.btnReSync.Enable(False)
            else:
                if (abs(float(self.txtPosDiff.GetValue())) < 0.01):
                    self.btnRecover.Enable(False)
                else:
                    self.btnRecover.Enable(True)
                if (App.Green.EsTaster or abs(float(self.txtPosDiff.GetValue())) < 0.01 or
                    self.btnRecover.GetLabel() == 'Running'):
                    self.btnReSync.Enable(False)
                else:     
                    self.btnReSync.Enable(True) 
        else:
            self.btnRecover.Enable(False)
            self.btnReSync.Enable(False)
            
        if (not(App.Green.EsNetwork)):          #Gelb
            if self.refreshBitPanel != "Yellow":
                self.BitPanel.SetBackgroundColour((250,198,12)) 
                self.BitPanel.Refresh()
                self.refreshBitPanel = "Yellow"
        else:
            if ((App.Green.EsReady and abs(float(self.txtPosDiff.GetValue())) >= 0.01) or
                ((App.Green.EsReady and abs(float(self.txtPosDiff.GetValue())) < 0.01))):
                if self.refreshBitPanel != "LightGreen":
                    self.BitPanel.SetBackgroundColour((0,150,0))
                    self.BitPanel.Refresh()
                    self.refreshBitPanel = "LightGreen"
            else:
                if (not(App.Green.EsReady) and abs(float(self.txtPosDiff.GetValue())) > 0.01) :
                    if self.refreshBitPanel != "Yellow":
                        self.BitPanel.SetBackgroundColour((250,198,12)) 
                        self.BitPanel.Refresh()
                        self.refreshBitPanel = "Yellow"
                else:
                    if self.refreshBitPanel != "RedBrown":
                        self.BitPanel.SetBackgroundColour((128,128,128)) 
                        self.BitPanel.Refresh()
                        self.refreshBitPanel = "RedBrown"

        if (App.Green.Modus == 'r' or 
            App.Green.Modus == 'rE' or 
            App.Green.Modus == 'JoyEnabeled' or
            App.Green.Modus == 'recover'):
            fa="%3.2f"
            fb="%2.3f"
            fc="%2.0f"
            fd="%3.1f"
            fe="%1.4f"
            self.ControlingPIDRx = App.Green.ControlingPIDRx                                         #[0] Controling PID
            self.txtTimeTick.SetValue(str(App.Green.LTold-self.LTold))
            #self.txtTimeTick.SetValue(str(self.Achse.GetLTold()-self.LTold))
            self.LTold =int(App.Green.LTold)                                        
            self.txtAxisError.SetValue(a[1][0][2])
            self.txtAxisError.SetBackgroundColour(a[1][0][3])
            #self.txtAxisError.SetToolTipString(str(a[0]))
                                                              #[3] Guide Status
            self.txtAxisSetupGuideError.SetValue(b[1][0][2])
            self.txtAxisSetupGuideError.SetBackgroundColour(b[1][0][3])
            #self.txtAxisSetupGuideError.SetToolTipString(str(b[0]))
            self.txtAxisPos.SetValue(str(fa%(float(App.Green.PosIst)) +' m'))                              #[4] AxisPos
            self.txtAxisSetupPosIst.SetValue(str(fa%(float(App.Green.PosIst))))
            self.txtAxisVel.SetValue(str(fa%(float(App.Green.SpeedIstUI)) +' m/s'))                        #[5] AxisVel
            self.txtAxisAmp.SetValue(str(fa%(float(App.Green.MasterMomentUI )/1000*60)+' A'))  #[6] AxisAmp
            self.txtAxisTemp.SetValue(str(App.Green.CabTemperature +' C'))                     #[7] AxisTemp        
            self.txtAxisSetupGuidePos.SetValue(str(App.Green.GuidePosIstUI))                   #[30]GuidePos
            self.txtAxisSetupGuideVel.SetValue(str(App.Green.GuideIstSpeedUI))                 #[31]GuideVel
            self.txtAxisSetupVelMaxMot.SetValue(str(abs(float(App.Green.SpeedMaxForUI))))                  #[37]VelMaxMot
            self.txtAxisSetupFilterLagError.SetValue(str(App.Green.PosDiffForUI ))             #[38]Lag Error
            self.cmbAxisName.SetValue(str(App.Green.Name))                                     #[8]  Name
            self.txtAxisSetupPosHardMax.SetValue(str(App.Green.PosHardMax))                    #[10] PosHardMax
            self.txtAxisSetupPosUserMax.SetValue(str(App.Green.PosUserMax))                    #[11] PosUserMax
            self.txtAxisSetupPosUserMin.SetValue(str(App.Green.PosUserMin))                    #[12] PosUserMin
            self.txtAxisSetupPosHardMin.SetValue(str(App.Green.PosHardMin))                    #[13] PosHardMin
            self.txtAxisSetupPosPosWin.SetValue(str(App.Green.PosWin))                            #[38] PosWin
            self.txtAxisSetupVelMax.SetValue(str(App.Green.SpeedMax))                          #[14] VelMax
            self.txtAxisSetupAccMax.SetValue(str(App.Green.AccMax))                            #[15] AccMax
            self.txtAxisSetupDccMax.SetValue(str(App.Green.DccMax))                            #[16] DccMax
            self.txtAxisSetupAccTot.SetValue(str(App.Green.AccTot))                            #[40] AccTot
            self.txtAxisSetupMaxAmp.SetValue(str(App.Green.MaxAmp))                            #[17] AmpMax
            self.txtAxisSetupVelWin.SetValue(str(App.Green.VelWin))                            #[39] VelWin
            self.txtAxisSetupFilterP.SetValue(str(App.Green.FilterP))                          #[18] FilterP
            self.txtAxisSetupFilterI.SetValue(str(App.Green.FilterI))                          #[19] FilterI
            self.txtAxisSetupFilterD.SetValue(str(App.Green.FilterD))                          #[20] FilterD
            self.txtAxisSetupFilterIL.SetValue(str(App.Green.FilterIL))                        #[21] FilterIL
            self.txtAxisSetupFilterRampform.SetValue(str(App.Green.Rampform))                  #[36] Rampform
            self.txtAxisSetupRopeSWLL.SetValue(str(App.Green.RopeSWLL))                        #[22] SWLL
            self.txtAxisSetupRopeDiameter.SetValue(str(App.Green.RopeDiameter))                #[23] Rope Diam    
            self.txtAxisSetupRopeType.SetValue(str(App.Green.RopeType))                        #[24] Rope Type 
            self.txtAxisSetupRopeNumber.SetValue(str(App.Green.RopeNumber))                    #[25] Rope Number     
            self.txtAxisSetupRopeLength.SetValue(str(App.Green.RopeLength))                    #[26] Rope Length   
            self.txtAxisSetupGuidePitch.SetValue(str(App.Green.GuidePitch))                    #[27] Pitch       
            self.txtAxisSetupGuidePosMax.SetValue(str(App.Green.GuidePosMax))                  #[28] Guide Pos Max
            self.txtAxisSetupGuidePosMaxMax.SetValue(str(App.Green.GuidePosMaxMax))            #[41] Guide Pos MaxMax
            self.txtAxisSetupGuidePosMin.SetValue(str(App.Green.GuidePosMin))                  #[29] Guide Pos Min
            self.txtCutPos.SetValue(str(fa%(float(App.Green.EStopCutPos))))
            self.txtCutVel.SetValue(str(fa%(float(App.Green.EStopCutVel))))
            self.txtPosDiff.SetValue(str(fa%(float(App.Green.EStopCutPos)-float(App.Green.PosIst))))
            self.txtCutTime.SetValue(str(App.Green.EStopCutTime))

        
        self.rMaster.SetValue(App.Green.EsMaster)
        self.rSlave.SetValue(App.Green.EsSlave)
        self.rNetwork.SetValue(App.Green.EsNetwork)            
        self.rEStop1.SetValue(App.Green.EsEStop1)
        self.rEStop2.SetValue(App.Green.EsEStop2)
        self.rSteuerwort.SetValue(App.Green.EsSteuerwort)
        self.r30kWOK.SetValue(App.Green.Es30kWOK )
        self.r05kWOK.SetValue(App.Green.Es05kWOK)
        self.rB1OK.SetValue(not(App.Green.EsB1OK ^ App.Green.EsTaster))
        self.rB2OK.SetValue(not (App.Green.EsB2OK ^ App.Green.EsTaster))
        #self.rB1OK.SetValue(App.Green.EsB1OK )
        #self.rB2OK.SetValue(App.Green.EsB2OK )        
        self.rDSC.SetValue(App.Green.EsDCSOK)    
        self.rSPSOK.SetValue(App.Green.EsSPSOK)
        self.rBRK2KB.SetValue(App.Green.EsBRK2KB)
        self.rPosWin.SetValue(App.Green.EsPosWin)
        self.rVelWin.SetValue(App.Green.EsVelWin)
        self.rEndlage.SetValue(App.Green.EsEndlage) 
        
        self.rG1COM.SetValue(App.Green.EsG1COM)
        self.rG1FB.SetValue(App.Green.EsG1FB)
        self.rG1OUT.SetValue(App.Green.EsG1OUT)
        self.rG2COM.SetValue(App.Green.EsG2COM)
        self.rG2FB.SetValue(App.Green.EsG2FB)
        self.rG2OUT.SetValue(App.Green.EsG2OUT)
        self.rG3COM.SetValue(App.Green.EsG3COM)
        self.rG3FB.SetValue(App.Green.EsG3FB)
        self.rG3OUT.SetValue(App.Green.EsG3OUT)
        
        if App.Green.EsSchluessel1:                      # Nur Master          
            font = wx.Font(8,wx.DEFAULT,wx.NORMAL,wx.BOLD)
            if App.Green.EsTaster:
                self.btnAxisSetupGuideClutch.Enable(False)
                self.btnAxisSetupGuideClutch.Enable(False)
            else:
                self.btnAxisSetupGuideClutch.Enable(True)
                self.btnAxisSetupGuideSetup.Enable(True)
            self.rMaster.SetFont(font)
            self.rEStop1.SetFont(font)
            self.rEStop2.SetFont(font)
            self.rSteuerwort.SetFont(font)
            self.r30kWOK.SetFont(font)
            self.rB1OK.SetFont(font)
            self.rSPSOK.SetFont(font)
            self.rBRK2KB.SetFont(font)
            self.rPosWin.SetFont(font)
            self.rVelWin.SetFont(font)
            self.rEndlage.SetFont(font)            
            font = wx.Font(8,wx.DEFAULT,wx.NORMAL,wx.LIGHT)
            self.rSlave.SetFont(font)
            self.rNetwork.SetFont(font)            
            self.r05kWOK.SetFont(font)
            self.rB2OK.SetFont(font)
            self.rDSC.SetFont(font)            
            self.rG1COM.SetFont(font) 
            self.rG1FB.SetFont(font) 
            self.rG1OUT.SetFont(font) 
            self.rG2COM.SetFont(font) 
            self.rG2FB.SetFont(font) 
            self.rG2OUT.SetFont(font) 
            self.rG3COM.SetFont(font) 
            self.rG3FB.SetFont(font) 
            self.rG3OUT.SetFont(font)            
        elif App.Green.EsSchluessel2:
            font = wx.Font(8,wx.DEFAULT,wx.NORMAL,wx.BOLD)          # Master und Slave
            self.btnAxisSetupGuideClutch.Enable(False)
            self.btnAxisSetupGuideSetup.Enable(False)
            self.rMaster.SetFont(font)
            self.rSlave.SetFont(font)
            self.rEStop1.SetFont(font)
            self.rEStop2.SetFont(font)
            self.rSteuerwort.SetFont(font)
            self.r30kWOK.SetFont(font)
            self.rB1OK.SetFont(font)
            self.rSPSOK.SetFont(font)
            self.rBRK2KB.SetFont(font)
            self.rPosWin.SetFont(font)
            self.rVelWin.SetFont(font)
            self.rEndlage.SetFont(font) 
            font = wx.Font(8,wx.DEFAULT,wx.NORMAL,wx.LIGHT)
            self.rNetwork.SetFont(font)            
            self.rG1COM.SetFont(font) 
            self.rG1FB.SetFont(font) 
            self.rG1OUT.SetFont(font) 
            self.rG2COM.SetFont(font) 
            self.rG2FB.SetFont(font) 
            self.rG2OUT.SetFont(font) 
            self.rG3COM.SetFont(font) 
            self.rG3FB.SetFont(font) 
            self.rG3OUT.SetFont(font) 
        else:
            font = wx.Font(8,wx.DEFAULT,wx.NORMAL,wx.BOLD)              # Master Slave und Netzwerk
            self.btnAxisSetupGuideClutch.Enable(False)
            self.btnAxisSetupGuideSetup.Enable(False)
            self.rMaster.SetFont(font)
            self.rSlave.SetFont(font)
            self.rEStop1.SetFont(font)
            self.rEStop2.SetFont(font)
            self.rSteuerwort.SetFont(font)
            self.r30kWOK.SetFont(font)
            self.rB1OK.SetFont(font)
            self.rSPSOK.SetFont(font)
            self.rBRK2KB.SetFont(font)
            self.rPosWin.SetFont(font)
            self.rVelWin.SetFont(font)
            self.rEndlage.SetFont(font) 
            self.rNetwork.SetFont(font)            
            self.r05kWOK.SetFont(font)
            self.rB2OK.SetFont(font)
            self.rDSC.SetFont(font)            
            self.rG1COM.SetFont(font) 
            self.rG1FB.SetFont(font) 
            self.rG1OUT.SetFont(font) 
            self.rG2COM.SetFont(font) 
            self.rG2FB.SetFont(font) 
            self.rG2OUT.SetFont(font) 
            self.rG3COM.SetFont(font) 
            self.rG3FB.SetFont(font) 
            self.rG3OUT.SetFont(font)
        
        if(self.rG1COM.GetValue() and
           self.rG1FB.GetValue() and
           self.rG1OUT.GetValue() and
           self.rG2COM.GetValue() and
           self.rG2FB.GetValue() and
           self.rG2OUT.GetValue() and
           self.rG3COM.GetValue() and
           self.rG3FB.GetValue() and
           self.rG3OUT.GetValue()):
            pass
            self.EStopReset =0              

        self.rbReady.SetValue(a[1][2])
        self.rbPowered.SetValue(a[1][1])
        self.rbBrake1.SetValue(App.Green.EsB1OK)
        self.rbBrake2.SetValue(App.Green.EsB2OK)
        self.rFBT.SetValue(not(App.Green.EsFTBOK))
        
        self.rbSReady.SetValue(b[1][2])
        self.rbSPowered.SetValue(b[1][1])
            

        if self.Modus =='w':
            self.WriteZaehler = self.WriteZaehler+1
            self.readDataFromGUI()
            App.Green.comunicateServer()
            if self.WriteZaehler > 4:   # Das ist naemlich so. Wenn die Werte runter geschrieben werden, braucht's eine Zeit bis sie auch
                                        # entsprechend aktualisiert wieder zurueckkommen. So etwa 5 Zyklen.
                                        # Wenn also Modus-w eintritt warten wir einige Zyklen bevor wir die Ueberpruefung beginnen.

                if (self.cmbAxisName.GetValue()                            == App.Green.Name          and               
                    "%.2f"%float(self.txtAxisSetupPosHardMax.GetValue())   == App.Green.PosHardMax    and
                    "%.2f"%float(self.txtAxisSetupPosUserMax.GetValue())   == App.Green.PosUserMax    and
                    "%.2f"%float(self.txtAxisSetupPosUserMin.GetValue())   == App.Green.PosUserMin    and
                    "%.2f"%float(self.txtAxisSetupPosHardMin.GetValue())   == App.Green.PosHardMin    and
                    "%.4f"%float(self.txtAxisSetupPosPosWin.GetValue())    == App.Green.PosWin        and
                    "%.2f"%float(self.txtAxisSetupVelMax.GetValue())       == App.Green.SpeedMax      and
                    "%.2f"%float(self.txtAxisSetupAccMax.GetValue())       == App.Green.AccMax        and
                    "%.2f"%float(self.txtAxisSetupDccMax.GetValue())       == App.Green.DccMax        and
                    "%.2f"%float(self.txtAxisSetupAccTot.GetValue())       == App.Green.AccTot        and
                    "%.2f"%float(self.txtAxisSetupMaxAmp.GetValue())       == App.Green.MaxAmp        and
                    "%.4f"%float(self.txtAxisSetupVelWin.GetValue())       == App.Green.VelWin        and
                    "%.3f"%float(self.txtAxisSetupFilterP.GetValue())      == App.Green.FilterP       and
                    "%.3f"%float(self.txtAxisSetupFilterI.GetValue())      == App.Green.FilterI       and
                    "%.3f"%float(self.txtAxisSetupFilterD.GetValue())      == App.Green.FilterD       and
                    "%.1f"%float(self.txtAxisSetupFilterIL.GetValue())     == App.Green.FilterIL      and
                    "%.3f"%float(self.txtAxisSetupGuidePitch.GetValue())   == App.Green.GuidePitch): # and        
                    #"%.3f"%float(self.txtAxisSetupGuidePosMax.GetValue())  == self.Achse.GuidePosMax)   and        
                    #"%.4f"%float(self.txtAxisSetupGuidePosMin.GetValue())  == self.Achse.GuidePosMin):
                    #print 'Daten transfer OK'
                    pass
                else:
                    #print 'Data transfer recheck'
                    dlg=wx.MessageDialog(None,'Data transfer: Pls Check Data','Data transfer',wx.OK|wx.ICON_EXCLAMATION)
                    result=dlg.ShowModal()
                    dlg.Destroy                                  
                self.Modus = 'rE'
                self.WriteZaehler = 0
    def readJoystick(self):

        if not((self.Modus ==  'E') or (self.Modus ==  'w')):
            self.buttons=self.stick.GetButtonState()
            a=self.stick.GetPosition().y
            d=self.stick.GetPosition().x
            b=a/32767.0-1
            e=d/32767.0-1
            # Achse
            if b>0:            
                c=b*(1-self.Progression)+b*b*self.Progression
            else:
                c=b*(1-self.Progression)-b*b*self.Progression
            self.ValueSLDMain = int(c*500.0+500)
            # Slider
            if e>0:            
                f=e*(1-self.Progression)+e*e*self.Progression
            else:
                f=e*(1-self.Progression)-e*e*self.Progression
            self.ValueSLDSlave = int(f*1000)

            if self.buttons & 2 :
                if self.refreshSelect != "Blue":
                    self.txtSelected1.SetBackgroundColour((0,200,0))
                    self.txtSelected2.SetBackgroundColour((0,200,0))
                    self.txtSelected1.SetLabel('Selected')
                    self.txtSelected2.SetLabel('Selected') 
                    self.txtSelected1.Refresh()
                    self.txtSelected2.Refresh()
                    self.refreshSelect = "Blue"
            else:
                if self.refreshSelect != "White":
                    self.txtSelected1.SetBackgroundColour((255,240,0))
                    self.txtSelected2.SetBackgroundColour((255,240,0))
                    self.txtSelected1.SetLabel('De-Selected')
                    self.txtSelected2.SetLabel('De-Selected')                     
                    self.txtSelected1.Refresh()
                    self.txtSelected2.Refresh()
                    self.refreshSelect = "White"              

            if self.Modus != "recover":
                if self.buttons & 32 and self.buttons & 2 :
                    self.Modus ='JoyEnabeled'
                    if abs(float(self.txtPosDiff.GetValue())) > 0.01:
                        self.ValueSLDMain = 500
                    self.OnAxisEnable(self.buttons)
                elif not(self.buttons & 32):
                    self.Modus ='JoyDisabeled'
                    self.OnAxisEnable(self.buttons)
            else:
                if abs(float(self.txtPosDiff.GetValue())) < 0.01:
                    self.btnRecover.SetLabel('Recover')
                    self.OnReSync(1)
                    self.Modus ='r'
                    self.OnAxisEnable(self.buttons)
                self.OnAxisEnable(self.buttons)
                di= float(self.txtPosDiff.GetValue())
                PVel =  math.atan(di)/(math.pi/2)*500
                Vel = 500+PVel
                b=self.Decode.Decode(App.Green.GuideStatus)
                if b[1][0][1] == "10":
                    self.ValueSLDMain = Vel
                else:
                    self.ValueSLDMain = 500
      
            self.sldAxisVel.SetValue(self.ValueSLDMain)
            #self.sldAxisVel.Refresh()
            #self.SliderPanel.Refresh()
            self.sldAxisSetupGuideVel.SetValue(self.ValueSLDSlave)
            #self.sldAxisVel.Refresh()
            #self.SliderPanel.Refresh()

    def initJoystick(self):                
        #Joystick auslesen und Umrechnungen vorbereiten
        self.stick = wx.Joystick()
        self.min0 = self.stick.GetXMin()
        self.max0 = self.stick.GetXMax()
        self.diff0 = float((self.max0-self.min0)/2)
        self.min1 = self.stick.GetYMin()
        self.max1 = self.stick.GetYMax()
        self.diff1 = float((self.max1-self.min1)/2)
        self.min2 = self.stick.GetRudderMin()
        self.max2 = self.stick.GetRudderMax()
        self.diff2 = float((self.max2-self.min2)/2)
        self.min3 = self.stick.GetZMin()
        self.max3 = self.stick.GetZMax()
        self.diff3 = float((self.max3-self.min3)/2)
        if self.diff0 == 0.0 or self.diff1 == 0.0 or self.diff2 == 0.0 or self.diff3 == 0.0:
            dlg = wx.MessageDialog(self.frame, ' Joystick configuration error',' Joystick configuration error!', wx.OK|wx.ICON_EXCLAMATION)
            self.logger.debug('No Joystick')
            if dlge.ShowModal() == wx.ID_OK:
                dlge.Destroy()         
    def CheckStatus(self):
        ##if self.ControlingPIDRx == "0"   or self.ControlingPIDRx == str(App.Green.OwnPID) :
        if (self.ControlingPIDRx == "0" or self.ControlingPIDRx == str(App.Green.OwnPID) or self.ControlingPIDRx == '0000' ):     # If the system is available
            self.PermitOnline()
        else:
            self.DenyOnline()

        if (self.ControlingPIDRx == str(App.Green.OwnPID)) :       # If we are connected
        ##if (self.ControlingPIDRx == str(self.frame.Achse.OwnPID)) :       # If we are connected
            self.GoOnline()
        else:
            self.GoOffline()


    def OnClose(self,evt):

        try:
            App.Green.LTold              = 0
            App.Green.Modus              = 0
            App.Green.OwnPID             = 0
            App.Green.ControlingPIDTx    = 0
            App.Green.Intent             = 0
            App.Green.Enable             = 0
            App.Green.GuideControl       = 5
            App.Green.SpeedSoll          = 0
            App.Green.GuideSpeedSoll     = 0
            #print "Clean Exit"                  
            App.Green.comunicateServer()
            ##self.keepGoing = False
            taskMgr.remove("GreenAxisTask")
        except:
            ##self.keepGoing = False
            taskMgr.remove("GreenAxisTask")
            #print "Exit"
        
                             
#-------------------------------------------------------------------------------
class CyanAxisUI(wx.Frame):
    def __init__(self, parent, id, title):
        wx.Frame.__init__(self, parent, id, title,(970,40), (742, 428),
                          style =wx.FRAME_FLOAT_ON_PARENT|wx.FRAME_NO_TASKBAR)
        self.res = xrc.XmlResource("AchsSteuerungAxisSelectState1.xrc")
        ##self.res = xrc.XmlResource("AchsSteuerungRecover.xrc")        
        self.RootPanel = self.res.LoadPanel(self,'RootPanel')
        
        self.AxisSelected=False
        self.ControlingPIDRx=0
        self.Modus = 'rE' # initialisieren im read Edit Mode
        self.ClutchStatus = 1        
        self.init_Mainframe()
        self.init_MainframeEvents()
        self.DisableControls()        
        self.EStopReset =0
        self.Decode = Decode()
        self.ReSync = 0
        self.Recover = 0
        self.Modus = 0
        self.refreshSelect = "Blue"

        self.EnableOld = 0
        self.VX = 0
        self.Pos0 = 0
        self.T1Old  = time.clock()
        self.EStopMode = 'EStop'

    def init_Mainframe(self):
        self.ControlsEnabeled = False
        self.StatusPanelColour = "RedBrown"        
        '''Initialisiert die Objekte des Mainframes'''      
        self.StatusPanel        = xrc.XRCCTRL(self.RootPanel,'StatusPanel')
        self.SetupPanel         = xrc.XRCCTRL(self.RootPanel,'SetupPanel')
        self.SliderPanel        = xrc.XRCCTRL(self.RootPanel,'SliderPanel')
        self.SetupPositionPanel = xrc.XRCCTRL(self.RootPanel,'SetupPosition')
        self.SetupVelPanel      = xrc.XRCCTRL(self.RootPanel,'SetupVel')
        self.SetupGuidePanel    = xrc.XRCCTRL(self.RootPanel,'SetupGuide')
        self.SetupFilterPanel   = xrc.XRCCTRL(self.RootPanel,'SetupFilter')
        self.SetupRopePanel     = xrc.XRCCTRL(self.RootPanel,'SetupRope')
        self.EStopPanel         = xrc.XRCCTRL(self.RootPanel,'EStopPanel')
        self.BitPanel           = xrc.XRCCTRL(self.RootPanel,'BitPanel')
        self.RecoverPanel       = xrc.XRCCTRL(self.RootPanel,'RecoverPanel')

        # Kinder vom StatusPanel
        self.cmbAxisName       = xrc.XRCCTRL(self.StatusPanel,'cmbAxisName')
        self.cmbAxisName.SetEditable( False )
        self.Achsen=ACHSEN.keys()
        for a in range(len(ACHSEN.keys())):
            self.cmbAxisName.SetString(a,ACHSEN.keys()[a])
       
        self.txtAxisPos        = xrc.XRCCTRL(self.StatusPanel,'txtAxisPos')
        self.txtAxisPos.SetEditable( False )

        self.txtAxisVel        = xrc.XRCCTRL(self.StatusPanel,'txtAxisVel')
        self.txtAxisVel.SetEditable( False )

        self.txtAxisAmp        = xrc.XRCCTRL(self.StatusPanel,'txtAxisAmp')
        self.txtAxisAmp.SetEditable( False )
        self.sldAxisVel        = xrc.XRCCTRL(self.StatusPanel,'sldAxisVel')
        self.sldAxisVel.Enable(False)
        self.txtAxisError      = xrc.XRCCTRL(self.StatusPanel,'txtAxisError')
        self.txtAxisError.SetEditable( False )
        self.btnAxisReset      = xrc.XRCCTRL(self.StatusPanel,'btnAxisReset')    
        self.txtAxisTemp       = xrc.XRCCTRL(self.StatusPanel,'txtAxisTemp')
        self.txtAxisTemp.SetEditable( False )

        self.txtTimeTick       = xrc.XRCCTRL(self.StatusPanel,'txtTimeTick')
        self.txtTimeTick.SetEditable( False )
        
        self.rFBT              = xrc.XRCCTRL(self.BitPanel,'rFBT')
        self.rbReady           = xrc.XRCCTRL(self.BitPanel,'rbReady')
        self.rbPowered         = xrc.XRCCTRL(self.BitPanel,'rbPowered')
        self.rbBrake1          = xrc.XRCCTRL(self.BitPanel,'rbBrake1')
        self.rbBrake2          = xrc.XRCCTRL(self.BitPanel,'rbBrake2')
        self.txtSelected1       = xrc.XRCCTRL(self.BitPanel,'txtSelected1')
        self.txtSelected2       = xrc.XRCCTRL(self.BitPanel,'txtSelected2')

        self.txtCutPos         = xrc.XRCCTRL(self.RecoverPanel,'txtEStopCutPosition')
        self.txtCutVel         = xrc.XRCCTRL(self.RecoverPanel,'txtEStopCutVel')
        self.txtCutTime        = xrc.XRCCTRL(self.RecoverPanel,'txtEStopCutTime')
        self.txtPosDiff        = xrc.XRCCTRL(self.RecoverPanel,'txtEStopPosDiff')
        self.txtPosDiff.SetValue('0')
        self.btnRecover        = xrc.XRCCTRL(self.RecoverPanel,'btnRecover')
        self.btnReSync         = xrc.XRCCTRL(self.RecoverPanel,'btnReSync')
        
        # Kinder vom SetupPositionPanel
        self.btnAxisSetupPosEdit    = xrc.XRCCTRL(self.SetupPositionPanel,'btnAxisSetupPosEdit')
        
        self.txtAxisSetupPosHardMax = xrc.XRCCTRL(self.SetupPositionPanel,'txtAxisSetupPosHardMax')
        self.txtAxisSetupPosHardMax.SetValidator(NumValidator("digit"))
        self.txtAxisSetupPosHardMax.SetEditable( False )
        self.txtAxisSetupPosHardMax.SetValue('300.0')
        
        self.txtAxisSetupPosUserMax = xrc.XRCCTRL(self.SetupPositionPanel,'txtAxisSetupPosUserMax')
        self.txtAxisSetupPosUserMax.SetValidator(NumValidator("digit"))
        self.txtAxisSetupPosUserMax.SetEditable( False )
        self.txtAxisSetupPosUserMax.SetValue('300.0')
        
        self.txtAxisSetupPosIst     = xrc.XRCCTRL(self.SetupPositionPanel,'txtAxisSetupPosIst')
        self.txtAxisSetupPosIst.SetEditable( False )
        self.txtAxisSetupPosUserMin = xrc.XRCCTRL(self.SetupPositionPanel,'txtAxisSetupPosUserMin')
        self.txtAxisSetupPosUserMin.SetValidator(NumValidator("digit"))
        self.txtAxisSetupPosUserMin.SetEditable( False )
        self.txtAxisSetupPosUserMin.SetValue('-300.0')
        
        self.txtAxisSetupPosHardMin = xrc.XRCCTRL(self.SetupPositionPanel,'txtAxisSetupPosHardMin')
        self.txtAxisSetupPosHardMin.SetValidator(NumValidator("digit"))
        self.txtAxisSetupPosHardMin.SetEditable( False )
        self.txtAxisSetupPosHardMin.SetValue('-300.0')
        
        self.txtAxisSetupPosPosWin = xrc.XRCCTRL(self.SetupPositionPanel,'txtAxisSetupPosPosWin')
        self.txtAxisSetupPosPosWin.SetValidator(NumValidator("digit"))
        self.txtAxisSetupPosPosWin.SetEditable( False )
        self.txtAxisSetupPosPosWin.SetValue('1.50')
        
        self.btnAxisSetupPosWrite    = xrc.XRCCTRL(self.SetupPositionPanel,'btnAxisSetupPosWrite')
        self.btnAxisSetupPosCancel    = xrc.XRCCTRL(self.SetupPositionPanel,'btnAxisSetupPosCancel')
        
        # Kinder vom SetupVelPanel
        
        self.btnAxisSetupVelEdit = xrc.XRCCTRL(self.SetupVelPanel,'btnAxisSetupVelEdit')
        
        self.txtAxisSetupVelMaxMot  = xrc.XRCCTRL(self.SetupVelPanel,'txtAxisSetupVelMaxMot')
        self.txtAxisSetupVelMaxMot.SetEditable( False )
        
        self.txtAxisSetupVelMax  = xrc.XRCCTRL(self.SetupVelPanel,'txtAxisSetupVelMax')
        self.txtAxisSetupVelMax.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupVelMax.SetEditable( False )
        self.txtAxisSetupVelMax.SetValue('8.0')
        
        self.txtAxisSetupAccMax  = xrc.XRCCTRL(self.SetupVelPanel,'txtAxisSetupAccMax')
        self.txtAxisSetupAccMax.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupAccMax.SetEditable( False )
        self.txtAxisSetupAccMax.SetValue('5.5')
        
        self.txtAxisSetupDccMax  = xrc.XRCCTRL(self.SetupVelPanel,'txtAxisSetupDccMax')
        self.txtAxisSetupDccMax.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupDccMax.SetEditable( False )
        self.txtAxisSetupDccMax.SetValue('5.5')
        
        self.txtAxisSetupAccTot = xrc.XRCCTRL(self.SetupVelPanel,'txtAxisSetupAccTot')
        self.txtAxisSetupAccTot.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupAccTot.SetEditable( False )
        self.txtAxisSetupAccTot.SetValue('5.5')
        
        self.txtAxisSetupMaxAmp  = xrc.XRCCTRL(self.SetupVelPanel,'txtAxisSetupMaxAmp')
        self.txtAxisSetupMaxAmp.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupMaxAmp.SetEditable( False )
        self.txtAxisSetupMaxAmp.SetValue('150')
        
        self.txtAxisSetupVelWin  = xrc.XRCCTRL(self.SetupVelPanel,'txtAxisSetupVelWin')
        self.txtAxisSetupMaxAmp.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupVelWin.SetEditable( False )
        self.txtAxisSetupVelWin.SetValue('1.5')
        
        self.btnAxisSetupVelWrite    = xrc.XRCCTRL(self.SetupVelPanel,'btnAxisSetupVelWrite')
        self.btnAxisSetupVelCancel    = xrc.XRCCTRL(self.SetupVelPanel,'btnAxisSetupVelCancel')

        # Kinder vom SetupGuidePanel
        
        self.txtAxisSetupGuidePos = xrc.XRCCTRL(self.SetupGuidePanel, 'txtAxisSetupGuidePos')
        self.txtAxisSetupGuidePos.SetEditable( False )
        
        self.txtAxisSetupGuideVel = xrc.XRCCTRL(self.SetupGuidePanel, 'txtAxisSetupGuideVel')
        self.txtAxisSetupGuideVel.SetEditable( False )
        
        self.sldAxisSetupGuideVel        = xrc.XRCCTRL(self.SetupGuidePanel,'sldAxisSetupGuideVel')
        self.sldAxisSetupGuideVel.Enable(False)
        
        self.btnAxisSetupGuideSetup  = xrc.XRCCTRL(self.SetupGuidePanel,'btnAxisSetupGuideSetup')
        
        self.txtAxisSetupGuideError  = xrc.XRCCTRL(self.SetupGuidePanel,'txtAxisSetupGuideError')
        self.txtAxisSetupGuideError.SetEditable( False )
        
        self.btnAxisSetupGuideReset  = xrc.XRCCTRL(self.SetupGuidePanel,'btnAxisSetupGuideReset')
        self.btnAxisSetupGuideReset.Enable(False)
        
        self.txtAxisSetupGuidePitch  = xrc.XRCCTRL(self.SetupGuidePanel,'txtAxisSetupGuidePitch')
        self.txtAxisSetupGuidePitch.SetValidator(NumValidator("digit"))
        self.txtAxisSetupGuidePitch.SetEditable( False )
        
        self.btnAxisSetupGuideWrite    = xrc.XRCCTRL(self.SetupGuidePanel,'btnAxisSetupGuideWrite')
        
        self.txtAxisSetupGuidePosMax = xrc.XRCCTRL(self.SetupGuidePanel,'txtAxisSetupGuidePosMax')
        self.txtAxisSetupGuidePosMax.SetValidator(NumValidator("digit"))
        self.txtAxisSetupGuidePosMax.SetEditable( False )
        
        self.txtAxisSetupGuidePosMaxMax = xrc.XRCCTRL(self.SetupGuidePanel,'txtAxisSetupGuidePosMaxMax')
        self.txtAxisSetupGuidePosMaxMax.SetEditable( False )        
        
        self.txtAxisSetupGuidePosMin = xrc.XRCCTRL(self.SetupGuidePanel,'txtAxisSetupGuidePosMin')
        self.txtAxisSetupGuidePosMin.SetValidator(NumValidator("digit"))
        self.txtAxisSetupGuidePosMin.SetEditable( False )
        self.txtAxisSetupGuidePosMin.SetValue('0.0')
        
        self.btnAxisSetupGuideCancel    = xrc.XRCCTRL(self.SetupGuidePanel,'btnAxisSetupGuideCancel')
        
        self.btnAxisSetupGuideClutch    = xrc.XRCCTRL(self.SetupGuidePanel,'btnAxisSetupGuideClutch')
        self.btnAxisSetupGuideClutch.SetValue(True)
        
        self.btnAxisSetupGuideMoveLeft  = xrc.XRCCTRL(self.SetupGuidePanel,'btnAxisSetupGuideMoveLeft')
        self.btnAxisSetupGuideMoveStop  = xrc.XRCCTRL(self.SetupGuidePanel,'btnAxisSetupGuideMoveStop')
        self.btnAxisSetupGuideMoveRight = xrc.XRCCTRL(self.SetupGuidePanel,'btnAxisSetupGuideMoveRight')
        
        self.rbSReady           = xrc.XRCCTRL(self.SetupGuidePanel,'rbSReady')
        self.rbSPowered         = xrc.XRCCTRL(self.SetupGuidePanel,'rbSPowered')
        


        # Kinder vom SetupFilterPanel
        self.btnAxisSetupFilterEdit = xrc.XRCCTRL(self.SetupFilterPanel,'btnAxisSetupFilterEdit')
        self.txtAxisSetupFilterLagError    = xrc.XRCCTRL(self.SetupFilterPanel,'txtAxisSetupFilterLagError')
        self.txtAxisSetupFilterLagError.SetEditable( False )
        self.txtAxisSetupFilterP    = xrc.XRCCTRL(self.SetupFilterPanel,'txtAxisSetupFilterP')
        self.txtAxisSetupFilterP.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupFilterP.SetEditable( False )
        self.txtAxisSetupFilterI    = xrc.XRCCTRL(self.SetupFilterPanel,'txtAxisSetupFilterI')
        self.txtAxisSetupFilterI.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupFilterI.SetEditable( False )
        self.txtAxisSetupFilterD    = xrc.XRCCTRL(self.SetupFilterPanel,'txtAxisSetupFilterD')
        self.txtAxisSetupFilterD.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupFilterD.SetEditable( False )
        self.txtAxisSetupFilterIL    = xrc.XRCCTRL(self.SetupFilterPanel,'txtAxisSetupFilterIL')
        self.txtAxisSetupFilterIL.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupFilterIL.SetEditable( False )
        self.txtAxisSetupFilterRampform = xrc.XRCCTRL(self.SetupFilterPanel,'txtAxisSetupFilterRampform')
        self.txtAxisSetupFilterRampform.SetEditable( False )
        self.btnAxisSetupFilterWrite    = xrc.XRCCTRL(self.SetupFilterPanel,'btnAxisSetupFilterWrite')
        self.btnAxisSetupFilterCancel    = xrc.XRCCTRL(self.SetupFilterPanel,'btnAxisSetupFilterCancel')

        # Kinder vom SetupRopePanel
        
        self.btnAxisSetupRopeEdit     = xrc.XRCCTRL(self.SetupRopePanel,'btnAxisSetupRopeEdit')
        self.btnAxisSetupRopeEdit.Enable(False)
        self.txtAxisSetupRopeSWLL     = xrc.XRCCTRL(self.SetupRopePanel,'txtAxisSetupRopeSWLL')
        self.txtAxisSetupRopeSWLL.SetEditable( False )
        self.txtAxisSetupRopeDiameter = xrc.XRCCTRL(self.SetupRopePanel,'txtAxisSetupRopeDiameter')
        self.txtAxisSetupRopeDiameter.SetEditable( False )
        self.txtAxisSetupRopeType     = xrc.XRCCTRL(self.SetupRopePanel,'txtAxisSetupRopeType')
        self.txtAxisSetupRopeType.SetEditable( False )
        self.txtAxisSetupRopeNumber   = xrc.XRCCTRL(self.SetupRopePanel,'txtAxisSetupRopeNumber')
        self.txtAxisSetupRopeNumber.SetEditable( False )
        self.txtAxisSetupRopeLength   = xrc.XRCCTRL(self.SetupRopePanel,'txtAxisSetupRopeLength')
        self.txtAxisSetupRopeLength.SetEditable( False )
        self.btnAxisSetupRopeWrite    = xrc.XRCCTRL(self.SetupRopePanel,'btnAxisSetupRopeWrite')
        self.btnAxisSetupRopeCancel    = xrc.XRCCTRL(self.SetupRopePanel,'btnAxisSetupRopeCancel')
        
        # Kinder vom EStopPanel
        
        self.rMaster          = xrc.XRCCTRL(self.EStopPanel,'rMaster')
        self.rMaster.SetValue(True)
         
        self.rSlave           = xrc.XRCCTRL(self.EStopPanel,'rSlave')
        self.rSlave.SetValue(True)
        
        self.rNetwork         = xrc.XRCCTRL(self.EStopPanel,'rNetwork')
        self.rNetwork.SetValue(True)
        
        self.btnEReset        = xrc.XRCCTRL(self.EStopPanel,'btnEReset')
        
        self.rEStop1          = xrc.XRCCTRL(self.EStopPanel,'rEStop1')
        self.rEStop1.SetValue(True)
        
        self.rEStop2          = xrc.XRCCTRL(self.EStopPanel,'rEStop2')
        self.rEStop2.SetValue(True)
        
        self.rSteuerwort       = xrc.XRCCTRL(self.EStopPanel,'rSteuerwort')
        self.rSteuerwort.SetValue(True)
        
        self.r30kWOK          = xrc.XRCCTRL(self.EStopPanel,'r30kWOK')
        self.r30kWOK.SetValue(True)
        
        self.r05kWOK          = xrc.XRCCTRL(self.EStopPanel,'r05kWOK')
        self.r05kWOK.SetValue(True)
        
        self.rB1OK            = xrc.XRCCTRL(self.EStopPanel,'rB1OK')
        self.rB1OK.SetValue(True)
        
        self.rB2OK            = xrc.XRCCTRL(self.EStopPanel,'rB2OK')
        self.rB2OK.SetValue(True)
        
        self.rDSC             = xrc.XRCCTRL(self.EStopPanel,'rDCS')
        self.rDSC.SetValue(True)
        
        self.rSPSOK          = xrc.XRCCTRL(self.EStopPanel,'rSPSOK')
        self.rSPSOK.SetValue(True)
        
        self.rBRK2KB         = xrc.XRCCTRL(self.EStopPanel,'rBRK2KB')
        self.rBRK2KB.SetValue(True)
        
        self.rPosWin          = xrc.XRCCTRL(self.EStopPanel,'rPosWin')
        self.rPosWin.SetValue(True)
        
        self.rVelWin          = xrc.XRCCTRL(self.EStopPanel,'rVelWin')
        self.rVelWin.SetValue(True)
        
        self.rEndlage         = xrc.XRCCTRL(self.EStopPanel,'rEndlage')
        self.rEndlage.SetValue(True)
        
        self.rG1COM           = xrc.XRCCTRL(self.EStopPanel,'rG1COM')
        self.rG1COM.SetValue(True)
        
        self.rG1OUT           = xrc.XRCCTRL(self.EStopPanel,'rG1OUT')
        self.rG1OUT.SetValue(True)
        
        self.rG1FB            = xrc.XRCCTRL(self.EStopPanel,'rG1FB')
        self.rG1FB.SetValue(True)
        
        self.rG2COM           = xrc.XRCCTRL(self.EStopPanel,'rG2COM')
        self.rG2COM.SetValue(True)
        
        self.rG2OUT           = xrc.XRCCTRL(self.EStopPanel,'rG2OUT')
        self.rG2OUT.SetValue(True)
        
        self.rG2FB            = xrc.XRCCTRL(self.EStopPanel,'rG2FB')
        self.rG2FB.SetValue(True)
        
        self.rG3COM           = xrc.XRCCTRL(self.EStopPanel,'rG3COM')
        self.rG3COM.SetValue(True)
        
        self.rG3OUT           = xrc.XRCCTRL(self.EStopPanel,'rG3OUT')
        self.rG3OUT.SetValue(True)
       
        self.rG3FB            = xrc.XRCCTRL(self.EStopPanel,'rG3FB')
        self.rG3FB.SetValue(True)      

    def init_MainframeEvents(self):
        self.Command = 0
        self.EnableStatus = 0
        self.Controlle = False
        self.Online    = False
        self.Bind(wx.EVT_COMBOBOX, self.OnAxisSelect, id=xrc.XRCID('cmbAxisName'))
        self.Bind(wx.EVT_TOGGLEBUTTON, self.OnAxisReset, id=xrc.XRCID('btnAxisReset'))

        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupPosEdit, id=xrc.XRCID('btnAxisSetupPosEdit'))
        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupPosWrite, id=xrc.XRCID('btnAxisSetupPosWrite'))
        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupPosCancel, id=xrc.XRCID('btnAxisSetupPosCancel'))

        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupVelEdit, id=xrc.XRCID('btnAxisSetupVelEdit'))
        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupVelWrite, id=xrc.XRCID('btnAxisSetupVelWrite'))
        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupVelCancel, id=xrc.XRCID('btnAxisSetupVelCancel'))

        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupGuideSetup, id=xrc.XRCID('btnAxisSetupGuideSetup'))
        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupGuideWrite, id=xrc.XRCID('btnAxisSetupGuideWrite'))
        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupGuideCancel, id=xrc.XRCID('btnAxisSetupGuideCancel'))
        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupGuideReset,  id=xrc.XRCID('btnAxisSetupGuideReset'))

        self.Bind(wx.EVT_TOGGLEBUTTON, self.OnAxisSetupGuideClutch, id=xrc.XRCID('btnAxisSetupGuideClutch'))

        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupFilterEdit, id=xrc.XRCID('btnAxisSetupFilterEdit'))        
        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupFilterWrite, id=xrc.XRCID('btnAxisSetupFilterWrite'))
        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupFilterCancel, id=xrc.XRCID('btnAxisSetupFilterCancel'))
        
        self.Bind(wx.EVT_TOGGLEBUTTON, self.OnEReset, id=xrc.XRCID('btnEReset'))
        self.Bind(wx.EVT_BUTTON, self.OnReSync, id = xrc.XRCID('btnReSync'))
        
        self.txtAxisError.Bind(wx.EVT_LEFT_DOWN, self.OnAxisErrorClick, id=xrc.XRCID('txtAxisError'))
        self.txtAxisSetupGuideError.Bind(wx.EVT_LEFT_DOWN, self.OnAxisGuideErrorClick, id=xrc.XRCID('txtAxisSetupGuideError'))
        
        self.Bind(wx.EVT_BUTTON, self.OnRecoverClick, id=xrc.XRCID('btnRecover'))

    def OnRecoverClick(self,evt):        
        if self.btnRecover.GetLabel() != 'Running':
            self.btnRecover.SetLabel('Running')    
            self.Modus ='recover'
        else:
            self.btnRecover.SetLabel('Recover')
            self.Modus = 'r'
        evt.Skip()

    def OnReSync(self,evt):
        #print 'ReSync'
        App.Cyan.ReSync = 1
        for i in range(10):
            App.Cyan.comunicateServer()
        App.Cyan.ReSync = 0
        
    def OnAxisErrorClick(self,evt):
        
        ##rect = self.GetRect()
        ##x1, y1 = rect.GetTopLeft() 
        ##a=self.Decode.Decode(self.Achse.Status)                                                    #[2] Axis Status  
        ##self.test = wx.TipWindow(self, str(a[0]))
        ##self.test.SetBoundingRect(wx.Rect(x1+480,y1+20,x1+580,y1+100))
        
        try:
            App.Yellow
            App.Green
            App.Cyan
            App.Magenta
            AchsenInitialisiert=True
        except:
            AchsenInitialisiert=False
        if AchsenInitialisiert:
            rect = self.GetRect()
            x1, y1 = rect.GetTopLeft() 
            a=self.Decode.Decode(App.Cyan.Status)                                                    #[2] Axis Status  
            self.test = wx.TipWindow(self, str(a[0]))
            self.test.SetBoundingRect(wx.Rect(x1+400,y1,x1+580,y1+200))
    
    def OnAxisGuideErrorClick(self,evt):
        
        ##rect = self.GetRect()
        ##x1, y1 = rect.GetTopLeft() 
        ##a=self.Decode.Decode(self.Achse.GuideStatus)                                                    #[2] Axis Status  
        ##self.test = wx.TipWindow(self, str(a[0]))
        ##self.test.SetBoundingRect(wx.Rect(x1+285,y1+20,x1+580,y1+100))
        
        try:
            App.Yellow
            App.Green
            App.Cyan
            App.Magenta
            AchsenInitialisiert=True
        except:
            AchsenInitialisiert=False
        if AchsenInitialisiert:
            rect = self.GetRect()
            x1, y1 = rect.GetTopLeft() 
            a=self.Decode.Decode(App.Cyan.GuideStatus)                                                    #[2] Axis Status  
            self.test = wx.TipWindow(self, str(a[0]))
            self.test.SetBoundingRect(wx.Rect(x1+285,y1,x1+580,y1+200))
            
    def OnAxisReset(self, evt):
        
        if self.btnAxisReset.GetValue():
            self.btnAxisReset.SetLabel("reseting")
        else:        
            self.btnAxisReset.SetLabel("Reset")
    def OnAxisEnable(self,evt):

        if self.btnAxisReset.GetValue():
            self.EnableStatus = 64
        else:
            if self.Modus == 'JoyEnabeled' or self.Modus == 'recover' :
                self.cmbAxisName.Enable(False)
                self.EnableStatus = 1
            else:
                self.EnableStatus = 0
                self.Modus = 'r'
               
        if (evt & 32):
            if self.StatusPanelColour != "Green":
                self.StatusPanel.SetBackgroundColour((0,150,0))
                self.StatusPanel.Refresh()
                self.sldAxisVel.Refresh
                self.StatusPanelColour = "Green"
        else:
            if self.StatusPanelColour != "RedBrown":             
                self.StatusPanel.SetBackgroundColour((128,128,128))
                self.StatusPanel.Refresh()
                self.sldAxisVel.Refresh
                self.StatusPanelColour = "RedBrown"                
            #Clutch
                


    #--------------------------------------------------------------- 
    def OnAxisSetupPosEdit(self, evt):
        #print "AxisSetupPosEdit"
        self.DisableControls()
        self.Modus = 'E' # Setup Pos Edit
        self.btnAxisSetupPosWrite.Enable(True)
        self.btnAxisSetupPosCancel.Enable(True)

        self.PosHardMax     = self.txtAxisSetupPosHardMax.GetValue()
        self.PosUserMax     = self.txtAxisSetupPosUserMax.GetValue()
        self.PosUserMin     = self.txtAxisSetupPosUserMin.GetValue()
        self.PosHardMin     = self.txtAxisSetupPosHardMin.GetValue()
        self.PosWin         = self.txtAxisSetupPosPosWin.GetValue()

        self.txtAxisSetupPosHardMax.SetEditable( True )
        self.txtAxisSetupPosUserMax.SetEditable( True )
        self.txtAxisSetupPosUserMin.SetEditable( True )
        self.txtAxisSetupPosHardMin.SetEditable( True )
        self.txtAxisSetupPosPosWin.SetEditable( True )
        self.txtAxisSetupPosHardMax.SetBackgroundColour(wx.Colour(255,255,255))
        self.txtAxisSetupPosUserMax.SetBackgroundColour(wx.Colour(255,255,255))
        #self.txtAxisSetupPosIst.SetBackgroundColour(wx.Colour(255,255,255))
        self.txtAxisSetupPosUserMin.SetBackgroundColour(wx.Colour(255,255,255))
        self.txtAxisSetupPosHardMin.SetBackgroundColour(wx.Colour(255,255,255))
        self.txtAxisSetupPosPosWin.SetBackgroundColour(wx.Colour(255,255,255))

    def OnAxisSetupPosWrite(self, evt):
        #print "AxisSetupPosWrite"  
        self.EnableControls()
        self.btnAxisSetupPosWrite.Enable(False)
        self.btnAxisSetupPosCancel.Enable(False)
        
        
        if not((float(self.txtAxisSetupPosHardMax.GetValue()) >= float(self.txtAxisSetupPosUserMax.GetValue())) and
               (float(self.txtAxisSetupPosUserMax.GetValue()) >  float(self.txtAxisSetupPosUserMin.GetValue())) and
               (float(self.txtAxisSetupPosUserMin.GetValue()) >= float(self.txtAxisSetupPosHardMin.GetValue()))):
            dlg=wx.MessageDialog(None,'Limits not monotone! Values uncanged','Error User Limit',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy
            self.txtAxisSetupPosHardMax.SetValue(str(self.PosHardMax))
            self.txtAxisSetupPosUserMax.SetValue(str(self.PosUserMax))
            self.txtAxisSetupPosUserMin.SetValue(str(self.PosUserMin))
            self.txtAxisSetupPosHardMin.SetValue(str(self.PosHardMin))
            self.txtAxisSetupPosHardMax.Refresh()
            self.txtAxisSetupPosUserMax.Refresh()
            self.txtAxisSetupPosUserMin.Refresh()
            self.txtAxisSetupPosHardMin.Refresh()

        #PosWin            
        if ((float(self.txtAxisSetupPosPosWin.GetValue()) > 1.5 ) or
            float(self.txtAxisSetupPosPosWin.GetValue()) < 0.01):
            dlg=wx.MessageDialog(None,'0.01 m < PosWin < 1.5 m ; Reset to Last Value','Error Wrong Input',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy        
            self.txtAxisSetupPosPosWin.SetValue(self.PosWin)
            self.txtAxisSetupPosPosWin.Refresh()
        else:             
            self.PosPosWin    = float(self.txtAxisSetupPosPosWin.GetValue()) 



        self.Modus = 'w'

        self.txtAxisSetupPosHardMax.SetEditable( False )
        self.txtAxisSetupPosUserMax.SetEditable( False )
        self.txtAxisSetupPosUserMin.SetEditable( False )
        self.txtAxisSetupPosHardMin.SetEditable( False )
        self.txtAxisSetupPosPosWin.SetEditable( False )
        self.txtAxisSetupPosHardMax.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupPosUserMax.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupPosIst.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupPosUserMin.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupPosHardMin.SetBackgroundColour(wx.Colour(187,187,187)) 
        self.txtAxisSetupPosPosWin.SetBackgroundColour(wx.Colour(187,187,187))

    def OnAxisSetupPosCancel(self, evt):
        #print "AxisSetupPosCancel" 
        self.EnableControls()
        self.Modus = 'r'#setup Pos Cancel
        self.btnAxisSetupPosWrite.Enable(False)
        self.btnAxisSetupPosCancel.Enable(False)

        self.txtAxisSetupPosHardMax.SetValue(self.PosHardMax)
        self.txtAxisSetupPosUserMax.SetValue(self.PosUserMax)
        self.txtAxisSetupPosUserMin.SetValue(self.PosUserMin)
        self.txtAxisSetupPosHardMin.SetValue(self.PosHardMin)
        self.txtAxisSetupPosPosWin.SetValue(self.PosWin)

        self.txtAxisSetupPosHardMax.SetEditable( False )
        self.txtAxisSetupPosUserMax.SetEditable( False )
        self.txtAxisSetupPosUserMin.SetEditable( False )
        self.txtAxisSetupPosHardMin.SetEditable( False )
        self.txtAxisSetupPosPosWin.SetEditable( False )
        self.txtAxisSetupPosHardMax.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupPosUserMax.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupPosIst.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupPosUserMin.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupPosHardMin.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupPosPosWin.SetBackgroundColour(wx.Colour(187,187,187))

    #---------------------------------------------------------------
    def OnAxisSetupVelEdit(self, evt):
        #print "AxisSetupVelEdit"  
        self.DisableControls()
        self.Modus = 'E'#setup Vel Edit
        self.btnAxisSetupVelWrite.Enable(True)
        self.btnAxisSetupVelCancel.Enable(True)

        self.VelMax     = abs(float(self.txtAxisSetupVelMax.GetValue()))           
        self.AccMax     = abs(float(self.txtAxisSetupAccMax.GetValue()))
        self.DccMax     = abs(float(self.txtAxisSetupDccMax.GetValue()))
        self.AccTot     = abs(float(self.txtAxisSetupAccTot.GetValue()))
        self.MaxAmp     = abs(float(self.txtAxisSetupMaxAmp.GetValue()))
        self.VelWin     = abs(float(self.txtAxisSetupVelWin.GetValue()))        

        self.txtAxisSetupVelMax.SetEditable( True )
        self.txtAxisSetupAccMax.SetEditable( True )
        self.txtAxisSetupDccMax.SetEditable( True )
        self.txtAxisSetupAccTot.SetEditable( True )
        self.txtAxisSetupMaxAmp.SetEditable( True )
        self.txtAxisSetupVelWin.SetEditable( True )
        self.txtAxisSetupVelMax.SetBackgroundColour(wx.Colour(255,255,255))        
        self.txtAxisSetupAccMax.SetBackgroundColour(wx.Colour(255,255,255))
        self.txtAxisSetupDccMax.SetBackgroundColour(wx.Colour(255,255,255))       
        self.txtAxisSetupAccTot.SetBackgroundColour(wx.Colour(255,255,255))        
        self.txtAxisSetupMaxAmp.SetBackgroundColour(wx.Colour(255,255,255))
        self.txtAxisSetupVelWin.SetBackgroundColour(wx.Colour(255,255,255))

    def OnAxisSetupVelWrite(self, evt):
        #print "AxisSetupVelWrite" 
        self.EnableControls()
        #self.btnAxisSetupVelWrite.Enable(False)
        #self.btnAxisSetupVelCancel.Enable(False)
        #MaxVel
        if (abs(float(self.txtAxisSetupVelMax.GetValue())) > 
            abs(float(self.txtAxisSetupVelMaxMot.GetValue()))):
            dlg=wx.MessageDialog(None,'MaxVel larger than MaxVel Motor; Value uncanged','Error User Limit',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy
            modifyMaxVel = False
        else:
            modifyMaxVel = True       
        #MaxAmp
        if (float(self.txtAxisSetupMaxAmp.GetValue()) > 150.0 or 
            float(self.txtAxisSetupMaxAmp.GetValue()) < 50 ):
            dlg=wx.MessageDialog(None,'50% < MaxAmp < 150% ; Reset to Last Value','Error Wrong Input',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy        
            modifyMaxAmp = False
        else:             
            modifyMaxAmp = True           
        #VelWin       
        if (float(self.txtAxisSetupVelWin.GetValue()) > 1.5 or 
            float(self.txtAxisSetupVelWin.GetValue()) < 0.01):
            dlg=wx.MessageDialog(None,'0.01 m/s < VelWin < 1.5 m/s; Reset to Last Value','Error Wrong Input',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy        
            modifyVelWin = False
        else:             
            modifyVelWin = True
            #AccMove        
        if (float(self.txtAxisSetupAccTot.GetValue()) > 10.0 or 
            float(self.txtAxisSetupAccTot.GetValue()) < 1.5 ):
            dlg=wx.MessageDialog(None,'1.5 m/ss< Acc Move < 10 m/ss; Value uncanged','Error Wrong Input',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy        
            modifyAccMove = False
        else:
            modifyAccMove = True         
        #AccMax    
        if (abs(float(self.txtAxisSetupAccMax.GetValue())) > abs(float(self.txtAxisSetupAccTot.GetValue())) or
            abs(float(self.txtAxisSetupDccMax.GetValue())) > abs(float(self.txtAxisSetupAccTot.GetValue()))):
            dlg=wx.MessageDialog(None,'Acc/Dcc/AccMove Mismatch; Values unchanged','Error AccMax',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy
            modifyAccDccAccMove = False
        else:
            modifyAccDccAccMove = True
               
        
        if modifyMaxVel and modifyMaxAmp and modifyVelWin and modifyAccDccAccMove and modifyAccMove :
            self.VelMax     = abs(float(self.txtAxisSetupVelMax.GetValue()))
            self.MaxAmp     = float(self.txtAxisSetupMaxAmp.GetValue())
            self.VelWin     = float(self.txtAxisSetupVelWin.GetValue()) 
            self.AccMax     = abs(float(self.txtAxisSetupAccMax.GetValue()))
            self.DccMax     = abs(float(self.txtAxisSetupDccMax.GetValue()))
            self.AccTot     = abs(float(self.txtAxisSetupAccTot.GetValue()))
            self.btnAxisSetupVelWrite.Enable(False)
            self.btnAxisSetupVelCancel.Enable(False)            
        else:
            self.txtAxisSetupVelMax.SetValue(str(self.VelMax))
            self.txtAxisSetupMaxAmp.SetValue(str(self.MaxAmp))
            self.txtAxisSetupVelWin.SetValue(str(self.VelWin))            
            self.txtAxisSetupAccMax.SetValue(str(abs(self.AccMax)))     
            self.txtAxisSetupDccMax.SetValue(str(abs(self.DccMax)))     
            self.txtAxisSetupAccTot.SetValue(str(abs(self.AccTot)))
            self.btnAxisSetupVelWrite.Enable(True)
            self.btnAxisSetupVelCancel.Enable(True)            
            

        self.Modus = 'w'

        self.txtAxisSetupVelMax.SetEditable( False )
        self.txtAxisSetupAccMax.SetEditable( False )
        self.txtAxisSetupDccMax.SetEditable( False )
        self.txtAxisSetupAccTot.SetEditable( False )
        self.txtAxisSetupMaxAmp.SetEditable( False )
        self.txtAxisSetupVelWin.SetEditable( False )
        self.txtAxisSetupVelMax.SetBackgroundColour(wx.Colour(187,187,187))        
        self.txtAxisSetupAccMax.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupDccMax.SetBackgroundColour(wx.Colour(187,187,187))       
        self.txtAxisSetupAccTot.SetBackgroundColour(wx.Colour(187,187,187))        
        self.txtAxisSetupMaxAmp.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupVelWin.SetBackgroundColour(wx.Colour(187,187,187))


    def OnAxisSetupVelCancel(self, evt):
        #print "AxisSetupVelCancel" 
        self.EnableControls()
        self.Modus = 'r'#setup Vel Cancel
        self.btnAxisSetupVelWrite.Enable(False)
        self.btnAxisSetupVelCancel.Enable(False)

        self.txtAxisSetupVelMax.SetValue(str(self.VelMax))
        self.txtAxisSetupAccMax.SetValue(str(self.AccMax))
        self.txtAxisSetupDccMax.SetValue(str(self.DccMax))
        self.txtAxisSetupAccTot.SetValue(str(self.AccTot))
        self.txtAxisSetupMaxAmp.SetValue(str(self.MaxAmp))
        self.txtAxisSetupVelWin.SetValue(str(self.VelWin))
        

        self.txtAxisSetupVelMax.SetEditable( False )
        self.txtAxisSetupAccMax.SetEditable( False )
        self.txtAxisSetupDccMax.SetEditable( False )
        self.txtAxisSetupAccTot.SetEditable( False )
        self.txtAxisSetupMaxAmp.SetEditable( False )
        self.txtAxisSetupVelWin.SetEditable( False )
        self.txtAxisSetupVelMax.SetBackgroundColour(wx.Colour(187,187,187))        
        self.txtAxisSetupAccMax.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupDccMax.SetBackgroundColour(wx.Colour(187,187,187))       
        self.txtAxisSetupAccTot.SetBackgroundColour(wx.Colour(187,187,187))        
        self.txtAxisSetupMaxAmp.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupVelWin.SetBackgroundColour(wx.Colour(187,187,187)) 

#----------------------------------------------------------------
    def OnAxisSetupGuideSetup(self, evt):
        #print "AxisSetupGuideSetup"
        self.DisableControls()
        self.Modus = 'E' # Setup Pos Edit

        self.btnAxisSetupGuideReset.Enable(False)
        self.btnAxisSetupGuideWrite.Enable(True)
        self.btnAxisSetupGuideCancel.Enable(True)


        self.GuidePitch     = self.txtAxisSetupGuidePitch.GetValue()
        self.GuidePosMax    = self.txtAxisSetupGuidePosMax.GetValue()
        self.GuidePosMin    = self.txtAxisSetupGuidePosMin.GetValue()

        self.txtAxisSetupGuidePitch.SetEditable( True )
        self.txtAxisSetupGuidePosMax.SetEditable( True )
        #self.txtAxisSetupGuidePosMin.SetEditable( True ) # Muss erst in SPS implementiert werden
        self.txtAxisSetupGuidePitch.SetBackgroundColour(wx.Colour(255,255,255))
        self.txtAxisSetupGuidePosMax.SetBackgroundColour(wx.Colour(255,255,255))
        #self.txtAxisSetupGuidePosMin.SetBackgroundColour(wx.Colour(255,255,255)) # Muss erst in SPS implementiert werden

    def OnAxisSetupGuideWrite(self, evt):
        #print "AxisSetupGuideWrite"
        self.EnableControls()
        self.btnAxisSetupGuideReset.Enable(True)

        self.btnAxisSetupGuideWrite.Enable(False)
        self.btnAxisSetupGuideCancel.Enable(False)
        
        if (abs(float(self.txtAxisSetupGuidePitch.GetValue())) > 15 ):
            dlg=wx.MessageDialog(None,'Guide Pitch > 15mm; Value uncanged','Error Pitch',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy
            self.txtAxisSetupGuidePitch.SetValue(str(self.GuidePitch))
            self.txtAxisSetupGuidePitch.Refresh() 
            
        if ((float(self.txtAxisSetupGuidePosMax.GetValue())) < 0.05 or
            (float(self.txtAxisSetupGuidePosMax.GetValue())) > (float(self.txtAxisSetupGuidePosMaxMax.GetValue())) ):
            dlg=wx.MessageDialog(None,'Pos Max Guider out of bounds; Value unchanged','Error Pos Max',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy
            self.txtAxisSetupGuidePosMax.SetValue(str(self.GuidePosMax))
            self.txtAxisSetupGuidePosMax.Refresh()
            
        self.GuidePitch     = self.txtAxisSetupGuidePitch.GetValue()
        self.GuidePosMax    = self.txtAxisSetupGuidePosMax.GetValue()
        self.GuidePosMin    = self.txtAxisSetupGuidePosMin.GetValue()

        self.Modus = 'w'

        self.txtAxisSetupGuidePitch.SetEditable( False )
        self.txtAxisSetupGuidePosMax.SetEditable( False )
        self.txtAxisSetupGuidePosMin.SetEditable( False )
        self.txtAxisSetupGuidePitch.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupGuidePosMax.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupGuidePosMin.SetBackgroundColour(wx.Colour(187,187,187)) 

    def OnAxisSetupGuideCancel(self, evt):
        #print "AxisSetupGuideCancel" 
        self.EnableControls()
        
        self.Modus = 'r'

        self.btnAxisSetupGuideReset.Enable(True)
        self.btnAxisSetupGuideWrite.Enable(False)
        self.btnAxisSetupGuideCancel.Enable(False)

        self.txtAxisSetupGuidePitch.SetValue(self.GuidePitch )
        self.txtAxisSetupGuidePosMax.SetValue(self.GuidePosMax)
        self.txtAxisSetupGuidePosMin.SetValue(self.GuidePosMin)

        self.txtAxisSetupGuidePitch.SetEditable( False )
        self.txtAxisSetupGuidePosMax.SetEditable( False )
        self.txtAxisSetupGuidePosMin.SetEditable( False )
        self.txtAxisSetupGuidePitch.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupGuidePosMax.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupGuidePosMin.SetBackgroundColour(wx.Colour(187,187,187)) 


    def OnAxisSetupGuideReset(self, evt):
        #print "AxisSetupGuideReset"
        self.btnAxisSetupGuideClutch.SetLabel('reseting')
        dlg=wx.MessageDialog(None,'Pls Cycle Activation Switch after closing this Dialog','Slave reset',wx.OK|wx.ICON_EXCLAMATION)
        result=dlg.ShowModal()
        dlg.Destroy          
        
    def OnAxisSetupGuideClutch(self, evt):
        #print "AxisSetupGuideClutch"        
        if self.btnAxisSetupGuideClutch.GetValue():
            #print "  engage Clutch"
            self.ClutchStatus = 1
            self.GuideControl = 5
            self.DisableGuideControls() 
            self.btnAxisSetupGuideClutch.SetLabel('engaged')
        else:

            #print "  Dis-engage Clutch"
            self.ClutchStatus = 0
            self.GuideControl = 2
            self.EnableGuideControls()
            self.btnAxisSetupGuideClutch.SetLabel('dis-engaged')

    
#----------------------------------------------------------------
    def OnAxisSetupFilterEdit(self, evt):
        #print "AxisSetupFilterEdit" 
        self.DisableControls()
        self.Modus = 'E'#setup Filter Edit
        self.btnAxisSetupFilterWrite.Enable(True)
        self.btnAxisSetupFilterCancel.Enable(True)

        self.P      = self.txtAxisSetupFilterP.GetValue()
        self.I      = self.txtAxisSetupFilterI.GetValue()
        self.D     = self.txtAxisSetupFilterD.GetValue()
        self.IL     = self.txtAxisSetupFilterIL.GetValue()

        self.txtAxisSetupFilterP.SetEditable( True )
        self.txtAxisSetupFilterI.SetEditable( True )
        self.txtAxisSetupFilterD.SetEditable( True )
        self.txtAxisSetupFilterIL.SetEditable( True )
        self.txtAxisSetupFilterP.SetBackgroundColour(wx.Colour(255,255,255))        
        self.txtAxisSetupFilterI.SetBackgroundColour(wx.Colour(255,255,255))        
        self.txtAxisSetupFilterD.SetBackgroundColour(wx.Colour(255,255,255))
        self.txtAxisSetupFilterIL.SetBackgroundColour(wx.Colour(255,255,255))

    def OnAxisSetupFilterWrite(self, evt):
        #print "AxisSetupFilterWrite"
        self.EnableControls()
        self.btnAxisSetupFilterWrite.Enable(False)
        self.btnAxisSetupFilterCancel.Enable(False)

        self.P     = self.txtAxisSetupFilterP.GetValue()
        self.I      = self.txtAxisSetupFilterI.GetValue()
        self.D     = self.txtAxisSetupFilterD.GetValue()
        self.IL    = self.txtAxisSetupFilterIL.GetValue()

        self.Modus = 'w'

        self.txtAxisSetupFilterP.SetEditable( False )
        self.txtAxisSetupFilterI.SetEditable( False )
        self.txtAxisSetupFilterD.SetEditable( False )
        self.txtAxisSetupFilterIL.SetEditable( False )
        self.txtAxisSetupFilterP.SetBackgroundColour(wx.Colour(187,187,187))        
        self.txtAxisSetupFilterI.SetBackgroundColour(wx.Colour(187,187,187))        
        self.txtAxisSetupFilterD.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupFilterIL.SetBackgroundColour(wx.Colour(187,187,187)) 

    def OnAxisSetupFilterCancel(self, evt):
        #print "AxisSetupFilterCancel" 
        self.EnableControls()
        self.Modus = 'r'#setup Filter Cancel
        self.btnAxisSetupFilterWrite.Enable(False)
        self.btnAxisSetupFilterCancel.Enable(False)

        self.txtAxisSetupFilterP.SetValue(self.P)
        self.txtAxisSetupFilterI.SetValue(self.I)
        self.txtAxisSetupFilterD.SetValue(self.D)
        self.txtAxisSetupFilterIL.SetValue(self.IL)

        self.txtAxisSetupFilterP.SetEditable( False )
        self.txtAxisSetupFilterI.SetEditable( False )
        self.txtAxisSetupFilterD.SetEditable( False )
        self.txtAxisSetupFilterIL.SetEditable( False )
        self.txtAxisSetupFilterP.SetBackgroundColour(wx.Colour(187,187,187))        
        self.txtAxisSetupFilterI.SetBackgroundColour(wx.Colour(187,187,187))        
        self.txtAxisSetupFilterD.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupFilterIL.SetBackgroundColour(wx.Colour(187,187,187)) 

#-------------------------------------------------------------------------------
    def OnEReset(self,evt):
        if self.btnEReset.GetValue():
            App.Cyan.PosSoll = App.Cyan.PosIst
            App.Cyan.EStopReset = 1
            for i in range(10):
                App.Cyan.comunicateServer()
            App.Cyan.EStopReset = 0
            if abs(float(self.txtPosDiff.GetValue())) < 0.01:
                self.OnReSync(1)
            self.btnEReset.SetValue(False)

            
    def EnableGuideControls(self):
        #print "Enabel Guide Controls" 
        self.btnAxisSetupGuideReset.Enable(True) 

    def DisableGuideControls(self):
        #print "Disabel Guide Controls" 

        self.btnAxisSetupGuideReset.Enable(False)

#----------------------------------------------------------------    
    def GoOnline(self):
        # Pruefe ob anderer Client das Commando hat
        if self.Online == False: 
            #print " Going Online" 
            App.Cyan.Intent  = 'False'
            self.EnableControls()
            self.Modus = 'r'#setup Rope Cancel
            self.txtTimeTick.SetBackgroundColour(wx.Colour(0 ,150,0))
            self.cmbAxisName.SetBackgroundColour(wx.Colour(0 ,150,0))
            self.txtTimeTick.Refresh()
            self.cmbAxisName.Refresh()
            self.Online = True


    def GoOffline(self):
        #if self.Online == True:
        #print " Going Offline" 
        self.Online = False
        self.DisableControls()
        self.Modus = 'rE'#setup Rope Cancel
        self.txtTimeTick.SetBackgroundColour(wx.Colour(255,255,255))
        self.cmbAxisName.SetBackgroundColour(wx.Colour(255,255,255))
        self.txtTimeTick.Refresh()
        self.cmbAxisName.Refresh()
        return

    def PermitOnline(self):
        if self.Controlle == False:
            #print "Online Permission"
            App.Cyan.Intent  = 'True'
            self.Controlle = True


    def DenyOnline(self):
        if self.Controlle == True:
            #print "Online forbidden"  
            App.Cyan.Intent = 'False'
            self.Controlle = False

    def DisableControls(self):
        if self.ControlsEnabeled:
            #print 'Disabeling Controls'
            self.btnAxisReset.Enable(False)
            self.btnAxisSetupPosEdit.Enable(False)
            self.btnAxisSetupPosWrite.Enable(False)
            self.btnAxisSetupPosCancel.Enable(False)
            self.txtAxisSetupPosHardMax.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupPosUserMax.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupPosIst.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupPosUserMin.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupPosHardMin.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupPosPosWin.SetBackgroundColour(wx.Colour(187,187,187)) 
            self.btnAxisSetupVelEdit.Enable(False)
            self.btnAxisSetupVelWrite.Enable(False)
            self.btnAxisSetupVelCancel.Enable(False)
            self.txtAxisSetupVelMaxMot.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupVelMaxMot.SetForegroundColour(wx.Colour(255,0,0))
            self.txtAxisSetupVelMax.SetBackgroundColour(wx.Colour(187,187,187))        
            self.txtAxisSetupAccMax.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupDccMax.SetBackgroundColour(wx.Colour(187,187,187))       
            self.txtAxisSetupAccTot.SetBackgroundColour(wx.Colour(187,187,187))        
            self.txtAxisSetupMaxAmp.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupVelWin.SetBackgroundColour(wx.Colour(187,187,187))
            self.btnAxisSetupGuideSetup.Enable(False)
            self.btnAxisSetupGuideWrite.Enable(False)
            self.btnAxisSetupGuideCancel.Enable(False)
            self.btnAxisSetupGuideReset.Enable(False)              
            self.btnAxisSetupGuideClutch.Enable(False)
    
            self.txtAxisSetupGuidePitch.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupGuidePosMax.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupGuidePosMin.SetBackgroundColour(wx.Colour(187,187,187))        
            self.btnAxisSetupFilterEdit.Enable(False)        
            self.btnAxisSetupFilterWrite.Enable(False)
            self.btnAxisSetupFilterCancel.Enable(False)
            self.txtAxisSetupFilterLagError.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupFilterP.SetBackgroundColour(wx.Colour(187,187,187))        
            self.txtAxisSetupFilterI.SetBackgroundColour(wx.Colour(187,187,187))        
            self.txtAxisSetupFilterD.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupFilterIL.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupFilterRampform.SetBackgroundColour(wx.Colour(187,187,187))
            self.btnAxisSetupRopeEdit.Enable(False)
            self.btnAxisSetupRopeWrite.Enable(False)
            self.btnAxisSetupRopeCancel.Enable(False)
            self.txtAxisSetupRopeSWLL.SetBackgroundColour(wx.Colour(187,187,187))        
            self.txtAxisSetupRopeDiameter.SetBackgroundColour(wx.Colour(187,187,187))        
            self.txtAxisSetupRopeType.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupRopeNumber.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupRopeLength.SetBackgroundColour(wx.Colour(187,187,187))
            self.ControlsEnabeled = False
            self.btnRecover.Enable(False)
            self.btnReSync.Enable(False)
    def EnableControls(self):
        if not(self.ControlsEnabeled):
            #print 'Enabeling Controls'
            self.btnAxisReset.Enable(True)
            self.btnAxisSetupPosEdit.Enable(True)
            self.btnAxisSetupVelEdit.Enable(True)
            self.btnAxisSetupGuideSetup.Enable(True)
            self.btnAxisSetupGuideReset.Enable(True)              
            self.btnAxisSetupGuideClutch.Enable(True)
            self.btnAxisSetupFilterEdit.Enable(True)        
            #self.btnAxisSetupRopeEdit.Enable(True)
            #self.btnRecover.Enable(True)
            self.ControlsEnabeled = True
            
    def OnAxisSelect(self,evt):
        try:
            App.Cyan            
            item = evt.GetSelection()
            if App.Cyan.Name <> self.Achsen[item]:

                dlg = wx.MessageDialog(None, 'Are you sure you want to reassign Cyan Axis ?','Question', wx.OK | wx.CANCEL | wx.NO_DEFAULT | wx.ICON_QUESTION)
                result = dlg.ShowModal()
                dlg.Destroy()
                if result == wx.ID_OK:
                    try:
                        Temp = Achse(self.Achsen[item]) # Achse item laesst sich assignen
                    except: # wenn anderes GUI kontrolle dann auf SIMUL
                        dlg = wx.MessageDialog(None, 'Cyan Axis set to SIMUL !','Reset to SIMUL', wx.OK | wx.ICON_EXCLAMATION)
                        result = dlg.ShowModal()
                        dlg.Destroy()                        
                        del App.Cyan
                        App.Cyan = Achse('SIMUL')
                        App.Cyan.OwnPID= '0'#str(os.getpid())
                        #print 'Axis '+self.Achsen[item]+ ' as Cyan selected'
                        App.Cyan.comunicateServer()
                        taskMgr.add(self.AxisTask,'CyanAxisTask')
                    else:
                        #print 'Cyan lsst sich auf ' + str(self.Achsen[item]) + 'assignen'
                        try:
                            del Temp
                        except:
                            pass
                        #print self.Achsen[item]
                        self.ResetAxis()
                else:
                    #print ' Accessing App.Green '
                    self.ReadDatafromAchse()
        except: # Noch kein Achsobjekt
            self.ResetAxis()

    def AxisReadJoystick(self):
        self.initJoystick()
        self.keepGoing                       = True
        self.LTold                           = 0
        self.ControlingPIDTx                 = 0
        self.ControlingPIDRx                 = 0
        self.Progression                     = 0.0001
        self.WriteZaehler = 0
        self.T1Old = 0
        self.VX = 0
        self.Pos0 = 0
        self.EnableOld = 0
        self.PoweredOld = 0
        self.Decode  = Decode()
        self.InitAxis = 1
        self.FahrbefehlOld = 1
        self.refreshEstopPanel = "Yellow"
        self.refreshBitPanel = "RedBrown"
        self.refreshRecoverPanel = "RedBrown"
        self.refreshSelect = "Blue"
        self.GuideControlOld = 2
        self.ValueSLDMain = 0
        self.ValueSLDSlave = 0
        self.SetupVelMax = 0
        
        taskMgr.add(self.AxisTask,'CyanAxisTask')
        
    def LoadFromFileQuit(self):
        
        taskMgr.remove("CyanAxisTask")
        
    def ResetAxis(self):
        
        self.initJoystick()
        self.keepGoing                       = True
        self.LTold                           = 0
        self.ControlingPIDTx                 = 0
        self.ControlingPIDRx                 = 0
        self.Progression                     = 0.0001
        self.WriteZaehler = 0
        self.T1Old = 0
        self.VX = 0
        self.Pos0 = 0
        self.EnableOld = 0
        self.PoweredOld = 0
        self.Decode  = Decode()
        self.InitAxis = 1
        self.FahrbefehlOld = 1
        self.refreshEstopPanel = "Yellow"
        self.refreshBitPanel = "RedBrown"
        self.refreshRecoverPanel = "RedBrown"
        self.refreshSelect = "Blue"
        self.GuideControlOld = 2
        self.ValueSLDMain = 0
        self.ValueSLDSlave = 0
        self.SetupVelMax = 0

        self.Modus = 'rE' # initialisieren im read Edit Mode
        self.Command=False
        self.DisableControls()
        try:
            App.Cyan
            AxisExists = True
            #print 'Cyan existiert'
        except: # Noch kein Achsobjekt
            AxisExists = False
            #print 'Cyan non exist'
            
        if not(AxisExists): # noch kein Achsobjekt -> neues instanzieren
            #print 'bauen neues Cyan'
            item=self.cmbAxisName.GetCurrentSelection()
            App.Cyan = Achse(self.Achsen[item])
            App.Cyan.OwnPID= str(os.getpid())
            #print 'Axis '+self.Achsen[item]+ ' as Cyan selected'
            App.Cyan.comunicateServer()
        else:
            del App.Cyan
            #print 'del Cyan'
            item=self.cmbAxisName.GetCurrentSelection()
            App.Cyan = Achse(self.Achsen[item])
            App.Cyan.OwnPID= '0'#str(os.getpid())
            #print 'Neues Neues Gelb'
            #print 'Axis '+self.Achsen[item]+ ' as Cyan selected'
            App.Cyan.comunicateServer()            
            
        taskMgr.add(self.AxisTask,'CyanAxisTask') 
        
        return True 
        
    def Loadfromfile(self,item):
        
        self.initJoystick()
        self.keepGoing                       = True
        self.LTold                           = 0
        self.ControlingPIDTx                 = 0
        self.ControlingPIDRx                 = 0
        self.Progression                     = 0.0001
        self.WriteZaehler = 0
        self.T1Old = 0
        self.VX = 0
        self.Pos0 = 0
        self.EnableOld = 0
        self.PoweredOld = 0
        self.Decode  = Decode()
        self.InitAxis = 1
        self.FahrbefehlOld = 1
        self.refreshEstopPanel = "Yellow"
        self.refreshBitPanel = "RedBrown"
        self.refreshRecoverPanel = "RedBrown"
        self.refreshSelect = "Blue"
        self.GuideControlOld = 2
        self.ValueSLDMain = 0
        self.ValueSLDSlave = 0
        self.SetupVelMax = 0
        
        self.Modus = 'rE' # initialisieren im read Edit Mode
        self.Command=False
        self.DisableControls()
        
        
        try:
            App.Cyan
            CyanExists = True
        except:
            CyanExists = False
        if not(CyanExists):
            App.Cyan = Achse(item.rstrip('\n'))
            App.Cyan.OwnPID= str(os.getpid())
            #print 'Axis '+item.rstrip('\n')+ ' as Cyan selected'
        else:
            taskMgr.remove('CyanAxisTask')
            del App.Cyan
            App.Cyan = Achse(item.rstrip('\n'))
            App.Cyan.OwnPID= str(os.getpid())
            
        App.Cyan.comunicateServer()

        taskMgr.add(self.AxisTask,'CyanAxisTask')            
   


    def AxisTask(self,task):
        self.refresh()
        return task.cont
    
    
    def refresh(self):
        
        self.readJoystick()
        self.readDataFromGUI()
        self.RampGenerator()        
        self.comunicateServer()
        self.writeDataToGUI()
        self.CheckStatus()
        
    def readDataFromGUI(self):

        App.Cyan.ControlingPIDTx = 0
        App.Cyan.Intent          = self.Command
        App.Cyan.Enable          = self.EnableStatus
        ##App.Cyan.EStopReset      = str(self.EStopReset)
        
        if App.Cyan.EStopReset == '1':
            self.Pos0 = App.Cyan.PosIst
        if self.btnAxisSetupGuideClutch.GetLabel() == "reseting":
            App.Cyan.GuideControl   = 5
            b=self.Decode.Decode(App.Cyan.GuideStatus)
            if b[1][0][2] == "Save Stop" or b[1][0][2] == "Not Enabled" or b[1][0][2] == "Ready":
                self.btnAxisSetupGuideClutch.SetLabel("Reset")
                if self.btnAxisSetupGuideClutch.GetValue():
                    self.btnAxisSetupGuideClutch.SetLabel("engaged")
                else:
                    self.btnAxisSetupGuideClutch.SetLabel("dis-engaged")
        else:
            if self.ClutchStatus == 1:
                App.Cyan.GuideControl   = 5
            else:
                if self.buttons & 128:
                    App.Cyan.GuideControl   = 17
                else:
                    App.Cyan.GuideControl   = 2 
                    
        if self.btnAxisReset.GetLabel() == "reseting":
            b=self.Decode.Decode(App.Cyan.Status)
            if b[1][0][2] == "Save Stop" or b[1][0][2] == "Not Enabled" or b[1][0][2] == "Ready":
                self.btnAxisReset.SetLabel("Reset") 
                self.btnAxisReset.SetValue(0)
        try:
            App.Cyan.Modus         = self.Modus
            App.Cyan.SpeedSoll     = self.VX
            App.Cyan.GuideSpeedSoll= self.sldAxisSetupGuideVel.GetValue()*20
            if not (self.txtAxisSetupPosHardMax.GetValue() == "-" or self.txtAxisSetupPosHardMax.GetValue() ==""):
                App.Cyan.PosHardMax    = float(self.txtAxisSetupPosHardMax.GetValue())
            if not (self.txtAxisSetupPosUserMax.GetValue() == "-" or self.txtAxisSetupPosUserMax.GetValue() == "") :
                App.Cyan.PosUserMax    = float(self.txtAxisSetupPosUserMax.GetValue())
            if not (self.txtAxisSetupPosUserMin.GetValue() == "-"  or self.txtAxisSetupPosUserMin.GetValue() == ""):
                App.Cyan.PosUserMin    = float(self.txtAxisSetupPosUserMin.GetValue())
            if not (self.txtAxisSetupPosHardMin.GetValue() == "-" or self.txtAxisSetupPosHardMin.GetValue() == "" ):
                App.Cyan.PosHardMin    = float(self.txtAxisSetupPosHardMin.GetValue())
            if not (self.txtAxisSetupPosPosWin.GetValue() == "-"  or self.txtAxisSetupPosPosWin.GetValue() == ""):
                App.Cyan.PosWin           = abs(float(self.txtAxisSetupPosPosWin.GetValue()))
            if not (self.txtAxisSetupVelMax.GetValue() == "-" or self.txtAxisSetupVelMax.GetValue() == ""):
                App.Cyan.SpeedMax         = abs(float(self.txtAxisSetupVelMax.GetValue()))
            if not (self.txtAxisSetupAccMax.GetValue() == "-" or self.txtAxisSetupAccMax.GetValue() == ""):
                App.Cyan.AccMax           = abs(float(self.txtAxisSetupAccMax.GetValue()))
            if not (self.txtAxisSetupDccMax.GetValue() == "-" or self.txtAxisSetupDccMax.GetValue() == ""):
                App.Cyan.DccMax           = abs(float(self.txtAxisSetupDccMax.GetValue()))
            if not (self.txtAxisSetupAccTot.GetValue() == "-" or self.txtAxisSetupAccTot.GetValue() == ""):
                App.Cyan.AccTot           = abs(float(self.txtAxisSetupAccTot.GetValue()))
            if not (self.txtAxisSetupMaxAmp.GetValue() == "-" or self.txtAxisSetupMaxAmp.GetValue() == ""):
                App.Cyan.MaxAmp           = abs(float(self.txtAxisSetupMaxAmp.GetValue()))
            if not (self.txtAxisSetupVelWin.GetValue() == "-" or self.txtAxisSetupVelWin.GetValue() == ""):
                App.Cyan.VelWin           = abs(float(self.txtAxisSetupVelWin.GetValue()))
            if not (self.txtAxisSetupFilterP.GetValue() == "-" or self.txtAxisSetupFilterP.GetValue() == ""):
                App.Cyan.FilterP          = abs(float(self.txtAxisSetupFilterP.GetValue()))
            if not (self.txtAxisSetupFilterI.GetValue() == "-" or self.txtAxisSetupFilterI.GetValue() == ""):
                App.Cyan.FilterI          = abs(float(self.txtAxisSetupFilterI.GetValue()))
            if not (self.txtAxisSetupFilterD.GetValue() == "-" or self.txtAxisSetupFilterD.GetValue() == ""):
                App.Cyan.FilterD          = abs(float(self.txtAxisSetupFilterD.GetValue()))
            if not (self.txtAxisSetupFilterIL.GetValue() == "-" or self.txtAxisSetupFilterIL.GetValue() == ""):
                App.Cyan.FilterIL         = abs(float(self.txtAxisSetupFilterIL.GetValue()))
            if not (self.txtAxisSetupRopeSWLL.GetValue() == "-" or self.txtAxisSetupRopeSWLL.GetValue() == ""):
                App.Cyan.RopeSWLL         = abs(float(self.txtAxisSetupRopeSWLL.GetValue()))
            if not (self.txtAxisSetupRopeDiameter.GetValue() == "-" or self.txtAxisSetupRopeDiameter.GetValue() == ""):
                App.Cyan.RopeDiameter     = abs(float(self.txtAxisSetupRopeDiameter.GetValue()))
            App.Cyan.RopeType         = self.txtAxisSetupRopeType.GetValue()
            App.Cyan.RopeNumber       = self.txtAxisSetupRopeNumber.GetValue()
            if not (self.txtAxisSetupRopeLength.GetValue() == "-" or self.txtAxisSetupRopeLength.GetValue() == ""):
                App.Cyan.RopeLength       = abs(float(self.txtAxisSetupRopeLength.GetValue()))
            if not (self.txtAxisSetupGuidePitch.GetValue() == "-" or self.txtAxisSetupGuidePitch.GetValue() == "-"):
                App.Cyan.GuidePitch       = float(self.txtAxisSetupGuidePitch.GetValue())
            if not (self.txtAxisSetupGuidePosMax.GetValue() == "-" or self.txtAxisSetupGuidePosMax.GetValue() == ""):
                App.Cyan.GuidePosMax      = abs(float(self.txtAxisSetupGuidePosMax.GetValue()))
            App.Cyan.GuidePosMaxMax   = float(self.txtAxisSetupGuidePosMaxMax.GetValue())
            if not (self.txtAxisSetupGuidePosMin.GetValue() == "-" or self.txtAxisSetupGuidePosMin.GetValue() == ""):
                App.Cyan.GuidePosMin      = float(self.txtAxisSetupGuidePosMin.GetValue())
        except ValueError:
            dlg=wx.MessageDialog(None,'Please use just numbers, minus and . as comma. Like 123.45  Use <Backspace> to correct the error!','Syntax ERROR',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy
            self.txtAxisSetupPosHardMax.SetValue(str(App.Cyan.PosHardMax))
            self.txtAxisSetupPosUserMax.SetValue(str(App.Cyan.PosUserMax))
            self.txtAxisSetupPosUserMin.SetValue(str(App.Cyan.PosUserMin))
            self.txtAxisSetupPosHardMin.SetValue(str(App.Cyan.PosHardMin))
            self.txtAxisSetupPosPosWin.SetValue(str(App.Cyan.PosWin))
            self.txtAxisSetupVelMax.SetValue(str(App.Cyan.SpeedMax))
            self.txtAxisSetupAccMax.SetValue(str(App.Cyan.AccMax))
            self.txtAxisSetupDccMax.SetValue(str(App.Cyan.DccMax))
            self.txtAxisSetupAccTot.SetValue(str(App.Cyan.AccTot))
            self.txtAxisSetupMaxAmp.SetValue(str(App.Cyan.MaxAmp))
            self.txtAxisSetupVelWin.SetValue(str(App.Cyan.VelWin))
            self.txtAxisSetupFilterP.SetValue(str(App.Cyan.FilterP))
            self.txtAxisSetupFilterI.SetValue(str(App.Cyan.FilterI))
            self.txtAxisSetupFilterD.SetValue(str(App.Cyan.FilterD))
            self.txtAxisSetupFilterIL.SetValue(str(App.Cyan.FilterIL))
            self.txtAxisSetupRopeSWLL.SetValue(str(App.Cyan.RopeSWLL))
            self.txtAxisSetupRopeDiameter.SetValue(str(App.Cyan.RopeDiameter))
            self.txtAxisSetupRopeType.SetValue(str(App.Cyan.RopeType))
            self.txtAxisSetupRopeNumber.SetValue(str(App.Cyan.RopeNumber))
            self.txtAxisSetupRopeLength.SetValue(str(App.Cyan.RopeLength))
            self.txtAxisSetupGuidePitch.SetValue(str(App.Cyan.GuidePitch))
            self.txtAxisSetupGuidePosMax.SetValue(str(App.Cyan.GuidePosMax))
            self.txtAxisSetupGuidePosMaxMax.SetValue(str(App.Cyan.GuidePosMaxMax))
            self.txtAxisSetupGuidePosMin.SetValue(str(App.Cyan.GuidePosMin))
            self.readDataFromGUI()

    def ReadDatafromAchse(self):
        
        self.Command          = App.Cyan.Intent           
        self.Enable           = App.Cyan.Enable
        if App.Cyan.GuideControl   == 5:
            self.btnAxisSetupGuideClutch.SetValue(True)    # Noch nicht passend        
        elif App.Cyan.GuideControl   == 17:              # Noch nicht passend  
            self.btnAxisSetupGuideEnable.SetValue(True)    # Noch nicht passend                 
        else:                                              # Noch nicht passend  
            self.btnAxisSetupGuideClutch.SetValue(True)    # Noch nicht passend  
            self.btnAxisSetupGuideEnable.SetValue(True)    # Noch nicht passend 
        self.Modus = App.Cyan.Modus 
        
        self.cmbAxisName.SetSelection(self.cmbAxisName.GetItems().index(unicode(App.Cyan.Name)))
        
        self.sldAxisVel.SetValue(500)    # Noch nicht passend 
        self.sldAxisSetupGuideVel.SetValue(50)
        self.txtAxisPos.SetValue(App.Cyan.PosIst)
        self.txtAxisSetupPosIst.SetValue(App.Cyan.PosIst)
        self.txtAxisSetupPosHardMax.SetValue(str(App.Cyan.PosHardMax)) 
        self.txtAxisSetupPosUserMax.SetValue(str(App.Cyan.PosUserMax))
        self.txtAxisSetupPosUserMin.SetValue(str(App.Cyan.PosUserMin))
        self.txtAxisSetupPosHardMin.SetValue(str(App.Cyan.PosHardMin))
        self.txtAxisSetupVelMax.SetValue(str(App.Cyan.SpeedMax))
        self.txtAxisSetupAccMax.SetValue(str(App.Cyan.AccMax))
        self.txtAxisSetupDccMax.SetValue(str(App.Cyan.DccMax))
        if App.Cyan.MaxAmp == 0.0:
            self.txtAxisSetupMaxAmp.SetValue("SIMUL")                
        else:
            self.txtAxisSetupMaxAmp.SetValue(str(App.Cyan.MaxAmp))
        self.txtAxisSetupFilterP.SetValue(App.Cyan.FilterP)
        self.txtAxisSetupFilterI.SetValue(App.Cyan.FilterI)
        self.txtAxisSetupFilterD.SetValue(App.Cyan.FilterD)
        self.txtAxisSetupFilterIL.SetValue(App.Cyan.FilterIL)
        self.txtAxisSetupGuidePitch.SetValue(App.Cyan.GuidePitch)
        self.txtAxisSetupGuidePosMax.SetValue(App.Cyan.GuidePosMax)
        self.txtAxisSetupGuidePosMin.SetValue(App.Cyan.GuidePosMin)
        


    def comunicateServer(self):
        App.Cyan.comunicateServer()

    def RampGenerator(self):
        if self.InitAxis == 1:
            self.Pos0 = App.Cyan.PosIst
            self.InitAxis = 0
        self.Pos0=App.Cyan.PosSoll        
        T1     = time.clock()
        self.DiffT= T1-self.T1Old
        self.T1Old  = T1
        # Fahrbefehlstaster gedrueckt Programm reagiert normal auf Joystick
        if App.Cyan.EsTaster:
            if self.FahrbefehlOld == 1:
                self.Pos0 = App.Cyan.PosIst
                self.FahrbefehlOld = 0
                
            d=self.Decode.Decode(App.Cyan.Status) #schauen ob Verstaerker in TechOpt ist
            if d[1][0][1] == "10"and (self.buttons & 32 and self.buttons & 8):
                if self.Modus != 'recover':
                    self.SetupVelMax = float(self.txtAxisSetupVelMax.GetValue())
                    self.SetupVelMax = max((float(self.txtAxisSetupVelMax.GetValue()))/10,1.0)
                else:
                    self.SetupVelMax = max((float(self.txtAxisSetupVelMax.GetValue()))/10,1.0)
                x = (self.sldAxisVel.GetValue() - 500) * 2 *self.SetupVelMax/1000  # 20 = 1000mm / 50 fuer Prozent
            else:
                x=0
            #VelX
            if self.VX < x:
                self.VX = self.VX + float(App.Cyan.AccMax)*(self.DiffT)
                if self.VX >= x:
                    self.VX = x
            elif self.VX > x:
                self.VX = self.VX - float(App.Cyan.DccMax)*(self.DiffT)
                if self.VX <= x:
                        self.VX = x  
        # Abfangen der Endpositionen *)
        #Bei Fahrt Richtung oberes Ende Beginn
            PosDiffG = float(App.Cyan.PosUserMax) - float(App.Cyan.PosIst)
            if PosDiffG > 0 :
                SpeedMaxG = math.sqrt(float(App.Cyan.DccMax)*0.8*PosDiffG)
                self.VX = min(self.VX,SpeedMaxG);
            else:
                if self.VX > 0:
                    self.VX = 0.0;
            #Bei Fahrt Richtung oberes Ende End
            #Bei Fahrt Richtung unteres Ende Beginn
            PosDiffG = float(App.Cyan.PosIst) - float(App.Cyan.PosUserMin)
            if PosDiffG > 0 :
                SpeedMaxG = math.sqrt(float(App.Cyan.DccMax)*0.8*PosDiffG)
                self.VX = max(self.VX,-SpeedMaxG);
            else:
                if self.VX < 0 :
                    self.VX = 0.0
            #Bei Fahrt Richtung unteres Ende End
# Fahrbefehlstaster offen Programm steuert Motor mit AccTot zum Stillstand
        else:
            x = 0.0
            if self.VX < x:
                self.VX = self.VX + float(App.Cyan.AccTot)*(self.DiffT)
                if self.VX >= x:
                    self.VX = x
            elif self.VX > x:
                self.VX = self.VX - float(App.Cyan.AccTot)*(self.DiffT)
                if self.VX <= x:
                        self.VX = x 
            self.FahrbefehlOld = 1
            
        App.Cyan.PosSoll= str(float(self.Pos0)+self.VX*(self.DiffT))        

    
    
    def writeDataToGUI(self):        
        a=self.Decode.Decode(App.Cyan.Status)                         
        b=self.Decode.Decode(App.Cyan.GuideStatus)
        if App.Cyan.EsTaster:
            self.DisableControls()
            self.btnAxisSetupGuideClutch.Enable(False)
            self.btnAxisSetupGuideReset.Enable(False)            
            self.cmbAxisName.Enable(False)
        else:
            if self.Modus != 'E':
                self.EnableControls()
                self.cmbAxisName.Enable(True)
                self.btnAxisSetupGuideClutch.Enable(True)
                #if self.ClutchStatus == 0:
                self.btnAxisSetupGuideReset.Enable(True)
            
        if App.Cyan.EsResetAble:
            self.btnEReset.Enable(False)
        else:
            self.btnEReset.Enable(True)
            
        self.SliderPanel.Update()

        if not(abs(float(self.txtPosDiff.GetValue())) < 0.01):
            if self.refreshRecoverPanel != 'Yellow':
                self.RecoverPanel.SetBackgroundColour((250,198,12))
                self.RecoverPanel.Refresh()
                self.refreshRecoverPanel = 'Yellow'               
        else:
            if self.refreshRecoverPanel != 'Green':
                self.RecoverPanel.SetBackgroundColour((0,150,0))
                self.RecoverPanel.Refresh()
                self.refreshRecoverPanel = 'Green'
                
        if not(App.Cyan.EsNetwork) :            
            if self.refreshEstopPanel != "Yellow":
                self.EStopPanel.SetBackgroundColour((250,198,12))
                self.EStopPanel.Refresh()
                self.refreshEstopPanel = "Yellow"
        else:
            if self.refreshEstopPanel != "Green":
                self.EStopPanel.SetBackgroundColour((0,150,0))
                self.EStopPanel.Refresh()
                self.refreshEstopPanel = "Green" 
                
        if App.Cyan.Modus !='E':
            if not(App.Cyan.EsNetwork) : 
                self.btnRecover.Enable(False)
                self.btnReSync.Enable(False)
            else:
                if (abs(float(self.txtPosDiff.GetValue())) < 0.01):
                    self.btnRecover.Enable(False)
                else:
                    self.btnRecover.Enable(True)
                if (App.Cyan.EsTaster or abs(float(self.txtPosDiff.GetValue())) < 0.01 or
                    self.btnRecover.GetLabel() == 'Running'):
                    self.btnReSync.Enable(False)
                else:     
                    self.btnReSync.Enable(True) 
        else:
            self.btnRecover.Enable(False)
            self.btnReSync.Enable(False)
            
        if (not(App.Cyan.EsNetwork)):          #Gelb
            if self.refreshBitPanel != "Yellow":
                self.BitPanel.SetBackgroundColour((250,198,12)) 
                self.BitPanel.Refresh()
                self.refreshBitPanel = "Yellow"
        else:
            if ((App.Cyan.EsReady and abs(float(self.txtPosDiff.GetValue())) >= 0.01) or
                ((App.Cyan.EsReady and abs(float(self.txtPosDiff.GetValue())) < 0.01))):
                if self.refreshBitPanel != "LightGreen":
                    self.BitPanel.SetBackgroundColour((0,150,0))
                    self.BitPanel.Refresh()
                    self.refreshBitPanel = "LightGreen"
            else:
                if (not(App.Cyan.EsReady) and abs(float(self.txtPosDiff.GetValue())) > 0.01) :
                    if self.refreshBitPanel != "Yellow":
                        self.BitPanel.SetBackgroundColour((250,198,12)) 
                        self.BitPanel.Refresh()
                        self.refreshBitPanel = "Yellow"
                else:
                    if self.refreshBitPanel != "RedBrown":
                        self.BitPanel.SetBackgroundColour((128,128,128))  
                        self.BitPanel.Refresh()
                        self.refreshBitPanel = "RedBrown"

        if (App.Cyan.Modus == 'r' or 
            App.Cyan.Modus == 'rE' or 
            App.Cyan.Modus == 'JoyEnabeled' or
            App.Cyan.Modus == 'recover'):
            fa="%3.2f"
            fb="%2.3f"
            fc="%2.0f"
            fd="%3.1f"
            fe="%1.4f"
            self.ControlingPIDRx = App.Cyan.ControlingPIDRx                                         #[0] Controling PID
            self.txtTimeTick.SetValue(str(App.Cyan.LTold-self.LTold))
            #self.txtTimeTick.SetValue(str(self.Achse.GetLTold()-self.LTold))
            self.LTold =int(App.Cyan.LTold)                                        
            self.txtAxisError.SetValue(a[1][0][2])
            self.txtAxisError.SetBackgroundColour(a[1][0][3])
            #self.txtAxisError.SetToolTipString(str(a[0]))
                                                              #[3] Guide Status
            self.txtAxisSetupGuideError.SetValue(b[1][0][2])
            self.txtAxisSetupGuideError.SetBackgroundColour(b[1][0][3])
            #self.txtAxisSetupGuideError.SetToolTipString(str(b[0]))
            self.txtAxisPos.SetValue(str(fa%(float(App.Cyan.PosIst)) +' m'))                              #[4] AxisPos
            self.txtAxisSetupPosIst.SetValue(str(fa%(float(App.Cyan.PosIst))))
            self.txtAxisVel.SetValue(str(fa%(float(App.Cyan.SpeedIstUI)) +' m/s'))                        #[5] AxisVel
            self.txtAxisAmp.SetValue(str(fa%(float(App.Cyan.MasterMomentUI )/1000*60)+' A'))  #[6] AxisAmp
            self.txtAxisTemp.SetValue(str(App.Cyan.CabTemperature +' C'))                     #[7] AxisTemp        
            self.txtAxisSetupGuidePos.SetValue(str(App.Cyan.GuidePosIstUI))                   #[30]GuidePos
            self.txtAxisSetupGuideVel.SetValue(str(App.Cyan.GuideIstSpeedUI))                 #[31]GuideVel
            self.txtAxisSetupVelMaxMot.SetValue(str(abs(float(App.Cyan.SpeedMaxForUI))))                  #[37]VelMaxMot
            self.txtAxisSetupFilterLagError.SetValue(str(App.Cyan.PosDiffForUI ))             #[38]Lag Error
            self.cmbAxisName.SetValue(str(App.Cyan.Name))                                     #[8]  Name
            self.txtAxisSetupPosHardMax.SetValue(str(App.Cyan.PosHardMax))                    #[10] PosHardMax
            self.txtAxisSetupPosUserMax.SetValue(str(App.Cyan.PosUserMax))                    #[11] PosUserMax
            self.txtAxisSetupPosUserMin.SetValue(str(App.Cyan.PosUserMin))                    #[12] PosUserMin
            self.txtAxisSetupPosHardMin.SetValue(str(App.Cyan.PosHardMin))                    #[13] PosHardMin
            self.txtAxisSetupPosPosWin.SetValue(str(App.Cyan.PosWin))                            #[38] PosWin
            self.txtAxisSetupVelMax.SetValue(str(App.Cyan.SpeedMax))                          #[14] VelMax
            self.txtAxisSetupAccMax.SetValue(str(App.Cyan.AccMax))                            #[15] AccMax
            self.txtAxisSetupDccMax.SetValue(str(App.Cyan.DccMax))                            #[16] DccMax
            self.txtAxisSetupAccTot.SetValue(str(App.Cyan.AccTot))                            #[40] AccTot
            self.txtAxisSetupMaxAmp.SetValue(str(App.Cyan.MaxAmp))                            #[17] AmpMax
            self.txtAxisSetupVelWin.SetValue(str(App.Cyan.VelWin))                            #[39] VelWin
            self.txtAxisSetupFilterP.SetValue(str(App.Cyan.FilterP))                          #[18] FilterP
            self.txtAxisSetupFilterI.SetValue(str(App.Cyan.FilterI))                          #[19] FilterI
            self.txtAxisSetupFilterD.SetValue(str(App.Cyan.FilterD))                          #[20] FilterD
            self.txtAxisSetupFilterIL.SetValue(str(App.Cyan.FilterIL))                        #[21] FilterIL
            self.txtAxisSetupFilterRampform.SetValue(str(App.Cyan.Rampform))                  #[36] Rampform
            self.txtAxisSetupRopeSWLL.SetValue(str(App.Cyan.RopeSWLL))                        #[22] SWLL
            self.txtAxisSetupRopeDiameter.SetValue(str(App.Cyan.RopeDiameter))                #[23] Rope Diam    
            self.txtAxisSetupRopeType.SetValue(str(App.Cyan.RopeType))                        #[24] Rope Type 
            self.txtAxisSetupRopeNumber.SetValue(str(App.Cyan.RopeNumber))                    #[25] Rope Number     
            self.txtAxisSetupRopeLength.SetValue(str(App.Cyan.RopeLength))                    #[26] Rope Length   
            self.txtAxisSetupGuidePitch.SetValue(str(App.Cyan.GuidePitch))                    #[27] Pitch       
            self.txtAxisSetupGuidePosMax.SetValue(str(App.Cyan.GuidePosMax))                  #[28] Guide Pos Max
            self.txtAxisSetupGuidePosMaxMax.SetValue(str(App.Cyan.GuidePosMaxMax))            #[41] Guide Pos MaxMax
            self.txtAxisSetupGuidePosMin.SetValue(str(App.Cyan.GuidePosMin))                  #[29] Guide Pos Min
            self.txtCutPos.SetValue(str(fa%(float(App.Cyan.EStopCutPos))))
            self.txtCutVel.SetValue(str(fa%(float(App.Cyan.EStopCutVel))))
            self.txtPosDiff.SetValue(str(fa%(float(App.Cyan.EStopCutPos)-float(App.Cyan.PosIst))))
            self.txtCutTime.SetValue(str(App.Cyan.EStopCutTime))

        
        self.rMaster.SetValue(App.Cyan.EsMaster)
        self.rSlave.SetValue(App.Cyan.EsSlave)
        self.rNetwork.SetValue(App.Cyan.EsNetwork)            
        self.rEStop1.SetValue(App.Cyan.EsEStop1)
        self.rEStop2.SetValue(App.Cyan.EsEStop2)
        self.rSteuerwort.SetValue(App.Cyan.EsSteuerwort)
        self.r30kWOK.SetValue(App.Cyan.Es30kWOK )
        self.r05kWOK.SetValue(App.Cyan.Es05kWOK)
        self.rB1OK.SetValue(not(App.Cyan.EsB1OK ^ App.Cyan.EsTaster))
        self.rB2OK.SetValue(not (App.Cyan.EsB2OK ^ App.Cyan.EsTaster))
        #self.rB1OK.SetValue(App.Cyan.EsB1OK )
        #self.rB2OK.SetValue(App.Cyan.EsB2OK )        
        self.rDSC.SetValue(App.Cyan.EsDCSOK)    
        self.rSPSOK.SetValue(App.Cyan.EsSPSOK)
        self.rBRK2KB.SetValue(App.Cyan.EsBRK2KB)
        self.rPosWin.SetValue(App.Cyan.EsPosWin)
        self.rVelWin.SetValue(App.Cyan.EsVelWin)
        self.rEndlage.SetValue(App.Cyan.EsEndlage) 
        
        self.rG1COM.SetValue(App.Cyan.EsG1COM)
        self.rG1FB.SetValue(App.Cyan.EsG1FB)
        self.rG1OUT.SetValue(App.Cyan.EsG1OUT)
        self.rG2COM.SetValue(App.Cyan.EsG2COM)
        self.rG2FB.SetValue(App.Cyan.EsG2FB)
        self.rG2OUT.SetValue(App.Cyan.EsG2OUT)
        self.rG3COM.SetValue(App.Cyan.EsG3COM)
        self.rG3FB.SetValue(App.Cyan.EsG3FB)
        self.rG3OUT.SetValue(App.Cyan.EsG3OUT)
        
        if App.Cyan.EsSchluessel1:                      # Nur Master          
            font = wx.Font(8,wx.DEFAULT,wx.NORMAL,wx.BOLD)
            if App.Cyan.EsTaster:
                self.btnAxisSetupGuideClutch.Enable(False)
                self.btnAxisSetupGuideSetup.Enable(False)
            else:
                self.btnAxisSetupGuideClutch.Enable(True)
                self.btnAxisSetupGuideSetup.Enable(True)
            self.rMaster.SetFont(font)
            self.rEStop1.SetFont(font)
            self.rEStop2.SetFont(font)
            self.rSteuerwort.SetFont(font)
            self.r30kWOK.SetFont(font)
            self.rB1OK.SetFont(font)
            self.rSPSOK.SetFont(font)
            self.rBRK2KB.SetFont(font)
            self.rPosWin.SetFont(font)
            self.rVelWin.SetFont(font)
            self.rEndlage.SetFont(font)            
            font = wx.Font(8,wx.DEFAULT,wx.NORMAL,wx.LIGHT)
            self.rSlave.SetFont(font)
            self.rNetwork.SetFont(font)            
            self.r05kWOK.SetFont(font)
            self.rB2OK.SetFont(font)
            self.rDSC.SetFont(font)            
            self.rG1COM.SetFont(font) 
            self.rG1FB.SetFont(font) 
            self.rG1OUT.SetFont(font) 
            self.rG2COM.SetFont(font) 
            self.rG2FB.SetFont(font) 
            self.rG2OUT.SetFont(font) 
            self.rG3COM.SetFont(font) 
            self.rG3FB.SetFont(font) 
            self.rG3OUT.SetFont(font)            
        elif App.Cyan.EsSchluessel2:
            font = wx.Font(8,wx.DEFAULT,wx.NORMAL,wx.BOLD)          # Master und Slave
            self.btnAxisSetupGuideClutch.Enable(False)
            self.btnAxisSetupGuideSetup.Enable(False)
            self.rSlave.SetFont(font)
            self.rEStop1.SetFont(font)
            self.rEStop2.SetFont(font)
            self.rSteuerwort.SetFont(font)
            self.r30kWOK.SetFont(font)
            self.rB1OK.SetFont(font)
            self.rSPSOK.SetFont(font)
            self.rBRK2KB.SetFont(font)
            self.rPosWin.SetFont(font)
            self.rVelWin.SetFont(font)
            self.rEndlage.SetFont(font) 
            font = wx.Font(8,wx.DEFAULT,wx.NORMAL,wx.LIGHT)
            self.rNetwork.SetFont(font)            
            self.rG1COM.SetFont(font) 
            self.rG1FB.SetFont(font) 
            self.rG1OUT.SetFont(font) 
            self.rG2COM.SetFont(font) 
            self.rG2FB.SetFont(font) 
            self.rG2OUT.SetFont(font) 
            self.rG3COM.SetFont(font) 
            self.rG3FB.SetFont(font) 
            self.rG3OUT.SetFont(font) 
        else:
            font = wx.Font(8,wx.DEFAULT,wx.NORMAL,wx.BOLD)              # Master Slave und Netzwerk
            self.btnAxisSetupGuideClutch.Enable(False)
            self.btnAxisSetupGuideSetup.Enable(False)
            self.rMaster.SetFont(font)
            self.rSlave.SetFont(font)
            self.rEStop1.SetFont(font)
            self.rEStop2.SetFont(font)
            self.rSteuerwort.SetFont(font)
            self.r30kWOK.SetFont(font)
            self.rB1OK.SetFont(font)
            self.rSPSOK.SetFont(font)
            self.rBRK2KB.SetFont(font)
            self.rPosWin.SetFont(font)
            self.rVelWin.SetFont(font)
            self.rEndlage.SetFont(font) 
            self.rNetwork.SetFont(font)            
            self.r05kWOK.SetFont(font)
            self.rB2OK.SetFont(font)
            self.rDSC.SetFont(font)            
            self.rG1COM.SetFont(font) 
            self.rG1FB.SetFont(font) 
            self.rG1OUT.SetFont(font) 
            self.rG2COM.SetFont(font) 
            self.rG2FB.SetFont(font) 
            self.rG2OUT.SetFont(font) 
            self.rG3COM.SetFont(font) 
            self.rG3FB.SetFont(font) 
            self.rG3OUT.SetFont(font)
        
        if(self.rG1COM.GetValue() and
           self.rG1FB.GetValue() and
           self.rG1OUT.GetValue() and
           self.rG2COM.GetValue() and
           self.rG2FB.GetValue() and
           self.rG2OUT.GetValue() and
           self.rG3COM.GetValue() and
           self.rG3FB.GetValue() and
           self.rG3OUT.GetValue()):
            pass
            self.EStopReset =0              

        self.rbReady.SetValue(a[1][2])
        self.rbPowered.SetValue(a[1][1])
        self.rbBrake1.SetValue(App.Cyan.EsB1OK)
        self.rbBrake2.SetValue(App.Cyan.EsB2OK)
        self.rFBT.SetValue(not(App.Cyan.EsFTBOK))
        
        self.rbSReady.SetValue(b[1][2])
        self.rbSPowered.SetValue(b[1][1])
            

        if self.Modus =='w':
            self.WriteZaehler = self.WriteZaehler+1
            self.readDataFromGUI()
            App.Cyan.comunicateServer()
            if self.WriteZaehler > 4:   # Das ist naemlich so. Wenn die Werte runter geschrieben werden, braucht's eine Zeit bis sie auch
                                        # entsprechend aktualisiert wieder zurueckkommen. So etwa 5 Zyklen.
                                        # Wenn also Modus-w eintritt warten wir einige Zyklen bevor wir die Ueberpruefung beginnen.

                if (self.cmbAxisName.GetValue()                            == App.Cyan.Name          and               
                    "%.2f"%float(self.txtAxisSetupPosHardMax.GetValue())   == App.Cyan.PosHardMax    and
                    "%.2f"%float(self.txtAxisSetupPosUserMax.GetValue())   == App.Cyan.PosUserMax    and
                    "%.2f"%float(self.txtAxisSetupPosUserMin.GetValue())   == App.Cyan.PosUserMin    and
                    "%.2f"%float(self.txtAxisSetupPosHardMin.GetValue())   == App.Cyan.PosHardMin    and
                    "%.4f"%float(self.txtAxisSetupPosPosWin.GetValue())    == App.Cyan.PosWin        and
                    "%.2f"%float(self.txtAxisSetupVelMax.GetValue())       == App.Cyan.SpeedMax      and
                    "%.2f"%float(self.txtAxisSetupAccMax.GetValue())       == App.Cyan.AccMax        and
                    "%.2f"%float(self.txtAxisSetupDccMax.GetValue())       == App.Cyan.DccMax        and
                    "%.2f"%float(self.txtAxisSetupAccTot.GetValue())       == App.Cyan.AccTot        and
                    "%.2f"%float(self.txtAxisSetupMaxAmp.GetValue())       == App.Cyan.MaxAmp        and
                    "%.4f"%float(self.txtAxisSetupVelWin.GetValue())       == App.Cyan.VelWin        and
                    "%.3f"%float(self.txtAxisSetupFilterP.GetValue())      == App.Cyan.FilterP       and
                    "%.3f"%float(self.txtAxisSetupFilterI.GetValue())      == App.Cyan.FilterI       and
                    "%.3f"%float(self.txtAxisSetupFilterD.GetValue())      == App.Cyan.FilterD       and
                    "%.1f"%float(self.txtAxisSetupFilterIL.GetValue())     == App.Cyan.FilterIL      and
                    "%.3f"%float(self.txtAxisSetupGuidePitch.GetValue())   == App.Cyan.GuidePitch): # and        
                    #"%.3f"%float(self.txtAxisSetupGuidePosMax.GetValue())  == self.Achse.GuidePosMax)   and        
                    #"%.4f"%float(self.txtAxisSetupGuidePosMin.GetValue())  == self.Achse.GuidePosMin):
                    #print 'Daten transfer OK'
                    pass
                else:
                    #print 'Data transfer recheck'
                    dlg=wx.MessageDialog(None,'Data transfer: Pls Check Data','Data transfer',wx.OK|wx.ICON_EXCLAMATION)
                    result=dlg.ShowModal()
                    dlg.Destroy                                  
                self.Modus = 'rE'
                self.WriteZaehler = 0
    def readJoystick(self):

        if not((self.Modus ==  'E') or (self.Modus ==  'w')):
            self.buttons=self.stick.GetButtonState()
            a=self.stick.GetPosition().y
            d=self.stick.GetPosition().x
            b=a/32767.0-1
            e=d/32767.0-1
            # Achse
            if b>0:            
                c=b*(1-self.Progression)+b*b*self.Progression
            else:
                c=b*(1-self.Progression)-b*b*self.Progression
            self.ValueSLDMain = int(c*500.0+500)
            # Slider
            if e>0:            
                f=e*(1-self.Progression)+e*e*self.Progression
            else:
                f=e*(1-self.Progression)-e*e*self.Progression
            self.ValueSLDSlave = int(f*1000)
            
            if self.buttons & 8 :
                if self.refreshSelect != "Blue":
                    self.txtSelected1.SetBackgroundColour((0,200,0))
                    self.txtSelected2.SetBackgroundColour((0,200,0))
                    self.txtSelected1.SetLabel('Selected')
                    self.txtSelected2.SetLabel('Selected') 
                    self.txtSelected1.Refresh()
                    self.txtSelected2.Refresh()
                    self.refreshSelect = "Blue"
            else:
                if self.refreshSelect != "White":
                    self.txtSelected1.SetBackgroundColour((255,240,0))
                    self.txtSelected2.SetBackgroundColour((255,240,0))
                    self.txtSelected1.SetLabel('De-Selected')
                    self.txtSelected2.SetLabel('De-Selected')                     
                    self.txtSelected1.Refresh()
                    self.txtSelected2.Refresh()
                    self.refreshSelect = "White"              
            
            

            if self.Modus != "recover":
                if self.buttons & 32 and self.buttons & 8:
                    self.Modus ='JoyEnabeled'
                    if abs(float(self.txtPosDiff.GetValue())) > 0.01:
                        self.ValueSLDMain = 500
                    self.OnAxisEnable(self.buttons)
                elif not(self.buttons & 32):
                    self.Modus ='JoyDisabeled'
                    self.OnAxisEnable(self.buttons)
            else:
                if abs(float(self.txtPosDiff.GetValue())) < 0.01:
                    self.btnRecover.SetLabel('Recover')
                    self.OnReSync(1)
                    self.Modus ='r'
                    self.OnAxisEnable(self.buttons)
                self.OnAxisEnable(self.buttons)
                di= float(self.txtPosDiff.GetValue())
                PVel =  math.atan(di)/(math.pi/2)*500
                Vel = 500+PVel
                b=self.Decode.Decode(App.Cyan.GuideStatus)
                if b[1][0][1] == "10":
                    self.ValueSLDMain = Vel
                else:
                    self.ValueSLDMain = 500
      
            self.sldAxisVel.SetValue(self.ValueSLDMain)
            #self.sldAxisVel.Refresh()
            #self.SliderPanel.Refresh()
            self.sldAxisSetupGuideVel.SetValue(self.ValueSLDSlave)
            #self.sldAxisVel.Refresh()
            #self.SliderPanel.Refresh()

    def initJoystick(self):                
        #Joystick auslesen und Umrechnungen vorbereiten
        self.stick = wx.Joystick()
        self.min0 = self.stick.GetXMin()
        self.max0 = self.stick.GetXMax()
        self.diff0 = float((self.max0-self.min0)/2)
        self.min1 = self.stick.GetYMin()
        self.max1 = self.stick.GetYMax()
        self.diff1 = float((self.max1-self.min1)/2)
        self.min2 = self.stick.GetRudderMin()
        self.max2 = self.stick.GetRudderMax()
        self.diff2 = float((self.max2-self.min2)/2)
        self.min3 = self.stick.GetZMin()
        self.max3 = self.stick.GetZMax()
        self.diff3 = float((self.max3-self.min3)/2)
        if self.diff0 == 0.0 or self.diff1 == 0.0 or self.diff2 == 0.0 or self.diff3 == 0.0:
            dlg = wx.MessageDialog(self.frame, ' Joystick configuration error',' Joystick configuration error!', wx.OK|wx.ICON_EXCLAMATION)
            self.logger.debug('No Joystick')
            if dlge.ShowModal() == wx.ID_OK:
                dlge.Destroy()         
    def CheckStatus(self):
        ##if self.ControlingPIDRx == "0"   or self.ControlingPIDRx == str(App.Cyan.OwnPID) :
        if (self.ControlingPIDRx == "0" or self.ControlingPIDRx == str(App.Cyan.OwnPID) or self.ControlingPIDRx == '0000' ):     # If the system is available
            self.PermitOnline()
        else:
            self.DenyOnline()

        if (self.ControlingPIDRx == str(App.Cyan.OwnPID)) :       # If we are connected
        ##if (self.ControlingPIDRx == str(self.frame.Achse.OwnPID)) :       # If we are connected
            self.GoOnline()
        else:
            self.GoOffline()


    def OnClose(self,evt):

        try:
            App.Cyan.LTold              = 0
            App.Cyan.Modus              = 0
            App.Cyan.OwnPID             = 0
            App.Cyan.ControlingPIDTx    = 0
            App.Cyan.Intent             = 0
            App.Cyan.Enable             = 0
            App.Cyan.GuideControl       = 5
            App.Cyan.SpeedSoll          = 0
            App.Cyan.GuideSpeedSoll     = 0
            #print "Clean Exit"                  
            App.Cyan.comunicateServer()
            ##self.keepGoing = False
            taskMgr.remove("CyanAxisTask")
        except:
            ##self.keepGoing = False
            taskMgr.remove("CyanAxisTask")
            #print "Exit"
        
                             
#-------------------------------------------------------------------------------
class MagentaAxisUI(wx.Frame):
    def __init__(self, parent, id, title):
        wx.Frame.__init__(self, parent, id, title,(970,473), (742, 428),
                          style =wx.FRAME_FLOAT_ON_PARENT|wx.FRAME_NO_TASKBAR)
        self.res = xrc.XmlResource("AchsSteuerungAxisSelectState1.xrc")
        ##self.res = xrc.XmlResource("AchsSteuerungRecover.xrc")        
        self.RootPanel = self.res.LoadPanel(self,'RootPanel')
        
        self.AxisSelected=False
        self.ControlingPIDRx=0
        self.Modus = 'rE' # initialisieren im read Edit Mode
        self.ClutchStatus = 1        
        self.init_Mainframe()
        self.init_MainframeEvents()
        self.DisableControls()        
        self.EStopReset =0
        self.Decode = Decode()
        self.ReSync = 0
        self.Recover = 0
        self.Modus = 0
        self.refreshSelect = "Blue"

        self.EnableOld = 0
        self.VX = 0
        self.Pos0 = 0
        self.T1Old  = time.clock()
        self.EStopMode = 'EStop'

    def init_Mainframe(self):
        self.ControlsEnabeled = False
        self.StatusPanelColour = "RedBrown"        
        '''Initialisiert die Objekte des Mainframes'''      
        self.StatusPanel        = xrc.XRCCTRL(self.RootPanel,'StatusPanel')
        self.SetupPanel         = xrc.XRCCTRL(self.RootPanel,'SetupPanel')
        self.SliderPanel        = xrc.XRCCTRL(self.RootPanel,'SliderPanel')
        self.SetupPositionPanel = xrc.XRCCTRL(self.RootPanel,'SetupPosition')
        self.SetupVelPanel      = xrc.XRCCTRL(self.RootPanel,'SetupVel')
        self.SetupGuidePanel    = xrc.XRCCTRL(self.RootPanel,'SetupGuide')
        self.SetupFilterPanel   = xrc.XRCCTRL(self.RootPanel,'SetupFilter')
        self.SetupRopePanel     = xrc.XRCCTRL(self.RootPanel,'SetupRope')
        self.EStopPanel         = xrc.XRCCTRL(self.RootPanel,'EStopPanel')
        self.BitPanel           = xrc.XRCCTRL(self.RootPanel,'BitPanel')
        self.RecoverPanel       = xrc.XRCCTRL(self.RootPanel,'RecoverPanel')

        # Kinder vom StatusPanel
        self.cmbAxisName       = xrc.XRCCTRL(self.StatusPanel,'cmbAxisName')
        self.cmbAxisName.SetEditable( False )
        self.Achsen=ACHSEN.keys()
        for a in range(len(ACHSEN.keys())):
            self.cmbAxisName.SetString(a,ACHSEN.keys()[a])
       
        self.txtAxisPos        = xrc.XRCCTRL(self.StatusPanel,'txtAxisPos')
        self.txtAxisPos.SetEditable( False )

        self.txtAxisVel        = xrc.XRCCTRL(self.StatusPanel,'txtAxisVel')
        self.txtAxisVel.SetEditable( False )

        self.txtAxisAmp        = xrc.XRCCTRL(self.StatusPanel,'txtAxisAmp')
        self.txtAxisAmp.SetEditable( False )
        self.sldAxisVel        = xrc.XRCCTRL(self.StatusPanel,'sldAxisVel')
        self.sldAxisVel.Enable(False)
        self.txtAxisError      = xrc.XRCCTRL(self.StatusPanel,'txtAxisError')
        self.txtAxisError.SetEditable( False )
        self.btnAxisReset      = xrc.XRCCTRL(self.StatusPanel,'btnAxisReset')    
        self.txtAxisTemp       = xrc.XRCCTRL(self.StatusPanel,'txtAxisTemp')
        self.txtAxisTemp.SetEditable( False )

        self.txtTimeTick       = xrc.XRCCTRL(self.StatusPanel,'txtTimeTick')
        self.txtTimeTick.SetEditable( False )
        
        self.rFBT              = xrc.XRCCTRL(self.BitPanel,'rFBT')
        self.rbReady           = xrc.XRCCTRL(self.BitPanel,'rbReady')
        self.rbPowered         = xrc.XRCCTRL(self.BitPanel,'rbPowered')
        self.rbBrake1          = xrc.XRCCTRL(self.BitPanel,'rbBrake1')
        self.rbBrake2          = xrc.XRCCTRL(self.BitPanel,'rbBrake2')
        self.txtSelected1       = xrc.XRCCTRL(self.BitPanel,'txtSelected1')
        self.txtSelected2       = xrc.XRCCTRL(self.BitPanel,'txtSelected2')        

        self.txtCutPos         = xrc.XRCCTRL(self.RecoverPanel,'txtEStopCutPosition')
        self.txtCutVel         = xrc.XRCCTRL(self.RecoverPanel,'txtEStopCutVel')
        self.txtCutTime        = xrc.XRCCTRL(self.RecoverPanel,'txtEStopCutTime')
        self.txtPosDiff        = xrc.XRCCTRL(self.RecoverPanel,'txtEStopPosDiff')
        self.txtPosDiff.SetValue('0')
        self.btnRecover        = xrc.XRCCTRL(self.RecoverPanel,'btnRecover')
        self.btnReSync         = xrc.XRCCTRL(self.RecoverPanel,'btnReSync')
        
        # Kinder vom SetupPositionPanel
        self.btnAxisSetupPosEdit    = xrc.XRCCTRL(self.SetupPositionPanel,'btnAxisSetupPosEdit')
        
        self.txtAxisSetupPosHardMax = xrc.XRCCTRL(self.SetupPositionPanel,'txtAxisSetupPosHardMax')
        self.txtAxisSetupPosHardMax.SetValidator(NumValidator("digit"))
        self.txtAxisSetupPosHardMax.SetEditable( False )
        self.txtAxisSetupPosHardMax.SetValue('300.0')
        
        self.txtAxisSetupPosUserMax = xrc.XRCCTRL(self.SetupPositionPanel,'txtAxisSetupPosUserMax')
        self.txtAxisSetupPosUserMax.SetValidator(NumValidator("digit"))
        self.txtAxisSetupPosUserMax.SetEditable( False )
        self.txtAxisSetupPosUserMax.SetValue('300.0')
        
        self.txtAxisSetupPosIst     = xrc.XRCCTRL(self.SetupPositionPanel,'txtAxisSetupPosIst')
        self.txtAxisSetupPosIst.SetEditable( False )
        self.txtAxisSetupPosUserMin = xrc.XRCCTRL(self.SetupPositionPanel,'txtAxisSetupPosUserMin')
        self.txtAxisSetupPosUserMin.SetValidator(NumValidator("digit"))
        self.txtAxisSetupPosUserMin.SetEditable( False )
        self.txtAxisSetupPosUserMin.SetValue('-300.0')
        
        self.txtAxisSetupPosHardMin = xrc.XRCCTRL(self.SetupPositionPanel,'txtAxisSetupPosHardMin')
        self.txtAxisSetupPosHardMin.SetValidator(NumValidator("digit"))
        self.txtAxisSetupPosHardMin.SetEditable( False )
        self.txtAxisSetupPosHardMin.SetValue('-300.0')
        
        self.txtAxisSetupPosPosWin = xrc.XRCCTRL(self.SetupPositionPanel,'txtAxisSetupPosPosWin')
        self.txtAxisSetupPosPosWin.SetValidator(NumValidator("digit"))
        self.txtAxisSetupPosPosWin.SetEditable( False )
        self.txtAxisSetupPosPosWin.SetValue('1.50')
        
        self.btnAxisSetupPosWrite    = xrc.XRCCTRL(self.SetupPositionPanel,'btnAxisSetupPosWrite')
        self.btnAxisSetupPosCancel    = xrc.XRCCTRL(self.SetupPositionPanel,'btnAxisSetupPosCancel')
        
        # Kinder vom SetupVelPanel
        
        self.btnAxisSetupVelEdit = xrc.XRCCTRL(self.SetupVelPanel,'btnAxisSetupVelEdit')
        
        self.txtAxisSetupVelMaxMot  = xrc.XRCCTRL(self.SetupVelPanel,'txtAxisSetupVelMaxMot')
        self.txtAxisSetupVelMaxMot.SetEditable( False )
        
        self.txtAxisSetupVelMax  = xrc.XRCCTRL(self.SetupVelPanel,'txtAxisSetupVelMax')
        self.txtAxisSetupVelMax.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupVelMax.SetEditable( False )
        self.txtAxisSetupVelMax.SetValue('8.0')
        
        self.txtAxisSetupAccMax  = xrc.XRCCTRL(self.SetupVelPanel,'txtAxisSetupAccMax')
        self.txtAxisSetupAccMax.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupAccMax.SetEditable( False )
        self.txtAxisSetupAccMax.SetValue('5.5')
        
        self.txtAxisSetupDccMax  = xrc.XRCCTRL(self.SetupVelPanel,'txtAxisSetupDccMax')
        self.txtAxisSetupDccMax.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupDccMax.SetEditable( False )
        self.txtAxisSetupDccMax.SetValue('5.5')
        
        self.txtAxisSetupAccTot = xrc.XRCCTRL(self.SetupVelPanel,'txtAxisSetupAccTot')
        self.txtAxisSetupAccTot.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupAccTot.SetEditable( False )
        self.txtAxisSetupAccTot.SetValue('5.5')
        
        self.txtAxisSetupMaxAmp  = xrc.XRCCTRL(self.SetupVelPanel,'txtAxisSetupMaxAmp')
        self.txtAxisSetupMaxAmp.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupMaxAmp.SetEditable( False )
        self.txtAxisSetupMaxAmp.SetValue('150')
        
        self.txtAxisSetupVelWin  = xrc.XRCCTRL(self.SetupVelPanel,'txtAxisSetupVelWin')
        self.txtAxisSetupMaxAmp.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupVelWin.SetEditable( False )
        self.txtAxisSetupVelWin.SetValue('1.5')
        
        self.btnAxisSetupVelWrite    = xrc.XRCCTRL(self.SetupVelPanel,'btnAxisSetupVelWrite')
        self.btnAxisSetupVelCancel    = xrc.XRCCTRL(self.SetupVelPanel,'btnAxisSetupVelCancel')

        # Kinder vom SetupGuidePanel
        
        self.txtAxisSetupGuidePos = xrc.XRCCTRL(self.SetupGuidePanel, 'txtAxisSetupGuidePos')
        self.txtAxisSetupGuidePos.SetEditable( False )
        
        self.txtAxisSetupGuideVel = xrc.XRCCTRL(self.SetupGuidePanel, 'txtAxisSetupGuideVel')
        self.txtAxisSetupGuideVel.SetEditable( False )
        
        self.sldAxisSetupGuideVel        = xrc.XRCCTRL(self.SetupGuidePanel,'sldAxisSetupGuideVel')
        self.sldAxisSetupGuideVel.Enable(False)
        
        self.btnAxisSetupGuideSetup  = xrc.XRCCTRL(self.SetupGuidePanel,'btnAxisSetupGuideSetup')
        
        self.txtAxisSetupGuideError  = xrc.XRCCTRL(self.SetupGuidePanel,'txtAxisSetupGuideError')
        self.txtAxisSetupGuideError.SetEditable( False )
        
        self.btnAxisSetupGuideReset  = xrc.XRCCTRL(self.SetupGuidePanel,'btnAxisSetupGuideReset')
        self.btnAxisSetupGuideReset.Enable(False)
        
        self.txtAxisSetupGuidePitch  = xrc.XRCCTRL(self.SetupGuidePanel,'txtAxisSetupGuidePitch')
        self.txtAxisSetupGuidePitch.SetValidator(NumValidator("digit"))
        self.txtAxisSetupGuidePitch.SetEditable( False )
        
        self.btnAxisSetupGuideWrite    = xrc.XRCCTRL(self.SetupGuidePanel,'btnAxisSetupGuideWrite')
        
        self.txtAxisSetupGuidePosMax = xrc.XRCCTRL(self.SetupGuidePanel,'txtAxisSetupGuidePosMax')
        self.txtAxisSetupGuidePosMax.SetValidator(NumValidator("digit"))
        self.txtAxisSetupGuidePosMax.SetEditable( False )
        
        self.txtAxisSetupGuidePosMaxMax = xrc.XRCCTRL(self.SetupGuidePanel,'txtAxisSetupGuidePosMaxMax')
        self.txtAxisSetupGuidePosMaxMax.SetEditable( False )        
        
        self.txtAxisSetupGuidePosMin = xrc.XRCCTRL(self.SetupGuidePanel,'txtAxisSetupGuidePosMin')
        self.txtAxisSetupGuidePosMin.SetValidator(NumValidator("digit"))
        self.txtAxisSetupGuidePosMin.SetEditable( False )
        self.txtAxisSetupGuidePosMin.SetValue('0.0')
        
        self.btnAxisSetupGuideCancel    = xrc.XRCCTRL(self.SetupGuidePanel,'btnAxisSetupGuideCancel')
        
        self.btnAxisSetupGuideClutch    = xrc.XRCCTRL(self.SetupGuidePanel,'btnAxisSetupGuideClutch')
        self.btnAxisSetupGuideClutch.SetValue(True)
        
        self.btnAxisSetupGuideMoveLeft  = xrc.XRCCTRL(self.SetupGuidePanel,'btnAxisSetupGuideMoveLeft')
        self.btnAxisSetupGuideMoveStop  = xrc.XRCCTRL(self.SetupGuidePanel,'btnAxisSetupGuideMoveStop')
        self.btnAxisSetupGuideMoveRight = xrc.XRCCTRL(self.SetupGuidePanel,'btnAxisSetupGuideMoveRight')
        
        self.rbSReady           = xrc.XRCCTRL(self.SetupGuidePanel,'rbSReady')
        self.rbSPowered         = xrc.XRCCTRL(self.SetupGuidePanel,'rbSPowered')
        


        # Kinder vom SetupFilterPanel
        self.btnAxisSetupFilterEdit = xrc.XRCCTRL(self.SetupFilterPanel,'btnAxisSetupFilterEdit')
        self.txtAxisSetupFilterLagError    = xrc.XRCCTRL(self.SetupFilterPanel,'txtAxisSetupFilterLagError')
        self.txtAxisSetupFilterLagError.SetEditable( False )
        self.txtAxisSetupFilterP    = xrc.XRCCTRL(self.SetupFilterPanel,'txtAxisSetupFilterP')
        self.txtAxisSetupFilterP.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupFilterP.SetEditable( False )
        self.txtAxisSetupFilterI    = xrc.XRCCTRL(self.SetupFilterPanel,'txtAxisSetupFilterI')
        self.txtAxisSetupFilterI.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupFilterI.SetEditable( False )
        self.txtAxisSetupFilterD    = xrc.XRCCTRL(self.SetupFilterPanel,'txtAxisSetupFilterD')
        self.txtAxisSetupFilterD.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupFilterD.SetEditable( False )
        self.txtAxisSetupFilterIL    = xrc.XRCCTRL(self.SetupFilterPanel,'txtAxisSetupFilterIL')
        self.txtAxisSetupFilterIL.SetValidator(NumValidator("positivdigit"))
        self.txtAxisSetupFilterIL.SetEditable( False )
        self.txtAxisSetupFilterRampform = xrc.XRCCTRL(self.SetupFilterPanel,'txtAxisSetupFilterRampform')
        self.txtAxisSetupFilterRampform.SetEditable( False )
        self.btnAxisSetupFilterWrite    = xrc.XRCCTRL(self.SetupFilterPanel,'btnAxisSetupFilterWrite')
        self.btnAxisSetupFilterCancel    = xrc.XRCCTRL(self.SetupFilterPanel,'btnAxisSetupFilterCancel')

        # Kinder vom SetupRopePanel
        
        self.btnAxisSetupRopeEdit     = xrc.XRCCTRL(self.SetupRopePanel,'btnAxisSetupRopeEdit')
        self.btnAxisSetupRopeEdit.Enable(False)
        self.txtAxisSetupRopeSWLL     = xrc.XRCCTRL(self.SetupRopePanel,'txtAxisSetupRopeSWLL')
        self.txtAxisSetupRopeSWLL.SetEditable( False )
        self.txtAxisSetupRopeDiameter = xrc.XRCCTRL(self.SetupRopePanel,'txtAxisSetupRopeDiameter')
        self.txtAxisSetupRopeDiameter.SetEditable( False )
        self.txtAxisSetupRopeType     = xrc.XRCCTRL(self.SetupRopePanel,'txtAxisSetupRopeType')
        self.txtAxisSetupRopeType.SetEditable( False )
        self.txtAxisSetupRopeNumber   = xrc.XRCCTRL(self.SetupRopePanel,'txtAxisSetupRopeNumber')
        self.txtAxisSetupRopeNumber.SetEditable( False )
        self.txtAxisSetupRopeLength   = xrc.XRCCTRL(self.SetupRopePanel,'txtAxisSetupRopeLength')
        self.txtAxisSetupRopeLength.SetEditable( False )
        self.btnAxisSetupRopeWrite    = xrc.XRCCTRL(self.SetupRopePanel,'btnAxisSetupRopeWrite')
        self.btnAxisSetupRopeCancel    = xrc.XRCCTRL(self.SetupRopePanel,'btnAxisSetupRopeCancel')
        
        # Kinder vom EStopPanel
        
        self.rMaster          = xrc.XRCCTRL(self.EStopPanel,'rMaster')
        self.rMaster.SetValue(True)
         
        self.rSlave           = xrc.XRCCTRL(self.EStopPanel,'rSlave')
        self.rSlave.SetValue(True)
        
        self.rNetwork         = xrc.XRCCTRL(self.EStopPanel,'rNetwork')
        self.rNetwork.SetValue(True)
        
        self.btnEReset        = xrc.XRCCTRL(self.EStopPanel,'btnEReset')
        
        self.rEStop1          = xrc.XRCCTRL(self.EStopPanel,'rEStop1')
        self.rEStop1.SetValue(True)
        
        self.rEStop2          = xrc.XRCCTRL(self.EStopPanel,'rEStop2')
        self.rEStop2.SetValue(True)
        
        self.rSteuerwort       = xrc.XRCCTRL(self.EStopPanel,'rSteuerwort')
        self.rSteuerwort.SetValue(True)
        
        self.r30kWOK          = xrc.XRCCTRL(self.EStopPanel,'r30kWOK')
        self.r30kWOK.SetValue(True)
        
        self.r05kWOK          = xrc.XRCCTRL(self.EStopPanel,'r05kWOK')
        self.r05kWOK.SetValue(True)
        
        self.rB1OK            = xrc.XRCCTRL(self.EStopPanel,'rB1OK')
        self.rB1OK.SetValue(True)
        
        self.rB2OK            = xrc.XRCCTRL(self.EStopPanel,'rB2OK')
        self.rB2OK.SetValue(True)
        
        self.rDSC             = xrc.XRCCTRL(self.EStopPanel,'rDCS')
        self.rDSC.SetValue(True)
        
        self.rSPSOK          = xrc.XRCCTRL(self.EStopPanel,'rSPSOK')
        self.rSPSOK.SetValue(True)
        
        self.rBRK2KB         = xrc.XRCCTRL(self.EStopPanel,'rBRK2KB')
        self.rBRK2KB.SetValue(True)
        
        self.rPosWin          = xrc.XRCCTRL(self.EStopPanel,'rPosWin')
        self.rPosWin.SetValue(True)
        
        self.rVelWin          = xrc.XRCCTRL(self.EStopPanel,'rVelWin')
        self.rVelWin.SetValue(True)
        
        self.rEndlage         = xrc.XRCCTRL(self.EStopPanel,'rEndlage')
        self.rEndlage.SetValue(True)
        
        self.rG1COM           = xrc.XRCCTRL(self.EStopPanel,'rG1COM')
        self.rG1COM.SetValue(True)
        
        self.rG1OUT           = xrc.XRCCTRL(self.EStopPanel,'rG1OUT')
        self.rG1OUT.SetValue(True)
        
        self.rG1FB            = xrc.XRCCTRL(self.EStopPanel,'rG1FB')
        self.rG1FB.SetValue(True)
        
        self.rG2COM           = xrc.XRCCTRL(self.EStopPanel,'rG2COM')
        self.rG2COM.SetValue(True)
        
        self.rG2OUT           = xrc.XRCCTRL(self.EStopPanel,'rG2OUT')
        self.rG2OUT.SetValue(True)
        
        self.rG2FB            = xrc.XRCCTRL(self.EStopPanel,'rG2FB')
        self.rG2FB.SetValue(True)
        
        self.rG3COM           = xrc.XRCCTRL(self.EStopPanel,'rG3COM')
        self.rG3COM.SetValue(True)
        
        self.rG3OUT           = xrc.XRCCTRL(self.EStopPanel,'rG3OUT')
        self.rG3OUT.SetValue(True)
       
        self.rG3FB            = xrc.XRCCTRL(self.EStopPanel,'rG3FB')
        self.rG3FB.SetValue(True)      

    def init_MainframeEvents(self):
        self.Command = 0
        self.EnableStatus = 0
        self.Controlle = False
        self.Online    = False
        self.Bind(wx.EVT_COMBOBOX, self.OnAxisSelect, id=xrc.XRCID('cmbAxisName'))
        self.Bind(wx.EVT_TOGGLEBUTTON, self.OnAxisReset, id=xrc.XRCID('btnAxisReset'))

        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupPosEdit, id=xrc.XRCID('btnAxisSetupPosEdit'))
        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupPosWrite, id=xrc.XRCID('btnAxisSetupPosWrite'))
        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupPosCancel, id=xrc.XRCID('btnAxisSetupPosCancel'))

        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupVelEdit, id=xrc.XRCID('btnAxisSetupVelEdit'))
        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupVelWrite, id=xrc.XRCID('btnAxisSetupVelWrite'))
        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupVelCancel, id=xrc.XRCID('btnAxisSetupVelCancel'))

        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupGuideSetup, id=xrc.XRCID('btnAxisSetupGuideSetup'))
        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupGuideWrite, id=xrc.XRCID('btnAxisSetupGuideWrite'))
        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupGuideCancel, id=xrc.XRCID('btnAxisSetupGuideCancel'))
        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupGuideReset,  id=xrc.XRCID('btnAxisSetupGuideReset'))

        self.Bind(wx.EVT_TOGGLEBUTTON, self.OnAxisSetupGuideClutch, id=xrc.XRCID('btnAxisSetupGuideClutch'))

        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupFilterEdit, id=xrc.XRCID('btnAxisSetupFilterEdit'))        
        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupFilterWrite, id=xrc.XRCID('btnAxisSetupFilterWrite'))
        self.Bind(wx.EVT_BUTTON, self.OnAxisSetupFilterCancel, id=xrc.XRCID('btnAxisSetupFilterCancel'))
        
        self.Bind(wx.EVT_TOGGLEBUTTON, self.OnEReset, id=xrc.XRCID('btnEReset'))
        self.Bind(wx.EVT_BUTTON, self.OnReSync, id = xrc.XRCID('btnReSync'))
        
        self.txtAxisError.Bind(wx.EVT_LEFT_DOWN, self.OnAxisErrorClick, id=xrc.XRCID('txtAxisError'))
        self.txtAxisSetupGuideError.Bind(wx.EVT_LEFT_DOWN, self.OnAxisGuideErrorClick, id=xrc.XRCID('txtAxisSetupGuideError'))
        
        self.Bind(wx.EVT_BUTTON, self.OnRecoverClick, id=xrc.XRCID('btnRecover'))

    def OnRecoverClick(self,evt):        
        if self.btnRecover.GetLabel() != 'Running':
            self.btnRecover.SetLabel('Running')    
            self.Modus ='recover'
        else:
            self.btnRecover.SetLabel('Recover')
            self.Modus = 'r'
        evt.Skip()

    def OnReSync(self,evt):
        #print 'ReSync'
        App.Magenta.ReSync = 1
        for i in range(10):
            App.Magenta.comunicateServer()
        App.Magenta.ReSync = 0
        
    def OnAxisErrorClick(self,evt):
        
        ##rect = self.GetRect()
        ##x1, y1 = rect.GetTopLeft() 
        ##a=self.Decode.Decode(self.Achse.Status)                                                    #[2] Axis Status  
        ##self.test = wx.TipWindow(self, str(a[0]))
        ##self.test.SetBoundingRect(wx.Rect(x1+480,y1+20,x1+580,y1+100))
        
        try:
            App.Yellow
            App.Green
            App.Magenta
            App.Magenta
            AchsenInitialisiert=True
        except:
            AchsenInitialisiert=False
        if AchsenInitialisiert:
            rect = self.GetRect()
            x1, y1 = rect.GetTopLeft() 
            a=self.Decode.Decode(App.Magenta.Status)                                                    #[2] Axis Status  
            self.test = wx.TipWindow(self, str(a[0]))
            self.test.SetBoundingRect(wx.Rect(x1+400,y1,x1+580,y1+200))
    
    def OnAxisGuideErrorClick(self,evt):
        
        ##rect = self.GetRect()
        ##x1, y1 = rect.GetTopLeft() 
        ##a=self.Decode.Decode(self.Achse.GuideStatus)                                                    #[2] Axis Status  
        ##self.test = wx.TipWindow(self, str(a[0]))
        ##self.test.SetBoundingRect(wx.Rect(x1+285,y1+20,x1+580,y1+100))
        
        try:
            App.Yellow
            App.Green
            App.Magenta
            App.Magenta
            AchsenInitialisiert=True
        except:
            AchsenInitialisiert=False
        if AchsenInitialisiert:
            rect = self.GetRect()
            x1, y1 = rect.GetTopLeft() 
            a=self.Decode.Decode(App.Magenta.GuideStatus)                                                    #[2] Axis Status  
            self.test = wx.TipWindow(self, str(a[0]))
            self.test.SetBoundingRect(wx.Rect(x1+285,y1,x1+580,y1+200))
            
    def OnAxisReset(self, evt):
        
        if self.btnAxisReset.GetValue():
            self.btnAxisReset.SetLabel("reseting")
        else:        
            self.btnAxisReset.SetLabel("Reset")
    def OnAxisEnable(self,evt):

        if self.btnAxisReset.GetValue():
            self.EnableStatus = 64
        else:
            if self.Modus == 'JoyEnabeled' or self.Modus == 'recover' :
                self.cmbAxisName.Enable(False)
                self.EnableStatus = 1
            else:
                self.EnableStatus = 0
                self.Modus = 'r'
               
        if (evt & 32):
            if self.StatusPanelColour != "Green":
                self.StatusPanel.SetBackgroundColour((0,150,0))
                self.StatusPanel.Refresh()
                self.sldAxisVel.Refresh
                self.StatusPanelColour = "Green"
        else:
            if self.StatusPanelColour != "RedBrown":             
                self.StatusPanel.SetBackgroundColour((128,128,128))
                self.StatusPanel.Refresh()
                self.sldAxisVel.Refresh
                self.StatusPanelColour = "RedBrown"                
            #Clutch
                


    #--------------------------------------------------------------- 
    def OnAxisSetupPosEdit(self, evt):
        #print "AxisSetupPosEdit"
        self.DisableControls()
        self.Modus = 'E' # Setup Pos Edit
        self.btnAxisSetupPosWrite.Enable(True)
        self.btnAxisSetupPosCancel.Enable(True)

        self.PosHardMax     = self.txtAxisSetupPosHardMax.GetValue()
        self.PosUserMax     = self.txtAxisSetupPosUserMax.GetValue()
        self.PosUserMin     = self.txtAxisSetupPosUserMin.GetValue()
        self.PosHardMin     = self.txtAxisSetupPosHardMin.GetValue()
        self.PosWin         = self.txtAxisSetupPosPosWin.GetValue()

        self.txtAxisSetupPosHardMax.SetEditable( True )
        self.txtAxisSetupPosUserMax.SetEditable( True )
        self.txtAxisSetupPosUserMin.SetEditable( True )
        self.txtAxisSetupPosHardMin.SetEditable( True )
        self.txtAxisSetupPosPosWin.SetEditable( True )
        self.txtAxisSetupPosHardMax.SetBackgroundColour(wx.Colour(255,255,255))
        self.txtAxisSetupPosUserMax.SetBackgroundColour(wx.Colour(255,255,255))
        #self.txtAxisSetupPosIst.SetBackgroundColour(wx.Colour(255,255,255))
        self.txtAxisSetupPosUserMin.SetBackgroundColour(wx.Colour(255,255,255))
        self.txtAxisSetupPosHardMin.SetBackgroundColour(wx.Colour(255,255,255))
        self.txtAxisSetupPosPosWin.SetBackgroundColour(wx.Colour(255,255,255))

    def OnAxisSetupPosWrite(self, evt):
        #print "AxisSetupPosWrite"  
        self.EnableControls()
        self.btnAxisSetupPosWrite.Enable(False)
        self.btnAxisSetupPosCancel.Enable(False)
        
        
        if not((float(self.txtAxisSetupPosHardMax.GetValue()) >= float(self.txtAxisSetupPosUserMax.GetValue())) and
               (float(self.txtAxisSetupPosUserMax.GetValue()) >  float(self.txtAxisSetupPosUserMin.GetValue())) and
               (float(self.txtAxisSetupPosUserMin.GetValue()) >= float(self.txtAxisSetupPosHardMin.GetValue()))):
            dlg=wx.MessageDialog(None,'Limits not monotone! Values uncanged','Error User Limit',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy
            self.txtAxisSetupPosHardMax.SetValue(str(self.PosHardMax))
            self.txtAxisSetupPosUserMax.SetValue(str(self.PosUserMax))
            self.txtAxisSetupPosUserMin.SetValue(str(self.PosUserMin))
            self.txtAxisSetupPosHardMin.SetValue(str(self.PosHardMin))
            self.txtAxisSetupPosHardMax.Refresh()
            self.txtAxisSetupPosUserMax.Refresh()
            self.txtAxisSetupPosUserMin.Refresh()
            self.txtAxisSetupPosHardMin.Refresh()

        #PosWin            
        if ((float(self.txtAxisSetupPosPosWin.GetValue()) > 1.5 ) or
            float(self.txtAxisSetupPosPosWin.GetValue()) < 0.01):
            dlg=wx.MessageDialog(None,'0.01 m < PosWin < 1.5 m ; Reset to Last Value','Error Wrong Input',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy        
            self.txtAxisSetupPosPosWin.SetValue(self.PosWin)
            self.txtAxisSetupPosPosWin.Refresh()
        else:             
            self.PosPosWin    = float(self.txtAxisSetupPosPosWin.GetValue()) 



        self.Modus = 'w'

        self.txtAxisSetupPosHardMax.SetEditable( False )
        self.txtAxisSetupPosUserMax.SetEditable( False )
        self.txtAxisSetupPosUserMin.SetEditable( False )
        self.txtAxisSetupPosHardMin.SetEditable( False )
        self.txtAxisSetupPosPosWin.SetEditable( False )
        self.txtAxisSetupPosHardMax.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupPosUserMax.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupPosIst.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupPosUserMin.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupPosHardMin.SetBackgroundColour(wx.Colour(187,187,187)) 
        self.txtAxisSetupPosPosWin.SetBackgroundColour(wx.Colour(187,187,187))

    def OnAxisSetupPosCancel(self, evt):
        #print "AxisSetupPosCancel" 
        self.EnableControls()
        self.Modus = 'r'#setup Pos Cancel
        self.btnAxisSetupPosWrite.Enable(False)
        self.btnAxisSetupPosCancel.Enable(False)

        self.txtAxisSetupPosHardMax.SetValue(self.PosHardMax)
        self.txtAxisSetupPosUserMax.SetValue(self.PosUserMax)
        self.txtAxisSetupPosUserMin.SetValue(self.PosUserMin)
        self.txtAxisSetupPosHardMin.SetValue(self.PosHardMin)
        self.txtAxisSetupPosPosWin.SetValue(self.PosWin)

        self.txtAxisSetupPosHardMax.SetEditable( False )
        self.txtAxisSetupPosUserMax.SetEditable( False )
        self.txtAxisSetupPosUserMin.SetEditable( False )
        self.txtAxisSetupPosHardMin.SetEditable( False )
        self.txtAxisSetupPosPosWin.SetEditable( False )
        self.txtAxisSetupPosHardMax.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupPosUserMax.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupPosIst.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupPosUserMin.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupPosHardMin.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupPosPosWin.SetBackgroundColour(wx.Colour(187,187,187))

    #---------------------------------------------------------------
    def OnAxisSetupVelEdit(self, evt):
        #print "AxisSetupVelEdit"  
        self.DisableControls()
        self.Modus = 'E'#setup Vel Edit
        self.btnAxisSetupVelWrite.Enable(True)
        self.btnAxisSetupVelCancel.Enable(True)

        self.VelMax     = abs(float(self.txtAxisSetupVelMax.GetValue()))           
        self.AccMax     = abs(float(self.txtAxisSetupAccMax.GetValue()))
        self.DccMax     = abs(float(self.txtAxisSetupDccMax.GetValue()))
        self.AccTot     = abs(float(self.txtAxisSetupAccTot.GetValue()))
        self.MaxAmp     = abs(float(self.txtAxisSetupMaxAmp.GetValue()))
        self.VelWin     = abs(float(self.txtAxisSetupVelWin.GetValue()))        

        self.txtAxisSetupVelMax.SetEditable( True )
        self.txtAxisSetupAccMax.SetEditable( True )
        self.txtAxisSetupDccMax.SetEditable( True )
        self.txtAxisSetupAccTot.SetEditable( True )
        self.txtAxisSetupMaxAmp.SetEditable( True )
        self.txtAxisSetupVelWin.SetEditable( True )
        self.txtAxisSetupVelMax.SetBackgroundColour(wx.Colour(255,255,255))        
        self.txtAxisSetupAccMax.SetBackgroundColour(wx.Colour(255,255,255))
        self.txtAxisSetupDccMax.SetBackgroundColour(wx.Colour(255,255,255))       
        self.txtAxisSetupAccTot.SetBackgroundColour(wx.Colour(255,255,255))        
        self.txtAxisSetupMaxAmp.SetBackgroundColour(wx.Colour(255,255,255))
        self.txtAxisSetupVelWin.SetBackgroundColour(wx.Colour(255,255,255))

    def OnAxisSetupVelWrite(self, evt):
        #print "AxisSetupVelWrite" 
        self.EnableControls()
        #self.btnAxisSetupVelWrite.Enable(False)
        #self.btnAxisSetupVelCancel.Enable(False)
        #MaxVel
        if (abs(float(self.txtAxisSetupVelMax.GetValue())) > 
            abs(float(self.txtAxisSetupVelMaxMot.GetValue()))):
            dlg=wx.MessageDialog(None,'MaxVel larger than MaxVel Motor; Value uncanged','Error User Limit',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy
            modifyMaxVel = False
        else:
            modifyMaxVel = True       
        #MaxAmp
        if (float(self.txtAxisSetupMaxAmp.GetValue()) > 150.0 or 
            float(self.txtAxisSetupMaxAmp.GetValue()) < 50 ):
            dlg=wx.MessageDialog(None,'50% < MaxAmp < 150% ; Reset to Last Value','Error Wrong Input',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy        
            modifyMaxAmp = False
        else:             
            modifyMaxAmp = True           
        #VelWin       
        if (float(self.txtAxisSetupVelWin.GetValue()) > 1.5 or 
            float(self.txtAxisSetupVelWin.GetValue()) < 0.01):
            dlg=wx.MessageDialog(None,'0.01 m/s < VelWin < 1.5 m/s; Reset to Last Value','Error Wrong Input',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy        
            modifyVelWin = False
        else:             
            modifyVelWin = True
            #AccMove        
        if (float(self.txtAxisSetupAccTot.GetValue()) > 10.0 or 
            float(self.txtAxisSetupAccTot.GetValue()) < 1.5 ):
            dlg=wx.MessageDialog(None,'1.5 m/ss< Acc Move < 10 m/ss; Value uncanged','Error Wrong Input',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy        
            modifyAccMove = False
        else:
            modifyAccMove = True         
        #AccMax    
        if (abs(float(self.txtAxisSetupAccMax.GetValue())) > abs(float(self.txtAxisSetupAccTot.GetValue())) or
            abs(float(self.txtAxisSetupDccMax.GetValue())) > abs(float(self.txtAxisSetupAccTot.GetValue()))):
            dlg=wx.MessageDialog(None,'Acc/Dcc/AccMove Mismatch; Values unchanged','Error AccMax',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy
            modifyAccDccAccMove = False
        else:
            modifyAccDccAccMove = True
               
        
        if modifyMaxVel and modifyMaxAmp and modifyVelWin and modifyAccDccAccMove and modifyAccMove :
            self.VelMax     = abs(float(self.txtAxisSetupVelMax.GetValue()))
            self.MaxAmp     = float(self.txtAxisSetupMaxAmp.GetValue())
            self.VelWin     = float(self.txtAxisSetupVelWin.GetValue()) 
            self.AccMax     = abs(float(self.txtAxisSetupAccMax.GetValue()))
            self.DccMax     = abs(float(self.txtAxisSetupDccMax.GetValue()))
            self.AccTot     = abs(float(self.txtAxisSetupAccTot.GetValue()))
            self.btnAxisSetupVelWrite.Enable(False)
            self.btnAxisSetupVelCancel.Enable(False)            
        else:
            self.txtAxisSetupVelMax.SetValue(str(self.VelMax))
            self.txtAxisSetupMaxAmp.SetValue(str(self.MaxAmp))
            self.txtAxisSetupVelWin.SetValue(str(self.VelWin))            
            self.txtAxisSetupAccMax.SetValue(str(abs(self.AccMax)))     
            self.txtAxisSetupDccMax.SetValue(str(abs(self.DccMax)))     
            self.txtAxisSetupAccTot.SetValue(str(abs(self.AccTot)))
            self.btnAxisSetupVelWrite.Enable(True)
            self.btnAxisSetupVelCancel.Enable(True)            
            

        self.Modus = 'w'

        self.txtAxisSetupVelMax.SetEditable( False )
        self.txtAxisSetupAccMax.SetEditable( False )
        self.txtAxisSetupDccMax.SetEditable( False )
        self.txtAxisSetupAccTot.SetEditable( False )
        self.txtAxisSetupMaxAmp.SetEditable( False )
        self.txtAxisSetupVelWin.SetEditable( False )
        self.txtAxisSetupVelMax.SetBackgroundColour(wx.Colour(187,187,187))        
        self.txtAxisSetupAccMax.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupDccMax.SetBackgroundColour(wx.Colour(187,187,187))       
        self.txtAxisSetupAccTot.SetBackgroundColour(wx.Colour(187,187,187))        
        self.txtAxisSetupMaxAmp.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupVelWin.SetBackgroundColour(wx.Colour(187,187,187))


    def OnAxisSetupVelCancel(self, evt):
        #print "AxisSetupVelCancel" 
        self.EnableControls()
        self.Modus = 'r'#setup Vel Cancel
        self.btnAxisSetupVelWrite.Enable(False)
        self.btnAxisSetupVelCancel.Enable(False)

        self.txtAxisSetupVelMax.SetValue(str(self.VelMax))
        self.txtAxisSetupAccMax.SetValue(str(self.AccMax))
        self.txtAxisSetupDccMax.SetValue(str(self.DccMax))
        self.txtAxisSetupAccTot.SetValue(str(self.AccTot))
        self.txtAxisSetupMaxAmp.SetValue(str(self.MaxAmp))
        self.txtAxisSetupVelWin.SetValue(str(self.VelWin))
        

        self.txtAxisSetupVelMax.SetEditable( False )
        self.txtAxisSetupAccMax.SetEditable( False )
        self.txtAxisSetupDccMax.SetEditable( False )
        self.txtAxisSetupAccTot.SetEditable( False )
        self.txtAxisSetupMaxAmp.SetEditable( False )
        self.txtAxisSetupVelWin.SetEditable( False )
        self.txtAxisSetupVelMax.SetBackgroundColour(wx.Colour(187,187,187))        
        self.txtAxisSetupAccMax.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupDccMax.SetBackgroundColour(wx.Colour(187,187,187))       
        self.txtAxisSetupAccTot.SetBackgroundColour(wx.Colour(187,187,187))        
        self.txtAxisSetupMaxAmp.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupVelWin.SetBackgroundColour(wx.Colour(187,187,187)) 

#----------------------------------------------------------------
    def OnAxisSetupGuideSetup(self, evt):
        #print "AxisSetupGuideSetup"
        self.DisableControls()
        self.Modus = 'E' # Setup Pos Edit

        self.btnAxisSetupGuideReset.Enable(False)
        self.btnAxisSetupGuideWrite.Enable(True)
        self.btnAxisSetupGuideCancel.Enable(True)


        self.GuidePitch     = self.txtAxisSetupGuidePitch.GetValue()
        self.GuidePosMax    = self.txtAxisSetupGuidePosMax.GetValue()
        self.GuidePosMin    = self.txtAxisSetupGuidePosMin.GetValue()

        self.txtAxisSetupGuidePitch.SetEditable( True )
        self.txtAxisSetupGuidePosMax.SetEditable( True )
        #self.txtAxisSetupGuidePosMin.SetEditable( True ) # Muss erst in SPS implementiert werden
        self.txtAxisSetupGuidePitch.SetBackgroundColour(wx.Colour(255,255,255))
        self.txtAxisSetupGuidePosMax.SetBackgroundColour(wx.Colour(255,255,255))
        #self.txtAxisSetupGuidePosMin.SetBackgroundColour(wx.Colour(255,255,255)) # Muss erst in SPS implementiert werden

    def OnAxisSetupGuideWrite(self, evt):
        #print "AxisSetupGuideWrite"
        self.EnableControls()
        self.btnAxisSetupGuideReset.Enable(True)

        self.btnAxisSetupGuideWrite.Enable(False)
        self.btnAxisSetupGuideCancel.Enable(False)
        
        if (abs(float(self.txtAxisSetupGuidePitch.GetValue())) > 15 ):
            dlg=wx.MessageDialog(None,'Guide Pitch > 15mm; Value uncanged','Error Pitch',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy
            self.txtAxisSetupGuidePitch.SetValue(str(self.GuidePitch))
            self.txtAxisSetupGuidePitch.Refresh() 
            
        if ((float(self.txtAxisSetupGuidePosMax.GetValue())) < 0.05 or
            (float(self.txtAxisSetupGuidePosMax.GetValue())) > (float(self.txtAxisSetupGuidePosMaxMax.GetValue())) ):
            dlg=wx.MessageDialog(None,'Pos Max Guider out of bounds; Value unchanged','Error Pos Max',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy
            self.txtAxisSetupGuidePosMax.SetValue(str(self.GuidePosMax))
            self.txtAxisSetupGuidePosMax.Refresh()
            
        self.GuidePitch     = self.txtAxisSetupGuidePitch.GetValue()
        self.GuidePosMax    = self.txtAxisSetupGuidePosMax.GetValue()
        self.GuidePosMin    = self.txtAxisSetupGuidePosMin.GetValue()

        self.Modus = 'w'

        self.txtAxisSetupGuidePitch.SetEditable( False )
        self.txtAxisSetupGuidePosMax.SetEditable( False )
        self.txtAxisSetupGuidePosMin.SetEditable( False )
        self.txtAxisSetupGuidePitch.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupGuidePosMax.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupGuidePosMin.SetBackgroundColour(wx.Colour(187,187,187)) 

    def OnAxisSetupGuideCancel(self, evt):
        #print "AxisSetupGuideCancel" 
        self.EnableControls()
        
        self.Modus ='r'

        self.btnAxisSetupGuideReset.Enable(True)
        self.btnAxisSetupGuideWrite.Enable(False)
        self.btnAxisSetupGuideCancel.Enable(False)

        self.txtAxisSetupGuidePitch.SetValue(self.GuidePitch )
        self.txtAxisSetupGuidePosMax.SetValue(self.GuidePosMax)
        self.txtAxisSetupGuidePosMin.SetValue(self.GuidePosMin)

        self.txtAxisSetupGuidePitch.SetEditable( False )
        self.txtAxisSetupGuidePosMax.SetEditable( False )
        self.txtAxisSetupGuidePosMin.SetEditable( False )
        self.txtAxisSetupGuidePitch.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupGuidePosMax.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupGuidePosMin.SetBackgroundColour(wx.Colour(187,187,187)) 


    def OnAxisSetupGuideReset(self, evt):
        #print "AxisSetupGuideReset"
        self.btnAxisSetupGuideClutch.SetLabel('reseting')
        dlg=wx.MessageDialog(None,'Pls Cycle Activation Switch after closing this Dialog','Slave reset',wx.OK|wx.ICON_EXCLAMATION)
        result=dlg.ShowModal()
        dlg.Destroy          
        
    def OnAxisSetupGuideClutch(self, evt):
        #print "AxisSetupGuideClutch"        
        if self.btnAxisSetupGuideClutch.GetValue():
            #print "  engage Clutch"
            self.ClutchStatus = 1
            self.GuideControl = 5
            self.DisableGuideControls() 
            self.btnAxisSetupGuideClutch.SetLabel('engaged')
        else:

            #print "  Dis-engage Clutch"
            self.ClutchStatus = 0
            self.GuideControl = 2
            self.EnableGuideControls()
            self.btnAxisSetupGuideClutch.SetLabel('dis-engaged')

    
#----------------------------------------------------------------
    def OnAxisSetupFilterEdit(self, evt):
        #print "AxisSetupFilterEdit" 
        self.DisableControls()
        self.Modus = 'E'#setup Filter Edit
        self.btnAxisSetupFilterWrite.Enable(True)
        self.btnAxisSetupFilterCancel.Enable(True)

        self.P      = self.txtAxisSetupFilterP.GetValue()
        self.I      = self.txtAxisSetupFilterI.GetValue()
        self.D     = self.txtAxisSetupFilterD.GetValue()
        self.IL     = self.txtAxisSetupFilterIL.GetValue()

        self.txtAxisSetupFilterP.SetEditable( True )
        self.txtAxisSetupFilterI.SetEditable( True )
        self.txtAxisSetupFilterD.SetEditable( True )
        self.txtAxisSetupFilterIL.SetEditable( True )
        self.txtAxisSetupFilterP.SetBackgroundColour(wx.Colour(255,255,255))        
        self.txtAxisSetupFilterI.SetBackgroundColour(wx.Colour(255,255,255))        
        self.txtAxisSetupFilterD.SetBackgroundColour(wx.Colour(255,255,255))
        self.txtAxisSetupFilterIL.SetBackgroundColour(wx.Colour(255,255,255))

    def OnAxisSetupFilterWrite(self, evt):
        #print "AxisSetupFilterWrite"
        self.EnableControls()
        self.btnAxisSetupFilterWrite.Enable(False)
        self.btnAxisSetupFilterCancel.Enable(False)

        self.P     = self.txtAxisSetupFilterP.GetValue()
        self.I      = self.txtAxisSetupFilterI.GetValue()
        self.D     = self.txtAxisSetupFilterD.GetValue()
        self.IL    = self.txtAxisSetupFilterIL.GetValue()

        self.Modus = 'w'

        self.txtAxisSetupFilterP.SetEditable( False )
        self.txtAxisSetupFilterI.SetEditable( False )
        self.txtAxisSetupFilterD.SetEditable( False )
        self.txtAxisSetupFilterIL.SetEditable( False )
        self.txtAxisSetupFilterP.SetBackgroundColour(wx.Colour(187,187,187))        
        self.txtAxisSetupFilterI.SetBackgroundColour(wx.Colour(187,187,187))        
        self.txtAxisSetupFilterD.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupFilterIL.SetBackgroundColour(wx.Colour(187,187,187)) 

    def OnAxisSetupFilterCancel(self, evt):
        #print "AxisSetupFilterCancel" 
        self.EnableControls()
        self.Modus = 'r'#setup Filter Cancel
        self.btnAxisSetupFilterWrite.Enable(False)
        self.btnAxisSetupFilterCancel.Enable(False)

        self.txtAxisSetupFilterP.SetValue(self.P)
        self.txtAxisSetupFilterI.SetValue(self.I)
        self.txtAxisSetupFilterD.SetValue(self.D)
        self.txtAxisSetupFilterIL.SetValue(self.IL)

        self.txtAxisSetupFilterP.SetEditable( False )
        self.txtAxisSetupFilterI.SetEditable( False )
        self.txtAxisSetupFilterD.SetEditable( False )
        self.txtAxisSetupFilterIL.SetEditable( False )
        self.txtAxisSetupFilterP.SetBackgroundColour(wx.Colour(187,187,187))        
        self.txtAxisSetupFilterI.SetBackgroundColour(wx.Colour(187,187,187))        
        self.txtAxisSetupFilterD.SetBackgroundColour(wx.Colour(187,187,187))
        self.txtAxisSetupFilterIL.SetBackgroundColour(wx.Colour(187,187,187)) 

#-------------------------------------------------------------------------------
    def OnEReset(self,evt):
        if self.btnEReset.GetValue():
            App.Magenta.PosSoll = App.Magenta.PosIst
            App.Magenta.EStopReset = 1
            for i in range(10):
                App.Magenta.comunicateServer()
            App.Magenta.EStopReset = 0
            if abs(float(self.txtPosDiff.GetValue())) < 0.01:
                self.OnReSync(1)
            self.btnEReset.SetValue(False)

            
    def EnableGuideControls(self):
        #print "Enabel Guide Controls" 
        self.btnAxisSetupGuideReset.Enable(True) 

    def DisableGuideControls(self):
        #print "Disabel Guide Controls" 

        self.btnAxisSetupGuideReset.Enable(False)

#----------------------------------------------------------------    
    def GoOnline(self):
        # Pruefe ob anderer Client das Commando hat
        if self.Online == False: 
            #print " Going Online" 
            App.Magenta.Intent  = 'False'
            self.EnableControls()
            self.Modus = 'r'#setup Rope Cancel
            self.txtTimeTick.SetBackgroundColour(wx.Colour(0 ,150,0))
            self.cmbAxisName.SetBackgroundColour(wx.Colour(0 ,150,0))
            self.txtTimeTick.Refresh()
            self.cmbAxisName.Refresh()
            self.Online = True


    def GoOffline(self):
        #if self.Online == True:
        #print " Going Offline" 
        self.Online = False
        self.DisableControls()
        self.Modus = 'rE'#setup Rope Cancel
        self.txtTimeTick.SetBackgroundColour(wx.Colour(255,255,255))
        self.cmbAxisName.SetBackgroundColour(wx.Colour(255,255,255))
        self.txtTimeTick.Refresh()
        self.cmbAxisName.Refresh()
        return

    def PermitOnline(self):
        if self.Controlle == False:
            #print "Online Permission"
            App.Magenta.Intent  = 'True'
            self.Controlle = True


    def DenyOnline(self):
        if self.Controlle == True:
            #print "Online forbidden"  
            App.Magenta.Intent = 'False'
            self.Controlle = False

    def DisableControls(self):
        if self.ControlsEnabeled:
            #print 'Disabeling Controls'
            self.btnAxisReset.Enable(False)
            self.btnAxisSetupPosEdit.Enable(False)
            self.btnAxisSetupPosWrite.Enable(False)
            self.btnAxisSetupPosCancel.Enable(False)
            self.txtAxisSetupPosHardMax.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupPosUserMax.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupPosIst.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupPosUserMin.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupPosHardMin.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupPosPosWin.SetBackgroundColour(wx.Colour(187,187,187)) 
            self.btnAxisSetupVelEdit.Enable(False)
            self.btnAxisSetupVelWrite.Enable(False)
            self.btnAxisSetupVelCancel.Enable(False)
            self.txtAxisSetupVelMaxMot.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupVelMaxMot.SetForegroundColour(wx.Colour(255,0,0))
            self.txtAxisSetupVelMax.SetBackgroundColour(wx.Colour(187,187,187))        
            self.txtAxisSetupAccMax.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupDccMax.SetBackgroundColour(wx.Colour(187,187,187))       
            self.txtAxisSetupAccTot.SetBackgroundColour(wx.Colour(187,187,187))        
            self.txtAxisSetupMaxAmp.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupVelWin.SetBackgroundColour(wx.Colour(187,187,187))
            self.btnAxisSetupGuideSetup.Enable(False)
            self.btnAxisSetupGuideWrite.Enable(False)
            self.btnAxisSetupGuideCancel.Enable(False)
            self.btnAxisSetupGuideReset.Enable(False)              
            self.btnAxisSetupGuideClutch.Enable(False)
    
            self.txtAxisSetupGuidePitch.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupGuidePosMax.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupGuidePosMin.SetBackgroundColour(wx.Colour(187,187,187))        
            self.btnAxisSetupFilterEdit.Enable(False)        
            self.btnAxisSetupFilterWrite.Enable(False)
            self.btnAxisSetupFilterCancel.Enable(False)
            self.txtAxisSetupFilterLagError.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupFilterP.SetBackgroundColour(wx.Colour(187,187,187))        
            self.txtAxisSetupFilterI.SetBackgroundColour(wx.Colour(187,187,187))        
            self.txtAxisSetupFilterD.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupFilterIL.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupFilterRampform.SetBackgroundColour(wx.Colour(187,187,187))
            self.btnAxisSetupRopeEdit.Enable(False)
            self.btnAxisSetupRopeWrite.Enable(False)
            self.btnAxisSetupRopeCancel.Enable(False)
            self.txtAxisSetupRopeSWLL.SetBackgroundColour(wx.Colour(187,187,187))        
            self.txtAxisSetupRopeDiameter.SetBackgroundColour(wx.Colour(187,187,187))        
            self.txtAxisSetupRopeType.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupRopeNumber.SetBackgroundColour(wx.Colour(187,187,187))
            self.txtAxisSetupRopeLength.SetBackgroundColour(wx.Colour(187,187,187))
            self.ControlsEnabeled = False
            self.btnRecover.Enable(False)
            self.btnReSync.Enable(False)
    def EnableControls(self):
        if not(self.ControlsEnabeled):
            #print 'Enabeling Controls'
            self.btnAxisReset.Enable(True)
            self.btnAxisSetupPosEdit.Enable(True)
            self.btnAxisSetupVelEdit.Enable(True)
            self.btnAxisSetupGuideSetup.Enable(True)
            self.btnAxisSetupGuideReset.Enable(True)              
            self.btnAxisSetupGuideClutch.Enable(True)
            self.btnAxisSetupFilterEdit.Enable(True)        
            #self.btnAxisSetupRopeEdit.Enable(True)
            #self.btnRecover.Enable(True)
            self.ControlsEnabeled = True
            
    def OnAxisSelect(self,evt):
        try:
            App.Magenta            
            item = evt.GetSelection()
            if App.Magenta.Name <> self.Achsen[item]:

                dlg = wx.MessageDialog(None, 'Are you sure you want to reassign Magenta Axis ?','Question', wx.OK | wx.CANCEL | wx.NO_DEFAULT | wx.ICON_QUESTION)
                result = dlg.ShowModal()
                dlg.Destroy()
                if result == wx.ID_OK:
                    try:
                        Temp = Achse(self.Achsen[item]) # Achse item laesst sich assignen
                    except: # wenn anderes GUI kontrolle dann auf SIMUL
                        dlg = wx.MessageDialog(None, 'Magenta Axis set to SIMUL !','Reset to SIMUL', wx.OK | wx.ICON_EXCLAMATION)
                        result = dlg.ShowModal()
                        dlg.Destroy()                        
                        del App.Magenta
                        App.Magenta = Achse('SIMUL')
                        App.Magenta.OwnPID= '0'#str(os.getpid())
                        #print 'Axis '+self.Achsen[item]+ ' as Green selected'
                        App.Magenta.comunicateServer()
                        taskMgr.add(self.AxisTask,'MagentaAxisTask')
                    else:
                        #print 'Magenta lsst sich auf ' + str(self.Achsen[item]) + 'assignen'
                        try:
                            del Temp
                        except:
                            pass
                        #print self.Achsen[item]
                        self.ResetAxis()
                else:
                    #print ' Accessing App.Green '
                    self.ReadDatafromAchse()
        except: # Noch kein Achsobjekt
            self.ResetAxis()

    def AxisReadJoystick(self):
        self.initJoystick()
        self.keepGoing                       = True
        self.LTold                           = 0
        self.ControlingPIDTx                 = 0
        self.ControlingPIDRx                 = 0
        self.Progression                     = 0.0001
        self.WriteZaehler = 0
        self.T1Old = 0
        self.VX = 0
        self.Pos0 = 0
        self.EnableOld = 0
        self.PoweredOld = 0
        self.Decode  = Decode()
        self.InitAxis = 1
        self.FahrbefehlOld = 1
        self.refreshEstopPanel = "Yellow"
        self.refreshBitPanel = "RedBrown"
        self.refreshRecoverPanel = "RedBrown"
        self.refreshSelect = "Blue"
        self.GuideControlOld = 2
        self.ValueSLDMain = 0
        self.ValueSLDSlave = 0
        self.SetupVelMax = 0
        
        taskMgr.add(self.AxisTask,'MagentaAxisTask')
        
    def LoadFromFileQuit(self):
        
        taskMgr.remove("MagentaAxisTask")
        
    def ResetAxis(self):
        
        self.initJoystick()
        self.keepGoing                       = True
        self.LTold                           = 0
        self.ControlingPIDTx                 = 0
        self.ControlingPIDRx                 = 0
        self.Progression                     = 0.0001
        self.WriteZaehler = 0
        self.T1Old = 0
        self.VX = 0
        self.Pos0 = 0
        self.EnableOld = 0
        self.PoweredOld = 0
        self.Decode  = Decode()
        self.InitAxis = 1
        self.FahrbefehlOld = 1
        self.refreshEstopPanel = "Yellow"
        self.refreshBitPanel = "RedBrown"
        self.refreshRecoverPanel = "RedBrown"
        self.refreshSelect = "Blue"
        self.GuideControlOld = 2
        self.ValueSLDMain = 0
        self.ValueSLDSlave = 0
        self.SetupVelMax = 0

        self.Modus = 'rE' # initialisieren im read Edit Mode
        self.Command=False
        self.DisableControls()
        try:
            App.Magenta
            AxisExists = True
            #print 'Magenta existiert'
        except: # Noch kein Achsobjekt
            AxisExists = False
            #print 'Magenta non exist'
            
        if not(AxisExists): # noch kein Achsobjekt -> neues instanzieren
            #print 'bauen neues Magenta'
            item=self.cmbAxisName.GetCurrentSelection()
            App.Magenta = Achse(self.Achsen[item])
            App.Magenta.OwnPID= str(os.getpid())
            #print 'Axis '+self.Achsen[item]+ ' as Magenta selected'
            App.Magenta.comunicateServer()
        else:
            del App.Magenta
            #print 'del Magenta'
            item=self.cmbAxisName.GetCurrentSelection()
            App.Magenta = Achse(self.Achsen[item])
            App.Magenta.OwnPID= '0'#str(os.getpid())
            #print 'Neues Neues Gelb'
            #print 'Axis '+self.Achsen[item]+ ' as Magenta selected'
            App.Magenta.comunicateServer()  
        
        taskMgr.add(self.AxisTask,'MagentaAxisTask') 
        
        return True  
        
    def Loadfromfile(self,item):
        
        self.initJoystick()
        self.keepGoing                       = True
        self.LTold                           = 0
        self.ControlingPIDTx                 = 0
        self.ControlingPIDRx                 = 0
        self.Progression                     = 0.0001
        self.WriteZaehler = 0
        self.T1Old = 0
        self.VX = 0
        self.Pos0 = 0
        self.EnableOld = 0
        self.PoweredOld = 0
        self.Decode  = Decode()
        self.InitAxis = 1
        self.FahrbefehlOld = 1
        self.refreshEstopPanel = "Yellow"
        self.refreshBitPanel = "RedBrown"
        self.refreshRecoverPanel = "RedBrown"
        self.refreshSelect = "Blue"
        self.GuideControlOld = 2
        self.ValueSLDMain = 0
        self.ValueSLDSlave = 0
        self.SetupVelMax = 0
        
        self.Modus = 'rE' # initialisieren im read Edit Mode
        self.Command=False
        self.DisableControls()
        
        
        try:
            App.Magenta
            MagentaExists = True
        except:
            MagentaExists = False
        if not(MagentaExists):
            App.Magenta = Achse(item.rstrip('\n'))
            App.Magenta.OwnPID= str(os.getpid())
            #print 'Axis '+item.rstrip('\n')+ ' as Magenta selected'
        else:
            taskMgr.remove('MagentaAxisTask')
            del App.Magenta
            App.Magenta = Achse(item.rstrip('\n'))
            App.Magenta.OwnPID= str(os.getpid())
            
        App.Green.comunicateServer()

        taskMgr.add(self.AxisTask,'MagentaAxisTask')       


    def AxisTask(self,task):

        self.refresh()
        return task.cont
    
    
    def refresh(self):
        
        self.readJoystick()
        self.readDataFromGUI()
        self.RampGenerator()        
        self.comunicateServer()
        self.writeDataToGUI()
        self.CheckStatus()
        
    def readDataFromGUI(self):

        App.Magenta.ControlingPIDTx = 0
        App.Magenta.Intent          = self.Command
        App.Magenta.Enable          = self.EnableStatus
        ##App.Magenta.EStopReset      = str(self.EStopReset)
        
        if App.Magenta.EStopReset == '1':
            self.Pos0 = App.Magenta.PosIst
        if self.btnAxisSetupGuideClutch.GetLabel() == "reseting":
            App.Magenta.GuideControl   = 5
            dlg=wx.MessageDialog(None,'Pls Cycle Activation Switch after closing this Dialog','Slave reset',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy            
            b=self.Decode.Decode(App.Magenta.GuideStatus)
            if b[1][0][2] == "Save Stop" or b[1][0][2] == "Not Enabled" or b[1][0][2] == "Ready":
                self.btnAxisSetupGuideClutch.SetLabel("Reset")
                if self.btnAxisSetupGuideClutch.GetValue():
                    self.btnAxisSetupGuideClutch.SetLabel("engaged")
                else:
                    self.btnAxisSetupGuideClutch.SetLabel("dis-engaged")
        else:
            if self.ClutchStatus == 1:
                App.Magenta.GuideControl   = 5
            else:
                if self.buttons & 128:
                    App.Magenta.GuideControl   = 17
                else:
                    App.Magenta.GuideControl   = 2 
                    
        if self.btnAxisReset.GetLabel() == "reseting":
            b=self.Decode.Decode(App.Magenta.Status)
            if b[1][0][2] == "Save Stop" or b[1][0][2] == "Not Enabled" or b[1][0][2] == "Ready":
                self.btnAxisReset.SetLabel("Reset") 
                self.btnAxisReset.SetValue(0)
        try:
            App.Magenta.Modus         = self.Modus
            App.Magenta.SpeedSoll     = self.VX
            App.Magenta.GuideSpeedSoll= self.sldAxisSetupGuideVel.GetValue()*20
            if not (self.txtAxisSetupPosHardMax.GetValue() == "-" or self.txtAxisSetupPosHardMax.GetValue() ==""):
                App.Magenta.PosHardMax    = float(self.txtAxisSetupPosHardMax.GetValue())
            if not (self.txtAxisSetupPosUserMax.GetValue() == "-" or self.txtAxisSetupPosUserMax.GetValue() == "") :
                App.Magenta.PosUserMax    = float(self.txtAxisSetupPosUserMax.GetValue())
            if not (self.txtAxisSetupPosUserMin.GetValue() == "-"  or self.txtAxisSetupPosUserMin.GetValue() == ""):
                App.Magenta.PosUserMin    = float(self.txtAxisSetupPosUserMin.GetValue())
            if not (self.txtAxisSetupPosHardMin.GetValue() == "-" or self.txtAxisSetupPosHardMin.GetValue() == "" ):
                App.Magenta.PosHardMin    = float(self.txtAxisSetupPosHardMin.GetValue())
            if not (self.txtAxisSetupPosPosWin.GetValue() == "-"  or self.txtAxisSetupPosPosWin.GetValue() == ""):
                App.Magenta.PosWin           = abs(float(self.txtAxisSetupPosPosWin.GetValue()))
            if not (self.txtAxisSetupVelMax.GetValue() == "-" or self.txtAxisSetupVelMax.GetValue() == ""):
                App.Magenta.SpeedMax         = abs(float(self.txtAxisSetupVelMax.GetValue()))
            if not (self.txtAxisSetupAccMax.GetValue() == "-" or self.txtAxisSetupAccMax.GetValue() == ""):
                App.Magenta.AccMax           = abs(float(self.txtAxisSetupAccMax.GetValue()))
            if not (self.txtAxisSetupDccMax.GetValue() == "-" or self.txtAxisSetupDccMax.GetValue() == ""):
                App.Magenta.DccMax           = abs(float(self.txtAxisSetupDccMax.GetValue()))
            if not (self.txtAxisSetupAccTot.GetValue() == "-" or self.txtAxisSetupAccTot.GetValue() == ""):
                App.Magenta.AccTot           = abs(float(self.txtAxisSetupAccTot.GetValue()))
            if not (self.txtAxisSetupMaxAmp.GetValue() == "-" or self.txtAxisSetupMaxAmp.GetValue() == ""):
                App.Magenta.MaxAmp           = abs(float(self.txtAxisSetupMaxAmp.GetValue()))
            if not (self.txtAxisSetupVelWin.GetValue() == "-" or self.txtAxisSetupVelWin.GetValue() == ""):
                App.Magenta.VelWin           = abs(float(self.txtAxisSetupVelWin.GetValue()))
            if not (self.txtAxisSetupFilterP.GetValue() == "-" or self.txtAxisSetupFilterP.GetValue() == ""):
                App.Magenta.FilterP          = abs(float(self.txtAxisSetupFilterP.GetValue()))
            if not (self.txtAxisSetupFilterI.GetValue() == "-" or self.txtAxisSetupFilterI.GetValue() == ""):
                App.Magenta.FilterI          = abs(float(self.txtAxisSetupFilterI.GetValue()))
            if not (self.txtAxisSetupFilterD.GetValue() == "-" or self.txtAxisSetupFilterD.GetValue() == ""):
                App.Magenta.FilterD          = abs(float(self.txtAxisSetupFilterD.GetValue()))
            if not (self.txtAxisSetupFilterIL.GetValue() == "-" or self.txtAxisSetupFilterIL.GetValue() == ""):
                App.Magenta.FilterIL         = abs(float(self.txtAxisSetupFilterIL.GetValue()))
            if not (self.txtAxisSetupRopeSWLL.GetValue() == "-" or self.txtAxisSetupRopeSWLL.GetValue() == ""):
                App.Magenta.RopeSWLL         = abs(float(self.txtAxisSetupRopeSWLL.GetValue()))
            if not (self.txtAxisSetupRopeDiameter.GetValue() == "-" or self.txtAxisSetupRopeDiameter.GetValue() == ""):
                App.Magenta.RopeDiameter     = abs(float(self.txtAxisSetupRopeDiameter.GetValue()))
            App.Magenta.RopeType         = self.txtAxisSetupRopeType.GetValue()
            App.Magenta.RopeNumber       = self.txtAxisSetupRopeNumber.GetValue()
            if not (self.txtAxisSetupRopeLength.GetValue() == "-" or self.txtAxisSetupRopeLength.GetValue() == ""):
                App.Magenta.RopeLength       = abs(float(self.txtAxisSetupRopeLength.GetValue()))
            if not (self.txtAxisSetupGuidePitch.GetValue() == "-" or self.txtAxisSetupGuidePitch.GetValue() == "-"):
                App.Magenta.GuidePitch       = float(self.txtAxisSetupGuidePitch.GetValue())
            if not (self.txtAxisSetupGuidePosMax.GetValue() == "-" or self.txtAxisSetupGuidePosMax.GetValue() == ""):
                App.Magenta.GuidePosMax      = abs(float(self.txtAxisSetupGuidePosMax.GetValue()))
            App.Magenta.GuidePosMaxMax   = float(self.txtAxisSetupGuidePosMaxMax.GetValue())
            if not (self.txtAxisSetupGuidePosMin.GetValue() == "-" or self.txtAxisSetupGuidePosMin.GetValue() == ""):
                App.Magenta.GuidePosMin      = float(self.txtAxisSetupGuidePosMin.GetValue())
        except ValueError:
            dlg=wx.MessageDialog(None,'Please use just numbers, minus and . as comma. Like 123.45  Use <Backspace> to correct the error!','Syntax ERROR',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy
            self.txtAxisSetupPosHardMax.SetValue(str(App.Magenta.PosHardMax))
            self.txtAxisSetupPosUserMax.SetValue(str(App.Magenta.PosUserMax))
            self.txtAxisSetupPosUserMin.SetValue(str(App.Magenta.PosUserMin))
            self.txtAxisSetupPosHardMin.SetValue(str(App.Magenta.PosHardMin))
            self.txtAxisSetupPosPosWin.SetValue(str(App.Magenta.PosWin))
            self.txtAxisSetupVelMax.SetValue(str(App.Magenta.SpeedMax))
            self.txtAxisSetupAccMax.SetValue(str(App.Magenta.AccMax))
            self.txtAxisSetupDccMax.SetValue(str(App.Magenta.DccMax))
            self.txtAxisSetupAccTot.SetValue(str(App.Magenta.AccTot))
            self.txtAxisSetupMaxAmp.SetValue(str(App.Magenta.MaxAmp))
            self.txtAxisSetupVelWin.SetValue(str(App.Magenta.VelWin))
            self.txtAxisSetupFilterP.SetValue(str(App.Magenta.FilterP))
            self.txtAxisSetupFilterI.SetValue(str(App.Magenta.FilterI))
            self.txtAxisSetupFilterD.SetValue(str(App.Magenta.FilterD))
            self.txtAxisSetupFilterIL.SetValue(str(App.Magenta.FilterIL))
            self.txtAxisSetupRopeSWLL.SetValue(str(App.Magenta.RopeSWLL))
            self.txtAxisSetupRopeDiameter.SetValue(str(App.Magenta.RopeDiameter))
            self.txtAxisSetupRopeType.SetValue(str(App.Magenta.RopeType))
            self.txtAxisSetupRopeNumber.SetValue(str(App.Magenta.RopeNumber))
            self.txtAxisSetupRopeLength.SetValue(str(App.Magenta.RopeLength))
            self.txtAxisSetupGuidePitch.SetValue(str(App.Magenta.GuidePitch))
            self.txtAxisSetupGuidePosMax.SetValue(str(App.Magenta.GuidePosMax))
            self.txtAxisSetupGuidePosMaxMax.SetValue(str(App.Magenta.GuidePosMaxMax))
            self.txtAxisSetupGuidePosMin.SetValue(str(App.Magenta.GuidePosMin))
            self.readDataFromGUI()

    def ReadDatafromAchse(self):
        
        self.Command          = App.Magenta.Intent           
        self.Enable           = App.Magenta.Enable
        if App.Magenta.GuideControl   == 5:
            self.btnAxisSetupGuideClutch.SetValue(True)    # Noch nicht passend        
        elif App.Magenta.GuideControl   == 17:              # Noch nicht passend  
            self.btnAxisSetupGuideEnable.SetValue(True)    # Noch nicht passend                 
        else:                                              # Noch nicht passend  
            self.btnAxisSetupGuideClutch.SetValue(True)    # Noch nicht passend  
            self.btnAxisSetupGuideEnable.SetValue(True)    # Noch nicht passend 
        self.Modus = App.Magenta.Modus 
        
        self.cmbAxisName.SetSelection(self.cmbAxisName.GetItems().index(unicode(App.Magenta.Name)))
        
        self.sldAxisVel.SetValue(500)    # Noch nicht passend 
        self.sldAxisSetupGuideVel.SetValue(50)
        self.txtAxisPos.SetValue(App.Magenta.PosIst)
        self.txtAxisSetupPosIst.SetValue(App.Magenta.PosIst)
        self.txtAxisSetupPosHardMax.SetValue(str(App.Magenta.PosHardMax)) 
        self.txtAxisSetupPosUserMax.SetValue(str(App.Magenta.PosUserMax))
        self.txtAxisSetupPosUserMin.SetValue(str(App.Magenta.PosUserMin))
        self.txtAxisSetupPosHardMin.SetValue(str(App.Magenta.PosHardMin))
        self.txtAxisSetupVelMax.SetValue(str(App.Magenta.SpeedMax))
        self.txtAxisSetupAccMax.SetValue(str(App.Magenta.AccMax))
        self.txtAxisSetupDccMax.SetValue(str(App.Magenta.DccMax))
        if App.Magenta.MaxAmp == 0.0:
            self.txtAxisSetupMaxAmp.SetValue("SIMUL")                
        else:
            self.txtAxisSetupMaxAmp.SetValue(str(App.Magenta.MaxAmp))
        self.txtAxisSetupFilterP.SetValue(App.Magenta.FilterP)
        self.txtAxisSetupFilterI.SetValue(App.Magenta.FilterI)
        self.txtAxisSetupFilterD.SetValue(App.Magenta.FilterD)
        self.txtAxisSetupFilterIL.SetValue(App.Magenta.FilterIL)
        self.txtAxisSetupGuidePitch.SetValue(App.Magenta.GuidePitch)
        self.txtAxisSetupGuidePosMax.SetValue(App.Magenta.GuidePosMax)
        self.txtAxisSetupGuidePosMin.SetValue(App.Magenta.GuidePosMin)
        


    def comunicateServer(self):
        App.Magenta.comunicateServer()

    def RampGenerator(self):
        if self.InitAxis == 1:
            self.Pos0 = App.Magenta.PosIst
            self.InitAxis = 0
        self.Pos0=App.Magenta.PosSoll        
        T1     = time.clock()
        self.DiffT= T1-self.T1Old
        self.T1Old  = T1
        # Fahrbefehlstaster gedrueckt Programm reagiert normal auf Joystick
        if App.Magenta.EsTaster:
            if self.FahrbefehlOld == 1:
                self.Pos0 = App.Magenta.PosIst
                self.FahrbefehlOld = 0
                
            d=self.Decode.Decode(App.Magenta.Status) #schauen ob Verstaerker in TechOpt ist
            if d[1][0][1] == "10"and (self.buttons & 32 and self.buttons & 4):
                if self.Modus != 'recover':
                    self.SetupVelMax = float(self.txtAxisSetupVelMax.GetValue())
                    self.SetupVelMax = max((float(self.txtAxisSetupVelMax.GetValue()))/10,1.0)
                else:
                    self.SetupVelMax = max((float(self.txtAxisSetupVelMax.GetValue()))/10,1.0)
                x = (self.sldAxisVel.GetValue() - 500) * 2 *self.SetupVelMax/1000  # 20 = 1000mm / 50 fuer Prozent
            else:
                x=0
            #VelX
            if self.VX < x:
                self.VX = self.VX + float(App.Magenta.AccMax)*(self.DiffT)
                if self.VX >= x:
                    self.VX = x
            elif self.VX > x:
                self.VX = self.VX - float(App.Magenta.DccMax)*(self.DiffT)
                if self.VX <= x:
                        self.VX = x  
        # Abfangen der Endpositionen *)
        #Bei Fahrt Richtung oberes Ende Beginn
            PosDiffG = float(App.Magenta.PosUserMax) - float(App.Magenta.PosIst)
            if PosDiffG > 0 :
                SpeedMaxG = math.sqrt(float(App.Magenta.DccMax)*0.8*PosDiffG)
                self.VX = min(self.VX,SpeedMaxG);
            else:
                if self.VX > 0:
                    self.VX = 0.0;
            #Bei Fahrt Richtung oberes Ende End
            #Bei Fahrt Richtung unteres Ende Beginn
            PosDiffG = float(App.Magenta.PosIst) - float(App.Magenta.PosUserMin)
            if PosDiffG > 0 :
                SpeedMaxG = math.sqrt(float(App.Magenta.DccMax)*0.8*PosDiffG)
                self.VX = max(self.VX,-SpeedMaxG);
            else:
                if self.VX < 0 :
                    self.VX = 0.0
            #Bei Fahrt Richtung unteres Ende End
# Fahrbefehlstaster offen Programm steuert Motor mit AccTot zum Stillstand
        else:
            x = 0.0
            if self.VX < x:
                self.VX = self.VX + float(App.Magenta.AccTot)*(self.DiffT)
                if self.VX >= x:
                    self.VX = x
            elif self.VX > x:
                self.VX = self.VX - float(App.Magenta.AccTot)*(self.DiffT)
                if self.VX <= x:
                        self.VX = x 
            self.FahrbefehlOld = 1
            
        App.Magenta.PosSoll= str(float(self.Pos0)+self.VX*(self.DiffT))        

    
    
    def writeDataToGUI(self):        
        a=self.Decode.Decode(App.Magenta.Status)                         
        b=self.Decode.Decode(App.Magenta.GuideStatus)
        if App.Magenta.EsTaster:
            self.DisableControls()
            self.btnAxisSetupGuideClutch.Enable(False)
            self.btnAxisSetupGuideReset.Enable(False)            
            self.cmbAxisName.Enable(False)
        else:
            if self.Modus != 'E':
                self.EnableControls()
                self.cmbAxisName.Enable(True)
                self.btnAxisSetupGuideClutch.Enable(True)
                #if self.ClutchStatus == 0:
                self.btnAxisSetupGuideReset.Enable(True)
            
        if App.Magenta.EsResetAble:
            self.btnEReset.Enable(False)
        else:
            self.btnEReset.Enable(True)
            
        self.SliderPanel.Update()

        if not(abs(float(self.txtPosDiff.GetValue())) < 0.01):
            if self.refreshRecoverPanel != 'Yellow':
                self.RecoverPanel.SetBackgroundColour((250,198,12))
                self.RecoverPanel.Refresh()
                self.refreshRecoverPanel = 'Yellow'               
        else:
            if self.refreshRecoverPanel != 'Green':
                self.RecoverPanel.SetBackgroundColour((0,150,0))
                self.RecoverPanel.Refresh()
                self.refreshRecoverPanel = 'Green'
                
        if not(App.Magenta.EsNetwork) :            
            if self.refreshEstopPanel != "Yellow":
                self.EStopPanel.SetBackgroundColour((250,198,12))
                self.EStopPanel.Refresh()
                self.refreshEstopPanel = "Yellow"
        else:
            if self.refreshEstopPanel != "Green":
                self.EStopPanel.SetBackgroundColour((0,150,0))
                self.EStopPanel.Refresh()
                self.refreshEstopPanel = "Green" 
                
        if App.Magenta.Modus !='E':
            if not(App.Magenta.EsNetwork) : 
                self.btnRecover.Enable(False)
                self.btnReSync.Enable(False)
            else:
                if (abs(float(self.txtPosDiff.GetValue())) < 0.01):
                    self.btnRecover.Enable(False)
                else:
                    self.btnRecover.Enable(True)
                if (App.Magenta.EsTaster or abs(float(self.txtPosDiff.GetValue())) < 0.01 or
                    self.btnRecover.GetLabel() == 'Running'):
                    self.btnReSync.Enable(False)
                else:     
                    self.btnReSync.Enable(True) 
        else:
            self.btnRecover.Enable(False)
            self.btnReSync.Enable(False)
            
        if (not(App.Magenta.EsNetwork)):          #Gelb
            if self.refreshBitPanel != "Yellow":
                self.BitPanel.SetBackgroundColour((250,198,12)) 
                self.BitPanel.Refresh()
                self.refreshBitPanel = "Yellow"
        else:
            if ((App.Magenta.EsReady and abs(float(self.txtPosDiff.GetValue())) >= 0.01) or
                ((App.Magenta.EsReady and abs(float(self.txtPosDiff.GetValue())) < 0.01))):
                if self.refreshBitPanel != "LightGreen":
                    self.BitPanel.SetBackgroundColour((0,150,0))
                    self.BitPanel.Refresh()
                    self.refreshBitPanel = "LightGreen"
            else:
                if (not(App.Magenta.EsReady) and abs(float(self.txtPosDiff.GetValue())) > 0.01) :
                    if self.refreshBitPanel != "Yellow":
                        self.BitPanel.SetBackgroundColour((250,198,12)) 
                        self.BitPanel.Refresh()
                        self.refreshBitPanel = "Yellow"
                else:
                    if self.refreshBitPanel != "RedBrown":
                        self.BitPanel.SetBackgroundColour((128,128,128)) 
                        self.BitPanel.Refresh()
                        self.refreshBitPanel = "RedBrown"

        if (App.Magenta.Modus == 'r' or 
            App.Magenta.Modus == 'rE' or 
            App.Magenta.Modus == 'JoyEnabeled' or
            App.Magenta.Modus == 'recover'):
            fa="%3.2f"
            fb="%2.3f"
            fc="%2.0f"
            fd="%3.1f"
            fe="%1.4f"
            self.ControlingPIDRx = App.Magenta.ControlingPIDRx                                         #[0] Controling PID
            self.txtTimeTick.SetValue(str(App.Magenta.LTold-self.LTold))
            #self.txtTimeTick.SetValue(str(self.Achse.GetLTold()-self.LTold))
            self.LTold =int(App.Magenta.LTold)                                        
            self.txtAxisError.SetValue(a[1][0][2])
            self.txtAxisError.SetBackgroundColour(a[1][0][3])
            #self.txtAxisError.SetToolTipString(str(a[0]))
                                                              #[3] Guide Status
            self.txtAxisSetupGuideError.SetValue(b[1][0][2])
            self.txtAxisSetupGuideError.SetBackgroundColour(b[1][0][3])
            #self.txtAxisSetupGuideError.SetToolTipString(str(b[0]))
            self.txtAxisPos.SetValue(str(fa%(float(App.Magenta.PosIst)) +' m'))                              #[4] AxisPos
            self.txtAxisSetupPosIst.SetValue(str(fa%(float(App.Magenta.PosIst))))
            self.txtAxisVel.SetValue(str(fa%(float(App.Magenta.SpeedIstUI)) +' m/s'))                        #[5] AxisVel
            self.txtAxisAmp.SetValue(str(fa%(float(App.Magenta.MasterMomentUI )/1000*60)+' A'))  #[6] AxisAmp
            self.txtAxisTemp.SetValue(str(App.Magenta.CabTemperature +' C'))                     #[7] AxisTemp        
            self.txtAxisSetupGuidePos.SetValue(str(App.Magenta.GuidePosIstUI))                   #[30]GuidePos
            self.txtAxisSetupGuideVel.SetValue(str(App.Magenta.GuideIstSpeedUI))                 #[31]GuideVel
            self.txtAxisSetupVelMaxMot.SetValue(str(abs(float(App.Magenta.SpeedMaxForUI))))                  #[37]VelMaxMot
            self.txtAxisSetupFilterLagError.SetValue(str(App.Magenta.PosDiffForUI ))             #[38]Lag Error
            self.cmbAxisName.SetValue(str(App.Magenta.Name))                                     #[8]  Name
            self.txtAxisSetupPosHardMax.SetValue(str(App.Magenta.PosHardMax))                    #[10] PosHardMax
            self.txtAxisSetupPosUserMax.SetValue(str(App.Magenta.PosUserMax))                    #[11] PosUserMax
            self.txtAxisSetupPosUserMin.SetValue(str(App.Magenta.PosUserMin))                    #[12] PosUserMin
            self.txtAxisSetupPosHardMin.SetValue(str(App.Magenta.PosHardMin))                    #[13] PosHardMin
            self.txtAxisSetupPosPosWin.SetValue(str(App.Magenta.PosWin))                            #[38] PosWin
            self.txtAxisSetupVelMax.SetValue(str(App.Magenta.SpeedMax))                          #[14] VelMax
            self.txtAxisSetupAccMax.SetValue(str(App.Magenta.AccMax))                            #[15] AccMax
            self.txtAxisSetupDccMax.SetValue(str(App.Magenta.DccMax))                            #[16] DccMax
            self.txtAxisSetupAccTot.SetValue(str(App.Magenta.AccTot))                            #[40] AccTot
            self.txtAxisSetupMaxAmp.SetValue(str(App.Magenta.MaxAmp))                            #[17] AmpMax
            self.txtAxisSetupVelWin.SetValue(str(App.Magenta.VelWin))                            #[39] VelWin
            self.txtAxisSetupFilterP.SetValue(str(App.Magenta.FilterP))                          #[18] FilterP
            self.txtAxisSetupFilterI.SetValue(str(App.Magenta.FilterI))                          #[19] FilterI
            self.txtAxisSetupFilterD.SetValue(str(App.Magenta.FilterD))                          #[20] FilterD
            self.txtAxisSetupFilterIL.SetValue(str(App.Magenta.FilterIL))                        #[21] FilterIL
            self.txtAxisSetupFilterRampform.SetValue(str(App.Magenta.Rampform))                  #[36] Rampform
            self.txtAxisSetupRopeSWLL.SetValue(str(App.Magenta.RopeSWLL))                        #[22] SWLL
            self.txtAxisSetupRopeDiameter.SetValue(str(App.Magenta.RopeDiameter))                #[23] Rope Diam    
            self.txtAxisSetupRopeType.SetValue(str(App.Magenta.RopeType))                        #[24] Rope Type 
            self.txtAxisSetupRopeNumber.SetValue(str(App.Magenta.RopeNumber))                    #[25] Rope Number     
            self.txtAxisSetupRopeLength.SetValue(str(App.Magenta.RopeLength))                    #[26] Rope Length   
            self.txtAxisSetupGuidePitch.SetValue(str(App.Magenta.GuidePitch))                    #[27] Pitch       
            self.txtAxisSetupGuidePosMax.SetValue(str(App.Magenta.GuidePosMax))                  #[28] Guide Pos Max
            self.txtAxisSetupGuidePosMaxMax.SetValue(str(App.Magenta.GuidePosMaxMax))            #[41] Guide Pos MaxMax
            self.txtAxisSetupGuidePosMin.SetValue(str(App.Magenta.GuidePosMin))                  #[29] Guide Pos Min
            self.txtCutPos.SetValue(str(fa%(float(App.Magenta.EStopCutPos))))
            self.txtCutVel.SetValue(str(fa%(float(App.Magenta.EStopCutVel))))
            self.txtPosDiff.SetValue(str(fa%(float(App.Magenta.EStopCutPos)-float(App.Magenta.PosIst))))
            self.txtCutTime.SetValue(str(App.Magenta.EStopCutTime))

        
        self.rMaster.SetValue(App.Magenta.EsMaster)
        self.rSlave.SetValue(App.Magenta.EsSlave)
        self.rNetwork.SetValue(App.Magenta.EsNetwork)            
        self.rEStop1.SetValue(App.Magenta.EsEStop1)
        self.rEStop2.SetValue(App.Magenta.EsEStop2)
        self.rSteuerwort.SetValue(App.Magenta.EsSteuerwort)
        self.r30kWOK.SetValue(App.Magenta.Es30kWOK )
        self.r05kWOK.SetValue(App.Magenta.Es05kWOK)
        self.rB1OK.SetValue(not(App.Magenta.EsB1OK ^ App.Magenta.EsTaster))
        self.rB2OK.SetValue(not (App.Magenta.EsB2OK ^ App.Magenta.EsTaster))
        #self.rB1OK.SetValue(App.Magenta.EsB1OK )
        #self.rB2OK.SetValue(App.Magenta.EsB2OK )        
        self.rDSC.SetValue(App.Magenta.EsDCSOK)    
        self.rSPSOK.SetValue(App.Magenta.EsSPSOK)
        self.rBRK2KB.SetValue(App.Magenta.EsBRK2KB)
        self.rPosWin.SetValue(App.Magenta.EsPosWin)
        self.rVelWin.SetValue(App.Magenta.EsVelWin)
        self.rEndlage.SetValue(App.Magenta.EsEndlage) 
        
        self.rG1COM.SetValue(App.Magenta.EsG1COM)
        self.rG1FB.SetValue(App.Magenta.EsG1FB)
        self.rG1OUT.SetValue(App.Magenta.EsG1OUT)
        self.rG2COM.SetValue(App.Magenta.EsG2COM)
        self.rG2FB.SetValue(App.Magenta.EsG2FB)
        self.rG2OUT.SetValue(App.Magenta.EsG2OUT)
        self.rG3COM.SetValue(App.Magenta.EsG3COM)
        self.rG3FB.SetValue(App.Magenta.EsG3FB)
        self.rG3OUT.SetValue(App.Magenta.EsG3OUT)
        
        if App.Magenta.EsSchluessel1:                      # Nur Master          
            font = wx.Font(8,wx.DEFAULT,wx.NORMAL,wx.BOLD)
            if App.Magenta.EsTaster:
                self.btnAxisSetupGuideClutch.Enable(False)
                self.btnAxisSetupGuideSetup.Enable(False)
            else:
                self.btnAxisSetupGuideClutch.Enable(True)
                self.btnAxisSetupGuideSetup.Enable(True)
            self.rEStop1.SetFont(font)
            self.rEStop2.SetFont(font)
            self.rSteuerwort.SetFont(font)
            self.r30kWOK.SetFont(font)
            self.rB1OK.SetFont(font)
            self.rSPSOK.SetFont(font)
            self.rBRK2KB.SetFont(font)
            self.rPosWin.SetFont(font)
            self.rVelWin.SetFont(font)
            self.rEndlage.SetFont(font)            
            font = wx.Font(8,wx.DEFAULT,wx.NORMAL,wx.LIGHT)
            self.rSlave.SetFont(font)
            self.rNetwork.SetFont(font)            
            self.r05kWOK.SetFont(font)
            self.rB2OK.SetFont(font)
            self.rDSC.SetFont(font)            
            self.rG1COM.SetFont(font) 
            self.rG1FB.SetFont(font) 
            self.rG1OUT.SetFont(font) 
            self.rG2COM.SetFont(font) 
            self.rG2FB.SetFont(font) 
            self.rG2OUT.SetFont(font) 
            self.rG3COM.SetFont(font) 
            self.rG3FB.SetFont(font) 
            self.rG3OUT.SetFont(font)            
        elif App.Magenta.EsSchluessel2:
            font = wx.Font(8,wx.DEFAULT,wx.NORMAL,wx.BOLD)          # Master und Slave
            self.btnAxisSetupGuideClutch.Enable(False)
            self.btnAxisSetupGuideSetup.Enable(False)
            self.rMaster.SetFont(font)
            self.rSlave.SetFont(font)
            self.rEStop1.SetFont(font)
            self.rEStop2.SetFont(font)
            self.rSteuerwort.SetFont(font)
            self.r30kWOK.SetFont(font)
            self.rB1OK.SetFont(font)
            self.rSPSOK.SetFont(font)
            self.rBRK2KB.SetFont(font)
            self.rPosWin.SetFont(font)
            self.rVelWin.SetFont(font)
            self.rEndlage.SetFont(font) 
            font = wx.Font(8,wx.DEFAULT,wx.NORMAL,wx.LIGHT)
            self.rNetwork.SetFont(font)            
            self.rG1COM.SetFont(font) 
            self.rG1FB.SetFont(font) 
            self.rG1OUT.SetFont(font) 
            self.rG2COM.SetFont(font) 
            self.rG2FB.SetFont(font) 
            self.rG2OUT.SetFont(font) 
            self.rG3COM.SetFont(font) 
            self.rG3FB.SetFont(font) 
            self.rG3OUT.SetFont(font) 
        else:
            font = wx.Font(8,wx.DEFAULT,wx.NORMAL,wx.BOLD)              # Master Slave und Netzwerk
            self.btnAxisSetupGuideClutch.Enable(False)
            self.btnAxisSetupGuideSetup.Enable(False)
            self.rMaster.SetFont(font)
            self.rSlave.SetFont(font)
            self.rEStop1.SetFont(font)
            self.rEStop2.SetFont(font)
            self.rSteuerwort.SetFont(font)
            self.r30kWOK.SetFont(font)
            self.rB1OK.SetFont(font)
            self.rSPSOK.SetFont(font)
            self.rBRK2KB.SetFont(font)
            self.rPosWin.SetFont(font)
            self.rVelWin.SetFont(font)
            self.rEndlage.SetFont(font) 
            self.rNetwork.SetFont(font)            
            self.r05kWOK.SetFont(font)
            self.rB2OK.SetFont(font)
            self.rDSC.SetFont(font)            
            self.rG1COM.SetFont(font) 
            self.rG1FB.SetFont(font) 
            self.rG1OUT.SetFont(font) 
            self.rG2COM.SetFont(font) 
            self.rG2FB.SetFont(font) 
            self.rG2OUT.SetFont(font) 
            self.rG3COM.SetFont(font) 
            self.rG3FB.SetFont(font) 
            self.rG3OUT.SetFont(font)
        
        if(self.rG1COM.GetValue() and
           self.rG1FB.GetValue() and
           self.rG1OUT.GetValue() and
           self.rG2COM.GetValue() and
           self.rG2FB.GetValue() and
           self.rG2OUT.GetValue() and
           self.rG3COM.GetValue() and
           self.rG3FB.GetValue() and
           self.rG3OUT.GetValue()):
            pass
            self.EStopReset =0              

        self.rbReady.SetValue(a[1][2])
        self.rbPowered.SetValue(a[1][1])
        self.rbBrake1.SetValue(App.Magenta.EsB1OK)
        self.rbBrake2.SetValue(App.Magenta.EsB2OK)
        self.rFBT.SetValue(not(App.Magenta.EsFTBOK))
        
        self.rbSReady.SetValue(b[1][2])
        self.rbSPowered.SetValue(b[1][1])
            

        if self.Modus =='w':
            self.WriteZaehler = self.WriteZaehler+1
            self.readDataFromGUI()
            App.Magenta.comunicateServer()
            if self.WriteZaehler > 4:   # Das ist naemlich so. Wenn die Werte runter geschrieben werden, braucht's eine Zeit bis sie auch
                                        # entsprechend aktualisiert wieder zurueckkommen. So etwa 5 Zyklen.
                                        # Wenn also Modus-w eintritt warten wir einige Zyklen bevor wir die Ueberpruefung beginnen.

                if (self.cmbAxisName.GetValue()                            == App.Magenta.Name          and               
                    "%.2f"%float(self.txtAxisSetupPosHardMax.GetValue())   == App.Magenta.PosHardMax    and
                    "%.2f"%float(self.txtAxisSetupPosUserMax.GetValue())   == App.Magenta.PosUserMax    and
                    "%.2f"%float(self.txtAxisSetupPosUserMin.GetValue())   == App.Magenta.PosUserMin    and
                    "%.2f"%float(self.txtAxisSetupPosHardMin.GetValue())   == App.Magenta.PosHardMin    and
                    "%.4f"%float(self.txtAxisSetupPosPosWin.GetValue())    == App.Magenta.PosWin        and
                    "%.2f"%float(self.txtAxisSetupVelMax.GetValue())       == App.Magenta.SpeedMax      and
                    "%.2f"%float(self.txtAxisSetupAccMax.GetValue())       == App.Magenta.AccMax        and
                    "%.2f"%float(self.txtAxisSetupDccMax.GetValue())       == App.Magenta.DccMax        and
                    "%.2f"%float(self.txtAxisSetupAccTot.GetValue())       == App.Magenta.AccTot        and
                    "%.2f"%float(self.txtAxisSetupMaxAmp.GetValue())       == App.Magenta.MaxAmp        and
                    "%.4f"%float(self.txtAxisSetupVelWin.GetValue())       == App.Magenta.VelWin        and
                    "%.3f"%float(self.txtAxisSetupFilterP.GetValue())      == App.Magenta.FilterP       and
                    "%.3f"%float(self.txtAxisSetupFilterI.GetValue())      == App.Magenta.FilterI       and
                    "%.3f"%float(self.txtAxisSetupFilterD.GetValue())      == App.Magenta.FilterD       and
                    "%.1f"%float(self.txtAxisSetupFilterIL.GetValue())     == App.Magenta.FilterIL      and
                    "%.3f"%float(self.txtAxisSetupGuidePitch.GetValue())   == App.Magenta.GuidePitch): # and        
                    #"%.3f"%float(self.txtAxisSetupGuidePosMax.GetValue())  == self.Achse.GuidePosMax)   and        
                    #"%.4f"%float(self.txtAxisSetupGuidePosMin.GetValue())  == self.Achse.GuidePosMin):
                    #print 'Daten transfer OK'
                    pass
                else:
                    #print 'Data transfer FAILED'
                    dlg=wx.MessageDialog(None,'Data transfer: Pls Check Data','Data transfer',wx.OK|wx.ICON_EXCLAMATION)
                    result=dlg.ShowModal()
                    dlg.Destroy                                  
                self.Modus = 'rE'
                self.WriteZaehler = 0
    def readJoystick(self):

        if not((self.Modus ==  'E') or (self.Modus ==  'w')):
            self.buttons=self.stick.GetButtonState()
            a=self.stick.GetPosition().y
            d=self.stick.GetPosition().x
            b=a/32767.0-1
            e=d/32767.0-1
            # Achse
            if b>0:            
                c=b*(1-self.Progression)+b*b*self.Progression
            else:
                c=b*(1-self.Progression)-b*b*self.Progression
            self.ValueSLDMain = int(c*500.0+500)
            # Slider
            if e>0:            
                f=e*(1-self.Progression)+e*e*self.Progression
            else:
                f=e*(1-self.Progression)-e*e*self.Progression
            self.ValueSLDSlave = int(f*1000)
            
            if self.buttons & 4 :
                if self.refreshSelect != "Blue":
                    self.txtSelected1.SetBackgroundColour((0,200,0))
                    self.txtSelected2.SetBackgroundColour((0,200,0))
                    self.txtSelected1.SetLabel('Selected')
                    self.txtSelected2.SetLabel('Selected') 
                    self.txtSelected1.Refresh()
                    self.txtSelected2.Refresh()
                    self.refreshSelect = "Blue"
            else:
                if self.refreshSelect != "White":
                    self.txtSelected1.SetBackgroundColour((255,240,0))
                    self.txtSelected2.SetBackgroundColour((255,240,0))
                    self.txtSelected1.SetLabel('De-Selected')
                    self.txtSelected2.SetLabel('De-Selected')                     
                    self.txtSelected1.Refresh()
                    self.txtSelected2.Refresh()
                    self.refreshSelect = "White" 
                    

            if self.Modus != "recover":
                if self.buttons & 32  and self.buttons & 4 :
                    self.Modus ='JoyEnabeled'
                    if abs(float(self.txtPosDiff.GetValue())) > 0.01:
                        self.ValueSLDMain = 500
                    self.OnAxisEnable(self.buttons)
                elif not(self.buttons & 32):
                    self.Modus ='JoyDisabeled'
                    self.OnAxisEnable(self.buttons)
            else:
                if abs(float(self.txtPosDiff.GetValue())) < 0.01:
                    self.btnRecover.SetLabel('Recover')
                    self.OnReSync(1)
                    self.Modus ='r'
                    self.OnAxisEnable(self.buttons)
                self.OnAxisEnable(self.buttons)
                di= float(self.txtPosDiff.GetValue())
                PVel =  math.atan(di)/(math.pi/2)*500
                Vel = 500+PVel
                b=self.Decode.Decode(App.Magenta.GuideStatus)
                if b[1][0][1] == "10":
                    self.ValueSLDMain = Vel
                else:
                    self.ValueSLDMain = 500
      
            self.sldAxisVel.SetValue(self.ValueSLDMain)
            #self.sldAxisVel.Refresh()
            #self.SliderPanel.Refresh()
            self.sldAxisSetupGuideVel.SetValue(self.ValueSLDSlave)
            #self.sldAxisVel.Refresh()
            #self.SliderPanel.Refresh()

    def initJoystick(self):                
        #Joystick auslesen und Umrechnungen vorbereiten
        self.stick = wx.Joystick()
        self.min0 = self.stick.GetXMin()
        self.max0 = self.stick.GetXMax()
        self.diff0 = float((self.max0-self.min0)/2)
        self.min1 = self.stick.GetYMin()
        self.max1 = self.stick.GetYMax()
        self.diff1 = float((self.max1-self.min1)/2)
        self.min2 = self.stick.GetRudderMin()
        self.max2 = self.stick.GetRudderMax()
        self.diff2 = float((self.max2-self.min2)/2)
        self.min3 = self.stick.GetZMin()
        self.max3 = self.stick.GetZMax()
        self.diff3 = float((self.max3-self.min3)/2)
        if self.diff0 == 0.0 or self.diff1 == 0.0 or self.diff2 == 0.0 or self.diff3 == 0.0:
            dlg = wx.MessageDialog(self.frame, ' Joystick configuration error',' Joystick configuration error!', wx.OK|wx.ICON_EXCLAMATION)
            self.logger.debug('No Joystick')
            if dlge.ShowModal() == wx.ID_OK:
                dlge.Destroy()         
    def CheckStatus(self):
        ##if self.ControlingPIDRx == "0"   or self.ControlingPIDRx == str(App.Magenta.OwnPID) :
        if (self.ControlingPIDRx == "0" or self.ControlingPIDRx == str(App.Magenta.OwnPID) or self.ControlingPIDRx == '0000' ):     # If the system is available
            self.PermitOnline()
        else:
            self.DenyOnline()

        if (self.ControlingPIDRx == str(App.Magenta.OwnPID)) :       # If we are connected
        ##if (self.ControlingPIDRx == str(self.frame.Achse.OwnPID)) :       # If we are connected
            self.GoOnline()
        else:
            self.GoOffline()


    def OnClose(self,evt):

        try:
            App.Magenta.LTold              = 0
            App.Magenta.Modus              = 0
            App.Magenta.OwnPID             = 0
            App.Magenta.ControlingPIDTx    = 0
            App.Magenta.Intent             = 0
            App.Magenta.Enable             = 0
            App.Magenta.GuideControl       = 5
            App.Magenta.SpeedSoll          = 0
            App.Magenta.GuideSpeedSoll     = 0
            #print "Clean Exit"                  
            App.Magenta.comunicateServer()
            ##self.keepGoing = False
            taskMgr.remove("MagentaAxisTask")
        except:
            ##self.keepGoing = False
            taskMgr.remove("MagentaAxisTask")
            #print "Exit"
        
                             
#-------------------------------------------------------------------------------
class App(wx.PySimpleApp, DirectObject.DirectObject):
    def __init__(self):
        wx.PySimpleApp.__init__(self)

    def OnInit(self):
        self.initLogging()
        self.initPstat()
        self.initVars()
        self.wxApp = wx.App(redirect = False)
        self.wxApp.SetAppName("LARAMover")
        self.wxApp.SetClassName("LARA")
        self.VelDatafile = open("VelDatafile.txt",'w',0)
        #self.Splash()
        self.appInit()        
        self.frame = MyParentFrame()        
        self.pandaWindowHandle = user32dllHandle.GetWindow(self.frame.p3dViewport.GetHandle(),5)
        #the second parameter stands for the constant GW_HWNDPREV in windows.h
        #the value of this parameter might depend on the order in which the #children are added to the parent of pandaWindow, assuming the
        #parent might contain other windows beside pandaWindow
        #finally when the parent gets focus I call this
        #user32dllHandle.SetFocus(self.pandaWindowHandle)
        #self.frame.Maximize()
        self.InsertFieldOfPlay()
        self.GenerateTextures()
        self.initCtrls()
        self.initPositions()
        self.initEvents()
        self.initJoystick()        
        self.Shadow()
        #self.InitViewPoint()
        #self.Anzeige()
        self.InsertPillars()
        self.SetupBorders()
        self.initMouseColider()
        self.ReorderSceneGraph()
        self.InsertCharacter()
        self.InsertRopes()
        
        self.camHandler = CameraHandler()       
        self.frame.Show()
        self.frame.Update()
        self.wxStep()
        base.setBackgroundColor(0.1,0.1,0.2)
        #dr2 = base.win.makeDisplayRegion(0.1, 0.4, 0.2, 0.6)
        # Fuer deckflaechen visualisierung Beginn
        #self.SetupForceCollision()
        #self.InsertGrid()
        # Fuer deckflaechen visualisierung End
        self.Decode = Decode()
        #self.TAB = Tablett()
        self.accept('p', self.OnPointsToPath ) #Points to Path
        self.accept('control-p', self.OnShowKeyPoints)
        self.ShowKeyPointsFlag = 0
        self.accept('control-+', self.ZoomRepsIn)
        self.accept('control--', self.ZoomRepsOut)
        self.accept('u', self.OnStopUpdate)
        self.accept('control-u',self.OnStartUpdate)
        #self.frame.p3dViewport.DisplayPersA.setClearColor(VBase4(0.8,0.0,0.0,1))

        return True
    def OnStopUpdate(self):
        self.UpdateFlag = 0
    def OnStartUpdate(self):
        self.UpdateFlag = 1
    def initPstat(self):
        self.CommunicateTimer = PStatCollector("Frame:App:Show code:MoveTask:Communicate")
        self.MeterTimer       = PStatCollector("Frame:App:Show code:MoveTask:MeterDrawing") 
    def initLogging(self):
        self.logger = logging.getLogger('3D Steuerung')
        self.logger.setLevel(logging.DEBUG)
        filehandler = logging.handlers.RotatingFileHandler(LOG_FILENAME, backupCount=5)
        streamhandler = logging.StreamHandler()
        formatter = logging.Formatter('%(asctime)s %(name)-12s %(levelname)-8s %(message)s')
        filehandler.setFormatter(formatter)
        streamhandler.setFormatter(formatter)
        self.logger.addHandler(filehandler)
        self.logger.addHandler(streamhandler)
        filehandler.doRollover()
        
        self.logger.info('Logger initialised')
        
    def initVars(self):
        self.logger.info('initialising Variables')
        self.Laenge1Old = 0
        self.T1Old      = 0
        self.EStopT1Old = 0
        time.clock()
        self.T0=1
        self.T1=1 
        self.DeltaT=0
        self.SumDiffT=0
        self.VX=0
        self.VY=0
        self.VZ=0
        self.VAbs=0
        self.maxAcc = 3.0
        self.maxVel = 5.0
        self.Weight = 100.0
        self.aAcc = 0.2
        self.aktuelleVel = 0.0
        self.posVel = 0.0
        self.cCorrection = Vec3()
        self.cCorrectionMaxKraft = Vec3()
        self.cCorrectionMinKraft = Vec3()
        self.cCorrection[0] = 0
        self.cCorrection[1] = 0        
        self.cCorrection[2] = 0
        self.cCorrectionMaxKraft[0] = 0
        self.cCorrectionMaxKraft[1] = 0        
        self.cCorrectionMaxKraft[2] = 0
        self.cCorrectionMinKraft[0] = 0
        self.cCorrectionMinKraft[1] = 0        
        self.cCorrectionMinKraft[2] = 0
        #Gehoehrt noch in ein Setup
        self.Betraege =[0.0,0.0,0.0,0.0]
        self.SeilLaenge1 = 0.0
        self.SeilLaenge2 = 0.0
        self.SeilLaenge3 = 0.0
        self.SeilLaenge4 = 0.0        
        self.MaxSeilKraft = 2700
        self.MaxSeilKraftProzentsatz = 0.1
        self.MaxSeilKraftProgressionsgrenze = 1
        self.MinSeilKraft = 100
        self.n =100 #Teilungen
        self.PosX=0.01
        self.PosY=0.01
        self.PosZ=50.0
        self.SollPosX=0.01
        self.SollPosY=0.01
        self.SollPosZ=50.0
        self.SollPosVec = Vec3()
        self.SollPosVec.set(0.01,0.01,50.0)
        self.TargetPoint = Vec3()
        self.TargetPoint.set(-1000,-1000,-1000)
        self.TargetPointOld = Vec3()
        self.TargetPointOld.set(-1000,-1000,-1000)
        self.PathTargetPoint = Vec3()
        self.PathTargetPoint.set(-1000,-1000,-1000)
        self.NewTargetPoint = False
        self.CorrectionPosMode = Vec3()
        self.CorrectionPosMode.set(0,0,0)
        self.Hold=0    #Fuer Pos Soll Ist uebername
        self.YellowRopeOffset = 0
        self.GreenRopeOffset = 0
        self.CyanRopeOffset = 0
        self.MagentaRopeOffset = 0
        self.DefHeight=-2.0
        self.ActHeight=-2.0
        self.environment = './Physical Setups/Default/DefaultEnvironment'
        self.Positions = './Physical Setups/Default/DefaultPositions.pos'
        #self.environment = './Physical Setups/Default/Kampfbahn'
        #self.Positions = './Physical Setups/Default/Default.pos'
        #self.environment = "/c/Corsair/Corsair/3DSteuerung/Physical Setups/Default/Kampfbahn.egg"
        #self.environment = "/c/Corsair/Corsair/3DSteuerung/Physical Setups/Default/SeptemberKampfbahn2"
        #self.environment = "/c/Corsair/Corsair/3DSteuerung/Physical Setups/Default/Ebene"        
        #self.Positions = "c:/Corsair/Corsair/3DSteuerung/Physical Setups/Default/Default.pos"
        #self.Positions = "/c/Corsair/Corsair/3DSteuerung/Physical Setups/Default/Voest2.pos"
        # Variable fuer Joystick Control Beginn
        self.axislist=[
            'Panel.Left left-right Axis =\n',           #0
            'X-Axis\n',                                 #1
            'Panel.Left up-Down Axis =\n',              #2
            'Y-Axis\n',                                 #3
            'Panel.Right left-right Axis =\n',          #4
            'Path\n',                                   #5
            'Panel.Right up-down Axis =\n',             #6
            'Z-Axis\n',                                 #7
            'Panel.Left left-right Direction =\n',      #8
            'normal\n',                                 #9
            'Panel.Left up-Down Direction =\n',         #10
            'normal\n',                                 #11
            'Panel.Right left.right Direction =\n',     #12
            'normal\n',                                 #13
            'Panel.Right up-down Direction =\n',        #14
            'normal\n',                                 #15
            'Deadband Ax0=\n',                          #16
            201,                                        #17
            'Progression Ax0=\n',                       #18
            0.00011,                                    #19
            'Deadband Ax1=\n',                          #20
            202,                                        #21
            'Progression Ax1=\n',                       #22
            0.00011,                                    #23
            'Deadband Ax2=\n',                          #24
            203,                                        #25
            'Progression Ax2=\n',                       #26
            0.00011,                                    #27
            'Deadband Ax3=\n',                          #28
            204,                                        #29
            'Progression Ax3=\n',                       #30
            0.00011,                                    #31
            'X-Axis Scale=\n',                          #32
            1.0,                                        #33
            'Y-Axis Scale=\n',                          #34
            1.0,                                        #35
            'Z-Axis Scale=\n',                          #36
            0.2,                                        #37
            'Rotation about X-Axis=\n',                 #38
             0.0,                                       #39
            'Rotation about Y-Axis=\n',                 #40
            0.0,                                        #41
            'Rotation about Z-Axis=\n',                 #42
             0.0 ]                                      #43
        self.Ax0Ax=self.axislist[1]
        self.Ax0Deadband=self.axislist[17]
        self.Ax0Progression =self.axislist[19]
        self.Ax1Ax=self.axislist[3]
        self.Ax1Deadband=self.axislist[21]
        self.Ax1Progression = self.axislist[23]
        self.Ax2Ax=self.axislist[5]
        self.Ax2Deadband=self.axislist[25]
        self.Ax2Progression = self.axislist[27]
        self.Ax3Ax=self.axislist[7]
        self.Ax3Deadband=self.axislist[29]
        self.Ax3Progression = self.axislist[31]
        self.Ax0Dir=self.axislist[9]
        self.Ax1Dir=self.axislist[11]
        self.Ax2Dir=self.axislist[13]
        self.Ax3Dir=self.axislist[15]
        self.AxXScale=self.axislist[33]
        self.AxYScale=self.axislist[35]
        self.AxZScale=self.axislist[37]     
        self.AxXRot=self.axislist[39]
        self.AxYRot=self.axislist[41]
        self.AxZRot=self.axislist[43]
        self.KeyPosListWindow = None
        # Variable fuer Joystick Control End
        # Variable fuer Punkt Aufzeichnung Beginn
        self.KeyPointActive = False
        self.PathActive = False
        self.RecPointOld = 0
        self.RecPoint = 0
        self.KeyPosDic={}
        self.KeyPathDictCopy = {}
        self.KeyPosDicTime={}
        self.PosVec=Vec3()
        self.KPosVec=Vec3()
        self.pointVel =0
        
        self.PointModeStartX = 0.0
        self.PointModeStartY = 0.0
        self.PointModeStartZ = 0.0
        self.PointModeTargetVec = Vec3()
        self.PointModeTargetVec.set(0,0,0)
        self.PointModeActiveOld = False
       
        
        #self.KeyPosM=[]
        self.KeyPosModell = {}
        self.KeyPosNode2={}
        self.PathModell ={}
        self.PathModellPreTransform ={}
        self.PathNodeAnfangEnde = {}
        self.PathNodeKeyPoints = {}
        #self.KeyPosM = loader.loadModel("./models/ball2")
        #self.KeyPosM.setColor(random(), random(), random(), 1)
        #self.KeyPosM.setShaderInput("texDisable",1,1,1,1)        
        self.KeyPosNode = render.attachNewNode("KeyPosNode")
        self.PathsNode = render.attachNewNode("PathsNode")

        self.myMaterial = Material()
        self.myMaterial.setShininess(5.0) #Make this material shiny
        self.myMaterial.setAmbient(VBase4(0,0,1,1)) #Make this material blue

        self.KeyPathDic={}
        self.KeyPathDicCopyIndex  = []
        self.ActivePath=0
        self.PathBogenPos=0
        self.PathDirection = Vec3()
        self.PathDirection.set(0,0,0)
        self.OnPathFlag = 0
        self.PathVel = 0.0
        self.ApproachVel = 0.0
        #self.renderLine = None

        # Variable fuer Punkt Aufzeichnung End
        self.Colours={0:(0,255,0),1:(26,255,0),2:(51,255,0),3:(77,255,0),4:(102,255,0),
        5:(128,255,0),6:(153,255,0),7:(179,255,0),8:(204,255,0),9:(230,255,0),
        10:(255,255,0),11:(255,255,0),12:(255,230,0),13:(255,204,0),14:(255,153,0),
        15:(255,128,0),16:(255,102,0),17:(255,77,0),18:(255,51,0),19:(255,26,0),20:(255,0,0)}
        # Variable fuer Peakmeter Beginn
        self.KraftMax = 300   #Absolutwert fuer Peakmeter Bruchlast Seil 2900 Kraft Motor geringer
        self.YellowHoldData1 = 0
        self.YellowHoldData2 = 0
        self.YellowFalloff1 = 0
        self.YellowFalloff2 = 0
        self.GreenHoldData1 = 0
        self.GreenHoldData2 = 0
        self.GreenFalloff1 = 0
        self.GreenFalloff2 = 0
        self.CyanHoldData1 = 0
        self.CyanHoldData2 = 0
        self.CyanFalloff1 = 0
        self.CyanFalloff2 = 0
        self.MagentaHoldData1 = 0
        self.MagentaHoldData2 = 0
        self.MagentaFalloff1 = 0
        self.MagentaFalloff2 = 0
        # Variable fuer Peakmeter End
        
        self.YellowEStopResetOld = False
        self.GreenEStopResetOld = False
        self.CyanEStopResetOld = False
        self.MagentaEStopResetOld = False        
        
        self.btStartState = False
        self.btStartStateOld = False
        self.ScaleReps = 1.0
        self.NewMousePosX = 0.0
        self.OldMousePosX = 0.0
        self.NewMousePosY = 0.0
        self.OldMousePosY = 0.0     
        self.Drag = 0
        self.Rotation = 0 
        self.EditingPoint = 0
        self.indexSelectedPoint = -1000
        self.EditingPath = 0
        self.indexSelectedPath = 0
        self.IndexSelectedPathOld = 0
        self.EditNode = 0
        self.EditingKeyPoint = 0
        self.indexSelectedKeyPoint = 0
        self.tckp = []
        self.tckpN =[]
        self._TPoint = [0,0,0]
        self.UpdateGrenzVel = True

        self.Testtckp = []
        self.ATesttckp = []
        #self.YellowDiagramData = []
        #self.GreenDiagramData = []
        #self.CyanDiagramData = []
        #self.MagentaDiagramData = []
        self.DeltaMouseRed = 0
        self.DeltaMouseGreen = 0
        self.DeltaMouseBlue = 0
        self.Smoothing = 200
        self.SmoothingOn = 1
        self.FilterLength = 1
        self.DebugGrenzVel = 0
        self.UpdateFlag = 1
        self.ProzentMaxVel = 100.0
        self.ProzentMaxAcc = 100.0
        
        
        self.PathTargetXOld = 0.0
        self.PathTargetYOld = 0.0
        self.PathTargetZOld = 0.0
        self.PointBrake = False
        
        
        self.YellowCreepTo  = 0
        self.GreenCreepTo  = 0
        self.CyanCreepTo  = 0
        self.MagentaCreepTo  = 0 
        
        self.YellowRecoverCounter = 0
        self.GreenRecoverCounter = 0
        self.CyanRecoverCounter = 0
        self.MagentaRecoverCounter = 0

        self.logger.info('Variables initialised')

    def Splash(self):
        self.logger.debug('Show Splash Screen')
        
        #image = wx.Image("./models/Wired77.png",wx.BITMAP_TYPE_PNG)
        image = wx.Image("./models/WW-Desktop.png",wx.BITMAP_TYPE_PNG)
        bmp = image.ConvertToBitmap()
        wx.SplashScreen(bmp,wx.SPLASH_CENTER_ON_SCREEN | wx.SPLASH_TIMEOUT, 1000, None, -1)
        wx.Yield()
    def GenerateTextures(self):
        self.texNoise      = loader.loadTexture("./models/noise.rgb")
        self.texGrayPink   = loader.loadTexture("./models/GrayPink.jpg")
        self.texPathPink   = loader.loadTexture("./models/PathPink.jpg")
        self.texPink       = loader.loadTexture("./models/Pink.jpg")
        self.texLime       = loader.loadTexture("./models/Lime.jpg")
        self.texBlue       = loader.loadTexture("./models/Blue.JPG")
        self.texRed        = loader.loadTexture("./models/Red.JPG")
        self.texStone      = loader.loadTexture("./models/Stone1.png")
        self.texPfeilRed   = loader.loadTexture("./models/PfeilRed.jpg")
        self.texPfeilGreen = loader.loadTexture("./models/PfeilGreen.jpg")
        self.texPfeilBlue  = loader.loadTexture("./models/PfeilBlue.jpg")
        self.texContGreen  = loader.loadTexture("./models/GrayGreen.png")
        self.texStone.setWrapU(Texture.WMClamp)
        self.texStone.setWrapV(Texture.WMClamp)
        
    def AchsenInit(self):
        self.logger.info('initialising Achsen ')
        """Not yet used"""
        #App.Yellow   = Achse(ACHSEN.keys()[5])
        #App.Yellow.comunicateServer()
        #App.Green    = Achse(ACHSEN.keys()[5])
        #App.Green.comunicateServer()
        #App.Cyan     = Achse(ACHSEN.keys()[5])
        #App.Cyan.comunicateServer()
        #App.Magenta  = Achse(ACHSEN.keys()[5])
        #App.Magenta.comunicateServer()
        
        self.logger.info('Achsen initialised')
    
    def AchsenComunicate(self):
        #self.logger.debug ('Yellow Achse Communication')

        self.Yellow.comunicateServer()
        #start_new_thread(self.Yellow.comunicateServer,())
        self.ctrlYellowName.SetValue(self.Yellow.Name)
        self.ctrlYellowStatus.SetValue(self.Yellow.Status)
        self.ctrlYellowLength.SetValue(self.Yellow.PosIst)
        
        a=self.Decode.Decode(self.Yellow.Status)                                                          #[2] Axis Status  
        self.ctrlYellowStatus.SetValue(a[1][0][2])
        #self.ctrlYellowStatus.SetToolTipString(str(a[0]))
        self.ctrlYellowStatus.SetBackgroundColour(a[1][0][3])
        self.ctrlYellowName.SetBackgroundColour(a[1][0][3])
        self.ctrlYellowName.Refresh()        
        
        self.Green.comunicateServer()
        #start_new_thread(self.Green.comunicateServer,())
        self.ctrlGreenName.SetValue(self.Green.Name)
        self.ctrlGreenStatus.SetValue(self.Green.Status)
        self.ctrlGreenLength.SetValue(self.Green.PosIst)
        
        a=self.Decode.Decode(self.Green.Status)                                                          #[2] Axis Status  
        self.ctrlGreenStatus.SetValue(a[1][0][2])
        #self.ctrlGreenStatus.SetToolTipString(str(a[0]))
        self.ctrlGreenStatus.SetBackgroundColour(a[1][0][3])
        self.ctrlGreenName.SetBackgroundColour(a[1][0][3])
        self.ctrlGreenName.Refresh()
        
        self.Cyan.comunicateServer()
        #start_new_thread(self.Cyan.comunicateServer,())
        self.ctrlCyanName.SetValue(self.Cyan.Name)
        self.ctrlCyanStatus.SetValue(self.Cyan.Status)
        self.ctrlCyanLength.SetValue(self.Cyan.PosIst)
        
        a=self.Decode.Decode(self.Cyan.Status)                                                          #[2] Axis Status  
        self.ctrlCyanStatus.SetValue(a[1][0][2])
        #self.ctrlCyanStatus.SetToolTipString(str(a[0]))
        self.ctrlCyanStatus.SetBackgroundColour(a[1][0][3])
        self.ctrlCyanName.SetBackgroundColour(a[1][0][3])
        self.ctrlCyanName.Refresh()      
        
        self.Magenta.comunicateServer()
        #start_new_thread(self.Magenta.comunicateServer,())
        self.ctrlMagentaName.SetValue(self.Magenta.Name)
        self.ctrlMagentaStatus .SetValue(self.Magenta.Status)
        self.ctrlMagentaLength.SetValue(self.Magenta.PosIst)
        
        a=self.Decode.Decode(self.Magenta.Status)                                                          #[2] Axis Status  
        self.ctrlMagentaStatus.SetValue(a[1][0][2])
        #self.ctrlMagentaStatus.SetToolTipString(str(a[0]))
        self.ctrlMagentaStatus.SetBackgroundColour(a[1][0][3])
        self.ctrlMagentaName.SetBackgroundColour(a[1][0][3])
        self.ctrlMagentaName.Refresh()
        
        

            
#--------------------------------------------------------------------------------        
    def EStopOpen(self):
        pass
        self.logger.warn('EStop processing started')
        
        self.btStartState = False
        self.btStart.SetBitmapLabel(self.btStartBitmapLabel)
        taskMgr.remove("MoveTask")       
        
        res = xrc.XmlResource('WWLayout0-12a.xrc')
        self.EStopWindow = res.LoadFrame(self.frame,'EStop')
        
        # Punkt Modus oder Pfad Modus Aufheben        
        self.KeyPointActive = False
        self.btPosMode.SetValue(False)
        self.btPathMode.SetValue(False)
        self.PathActive = False
        self.OnPathFlag = 0
        try:
            self.PathModell[self.ActivePath].getChild(0).setTexture(self.texPathPink)
            self.PathModell[self.ActivePath].getChild(0).setScale(self.ScaleReps)
            self.PathModell[self.ActivePath].getChild(2).setTexture(self.texPathPink)
            self.PathModell[self.ActivePath].getChild(2).setScale(self.ScaleReps)
            self.PathModell[self.ActivePath].getChild(3).setTexture(self.texPathPink)
            self.PathModell[self.ActivePath].getChild(3).node().setThickness(0.3*self.ScaleReps)  
            self.SollPosition.setPos(self.YellowX,self.YellowY,self.YellowZ)  
        except KeyError:
            pass
        self.KeyPointPanel.SetBackgroundColour(wx.Colour(187,187,187))
        self.KeyPointPanel.Refresh()
        self.PathPanel.SetBackgroundColour(wx.Colour(187,187,187))
        self.PathPanel.Refresh()        
        
        App.Yellow.SpeedSoll = '0.0'
        App.Green.SpeedSoll = '0.0'
        App.Cyan.SpeedSoll = '0.0'
        App.Magenta.SpeedSoll = '0.0'
        
        App.Yellow.Modus = 'recover'
        App.Green.Modus = 'recover'
        App.Cyan.Modus = 'recover'
        App.Magenta.Modus = 'recover'        

        self.InitEStopControls()
        self.EStopWindow.pnRecover.SetBackgroundColour(wx.Colour(255,0,0))
        self.EStopControlsUpdate()
        self.EStopWindow.Show()

        taskMgr.add(self.EStopTask,'EStopTask')        


    def InitEStopControls(self):
        self.EStopWindow.YellowDown=0
        self.EStopWindow.GreenDown=0
        self.EStopWindow.CyanDown=0
        self.EStopWindow.MagentaDown=0
        
        self.EStopWindow.EStopYellowName=xrc.XRCCTRL(self.EStopWindow,'EStopYellowName')
        self.EStopWindow.EStopYellowName.Enable(False)
        self.EStopWindow.EStopYellowTimeStamp=xrc.XRCCTRL(self.EStopWindow,'EStopYellowTimeStamp')
        self.EStopWindow.EStopYellowTimeStamp.Enable(False)
        self.EStopWindow.EStopYellowMasterStatus=xrc.XRCCTRL(self.EStopWindow,'EStopYellowMasterStatus')
        #self.EStopWindow.EStopYellowMasterStatus.Enable(False)
        self.EStopWindow.EStopYellowSlaveStatus=xrc.XRCCTRL(self.EStopWindow,'EStopYellowSlaveStatus')
        #self.EStopWindow.EStopYellowSlaveStatus.Enable(False)
        self.EStopWindow.pnEYellow=xrc.XRCCTRL(self.EStopWindow,'pnEYellow')
        self.EStopWindow.rbEStopYellowMaster=xrc.XRCCTRL(self.EStopWindow,'rbEStopYellowMaster')
        #self.EStopWindow.rbEStopYellowMaster.Enable(False)
        self.EStopWindow.rbEStopYellowE1=xrc.XRCCTRL(self.EStopWindow,'rbEStopYellowE1')
        #self.EStopWindow.rbEStopYellowE1.Enable(False)
        self.EStopWindow.rbEStopYellow30kW=xrc.XRCCTRL(self.EStopWindow,'rbEStopYellow30kW')
        #self.EStopWindow.rbEStopYellow30kW.Enable(False)
        self.EStopWindow.rbEStopYellowB1=xrc.XRCCTRL(self.EStopWindow,'rbEStopYellowB1')
        #self.EStopWindow.rbEStopYellowB1.Enable(False) 
        self.EStopWindow.rbEStopYellowSPS=xrc.XRCCTRL(self.EStopWindow,'rbEStopYellowSPS')
        #self.EStopWindow.rbEStopYellowSPS.Enable(False)
        self.EStopWindow.rbEStopYellowPos=xrc.XRCCTRL(self.EStopWindow,'rbEStopYellowPos')
        #self.EStopWindow.rbEStopYellowPos.Enable(False)           
        self.EStopWindow.rbEStopYellowG1COM=xrc.XRCCTRL(self.EStopWindow,'rbEStopYellowG1COM')
        #self.EStopWindow.rbEStopYellowG1COM.Enable(False)
        self.EStopWindow.rbEStopYellowG2COM=xrc.XRCCTRL(self.EStopWindow,'rbEStopYellowG2COM')
        #self.EStopWindow.rbEStopYellowG2COM.Enable(False)
        self.EStopWindow.rbEStopYellowG3COM=xrc.XRCCTRL(self.EStopWindow,'rbEStopYellowG3COM')
        #self.EStopWindow.rbEStopYellowG3COM.Enable(False)
        self.EStopWindow.rbEStopYellowSlave=xrc.XRCCTRL(self.EStopWindow,'rbEStopYellowSlave')
        #self.EStopWindow.rbEStopYellowSlave.Enable(False)
        self.EStopWindow.rbEStopYellowE2=xrc.XRCCTRL(self.EStopWindow,'rbEStopYellowE2')
        #self.EStopWindow.rbEStopYellowE2.Enable(False) 
        self.EStopWindow.rbEStopYellow05kW=xrc.XRCCTRL(self.EStopWindow,'rbEStopYellow05kW')
        #self.EStopWindow.rbEStopYellow05kW.Enable(False)
        self.EStopWindow.rbEStopYellowB2=xrc.XRCCTRL(self.EStopWindow,'rbEStopYellowB2')
        #self.EStopWindow.rbEStopYellowB2.Enable(False)
        self.EStopWindow.rbEStopYellowRed=xrc.XRCCTRL(self.EStopWindow,'rbEStopYellowRed')
        #self.EStopWindow.rbEStopYellowRed.Enable(False)
        self.EStopWindow.rbEStopYellowVel=xrc.XRCCTRL(self.EStopWindow,'rbEStopYellowVel')
        #self.EStopWindow.rbEStopYellowVel.Enable(False)          
        self.EStopWindow.rbEStopYellowG1OUT=xrc.XRCCTRL(self.EStopWindow,'rbEStopYellowG1OUT')
        #self.EStopWindow.rbEStopYellowG1OUT.Enable(False)
        self.EStopWindow.rbEStopYellowG2OUT=xrc.XRCCTRL(self.EStopWindow,'rbEStopYellowG2OUT')
        #self.EStopWindow.rbEStopYellowG2OUT.Enable(False)
        self.EStopWindow.rbEStopYellowG3OUT=xrc.XRCCTRL(self.EStopWindow,'rbEStopYellowG3OUT')
        #self.EStopWindow.rbEStopYellowG3OUT.Enable(False)
        self.EStopWindow.rbEStopYellowNetwork=xrc.XRCCTRL(self.EStopWindow,'rbEStopYellowNetwork')
        #self.EStopWindow.rbEStopYellowNetwork.Enable(False)
        self.EStopWindow.rbEStopYellowB2K=xrc.XRCCTRL(self.EStopWindow,'rbEStopYellowB2K')
        #self.EStopWindow.rbEStopYellowB2K.Enable(False)
        self.EStopWindow.rbEStopYellowENC=xrc.XRCCTRL(self.EStopWindow,'rbEStopYellowENC')
        #self.EStopWindow.rbEStopYellowENC.Enable(False)
        self.EStopWindow.rbEStopYellowEnd=xrc.XRCCTRL(self.EStopWindow,'rbEStopYellowEnd')
        #self.EStopWindow.rbEStopYellowEnd.Enable(False)         
        self.EStopWindow.rbEStopYellowG1FB=xrc.XRCCTRL(self.EStopWindow,'rbEStopYellowG1FB')
        #self.EStopWindow.rbEStopYellowG1FB.Enable(False)
        self.EStopWindow.rbEStopYellowG2FB=xrc.XRCCTRL(self.EStopWindow,'rbEStopYellowG2FB')
        #self.EStopWindow.rbEStopYellowG2FB.Enable(False)
        self.EStopWindow.rbEStopYellowG3FB=xrc.XRCCTRL(self.EStopWindow,'rbEStopYellowG3FB') 
        #self.EStopWindow.rbEStopYellowG3FB.Enable(False)
        
        self.EStopWindow.btnEStopYellowMasterReset=xrc.XRCCTRL(self.EStopWindow,'btnEStopYellowMasterReset')
        self.EStopWindow.btnEStopYellowSlaveReset=xrc.XRCCTRL(self.EStopWindow,'btnEStopYellowSlaveReset')
        self.EStopWindow.btnEStopYellowNetReset=xrc.XRCCTRL(self.EStopWindow,'btnEStopYellowNetReset')
        self.EStopWindow.Bind(wx.EVT_TOGGLEBUTTON, self.OnEStopYellowMasterReset, id=xrc.XRCID('btnEStopYellowMasterReset'))
        self.EStopWindow.Bind(wx.EVT_TOGGLEBUTTON, self.OnEStopYellowSlaveReset, id=xrc.XRCID('btnEStopYellowSlaveReset'))
        self.EStopWindow.Bind(wx.EVT_TOGGLEBUTTON, self.OnEStopYellowNetReset, id=xrc.XRCID('btnEStopYellowNetReset'))
       
        self.EStopWindow.EStopGreenName=xrc.XRCCTRL(self.EStopWindow,'EStopGreenName')
        self.EStopWindow.EStopGreenName.Enable(False)
        self.EStopWindow.EStopGreenTimeStamp=xrc.XRCCTRL(self.EStopWindow,'EStopGreenTimeStamp')
        self.EStopWindow.EStopGreenTimeStamp.Enable(False)
        self.EStopWindow.EStopGreenMasterStatus=xrc.XRCCTRL(self.EStopWindow,'EStopGreenMasterStatus')
        #self.EStopWindow.EStopGreenMasterStatus.Enable(False)
        self.EStopWindow.EStopGreenSlaveStatus=xrc.XRCCTRL(self.EStopWindow,'EStopGreenSlaveStatus')
        #self.EStopWindow.EStopGreenSlaveStatus.Enable(False)
        self.EStopWindow.pnEGreen=xrc.XRCCTRL(self.EStopWindow,'pnEGreen')
        self.EStopWindow.rbEStopGreenMaster=xrc.XRCCTRL(self.EStopWindow,'rbEStopGreenMaster')
        #self.EStopWindow.rbEStopGreenMaster.Enable(False)
        self.EStopWindow.rbEStopGreenE1=xrc.XRCCTRL(self.EStopWindow,'rbEStopGreenE1')
        #self.EStopWindow.rbEStopGreenE1.Enable(False)
        self.EStopWindow.rbEStopGreen30kW=xrc.XRCCTRL(self.EStopWindow,'rbEStopGreen30kW')
        #self.EStopWindow.rbEStopGreen30kW.Enable(False)
        self.EStopWindow.rbEStopGreenB1=xrc.XRCCTRL(self.EStopWindow,'rbEStopGreenB1')
        #self.EStopWindow.rbEStopGreenB1.Enable(False) 
        self.EStopWindow.rbEStopGreenSPS=xrc.XRCCTRL(self.EStopWindow,'rbEStopGreenSPS')
        #self.EStopWindow.rbEStopGreenSPS.Enable(False)
        self.EStopWindow.rbEStopGreenPos=xrc.XRCCTRL(self.EStopWindow,'rbEStopGreenPos')
        #self.EStopWindow.rbEStopGreenPos.Enable(False)           
        self.EStopWindow.rbEStopGreenG1COM=xrc.XRCCTRL(self.EStopWindow,'rbEStopGreenG1COM')
        #self.EStopWindow.rbEStopGreenG1COM.Enable(False)
        self.EStopWindow.rbEStopGreenG2COM=xrc.XRCCTRL(self.EStopWindow,'rbEStopGreenG2COM')
        #self.EStopWindow.rbEStopGreenG2COM.Enable(False)
        self.EStopWindow.rbEStopGreenG3COM=xrc.XRCCTRL(self.EStopWindow,'rbEStopGreenG3COM')
        #self.EStopWindow.rbEStopGreenG3COM.Enable(False)
        self.EStopWindow.rbEStopGreenSlave=xrc.XRCCTRL(self.EStopWindow,'rbEStopGreenSlave')
        #self.EStopWindow.rbEStopGreenSlave.Enable(False)
        self.EStopWindow.rbEStopGreenE2=xrc.XRCCTRL(self.EStopWindow,'rbEStopGreenE2')
        #self.EStopWindow.rbEStopGreenE2.Enable(False) 
        self.EStopWindow.rbEStopGreen05kW=xrc.XRCCTRL(self.EStopWindow,'rbEStopGreen05kW')
        #self.EStopWindow.rbEStopGreen05kW.Enable(False)
        self.EStopWindow.rbEStopGreenB2=xrc.XRCCTRL(self.EStopWindow,'rbEStopGreenB2')
        #self.EStopWindow.rbEStopGreenB2.Enable(False)
        self.EStopWindow.rbEStopGreenRed=xrc.XRCCTRL(self.EStopWindow,'rbEStopGreenRed')
        #self.EStopWindow.rbEStopGreenRed.Enable(False)
        self.EStopWindow.rbEStopGreenVel=xrc.XRCCTRL(self.EStopWindow,'rbEStopGreenVel')
        #self.EStopWindow.rbEStopGreenVel.Enable(False)          
        self.EStopWindow.rbEStopGreenG1OUT=xrc.XRCCTRL(self.EStopWindow,'rbEStopGreenG1OUT')
        #self.EStopWindow.rbEStopGreenG1OUT.Enable(False)
        self.EStopWindow.rbEStopGreenG2OUT=xrc.XRCCTRL(self.EStopWindow,'rbEStopGreenG2OUT')
        #self.EStopWindow.rbEStopGreenG2OUT.Enable(False)
        self.EStopWindow.rbEStopGreenG3OUT=xrc.XRCCTRL(self.EStopWindow,'rbEStopGreenG3OUT')
        #self.EStopWindow.rbEStopGreenG3OUT.Enable(False)
        self.EStopWindow.rbEStopGreenNetwork=xrc.XRCCTRL(self.EStopWindow,'rbEStopGreenNetwork')
        #self.EStopWindow.rbEStopGreenNetwork.Enable(False)
        self.EStopWindow.rbEStopGreenB2K=xrc.XRCCTRL(self.EStopWindow,'rbEStopGreenB2K')
        #self.EStopWindow.rbEStopGreenB2K.Enable(False)
        self.EStopWindow.rbEStopGreenENC=xrc.XRCCTRL(self.EStopWindow,'rbEStopGreenENC')
        #self.EStopWindow.rbEStopGreenENC.Enable(False)
        self.EStopWindow.rbEStopGreenEnd=xrc.XRCCTRL(self.EStopWindow,'rbEStopGreenEnd')
        #self.EStopWindow.rbEStopGreenEnd.Enable(False)         
        self.EStopWindow.rbEStopGreenG1FB=xrc.XRCCTRL(self.EStopWindow,'rbEStopGreenG1FB')
        #self.EStopWindow.rbEStopGreenG1FB.Enable(False)
        self.EStopWindow.rbEStopGreenG2FB=xrc.XRCCTRL(self.EStopWindow,'rbEStopGreenG2FB')
        #self.EStopWindow.rbEStopGreenG2FB.Enable(False)
        self.EStopWindow.rbEStopGreenG3FB=xrc.XRCCTRL(self.EStopWindow,'rbEStopGreenG3FB') 
        #self.EStopWindow.rbEStopGreenG3FB.Enable(False)
        
        self.EStopWindow.btnEStopGreenMasterReset=xrc.XRCCTRL(self.EStopWindow,'btnEStopGreenMasterReset')
        self.EStopWindow.btnEStopGreenSlaveReset=xrc.XRCCTRL(self.EStopWindow,'btnEStopGreenSlaveReset')
        self.EStopWindow.btnEStopGreenNetReset=xrc.XRCCTRL(self.EStopWindow,'btnEStopGreenNetReset')
        self.EStopWindow.Bind(wx.EVT_TOGGLEBUTTON, self.OnEStopGreenMasterReset, id=xrc.XRCID('btnEStopGreenMasterReset'))
        self.EStopWindow.Bind(wx.EVT_TOGGLEBUTTON, self.OnEStopGreenSlaveReset, id=xrc.XRCID('btnEStopGreenSlaveReset'))
        self.EStopWindow.Bind(wx.EVT_TOGGLEBUTTON, self.OnEStopGreenNetReset, id=xrc.XRCID('btnEStopGreenNetReset'))
        
        self.EStopWindow.pnRecover=xrc.XRCCTRL(self.EStopWindow,'pn3dRecover')
        
        
        self.EStopWindow.EStopCyanName=xrc.XRCCTRL(self.EStopWindow,'EStopCyanName')
        self.EStopWindow.EStopCyanName.Enable(False)
        self.EStopWindow.EStopCyanTimeStamp=xrc.XRCCTRL(self.EStopWindow,'EStopCyanTimeStamp')
        self.EStopWindow.EStopCyanTimeStamp.Enable(False)
        self.EStopWindow.EStopCyanMasterStatus=xrc.XRCCTRL(self.EStopWindow,'EStopCyanMasterStatus')
        #self.EStopWindow.EStopCyanMasterStatus.Enable(False)
        self.EStopWindow.EStopCyanSlaveStatus=xrc.XRCCTRL(self.EStopWindow,'EStopCyanSlaveStatus')
        #self.EStopWindow.EStopCyanSlaveStatus.Enable(False)
        self.EStopWindow.pnECyan=xrc.XRCCTRL(self.EStopWindow,'pnECyan')
        self.EStopWindow.rbEStopCyanMaster=xrc.XRCCTRL(self.EStopWindow,'rbEStopCyanMaster')
        #self.EStopWindow.rbEStopCyanMaster.Enable(False)
        self.EStopWindow.rbEStopCyanE1=xrc.XRCCTRL(self.EStopWindow,'rbEStopCyanE1')
        #self.EStopWindow.rbEStopCyanE1.Enable(False)
        self.EStopWindow.rbEStopCyan30kW=xrc.XRCCTRL(self.EStopWindow,'rbEStopCyan30kW')
        #self.EStopWindow.rbEStopCyan30kW.Enable(False)
        self.EStopWindow.rbEStopCyanB1=xrc.XRCCTRL(self.EStopWindow,'rbEStopCyanB1')
        #self.EStopWindow.rbEStopCyanB1.Enable(False) 
        self.EStopWindow.rbEStopCyanSPS=xrc.XRCCTRL(self.EStopWindow,'rbEStopCyanSPS')
        #self.EStopWindow.rbEStopCyanSPS.Enable(False)
        self.EStopWindow.rbEStopCyanPos=xrc.XRCCTRL(self.EStopWindow,'rbEStopCyanPos')
        #self.EStopWindow.rbEStopCyanPos.Enable(False)           
        self.EStopWindow.rbEStopCyanG1COM=xrc.XRCCTRL(self.EStopWindow,'rbEStopCyanG1COM')
        #self.EStopWindow.rbEStopCyanG1COM.Enable(False)
        self.EStopWindow.rbEStopCyanG2COM=xrc.XRCCTRL(self.EStopWindow,'rbEStopCyanG2COM')
        #self.EStopWindow.rbEStopCyanG2COM.Enable(False)
        self.EStopWindow.rbEStopCyanG3COM=xrc.XRCCTRL(self.EStopWindow,'rbEStopCyanG3COM')
        #self.EStopWindow.rbEStopCyanG3COM.Enable(False)
        self.EStopWindow.rbEStopCyanSlave=xrc.XRCCTRL(self.EStopWindow,'rbEStopCyanSlave')
        #self.EStopWindow.rbEStopCyanSlave.Enable(False)
        self.EStopWindow.rbEStopCyanE2=xrc.XRCCTRL(self.EStopWindow,'rbEStopCyanE2')
        #self.EStopWindow.rbEStopCyanE2.Enable(False) 
        self.EStopWindow.rbEStopCyan05kW=xrc.XRCCTRL(self.EStopWindow,'rbEStopCyan05kW')
        #self.EStopWindow.rbEStopCyan05kW.Enable(False)
        self.EStopWindow.rbEStopCyanB2=xrc.XRCCTRL(self.EStopWindow,'rbEStopCyanB2')
        #self.EStopWindow.rbEStopCyanB2.Enable(False)
        self.EStopWindow.rbEStopCyanRed=xrc.XRCCTRL(self.EStopWindow,'rbEStopCyanRed')
        #self.EStopWindow.rbEStopCyanRed.Enable(False)
        self.EStopWindow.rbEStopCyanVel=xrc.XRCCTRL(self.EStopWindow,'rbEStopCyanVel')
        #self.EStopWindow.rbEStopCyanVel.Enable(False)          
        self.EStopWindow.rbEStopCyanG1OUT=xrc.XRCCTRL(self.EStopWindow,'rbEStopCyanG1OUT')
        #self.EStopWindow.rbEStopCyanG1OUT.Enable(False)
        self.EStopWindow.rbEStopCyanG2OUT=xrc.XRCCTRL(self.EStopWindow,'rbEStopCyanG2OUT')
        #self.EStopWindow.rbEStopCyanG2OUT.Enable(False)
        self.EStopWindow.rbEStopCyanG3OUT=xrc.XRCCTRL(self.EStopWindow,'rbEStopCyanG3OUT')
        #self.EStopWindow.rbEStopCyanG3OUT.Enable(False)
        self.EStopWindow.rbEStopCyanNetwork=xrc.XRCCTRL(self.EStopWindow,'rbEStopCyanNetwork')
        #self.EStopWindow.rbEStopCyanNetwork.Enable(False)
        self.EStopWindow.rbEStopCyanB2K=xrc.XRCCTRL(self.EStopWindow,'rbEStopCyanB2K')
        #self.EStopWindow.rbEStopCyanB2K.Enable(False)
        self.EStopWindow.rbEStopCyanENC=xrc.XRCCTRL(self.EStopWindow,'rbEStopCyanENC')
        #self.EStopWindow.rbEStopCyanENC.Enable(False)
        self.EStopWindow.rbEStopCyanEnd=xrc.XRCCTRL(self.EStopWindow,'rbEStopCyanEnd')
        #self.EStopWindow.rbEStopCyanEnd.Enable(False)         
        self.EStopWindow.rbEStopCyanG1FB=xrc.XRCCTRL(self.EStopWindow,'rbEStopCyanG1FB')
        #self.EStopWindow.rbEStopCyanG1FB.Enable(False)
        self.EStopWindow.rbEStopCyanG2FB=xrc.XRCCTRL(self.EStopWindow,'rbEStopCyanG2FB')
        #self.EStopWindow.rbEStopCyanG2FB.Enable(False)
        self.EStopWindow.rbEStopCyanG3FB=xrc.XRCCTRL(self.EStopWindow,'rbEStopCyanG3FB') 
        #self.EStopWindow.rbEStopCyanG3FB.Enable(False)
        
        self.EStopWindow.btnEStopCyanMasterReset=xrc.XRCCTRL(self.EStopWindow,'btnEStopCyanMasterReset')
        self.EStopWindow.btnEStopCyanSlaveReset=xrc.XRCCTRL(self.EStopWindow,'btnEStopCyanSlaveReset')
        self.EStopWindow.btnEStopCyanNetReset=xrc.XRCCTRL(self.EStopWindow,'btnEStopCyanNetReset')
        self.EStopWindow.Bind(wx.EVT_TOGGLEBUTTON, self.OnEStopCyanMasterReset, id=xrc.XRCID('btnEStopCyanMasterReset'))
        self.EStopWindow.Bind(wx.EVT_TOGGLEBUTTON, self.OnEStopCyanSlaveReset, id=xrc.XRCID('btnEStopCyanSlaveReset'))
        self.EStopWindow.Bind(wx.EVT_TOGGLEBUTTON, self.OnEStopCyanNetReset, id=xrc.XRCID('btnEStopCyanNetReset'))
    
        self.EStopWindow.EStopMagentaName=xrc.XRCCTRL(self.EStopWindow,'EStopMagentaName')
        self.EStopWindow.EStopMagentaName.Enable(False)
        self.EStopWindow.EStopMagentaTimeStamp=xrc.XRCCTRL(self.EStopWindow,'EStopMagentaTimeStamp')
        self.EStopWindow.EStopMagentaTimeStamp.Enable(False)
        self.EStopWindow.EStopMagentaMasterStatus=xrc.XRCCTRL(self.EStopWindow,'EStopMagentaMasterStatus')
        #self.EStopWindow.EStopMagentaMasterStatus.Enable(False)
        self.EStopWindow.EStopMagentaSlaveStatus=xrc.XRCCTRL(self.EStopWindow,'EStopMagentaSlaveStatus')
        #self.EStopWindow.EStopMagentaSlaveStatus.Enable(False)
        self.EStopWindow.pnEMagenta=xrc.XRCCTRL(self.EStopWindow,'pnEMagenta')
        self.EStopWindow.rbEStopMagentaMaster=xrc.XRCCTRL(self.EStopWindow,'rbEStopMagentaMaster')
        #self.EStopWindow.rbEStopMagentaMaster.Enable(False)
        self.EStopWindow.rbEStopMagentaE1=xrc.XRCCTRL(self.EStopWindow,'rbEStopMagentaE1')
        #self.EStopWindow.rbEStopMagentaE1.Enable(False)
        self.EStopWindow.rbEStopMagenta30kW=xrc.XRCCTRL(self.EStopWindow,'rbEStopMagenta30kW')
        #self.EStopWindow.rbEStopMagenta30kW.Enable(False)
        self.EStopWindow.rbEStopMagentaB1=xrc.XRCCTRL(self.EStopWindow,'rbEStopMagentaB1')
        #self.EStopWindow.rbEStopMagentaB1.Enable(False) 
        self.EStopWindow.rbEStopMagentaSPS=xrc.XRCCTRL(self.EStopWindow,'rbEStopMagentaSPS')
        #self.EStopWindow.rbEStopMagentaSPS.Enable(False)
        self.EStopWindow.rbEStopMagentaPos=xrc.XRCCTRL(self.EStopWindow,'rbEStopMagentaPos')
        #self.EStopWindow.rbEStopMagentaPos.Enable(False)           
        self.EStopWindow.rbEStopMagentaG1COM=xrc.XRCCTRL(self.EStopWindow,'rbEStopMagentaG1COM')
        #self.EStopWindow.rbEStopMagentaG1COM.Enable(False)
        self.EStopWindow.rbEStopMagentaG2COM=xrc.XRCCTRL(self.EStopWindow,'rbEStopMagentaG2COM')
        #self.EStopWindow.rbEStopMagentaG2COM.Enable(False)
        self.EStopWindow.rbEStopMagentaG3COM=xrc.XRCCTRL(self.EStopWindow,'rbEStopMagentaG3COM')
        #self.EStopWindow.rbEStopMagentaG3COM.Enable(False)
        self.EStopWindow.rbEStopMagentaSlave=xrc.XRCCTRL(self.EStopWindow,'rbEStopMagentaSlave')
        #self.EStopWindow.rbEStopMagentaSlave.Enable(False)
        self.EStopWindow.rbEStopMagentaE2=xrc.XRCCTRL(self.EStopWindow,'rbEStopMagentaE2')
        #self.EStopWindow.rbEStopMagentaE2.Enable(False) 
        self.EStopWindow.rbEStopMagenta05kW=xrc.XRCCTRL(self.EStopWindow,'rbEStopMagenta05kW')
        #self.EStopWindow.rbEStopMagenta05kW.Enable(False)
        self.EStopWindow.rbEStopMagentaB2=xrc.XRCCTRL(self.EStopWindow,'rbEStopMagentaB2')
        #self.EStopWindow.rbEStopMagentaB2.Enable(False)
        self.EStopWindow.rbEStopMagentaRed=xrc.XRCCTRL(self.EStopWindow,'rbEStopMagentaRed')
        #self.EStopWindow.rbEStopMagentaRed.Enable(False)
        self.EStopWindow.rbEStopMagentaVel=xrc.XRCCTRL(self.EStopWindow,'rbEStopMagentaVel')
        #self.EStopWindow.rbEStopMagentaVel.Enable(False)          
        self.EStopWindow.rbEStopMagentaG1OUT=xrc.XRCCTRL(self.EStopWindow,'rbEStopMagentaG1OUT')
        #self.EStopWindow.rbEStopMagentaG1OUT.Enable(False)
        self.EStopWindow.rbEStopMagentaG2OUT=xrc.XRCCTRL(self.EStopWindow,'rbEStopMagentaG2OUT')
        #self.EStopWindow.rbEStopMagentaG2OUT.Enable(False)
        self.EStopWindow.rbEStopMagentaG3OUT=xrc.XRCCTRL(self.EStopWindow,'rbEStopMagentaG3OUT')
        #self.EStopWindow.rbEStopMagentaG3OUT.Enable(False)
        self.EStopWindow.rbEStopMagentaNetwork=xrc.XRCCTRL(self.EStopWindow,'rbEStopMagentaNetwork')
        #self.EStopWindow.rbEStopMagentaNetwork.Enable(False)
        self.EStopWindow.rbEStopMagentaB2K=xrc.XRCCTRL(self.EStopWindow,'rbEStopMagentaB2K')
        #self.EStopWindow.rbEStopMagentaB2K.Enable(False)
        self.EStopWindow.rbEStopMagentaENC=xrc.XRCCTRL(self.EStopWindow,'rbEStopMagentaENC')
        #self.EStopWindow.rbEStopMagentaENC.Enable(False)
        self.EStopWindow.rbEStopMagentaEnd=xrc.XRCCTRL(self.EStopWindow,'rbEStopMagentaEnd')
        #self.EStopWindow.rbEStopMagentaEnd.Enable(False)         
        self.EStopWindow.rbEStopMagentaG1FB=xrc.XRCCTRL(self.EStopWindow,'rbEStopMagentaG1FB')
        #self.EStopWindow.rbEStopMagentaG1FB.Enable(False)
        self.EStopWindow.rbEStopMagentaG2FB=xrc.XRCCTRL(self.EStopWindow,'rbEStopMagentaG2FB')
        #self.EStopWindow.rbEStopMagentaG2FB.Enable(False)
        self.EStopWindow.rbEStopMagentaG3FB=xrc.XRCCTRL(self.EStopWindow,'rbEStopMagentaG3FB') 
        #self.EStopWindow.rbEStopMagentaG3FB.Enable(False)
        
        self.EStopWindow.btnEStopMagentaMasterReset=xrc.XRCCTRL(self.EStopWindow,'btnEStopMagentaMasterReset')
        self.EStopWindow.btnEStopMagentaSlaveReset=xrc.XRCCTRL(self.EStopWindow,'btnEStopMagentaSlaveReset')
        self.EStopWindow.btnEStopMagentaNetReset=xrc.XRCCTRL(self.EStopWindow,'btnEStopMagentaNetReset')
        self.EStopWindow.Bind(wx.EVT_TOGGLEBUTTON, self.OnEStopMagentaMasterReset, id=xrc.XRCID('btnEStopMagentaMasterReset'))
        self.EStopWindow.Bind(wx.EVT_TOGGLEBUTTON, self.OnEStopMagentaSlaveReset, id=xrc.XRCID('btnEStopMagentaSlaveReset'))
        self.EStopWindow.Bind(wx.EVT_TOGGLEBUTTON, self.OnEStopMagentaNetReset, id=xrc.XRCID('btnEStopMagentaNetReset'))       

        
        self.EStopWindow.btnEStopReSync=xrc.XRCCTRL(self.EStopWindow,'btnEStopReSync')
        self.EStopWindow.btnEStopReSync.Enable(False)
        self.EStopWindow.Bind(wx.EVT_BUTTON, self.OnEStopReSync, id=xrc.XRCID('btnEStopReSync'))
        self.EStopWindow.btnEStopClose=xrc.XRCCTRL(self.EStopWindow,'btnEStopClose')
        self.EStopWindow.Bind(wx.EVT_BUTTON, self.OnEStopClose, id=xrc.XRCID('btnEStopClose'))
        

        self.EStopWindow.EStopYellowMasterStatus.Bind(wx.EVT_LEFT_DOWN, self.OnAxisYellowErrorClick, id=xrc.XRCID('EStopYellowMasterStatus'))
        self.EStopWindow.EStopYellowSlaveStatus.Bind(wx.EVT_LEFT_DOWN, self.OnAxisYellowSlaveErrorClick, id=xrc.XRCID('EStopYellowSlaveStatus')) 
        self.EStopWindow.EStopGreenMasterStatus.Bind(wx.EVT_LEFT_DOWN, self.OnAxisGreenErrorClick, id=xrc.XRCID('EStopGreenMasterStatus'))
        self.EStopWindow.EStopGreenSlaveStatus.Bind(wx.EVT_LEFT_DOWN, self.OnAxisGreenSlaveErrorClick, id=xrc.XRCID('EStopGreenSlaveStatus')) 
        self.EStopWindow.EStopCyanMasterStatus.Bind(wx.EVT_LEFT_DOWN, self.OnAxisCyanErrorClick, id=xrc.XRCID('EStopCyanMasterStatus'))
        self.EStopWindow.EStopCyanSlaveStatus.Bind(wx.EVT_LEFT_DOWN, self.OnAxisCyanSlaveErrorClick, id=xrc.XRCID('EStopCyanSlaveStatus'))
        self.EStopWindow.EStopMagentaMasterStatus.Bind(wx.EVT_LEFT_DOWN, self.OnAxisMagentaErrorClick, id=xrc.XRCID('EStopMagentaMasterStatus'))
        self.EStopWindow.EStopMagentaSlaveStatus.Bind(wx.EVT_LEFT_DOWN, self.OnAxisMagentaSlaveErrorClick, id=xrc.XRCID('EStopMagentaSlaveStatus'))
        
        self.EStopWindow.btnRecoverYellow=xrc.XRCCTRL(self.EStopWindow,'btnRecoverYellow')
        self.EStopWindow.txtYellowRecoverCutLength=xrc.XRCCTRL(self.EStopWindow,'txtYellowRecoverCutLength')
        self.EStopWindow.txtYellowRecoverCutLength.Enable(False)
        self.EStopWindow.txtYellowRecoverActLength=xrc.XRCCTRL(self.EStopWindow,'txtYellowRecoverActLength')
        self.EStopWindow.txtYellowRecoverActLength.Enable(False)
        self.EStopWindow.txtYellowRecoverDelta=xrc.XRCCTRL(self.EStopWindow,'txtYellowRecoverDelta')
        self.EStopWindow.txtYellowRecoverDelta.Enable(False)
        
        self.EStopWindow.btnRecoverGreen=xrc.XRCCTRL(self.EStopWindow,'btnRecoverGreen')
        self.EStopWindow.txtGreenRecoverCutLength=xrc.XRCCTRL(self.EStopWindow,'txtGreenRecoverCutLength')
        self.EStopWindow.txtGreenRecoverCutLength.Enable(False)
        self.EStopWindow.txtGreenRecoverActLength=xrc.XRCCTRL(self.EStopWindow,'txtGreenRecoverActLength')
        self.EStopWindow.txtGreenRecoverActLength.Enable(False)
        self.EStopWindow.txtGreenRecoverDelta=xrc.XRCCTRL(self.EStopWindow,'txtGreenRecoverDelta')
        self.EStopWindow.txtGreenRecoverDelta.Enable(False)
        
        self.EStopWindow.btnRecoverCyan=xrc.XRCCTRL(self.EStopWindow,'btnRecoverCyan')
        self.EStopWindow.txtCyanRecoverCutLength=xrc.XRCCTRL(self.EStopWindow,'txtCyanRecoverCutLength')
        self.EStopWindow.txtCyanRecoverCutLength.Enable(False)
        self.EStopWindow.txtCyanRecoverActLength=xrc.XRCCTRL(self.EStopWindow,'txtCyanRecoverActLength')
        self.EStopWindow.txtCyanRecoverActLength.Enable(False)
        self.EStopWindow.txtCyanRecoverDelta=xrc.XRCCTRL(self.EStopWindow,'txtCyanRecoverDelta')
        self.EStopWindow.txtCyanRecoverDelta.Enable(False)
        
        self.EStopWindow.btnRecoverMagenta=xrc.XRCCTRL(self.EStopWindow,'btnRecoverMagenta')
        self.EStopWindow.txtMagentaRecoverCutLength=xrc.XRCCTRL(self.EStopWindow,'txtMagentaRecoverCutLength')
        self.EStopWindow.txtMagentaRecoverCutLength.Enable(False)
        self.EStopWindow.txtMagentaRecoverActLength=xrc.XRCCTRL(self.EStopWindow,'txtMagentaRecoverActLength')
        self.EStopWindow.txtMagentaRecoverActLength.Enable(False)
        self.EStopWindow.txtMagentaRecoverDelta=xrc.XRCCTRL(self.EStopWindow,'txtMagentaRecoverDelta')
        self.EStopWindow.txtMagentaRecoverDelta.Enable(False)
        
        self.EStopWindow.btnRecoverYellow.Bind(wx.EVT_LEFT_DOWN, self.OnRecoverYellowDown, id=xrc.XRCID('btnRecoverYellow'))
        self.EStopWindow.btnRecoverYellow.Bind(wx.EVT_LEFT_UP, self.OnRecoverYellowUP, id=xrc.XRCID('btnRecoverYellow'))
        self.EStopWindow.btnRecoverGreen.Bind(wx.EVT_LEFT_DOWN, self.OnRecoverGreenDown, id=xrc.XRCID('btnRecoverGreen'))
        self.EStopWindow.btnRecoverGreen.Bind(wx.EVT_LEFT_UP, self.OnRecoverGreenUP, id=xrc.XRCID('btnRecoverGreen'))
        self.EStopWindow.btnRecoverCyan.Bind(wx.EVT_LEFT_DOWN, self.OnRecoverCyanDown, id=xrc.XRCID('btnRecoverCyan'))
        self.EStopWindow.btnRecoverCyan.Bind(wx.EVT_LEFT_UP, self.OnRecoverCyanUP, id=xrc.XRCID('btnRecoverCyan'))
        self.EStopWindow.btnRecoverMagenta.Bind(wx.EVT_LEFT_DOWN, self.OnRecoverMagentaDown, id=xrc.XRCID('btnRecoverMagenta'))
        self.EStopWindow.btnRecoverMagenta.Bind(wx.EVT_LEFT_UP, self.OnRecoverMagentaUP, id=xrc.XRCID('btnRecoverMagenta'))
        
        self.EStopWindow.btnRecover=xrc.XRCCTRL(self.EStopWindow,'btnRecover')
        self.EStopWindow.txtRecoverCutPositionX=xrc.XRCCTRL(self.EStopWindow,'txtRecoverCutPositionX')
        self.EStopWindow.txtRecoverCutPositionX.Enable(False)
        self.EStopWindow.txtRecoverCutPositionY=xrc.XRCCTRL(self.EStopWindow,'txtRecoverCutPositionY')
        self.EStopWindow.txtRecoverCutPositionY.Enable(False)
        self.EStopWindow.txtRecoverCutPositionZ=xrc.XRCCTRL(self.EStopWindow,'txtRecoverCutPositionZ')
        self.EStopWindow.txtRecoverCutPositionZ.Enable(False)
        self.EStopWindow.txtRecoverCutPositionError=xrc.XRCCTRL(self.EStopWindow,'txtRecoverCutPositionError')
        self.EStopWindow.txtRecoverCutPositionError.Enable(False)
        self.EStopWindow.txtRecoverActPositionX=xrc.XRCCTRL(self.EStopWindow,'txtRecoverActPositionX')
        self.EStopWindow.txtRecoverActPositionX.Enable(False)
        self.EStopWindow.txtRecoverActPositionY=xrc.XRCCTRL(self.EStopWindow,'txtRecoverActPositionY')
        self.EStopWindow.txtRecoverActPositionY.Enable(False)
        self.EStopWindow.txtRecoverActPositionZ=xrc.XRCCTRL(self.EStopWindow,'txtRecoverActPositionZ')
        self.EStopWindow.txtRecoverActPositionZ.Enable(False)
        self.EStopWindow.txtRecoverActPositionError=xrc.XRCCTRL(self.EStopWindow,'txtRecoverActPositionError')
        self.EStopWindow.txtRecoverActPositionError.Enable(False)
        
        self.EStopWindow.btnRecover.Bind(wx.EVT_LEFT_DOWN, self.OnRecoverDown, id=xrc.XRCID('btnRecover'))
        self.EStopWindow.btnRecover.Bind(wx.EVT_LEFT_UP, self.OnRecoverUP, id=xrc.XRCID('btnRecover'))
        
    def OnEStopReSync(self,evt):
        self.logger.info('Yellow Green Cyan Magenta Net ReSync')
        dlg=wx.MessageDialog(None,'Re-sync Drives','Resync',wx.YES_NO|wx.ICON_QUESTION)
        result=dlg.ShowModal()
        dlg.Destroy         
        if result == wx.ID_YES:
            #App.Yellow.EStopReset  = 1
            #App.Green.EStopReset   = 1
            #App.Cyan.EStopReset    = 1
            #App.Magenta.EStopReset = 1
            App.Yellow.ReSync = 1
            App.Green.ReSync = 1
            App.Cyan.ReSync = 1
            App.Magenta.ReSync = 1
            for i in range(10):
                self.AchsenComunicate()
            App.Yellow.ReSync = 0
            App.Green.ReSync = 0
            App.Cyan.ReSync = 0
            App.Magenta.ReSync = 0 
            self.frame.p3dViewport.DisplayPersA.setClearColor(VBase4(0.8,0.0,0.0,1))
            self.frame.p3dViewport.DisplayTop.setClearColor(VBase4(0.8,0.0,0.0,1))
            self.frame.p3dViewport.DisplayFront.setClearColor(VBase4(0.8,0.0,0.0,1))
        else:
            pass
        
    def OnRecoverYellowDown(self,evt):
        ##print "OnRecoverYellowDown"
        self.EStopWindow.YellowDown=1
    def OnRecoverYellowUP(self,evt):
       ##print "OnRecoverYellowUP" 
        self.EStopWindow.YellowDown=0
    def OnRecoverGreenDown(self,evt):
        ##print "OnRecoverGreenDown"
        self.EStopWindow.GreenDown=1
    def OnRecoverGreenUP(self,evt):
        ##print "OnRecoverGreenUp"
        self.EStopWindow.GreenDown=0
    def OnRecoverCyanDown(self,evt):
        ##print "OnRecoverCyanDown" 
        self.EStopWindow.CyanDown=1
    def OnRecoverCyanUP(self,evt):
       ##print "OnRecoverCyanUp"
        self.EStopWindow.CyanDown=0
    def OnRecoverMagentaDown(self,evt):
        ##print "OnRecoverMagentaDown" 
        self.EStopWindow.MagentaDown=1

    def OnRecoverMagentaUP(self,evt):
        ##print "OnRecoverMagentaUp"
        self.EStopWindow.MagentaDown=0

    def OnRecoverDown(self,evt):
        #print "OnRecoverDown"
        self.EStopWindow.YellowDown=1
        self.EStopWindow.GreenDown=1
        self.EStopWindow.CyanDown=1
        self.EStopWindow.MagentaDown=1
    def OnRecoverUP(self,evt):
       #print "OnRecoverUp"
        self.EStopWindow.YellowDown=0
        self.EStopWindow.GreenDown=0
        self.EStopWindow.CyanDown=0
        self.EStopWindow.MagentaDown=0
        pass        
    def OnAxisYellowErrorClick(self,evt):
        
        rect = self.EStopWindow.GetRect()
        x1, y1 = rect.GetTopLeft() 
        a=self.Decode.Decode(App.Yellow.Status)                                                    #[2] Axis Status  
        self.test = wx.TipWindow(self.EStopWindow, str(a[0]))
        self.test.SetBoundingRect(wx.Rect(x1+32,y1+50,x1+132,y1+240))
    
    def OnAxisYellowSlaveErrorClick(self,evt):
        rect = self.EStopWindow.GetRect()
        x1, y1 = rect.GetTopLeft() 
        a=self.Decode.Decode(App.Yellow.GuideStatus)                                                    #[2] Axis Status  
        self.test = wx.TipWindow(self.EStopWindow, str(a[0]))
        self.test.SetBoundingRect(wx.Rect(x1+223,y1+50,x1+323,y1+240))
        
    def OnAxisGreenErrorClick(self,evt):
        rect = self.EStopWindow.GetRect()
        x1, y1 = rect.GetTopLeft() 
        a=self.Decode.Decode(App.Green.Status)                                                    #[2] Axis Status  
        self.test = wx.TipWindow(self.EStopWindow, str(a[0]))
        self.test.SetBoundingRect(wx.Rect(x1+32,y1+240,x1+132,y1+480))
    
    def OnAxisGreenSlaveErrorClick(self,evt):
        rect = self.EStopWindow.GetRect()
        x1, y1 = rect.GetTopLeft() 
        a=self.Decode.Decode(App.Green.GuideStatus)                                                    #[2] Axis Status  
        self.test = wx.TipWindow(self.EStopWindow, str(a[0]))
        self.test.SetBoundingRect(wx.Rect(x1+232,y1+240,x1+323,y1+480))

    def OnAxisCyanErrorClick(self,evt):
        rect = self.EStopWindow.GetRect()
        x1, y1 = rect.GetTopLeft() 
        a=self.Decode.Decode(App.Cyan.Status)                                                    #[2] Axis Status  
        self.test = wx.TipWindow(self.EStopWindow, str(a[0]))
        self.test.SetBoundingRect(wx.Rect(x1+420,y1+50,x1+520,y1+240))
    
    def OnAxisCyanSlaveErrorClick(self,evt):
        rect = self.EStopWindow.GetRect()
        x1, y1 = rect.GetTopLeft() 
        a=self.Decode.Decode(App.Cyan.GuideStatus)                                                    #[2] Axis Status  
        self.test = wx.TipWindow(self.EStopWindow, str(a[0]))
        self.test.SetBoundingRect(wx.Rect(x1+608,y1+50,x1+780,y1+240))
        
    def OnAxisMagentaErrorClick(self,evt):
        rect = self.EStopWindow.GetRect()
        x1, y1 = rect.GetTopLeft() 
        a=self.Decode.Decode(App.Magenta.Status)                                                    #[2] Axis Status  
        self.test = wx.TipWindow(self.EStopWindow, str(a[0]))
        self.test.SetBoundingRect(wx.Rect(x1+420,y1+240,x1+520,y1+480))
    
    def OnAxisMagentaSlaveErrorClick(self,evt):
        rect = self.EStopWindow.GetRect()
        x1, y1 = rect.GetTopLeft() 
        a=self.Decode.Decode(App.Magenta.GuideStatus)                                                    #[2] Axis Status  
        self.test = wx.TipWindow(self.EStopWindow, str(a[0]))
        self.test.SetBoundingRect(wx.Rect(x1+608,y1+240,x1+780,y1+480))
                
    def EStopControlsUpdate(self):
        
        self.EStopWindow.EStopYellowName.SetValue(App.Yellow.Name)
        self.EStopWindow.EStopYellowTimeStamp.SetValue(App.Yellow.EStopCutTime)
        a=self.Decode.Decode(App.Yellow.Status)                                                  #[2] Axis Status  
        b=self.Decode.Decode(App.Yellow.GuideStatus)                                                
        self.EStopWindow.EStopYellowMasterStatus.SetValue(a[1][0][2])
        self.EStopWindow.EStopYellowMasterStatus.SetBackgroundColour(a[1][0][3])
        self.EStopWindow.EStopYellowSlaveStatus.SetValue(b[1][0][2])
        self.EStopWindow.EStopYellowSlaveStatus.SetBackgroundColour(b[1][0][3])        
        self.EStopWindow.rbEStopYellowMaster.SetValue(App.Yellow.EsMaster)
        self.EStopWindow.rbEStopYellowE1.SetValue(App.Yellow.EsEStop1)
        self.EStopWindow.rbEStopYellow30kW.SetValue(App.Yellow.Es30kWOK)
        self.EStopWindow.rbEStopYellowB1.SetValue(not(App.Yellow.EsB1OK ^ App.Yellow.EsTaster))
        self.EStopWindow.rbEStopYellowSPS.SetValue(App.Yellow.EsSPSOK)
        self.EStopWindow.rbEStopYellowPos.SetValue(App.Yellow.EsPosWin)
        self.EStopWindow.rbEStopYellowG1COM.SetValue(App.Yellow.EsG1COM)
        self.EStopWindow.rbEStopYellowG2COM.SetValue(App.Yellow.EsG2COM)
        self.EStopWindow.rbEStopYellowG3COM.SetValue(App.Yellow.EsG3COM)
        self.EStopWindow.rbEStopYellowSlave.SetValue(App.Yellow.EsSlave)
        self.EStopWindow.rbEStopYellowE2.SetValue(App.Yellow.EsEStop2)
        self.EStopWindow.rbEStopYellow05kW.SetValue(App.Yellow.Es05kWOK)
        self.EStopWindow.rbEStopYellowB2.SetValue(not(App.Yellow.EsB2OK ^ App.Yellow.EsTaster))
        self.EStopWindow.rbEStopYellowRed.SetValue(App.Yellow.EsSteuerwort)
        self.EStopWindow.rbEStopYellowVel.SetValue(App.Yellow.EsVelWin)
        self.EStopWindow.rbEStopYellowG1OUT.SetValue(App.Yellow.EsG1OUT)
        self.EStopWindow.rbEStopYellowG2OUT.SetValue(App.Yellow.EsG2OUT)
        self.EStopWindow.rbEStopYellowG3OUT.SetValue(App.Yellow.EsG3OUT)
        self.EStopWindow.rbEStopYellowNetwork.SetValue(App.Yellow.EsNetwork)
        self.EStopWindow.rbEStopYellowB2K.SetValue(App.Yellow.EsBRK2KB)
        self.EStopWindow.rbEStopYellowENC.SetValue(App.Yellow.EsDCSOK)
        self.EStopWindow.rbEStopYellowEnd.SetValue(App.Yellow.EsEndlage)
        self.EStopWindow.rbEStopYellowG1FB.SetValue(App.Yellow.EsG1FB)
        self.EStopWindow.rbEStopYellowG2FB.SetValue(App.Yellow.EsG2FB)
        self.EStopWindow.rbEStopYellowG3FB.SetValue(App.Yellow.EsG3FB)
        if   (self.EStopWindow.rbEStopYellowG1COM.GetValue() and
              self.EStopWindow.rbEStopYellowG1FB.GetValue() and
              self.EStopWindow.rbEStopYellowG1OUT.GetValue() and
              self.EStopWindow.rbEStopYellowG2COM.GetValue() and
              self.EStopWindow.rbEStopYellowG2FB.GetValue() and
              self.EStopWindow.rbEStopYellowG2OUT.GetValue() and
              self.EStopWindow.rbEStopYellowG3COM.GetValue() and
              self.EStopWindow.rbEStopYellowG3FB.GetValue() and
              self.EStopWindow.rbEStopYellowG3OUT.GetValue()):
            self.EStopWindow.btnEStopYellowNetReset.SetValue(False)
            App.Yellow.EStopReset =0
        
        Colour = self.EStopWindow.pnEYellow.GetBackgroundColour()    
        if ( #self.EStopWindow.rbEStopYellowMaster.GetValue() and
            self.EStopWindow.rbEStopYellowE1.GetValue()      and
            self.EStopWindow.rbEStopYellow30kW.GetValue()    and
            #self.EStopWindow.rbEStopYellowB1.GetValue(not(App.Yellow.EsB1OK ^ App.Yellow.EsTaster))
            self.EStopWindow.rbEStopYellowSPS.GetValue()     and
            self.EStopWindow.rbEStopYellowPos.GetValue()     and
            self.EStopWindow.rbEStopYellowG1COM.GetValue()   and
            self.EStopWindow.rbEStopYellowG2COM.GetValue()   and
            self.EStopWindow.rbEStopYellowG3COM.GetValue()   and
            #self.EStopWindow.rbEStopYellowSlave.GetValue()   and
            self.EStopWindow.rbEStopYellowE2.GetValue()      and
            self.EStopWindow.rbEStopYellow05kW.GetValue()    and
            #self.EStopWindow.rbEStopYellowB2.GetValue(not(App.Yellow.EsB2OK ^ App.Yellow.EsTaster))
            self.EStopWindow.rbEStopYellowRed.GetValue()     and
            self.EStopWindow.rbEStopYellowVel.GetValue()     and
            self.EStopWindow.rbEStopYellowG1OUT.GetValue()   and
            self.EStopWindow.rbEStopYellowG2OUT.GetValue()   and
            self.EStopWindow.rbEStopYellowG3OUT.GetValue()   and
            #self.EStopWindow.rbEStopYellowNetwork.GetValue() and
            self.EStopWindow.rbEStopYellowB2K.GetValue()     and
            self.EStopWindow.rbEStopYellowENC.GetValue()     and
            self.EStopWindow.rbEStopYellowEnd.GetValue()     and
            self.EStopWindow.rbEStopYellowG1FB.GetValue()    and
            self.EStopWindow.rbEStopYellowG2FB.GetValue()    and
            self.EStopWindow.rbEStopYellowG3FB.GetValue())   :
            self.EStopWindow.pnEYellow.SetBackgroundColour((122,122,122))
            if Colour != (122,122,122):
                self.EStopWindow.pnEYellow.Refresh()
        else:
            self.EStopWindow.pnEYellow.SetBackgroundColour((250,198,12))
            if Colour != (250,198,12):
                self.EStopWindow.pnEYellow.Refresh()
            
        if  self.EStopWindow.btnEStopYellowSlaveReset.GetLabel() =='reseting':           
            App.Yellow.GuideControl   = 5
            b=self.Decode.Decode(App.Yellow.GuideStatus)
            if b[1][0][2] == "Save Stop" or b[1][0][2] == "Not Enabled" or b[1][0][2] == "Ready":
                self.EStopWindow.btnEStopYellowSlaveReset.SetLabel('Reset')
        else:
            App.Yellow.GuideControl   = 5
            
        if a[1][0][2] == "Save Stop" or a[1][0][2] == "Not Enabled" or a[1][0][2] == "Ready":
            self.EStopWindow.btnEStopYellowMasterReset.SetValue(False)
            self.EStopWindow.btnEStopYellowMasterReset.SetLabel('Reset')            
            

                        
        self.EStopWindow.EStopGreenName.SetValue(App.Green.Name)
        self.EStopWindow.EStopGreenTimeStamp.SetValue(App.Green.EStopCutTime)
        a=self.Decode.Decode(App.Green.Status)                                                  #[2] Axis Status  
        b=self.Decode.Decode(App.Green.GuideStatus)                                                
        self.EStopWindow.EStopGreenMasterStatus.SetValue(a[1][0][2])
        self.EStopWindow.EStopGreenMasterStatus.SetBackgroundColour(a[1][0][3])
        self.EStopWindow.EStopGreenSlaveStatus.SetValue(b[1][0][2])
        self.EStopWindow.EStopGreenSlaveStatus.SetBackgroundColour(b[1][0][3])
        self.EStopWindow.rbEStopGreenMaster.SetValue(App.Green.EsMaster)
        self.EStopWindow.rbEStopGreenE1.SetValue(App.Green.EsEStop1)
        self.EStopWindow.rbEStopGreen30kW.SetValue(App.Green.Es30kWOK)
        self.EStopWindow.rbEStopGreenB1.SetValue(not(App.Green.EsB1OK ^ App.Green.EsTaster))
        self.EStopWindow.rbEStopGreenSPS.SetValue(App.Green.EsSPSOK)
        self.EStopWindow.rbEStopGreenPos.SetValue(App.Green.EsPosWin)
        self.EStopWindow.rbEStopGreenG1COM.SetValue(App.Green.EsG1COM)
        self.EStopWindow.rbEStopGreenG2COM.SetValue(App.Green.EsG2COM)
        self.EStopWindow.rbEStopGreenG3COM.SetValue(App.Green.EsG3COM)
        self.EStopWindow.rbEStopGreenSlave.SetValue(App.Green.EsSlave)
        self.EStopWindow.rbEStopGreenE2.SetValue(App.Green.EsEStop2)
        self.EStopWindow.rbEStopGreen05kW.SetValue(App.Green.Es05kWOK)
        self.EStopWindow.rbEStopGreenB2.SetValue(not(App.Green.EsB2OK ^ App.Green.EsTaster))
        self.EStopWindow.rbEStopGreenRed.SetValue(App.Green.EsSteuerwort)
        self.EStopWindow.rbEStopGreenVel.SetValue(App.Green.EsVelWin)
        self.EStopWindow.rbEStopGreenG1OUT.SetValue(App.Green.EsG1OUT)
        self.EStopWindow.rbEStopGreenG2OUT.SetValue(App.Green.EsG2OUT)
        self.EStopWindow.rbEStopGreenG3OUT.SetValue(App.Green.EsG3OUT)
        self.EStopWindow.rbEStopGreenNetwork.SetValue(App.Green.EsNetwork)
        self.EStopWindow.rbEStopGreenB2K.SetValue(App.Green.EsBRK2KB)
        self.EStopWindow.rbEStopGreenENC.SetValue(App.Green.EsDCSOK)
        self.EStopWindow.rbEStopGreenEnd.SetValue(App.Green.EsEndlage)
        self.EStopWindow.rbEStopGreenG1FB.SetValue(App.Green.EsG1FB)
        self.EStopWindow.rbEStopGreenG2FB.SetValue(App.Green.EsG2FB)
        self.EStopWindow.rbEStopGreenG3FB.SetValue(App.Green.EsG3FB)
        if   (self.EStopWindow.rbEStopGreenG1COM.GetValue() and
              self.EStopWindow.rbEStopGreenG1FB.GetValue() and
              self.EStopWindow.rbEStopGreenG1OUT.GetValue() and
              self.EStopWindow.rbEStopGreenG2COM.GetValue() and
              self.EStopWindow.rbEStopGreenG2FB.GetValue() and
              self.EStopWindow.rbEStopGreenG2OUT.GetValue() and
              self.EStopWindow.rbEStopGreenG3COM.GetValue() and
              self.EStopWindow.rbEStopGreenG3FB.GetValue() and
              self.EStopWindow.rbEStopGreenG3OUT.GetValue()):
            self.EStopWindow.btnEStopGreenNetReset.SetValue(False)
            App.Green.EStopReset =0
            
        Colour = self.EStopWindow.pnEGreen.GetBackgroundColour()    
        if ( #self.EStopWindow.rbEStopGreenMaster.GetValue() and
            self.EStopWindow.rbEStopGreenE1.GetValue()      and
            self.EStopWindow.rbEStopGreen30kW.GetValue()    and
            #self.EStopWindow.rbEStopGreenB1.GetValue(not(App.Green.EsB1OK ^ App.Green.EsTaster))
            self.EStopWindow.rbEStopGreenSPS.GetValue()     and
            self.EStopWindow.rbEStopGreenPos.GetValue()     and
            self.EStopWindow.rbEStopGreenG1COM.GetValue()   and
            self.EStopWindow.rbEStopGreenG2COM.GetValue()   and
            self.EStopWindow.rbEStopGreenG3COM.GetValue()   and
            #self.EStopWindow.rbEStopGreenSlave.GetValue()   and
            self.EStopWindow.rbEStopGreenE2.GetValue()      and
            self.EStopWindow.rbEStopGreen05kW.GetValue()    and
            #self.EStopWindow.rbEStopGreenB2.GetValue(not(App.Green.EsB2OK ^ App.Green.EsTaster))
            self.EStopWindow.rbEStopGreenRed.GetValue()     and
            self.EStopWindow.rbEStopGreenVel.GetValue()     and
            self.EStopWindow.rbEStopGreenG1OUT.GetValue()   and
            self.EStopWindow.rbEStopGreenG2OUT.GetValue()   and
            self.EStopWindow.rbEStopGreenG3OUT.GetValue()   and
            #self.EStopWindow.rbEStopGreenNetwork.GetValue() and
            self.EStopWindow.rbEStopGreenB2K.GetValue()     and
            self.EStopWindow.rbEStopGreenENC.GetValue()     and
            self.EStopWindow.rbEStopGreenEnd.GetValue()     and
            self.EStopWindow.rbEStopGreenG1FB.GetValue()    and
            self.EStopWindow.rbEStopGreenG2FB.GetValue()    and
            self.EStopWindow.rbEStopGreenG3FB.GetValue())   :
            self.EStopWindow.pnEGreen.SetBackgroundColour((122,122,122))
            if Colour != (122,122,122):
                self.EStopWindow.pnEGreen.Refresh()
        else:
            self.EStopWindow.pnEGreen.SetBackgroundColour((250,198,12))
            if Colour != (250,198,12):
                self.EStopWindow.pnEGreen.Refresh()        
            
        if  self.EStopWindow.btnEStopGreenSlaveReset.GetLabel() =='reseting':           
            App.Green.GuideControl   = 5
            b=self.Decode.Decode(App.Green.GuideStatus)
            if b[1][0][2] == "Save Stop" or b[1][0][2] == "Not Enabled" or b[1][0][2] == "Ready":
                self.EStopWindow.btnEStopGreenSlaveReset.SetLabel('Reset')
        else:
            App.Green.GuideControl   = 5 
            
        if a[1][0][2] == "Save Stop" or a[1][0][2] == "Not Enabled" or a[1][0][2] == "Ready":
            self.EStopWindow.btnEStopGreenMasterReset.SetValue(False)
            self.EStopWindow.btnEStopGreenMasterReset.SetLabel('Reset')        
        
        self.EStopWindow.EStopCyanName.SetValue(App.Cyan.Name)
        self.EStopWindow.EStopCyanTimeStamp.SetValue(App.Cyan.EStopCutTime)
        a=self.Decode.Decode(App.Cyan.Status)                                                  #[2] Axis Status  
        b=self.Decode.Decode(App.Cyan.GuideStatus)                                                
        self.EStopWindow.EStopCyanMasterStatus.SetValue(a[1][0][2])
        self.EStopWindow.EStopCyanMasterStatus.SetBackgroundColour(a[1][0][3])
        self.EStopWindow.EStopCyanSlaveStatus.SetValue(b[1][0][2])
        self.EStopWindow.EStopCyanSlaveStatus.SetBackgroundColour(b[1][0][3])
        self.EStopWindow.rbEStopCyanMaster.SetValue(App.Cyan.EsMaster)
        self.EStopWindow.rbEStopCyanE1.SetValue(App.Cyan.EsEStop1)
        self.EStopWindow.rbEStopCyan30kW.SetValue(App.Cyan.Es30kWOK)
        self.EStopWindow.rbEStopCyanB1.SetValue(not(App.Cyan.EsB1OK ^ App.Cyan.EsTaster))
        self.EStopWindow.rbEStopCyanSPS.SetValue(App.Cyan.EsSPSOK)
        self.EStopWindow.rbEStopCyanPos.SetValue(App.Cyan.EsPosWin)
        self.EStopWindow.rbEStopCyanG1COM.SetValue(App.Cyan.EsG1COM)
        self.EStopWindow.rbEStopCyanG2COM.SetValue(App.Cyan.EsG2COM)
        self.EStopWindow.rbEStopCyanG3COM.SetValue(App.Cyan.EsG3COM)
        self.EStopWindow.rbEStopCyanSlave.SetValue(App.Cyan.EsSlave)
        self.EStopWindow.rbEStopCyanE2.SetValue(App.Cyan.EsEStop2)
        self.EStopWindow.rbEStopCyan05kW.SetValue(App.Cyan.Es05kWOK)
        self.EStopWindow.rbEStopCyanB2.SetValue(not(App.Cyan.EsB2OK ^ App.Cyan.EsTaster))
        self.EStopWindow.rbEStopCyanRed.SetValue(App.Cyan.EsSteuerwort)
        self.EStopWindow.rbEStopCyanVel.SetValue(App.Cyan.EsVelWin)
        self.EStopWindow.rbEStopCyanG1OUT.SetValue(App.Cyan.EsG1OUT)
        self.EStopWindow.rbEStopCyanG2OUT.SetValue(App.Cyan.EsG2OUT)
        self.EStopWindow.rbEStopCyanG3OUT.SetValue(App.Cyan.EsG3OUT)
        self.EStopWindow.rbEStopCyanNetwork.SetValue(App.Cyan.EsNetwork)
        self.EStopWindow.rbEStopCyanB2K.SetValue(App.Cyan.EsBRK2KB)
        self.EStopWindow.rbEStopCyanENC.SetValue(App.Cyan.EsDCSOK)
        self.EStopWindow.rbEStopCyanEnd.SetValue(App.Cyan.EsEndlage)
        self.EStopWindow.rbEStopCyanG1FB.SetValue(App.Cyan.EsG1FB)
        self.EStopWindow.rbEStopCyanG2FB.SetValue(App.Cyan.EsG2FB)
        self.EStopWindow.rbEStopCyanG3FB.SetValue(App.Cyan.EsG3FB)

        if   (self.EStopWindow.rbEStopCyanG1COM.GetValue() and
              self.EStopWindow.rbEStopCyanG1FB.GetValue() and
              self.EStopWindow.rbEStopCyanG1OUT.GetValue() and
              self.EStopWindow.rbEStopCyanG2COM.GetValue() and
              self.EStopWindow.rbEStopCyanG2FB.GetValue() and
              self.EStopWindow.rbEStopCyanG2OUT.GetValue() and
              self.EStopWindow.rbEStopCyanG3COM.GetValue() and
              self.EStopWindow.rbEStopCyanG3FB.GetValue() and
              self.EStopWindow.rbEStopCyanG3OUT.GetValue()):
            self.EStopWindow.btnEStopCyanNetReset.SetValue(False)
            App.Cyan.EStopReset =0
            
        Colour = self.EStopWindow.pnECyan.GetBackgroundColour()    
        if ( #self.EStopWindow.rbEStopCyanMaster.GetValue() and
            self.EStopWindow.rbEStopCyanE1.GetValue()      and
            self.EStopWindow.rbEStopCyan30kW.GetValue()    and
            #self.EStopWindow.rbEStopCyanB1.GetValue(not(App.Cyan.EsB1OK ^ App.Cyan.EsTaster))
            self.EStopWindow.rbEStopCyanSPS.GetValue()     and
            self.EStopWindow.rbEStopCyanPos.GetValue()     and
            self.EStopWindow.rbEStopCyanG1COM.GetValue()   and
            self.EStopWindow.rbEStopCyanG2COM.GetValue()   and
            self.EStopWindow.rbEStopCyanG3COM.GetValue()   and
            #self.EStopWindow.rbEStopCyanSlave.GetValue()   and
            self.EStopWindow.rbEStopCyanE2.GetValue()      and
            self.EStopWindow.rbEStopCyan05kW.GetValue()    and
            #self.EStopWindow.rbEStopCyanB2.GetValue(not(App.Cyan.EsB2OK ^ App.Cyan.EsTaster))
            self.EStopWindow.rbEStopCyanRed.GetValue()     and
            self.EStopWindow.rbEStopCyanVel.GetValue()     and
            self.EStopWindow.rbEStopCyanG1OUT.GetValue()   and
            self.EStopWindow.rbEStopCyanG2OUT.GetValue()   and
            self.EStopWindow.rbEStopCyanG3OUT.GetValue()   and
            #self.EStopWindow.rbEStopCyanNetwork.GetValue() and
            self.EStopWindow.rbEStopCyanB2K.GetValue()     and
            self.EStopWindow.rbEStopCyanENC.GetValue()     and
            self.EStopWindow.rbEStopCyanEnd.GetValue()     and
            self.EStopWindow.rbEStopCyanG1FB.GetValue()    and
            self.EStopWindow.rbEStopCyanG2FB.GetValue()    and
            self.EStopWindow.rbEStopCyanG3FB.GetValue())   :
            self.EStopWindow.pnECyan.SetBackgroundColour((122,122,122))
            if Colour != (122,122,122):
                self.EStopWindow.pnECyan.Refresh()
        else:
            self.EStopWindow.pnECyan.SetBackgroundColour((250,198,12))
            if Colour != (250,198,12):
                self.EStopWindow.pnECyan.Refresh()            
            
        if  self.EStopWindow.btnEStopCyanSlaveReset.GetLabel() =='reseting':           
            App.Cyan.GuideControl   = 5
            b=self.Decode.Decode(App.Cyan.GuideStatus)
            if b[1][0][2] == "Save Stop" or b[1][0][2] == "Not Enabled" or b[1][0][2] == "Ready":
                self.EStopWindow.btnEStopCyanSlaveReset.SetLabel('Reset')
        else:
            App.Cyan.GuideControl   = 5 
            
        if a[1][0][2] == "Save Stop" or a[1][0][2] == "Not Enabled" or a[1][0][2] == "Ready":
            self.EStopWindow.btnEStopCyanMasterReset.SetValue(False)
            self.EStopWindow.btnEStopCyanMasterReset.SetLabel('Reset')         
        
        
        self.EStopWindow.EStopMagentaName.SetValue(App.Magenta.Name)
        self.EStopWindow.EStopMagentaTimeStamp.SetValue(App.Magenta.EStopCutTime)
        a=self.Decode.Decode(App.Magenta.Status)                                                  #[2] Axis Status  
        b=self.Decode.Decode(App.Magenta.GuideStatus)                                                
        self.EStopWindow.EStopMagentaMasterStatus.SetValue(a[1][0][2])
        self.EStopWindow.EStopMagentaMasterStatus.SetBackgroundColour(a[1][0][3])
        self.EStopWindow.EStopMagentaSlaveStatus.SetValue(b[1][0][2])
        self.EStopWindow.EStopMagentaSlaveStatus.SetBackgroundColour(b[1][0][3])
        self.EStopWindow.rbEStopMagentaMaster.SetValue(App.Magenta.EsMaster)
        self.EStopWindow.rbEStopMagentaE1.SetValue(App.Magenta.EsEStop1)
        self.EStopWindow.rbEStopMagenta30kW.SetValue(App.Magenta.Es30kWOK)
        self.EStopWindow.rbEStopMagentaB1.SetValue(not(App.Magenta.EsB1OK ^ App.Magenta.EsTaster))
        self.EStopWindow.rbEStopMagentaSPS.SetValue(App.Magenta.EsSPSOK)
        self.EStopWindow.rbEStopMagentaPos.SetValue(App.Magenta.EsPosWin)
        self.EStopWindow.rbEStopMagentaG1COM.SetValue(App.Magenta.EsG1COM)
        self.EStopWindow.rbEStopMagentaG2COM.SetValue(App.Magenta.EsG2COM)
        self.EStopWindow.rbEStopMagentaG3COM.SetValue(App.Magenta.EsG3COM)
        self.EStopWindow.rbEStopMagentaSlave.SetValue(App.Magenta.EsSlave)
        self.EStopWindow.rbEStopMagentaE2.SetValue(App.Magenta.EsEStop2)
        self.EStopWindow.rbEStopMagenta05kW.SetValue(App.Magenta.Es05kWOK)
        self.EStopWindow.rbEStopMagentaB2.SetValue(not(App.Magenta.EsB2OK ^ App.Magenta.EsTaster))
        self.EStopWindow.rbEStopMagentaRed.SetValue(App.Magenta.EsSteuerwort)
        self.EStopWindow.rbEStopMagentaVel.SetValue(App.Magenta.EsVelWin)
        self.EStopWindow.rbEStopMagentaG1OUT.SetValue(App.Magenta.EsG1OUT)
        self.EStopWindow.rbEStopMagentaG2OUT.SetValue(App.Magenta.EsG2OUT)
        self.EStopWindow.rbEStopMagentaG3OUT.SetValue(App.Magenta.EsG3OUT)
        self.EStopWindow.rbEStopMagentaNetwork.SetValue(App.Magenta.EsNetwork)
        self.EStopWindow.rbEStopMagentaB2K.SetValue(App.Magenta.EsBRK2KB)
        self.EStopWindow.rbEStopMagentaENC.SetValue(App.Magenta.EsDCSOK)
        self.EStopWindow.rbEStopMagentaEnd.SetValue(App.Magenta.EsEndlage)
        self.EStopWindow.rbEStopMagentaG1FB.SetValue(App.Magenta.EsG1FB)
        self.EStopWindow.rbEStopMagentaG2FB.SetValue(App.Magenta.EsG2FB)
        self.EStopWindow.rbEStopMagentaG3FB.SetValue(App.Magenta.EsG3FB)
        if   (self.EStopWindow.rbEStopMagentaG1COM.GetValue() and
              self.EStopWindow.rbEStopMagentaG1FB.GetValue() and
              self.EStopWindow.rbEStopMagentaG1OUT.GetValue() and
              self.EStopWindow.rbEStopMagentaG2COM.GetValue() and
              self.EStopWindow.rbEStopMagentaG2FB.GetValue() and
              self.EStopWindow.rbEStopMagentaG2OUT.GetValue() and
              self.EStopWindow.rbEStopMagentaG3COM.GetValue() and
              self.EStopWindow.rbEStopMagentaG3FB.GetValue() and
              self.EStopWindow.rbEStopMagentaG3OUT.GetValue()):
            self.EStopWindow.btnEStopMagentaNetReset.SetValue(False)
            App.Magenta.EStopReset =0
            
        Colour = self.EStopWindow.pnEMagenta.GetBackgroundColour()    
        if ( #self.EStopWindow.rbEStopMagentaMaster.GetValue() and
            self.EStopWindow.rbEStopMagentaE1.GetValue()      and
            self.EStopWindow.rbEStopMagenta30kW.GetValue()    and
            #self.EStopWindow.rbEStopMagentaB1.GetValue(not(App.Magenta.EsB1OK ^ App.Magenta.EsTaster))
            self.EStopWindow.rbEStopMagentaSPS.GetValue()     and
            self.EStopWindow.rbEStopMagentaPos.GetValue()     and
            self.EStopWindow.rbEStopMagentaG1COM.GetValue()   and
            self.EStopWindow.rbEStopMagentaG2COM.GetValue()   and
            self.EStopWindow.rbEStopMagentaG3COM.GetValue()   and
            #self.EStopWindow.rbEStopMagentaSlave.GetValue()   and
            self.EStopWindow.rbEStopMagentaE2.GetValue()      and
            self.EStopWindow.rbEStopMagenta05kW.GetValue()    and
            #self.EStopWindow.rbEStopMagentaB2.GetValue(not(App.Magenta.EsB2OK ^ App.Magenta.EsTaster))
            self.EStopWindow.rbEStopMagentaRed.GetValue()     and
            self.EStopWindow.rbEStopMagentaVel.GetValue()     and
            self.EStopWindow.rbEStopMagentaG1OUT.GetValue()   and
            self.EStopWindow.rbEStopMagentaG2OUT.GetValue()   and
            self.EStopWindow.rbEStopMagentaG3OUT.GetValue()   and
            #self.EStopWindow.rbEStopMagentaNetwork.GetValue() and
            self.EStopWindow.rbEStopMagentaB2K.GetValue()     and
            self.EStopWindow.rbEStopMagentaENC.GetValue()     and
            self.EStopWindow.rbEStopMagentaEnd.GetValue()     and
            self.EStopWindow.rbEStopMagentaG1FB.GetValue()    and
            self.EStopWindow.rbEStopMagentaG2FB.GetValue()    and
            self.EStopWindow.rbEStopMagentaG3FB.GetValue())   :
            self.EStopWindow.pnEMagenta.SetBackgroundColour((122,122,122))
            if Colour != (122,122,122):
                self.EStopWindow.pnEMagenta.Refresh()
        else:
            self.EStopWindow.pnEMagenta.SetBackgroundColour((250,198,12))
            if Colour != (250,198,12):
                self.EStopWindow.pnEMagenta.Refresh()            
            
        if  self.EStopWindow.btnEStopMagentaSlaveReset.GetLabel() =='reseting':           
            App.Magenta.GuideControl   = 5
            b=self.Decode.Decode(App.Magenta.GuideStatus)
            if b[1][0][2] == "Save Stop" or b[1][0][2] == "Not Enabled" or b[1][0][2] == "Ready":
                self.EStopWindow.btnEStopMagentaSlaveReset.SetLabel('Reset')
        else:
            App.Magenta.GuideControl   = 5  
            
        if a[1][0][2] == "Save Stop" or a[1][0][2] == "Not Enabled" or a[1][0][2] == "Ready":
            self.EStopWindow.btnEStopMagentaMasterReset.SetValue(False)
            self.EStopWindow.btnEStopMagentaMasterReset.SetLabel('Reset')                 
            
        SL1=float(App.Yellow.EStopCutPos)+self.YellowRopeOffset
        SL2=float(App.Green.EStopCutPos)+self.GreenRopeOffset
        SL3=float(App.Cyan.EStopCutPos)+self.CyanRopeOffset
        SL4=float(App.Magenta.EStopCutPos)+self.MagentaRopeOffset
        
        self.EStopWindow.txtYellowRecoverCutLength.SetValue("%4.2f"%(SL1))
        self.EStopWindow.txtYellowRecoverActLength.SetValue("%4.2f"%(float(App.Yellow.PosIst)+self.YellowRopeOffset))
        delta = float(App.Yellow.EStopCutPos)-float(App.Yellow.PosIst)
        self.EStopWindow.txtYellowRecoverDelta.SetValue("%4.2f"%(delta))
        
        self.EStopWindow.txtGreenRecoverCutLength.SetValue("%4.2f"%(SL2))
        self.EStopWindow.txtGreenRecoverActLength.SetValue("%4.2f"%(float(App.Green.PosIst)+self.GreenRopeOffset))
        delta = float(App.Green.EStopCutPos)-float(App.Green.PosIst)
        self.EStopWindow.txtGreenRecoverDelta.SetValue("%4.2f"%(delta))
        
        self.EStopWindow.txtCyanRecoverCutLength.SetValue("%4.2f"%(SL3))
        self.EStopWindow.txtCyanRecoverActLength.SetValue("%4.2f"%(float(App.Cyan.PosIst)+self.CyanRopeOffset))
        delta = float(App.Cyan.EStopCutPos)-float(App.Cyan.PosIst)
        self.EStopWindow.txtCyanRecoverDelta.SetValue("%4.2f"%(delta))
        
        self.EStopWindow.txtMagentaRecoverCutLength.SetValue("%4.2f"%(SL4))
        self.EStopWindow.txtMagentaRecoverActLength.SetValue("%4.2f"%(float(App.Magenta.PosIst)+self.MagentaRopeOffset))
        delta= float(App.Magenta.EStopCutPos)-float(App.Magenta.PosIst)
        self.EStopWindow.txtMagentaRecoverDelta.SetValue("%4.2f"%(delta))
        
        Schnitt1=self.Kugelschnitt(self.M1,SL1,self.M2,SL2,self.M3,SL3)
        Schnitt2=self.Kugelschnitt(self.M2,SL2,self.M3,SL3,self.M4,SL4)
        Schnitt3=self.Kugelschnitt(self.M1,SL1,self.M3,SL3,self.M4,SL4)
        Schnitt4=self.Kugelschnitt(self.M1,SL1,self.M2,SL2,self.M4,SL4)

        PosGerechnet,Fehler=self.MittelKugelaus4(Schnitt1,Schnitt2,Schnitt3,Schnitt4)
        
        self.EStopWindow.txtRecoverCutPositionX.SetValue("%4.2f"%(PosGerechnet[0]))
        self.EStopWindow.txtRecoverCutPositionY.SetValue("%4.2f"%(PosGerechnet[1]))
        self.EStopWindow.txtRecoverCutPositionZ.SetValue("%4.2f"%(PosGerechnet[2]))
        self.EStopWindow.txtRecoverCutPositionError.SetValue("%4.2f"%(Fehler))
        var =self.CalculateMeanPosition()
        self.EStopWindow.txtRecoverActPositionX.SetValue("%4.2f"%(var[0][0]))
        self.EStopWindow.txtRecoverActPositionY.SetValue("%4.2f"%(var[0][1]))
        self.EStopWindow.txtRecoverActPositionZ.SetValue("%4.2f"%(var[0][2]))
        self.EStopWindow.txtRecoverActPositionError.SetValue("%4.2f"%(var[1])) 
        
        if   (not(App.Yellow.EsNetwork) or 
              not(App.Green.EsNetwork)or
              not(App.Cyan.EsNetwork) or
              not(App.Magenta.EsNetwork)):            
            self.EStopWindow.btnEStopReSync.Enable(False)
        else:
            self.EStopWindow.btnEStopReSync.Enable(True)
            
        if (self.EStopWindow.btnEStopYellowMasterReset.GetLabel() == 'Reset' and
            self.EStopWindow.btnEStopYellowSlaveReset.GetLabel() == 'Reset' and
            self.EStopWindow.btnEStopGreenMasterReset.GetLabel() == 'Reset' and
            self.EStopWindow.btnEStopGreenSlaveReset.GetLabel() == 'Reset' and
            self.EStopWindow.btnEStopCyanMasterReset.GetLabel() == 'Reset' and
            self.EStopWindow.btnEStopCyanSlaveReset.GetLabel() == 'Reset' and
            self.EStopWindow.btnEStopMagentaMasterReset.GetLabel() == 'Reset' and
            self.EStopWindow.btnEStopMagentaSlaveReset.GetLabel() == 'Reset'):
            self.EStopWindow.btnEStopClose.Enable(True)
        else:
            self.EStopWindow.btnEStopClose.Enable(False)
        
    def OnEStopYellowMasterReset(self,evt):
        self.logger.info('Yellow Master Reset')
        if self.EStopWindow.btnEStopYellowMasterReset.GetValue():
            self.EStopWindow.btnEStopYellowMasterReset.SetLabel('reseting') 
           # #print " send Bit 6 ---Reset"
            App.Yellow.Enable = 64
            self.EStopWindow.btnEStopClose.Enable(False)
        else:
           # #print " reset Bit 6 Reset"
            App.Yellow.Enable =0
        if not(self.EStopWindow.btnEStopGreenMasterReset.GetValue() or
            self.EStopWindow.btnEStopCyanMasterReset.GetValue() or
            self.EStopWindow.btnEStopYellowMasterReset.GetValue() or
            self.EStopWindow.btnEStopMagentaMasterReset.GetValue()):            
            self.EStopWindow.btnEStopClose.Enable(True)

        pass      
    def OnEStopYellowSlaveReset(self,evt):
        self.logger.info('Yellow Slave Reset')
        self.EStopWindow.btnEStopYellowSlaveReset.SetLabel('reseting')
        dlg=wx.MessageDialog(None,'Pls Cycle Activation Switch after closing this Dialog','Slave reset',wx.OK|wx.ICON_EXCLAMATION)
        result=dlg.ShowModal()
        dlg.Destroy        
        pass
    
    def OnEStopYellowNetReset(self,evt):
        self.logger.info('Yellow Net Reset')
        if self.EStopWindow.btnEStopYellowNetReset.GetValue():
            App.Yellow.EStopReset = 1
        pass
    def OnEStopGreenMasterReset(self,evt):
        self.logger.info('Green Master Reset')
        if self.EStopWindow.btnEStopGreenMasterReset.GetValue():
            self.EStopWindow.btnEStopGreenMasterReset.SetLabel('reseting')
           # #print " send Bit 6 ---Reset"
            App.Green.Enable = 64
            self.EStopWindow.btnEStopClose.Enable(False)
        else:
           # #print " reset Bit 6 Reset"
            App.Green.Enable =0
        if not(self.EStopWindow.btnEStopGreenMasterReset.GetValue() or
            self.EStopWindow.btnEStopCyanMasterReset.GetValue() or
            self.EStopWindow.btnEStopYellowMasterReset.GetValue() or
            self.EStopWindow.btnEStopMagentaMasterReset.GetValue()):            
            self.EStopWindow.btnEStopClose.Enable(True)

        pass
    def OnEStopGreenSlaveReset(self,evt):
        self.logger.info('Green Slave Reset')
        self.EStopWindow.btnEStopGreenSlaveReset.SetLabel('reseting')
        dlg=wx.MessageDialog(None,'Pls Cycle Activation Switch after closing this Dialog','Slave reset',wx.OK|wx.ICON_EXCLAMATION)
        result=dlg.ShowModal()
        dlg.Destroy          
        pass
    def OnEStopGreenNetReset(self,evt):
        self.logger.info('Green Net Reset')
        if self.EStopWindow.btnEStopGreenNetReset.GetValue():
            App.Green.EStopReset = 1
        pass
    def OnEStopCyanMasterReset(self,evt):
        self.logger.info('Cyan Master Reset')
        if self.EStopWindow.btnEStopCyanMasterReset.GetValue():
            self.EStopWindow.btnEStopCyanMasterReset.SetLabel('reseting')  
           # #print " send Bit 6 ---Reset"
            App.Cyan.Enable = 64
            self.EStopWindow.btnEStopClose.Enable(False)
        else:
           # #print " reset Bit 6 Reset"
            App.Cyan.Enable =0
        if not(self.EStopWindow.btnEStopGreenMasterReset.GetValue() or
            self.EStopWindow.btnEStopCyanMasterReset.GetValue() or
            self.EStopWindow.btnEStopYellowMasterReset.GetValue() or
            self.EStopWindow.btnEStopMagentaMasterReset.GetValue()):            
            self.EStopWindow.btnEStopClose.Enable(True)
        pass
    def OnEStopCyanSlaveReset(self,evt):
        self.logger.info('Cyan Slave Reset')
        self.EStopWindow.btnEStopCyanSlaveReset.SetLabel('reseting')
        dlg=wx.MessageDialog(None,'Pls Cycle Activation Switch after closing this Dialog','Slave reset',wx.OK|wx.ICON_EXCLAMATION)
        result=dlg.ShowModal()
        dlg.Destroy          
        pass
    def OnEStopCyanNetReset(self,evt):
        self.logger.info('Cyan Net Reset')
        if self.EStopWindow.btnEStopCyanNetReset.GetValue():
            App.Cyan.EStopReset = 1
        pass
    def OnEStopMagentaMasterReset(self,evt):
        self.logger.info('Magenta Master Reset')
        if self.EStopWindow.btnEStopMagentaMasterReset.GetValue():
            self.EStopWindow.btnEStopMagentaMasterReset.SetLabel('reseting')
           # #print " send Bit 6 ---Reset"
            App.Magenta.Enable = 64
            self.EStopWindow.btnEStopClose.Enable(False)
        else:
           # #print " reset Bit 6 Reset"
            App.Magenta.Enable =0
        if not(self.EStopWindow.btnEStopGreenMasterReset.GetValue() or
            self.EStopWindow.btnEStopCyanMasterReset.GetValue() or
            self.EStopWindow.btnEStopYellowMasterReset.GetValue() or
            self.EStopWindow.btnEStopMagentaMasterReset.GetValue()):            
            self.EStopWindow.btnEStopClose.Enable(True)
        pass
    def OnEStopMagentaSlaveReset(self,evt):
        self.logger.info('Magenta Slave Reset')
        self.EStopWindow.btnEStopMagentaSlaveReset.SetLabel('reseting')
        dlg=wx.MessageDialog(None,'Pls Cycle Activation Switch after closing this Dialog','Slave reset',wx.OK|wx.ICON_EXCLAMATION)
        result=dlg.ShowModal()
        dlg.Destroy          
        pass
    def OnEStopMagentaNetReset(self,evt):
        self.logger.info('Magenta Net Reset')
        if self.EStopWindow.btnEStopMagentaNetReset.GetValue():
            App.Magenta.EStopReset = 1
        pass
    def OnEStopClose(self,evt):
        self.logger.info('EStop Window Close')
        #print 'Sub EStop'
        taskMgr.remove("EStopTask")        
        self.EStopWindow.Close()
        pass

    def EStopTask(self,task):
        
        T1     = time.clock()
        self.EStopDiffT= T1-self.EStopT1Old
        self.EStopT1Old  = T1
        
        self.AchsenComunicate()
        self.EStopControlsUpdate()
        buttons=self.stick.GetButtonState()
        if (App.Yellow.Modus == 'recover' or 
            App.Green.Modus == 'recover' or
            App.Cyan.Modus == 'recover' or
            App.Magenta.Modus == 'recover'):
            
            self.SollPostoRopeLength()

            self.EStopSendCutPos()
            
            if self.EStopWindow.YellowDown ==1 or buttons & 8 or buttons & 32:
                self.YellowCreepTo  = 1
            else:
                self.YellowCreepTo  = 0
            if self.EStopWindow.GreenDown ==1 or buttons & 1 or buttons & 32:
                self.GreenCreepTo  = 1
            else:
                self.GreenCreepTo  = 0
            if self.EStopWindow.CyanDown ==1 or buttons & 4 or buttons & 32:
                self.CyanCreepTo  = 1
            else:
                self.CyanCreepTo  = 0
            if self.EStopWindow.MagentaDown ==1 or buttons & 2 or buttons & 32:
                self.MagentaCreepTo  = 1
            else:
                self.MagentaCreepTo  = 0
        else:
            self.YellowCreepTo  = 0
            self.GreenCreepTo  = 0
            self.CyanCreepTo  = 0
            self.MagentaCreepTo  = 0
            
        #print App.Yellow.EsNetwork
        if (abs(float(App.Yellow.EStopCutPos)-float(App.Yellow.PosIst)) < 0.005 and
            abs(float(App.Green.EStopCutPos)-float(App.Green.PosIst)) < 0.005 and
            abs(float(App.Cyan.EStopCutPos)-float(App.Cyan.PosIst)) < 0.005 and
            abs(float(App.Magenta.EStopCutPos)-float(App.Magenta.PosIst)) < 0.005 and
            App.Yellow.EsNetwork and 
            App.Green.EsNetwork and
            App.Cyan.EsNetwork and
            App.Magenta.EsNetwork):
            
            App.Yellow.ReSync = 1
            App.Green.ReSync = 1
            App.Cyan.ReSync = 1
            App.Magenta.ReSync = 1
            for i in range(10):
                self.AchsenComunicate()
            App.Yellow.ReSync = 0
            App.Green.ReSync = 0
            App.Cyan.ReSync = 0
            App.Magenta.ReSync = 0             

        return task.cont
    
    def EStopSendCutPos(self):
        #s = abs((self.stick.GetVPosition()-65535.0)/65535.0) 
        
        d = self.Decode.Decode(App.Yellow.Status)
        e = self.Decode.Decode(App.Green.Status)
        f = self.Decode.Decode(App.Cyan.Status)
        g = self.Decode.Decode(App.Magenta.Status)
        
        i ="%3.2f"
        
        #print 'Yellow    ' +str(float(App.Yellow.EStopCutPos)-float(App.Yellow.PosIst))
        #print 'Green     ' +str(float(App.Green.EStopCutPos)-float(App.Green.PosIst))
        #print 'Cyan      ' +str(float(App.Cyan.EStopCutPos)-float(App.Cyan.PosIst))
        #print 'Magenta   ' +str(float(App.Magenta.EStopCutPos)-float(App.Magenta.PosIst))
        if d[1][0][1] == "10" and self.YellowCreepTo  == 1:
            #App.Yellow.PosSoll = App.Yellow.EStopCutPos
            self.YellowRecoverCounter = self.YellowRecoverCounter +1
            ReducedSpeed = min(float(App.Yellow.SpeedMax)/10.0,0.25)

#2018-09-19 Anstatt wie bisher auf die letzte gesyncte IstPosition zum Zeitpunkt des Notaus (.EstopCutPos) zu fahren,
#           fahren wir jetzt auf die letzte gesyncte (.PosSoll)  die in EStopCutpos aus der SPS kommt
            
            App.Yellow.SpeedSoll =str(math.atan(10*(float(App.Yellow.EStopCutPos)-
                                   float(App.Yellow.PosIst)))/(math.pi/2) *
                                   ReducedSpeed)
     
            App.Yellow.PosSoll = str(float(App.Yellow.PosIst) + float(App.Yellow.SpeedSoll)* self.EStopDiffT)
            
            #App.Yellow.SpeedSoll="0.1"
            #App.Yellow.PosSoll = str(float(App.Yellow.PosIst) + 0.1* self.EStopDiffT)
                        
        else:
            self.YellowRecoverCounter = 0
            App.Yellow.SpeedSoll="0.0"
            App.Yellow.PosSoll = App.Yellow.PosIst
            
        #print 'Yellow Vel  : '+i%(float(App.Yellow.SpeedSoll))+' Yellow PosSoll  : '+i%(float(App.Yellow.PosSoll))

        
        if e[1][0][1] == "10" and self.GreenCreepTo  == 1:
            #App.Green.PosSoll = App.Green.EStopCutPos
            ReducedSpeed = min(float(App.Green.SpeedMax)/10.0,0.25)
            App.Green.SpeedSoll=str(math.atan(10*(float(App.Green.EStopCutPos)-
                                   float(App.Green.PosIst)))/(math.pi/2) *
                                   ReducedSpeed)
         
            App.Green.PosSoll = str(float(App.Green.PosIst) + float(App.Green.SpeedSoll)* self.EStopDiffT)
            #App.Green.SpeedSoll="0.1"
            #App.Green.PosSoll = App.Green.PosIst            
        else:
            self.GreenRecoverCounter = 0
            App.Green.SpeedSoll="0.0"
            App.Green.PosSoll = App.Green.PosIst
            
        #print 'Green Vel   : '+i%(float(App.Green.SpeedSoll))+' Green PosSoll   : '+i%(float(App.Green.PosSoll))       
        
        if f[1][0][1] == "10" and self.CyanCreepTo == 1:
            #App.Cyan.PosSoll = App.Cyan.EStopCutPos
            ReducedSpeed = min(float(App.Cyan.SpeedMax)/10.0,0.25)
            App.Cyan.SpeedSoll=str(math.atan(10*(float(App.Cyan.EStopCutPos)-
                                   float(App.Cyan.PosIst)))/(math.pi/2) *
                                   ReducedSpeed)
          
            
            App.Cyan.PosSoll = str(float(App.Cyan.PosIst) + float(App.Cyan.SpeedSoll)* self.EStopDiffT)
            #App.Cyan.SpeedSoll="0.1"
            #App.Cyan.PosSoll = str(float(App.Cyan.PosIst) + 0.1* self.EStopDiffT)            
        else:
            self.CyanRecoverCounter = 0
            App.Cyan.SpeedSoll="0.0"
            App.Cyan.PosSoll = App.Cyan.PosIst
            
        #print 'Cyan Vel    : '+i%(float(App.Cyan.SpeedSoll))+' Cyan PosSoll    : '+i%(float(App.Cyan.PosSoll)) 
        
        if g[1][0][1] == "10" and self.MagentaCreepTo == 1:
            #App.Magenta.PosSoll = App.Magenta.EStopCutPos
            ReducedSpeed = min(float(App.Magenta.SpeedMax)/10.0,0.25)
            App.Magenta.SpeedSoll=str(math.atan(10*(float(App.Magenta.EStopCutPos)-
                                   float(App.Magenta.PosIst)))/(math.pi/2) *
                                   ReducedSpeed)
         
            App.Magenta.PosSoll = str(float(App.Magenta.PosIst) + float(App.Magenta.SpeedSoll)* self.EStopDiffT)
            #App.Magenta.SpeedSoll="0.1"
            #App.Magenta.PosSoll = str(float(App.Magenta.PosIst) + 0.1* self.EStopDiffT)
        else:
            self.MagentaRecoverCounter = 0
            App.Magenta.SpeedSoll="0.0"
            App.Magenta.PosSoll = App.Magenta.PosIst
            

        #print 'Magenta Vel : '+i%(float(App.Magenta.SpeedSoll))+' Magenta PosSoll : '+i%(float(App.Magenta.PosSoll))             

        if (abs(float(App.Yellow.EStopCutPos)-float(App.Yellow.PosIst)) < 0.01 and
            abs(float(App.Green.EStopCutPos)-float(App.Green.PosIst)) < 0.01 and
            abs(float(App.Cyan.EStopCutPos)-float(App.Cyan.PosIst)) < 0.01 and
            abs(float(App.Magenta.EStopCutPos)-float(App.Magenta.PosIst)) < 0.01 and
            (self.YellowEStopResetOld == False) and
            (self.GreenEStopResetOld == False) and
            (self.CyanEStopResetOld == False) and
            (self.MagentaEStopResetOld == False)):
        

            App.Yellow.ReSync = 1
            App.Green.ReSync = 1
            App.Cyan.ReSync = 1
            App.Magenta.ReSync = 1
            for i in range(10):
                self.AchsenComunicate()
            App.Yellow.ReSync = 0
            App.Green.ReSync = 0
            App.Cyan.ReSync = 0
            App.Magenta.ReSync = 0
            
            App.Yellow.Modus ='r'
            App.Green.Modus ='r'
            App.Cyan.Modus ='r'
            App.Magenta.Modus ='r'
            
            self.EStopWindow.pnRecover.SetBackgroundColour(wx.Colour(192,192,192))
            self.EStopWindow.pnRecover.Refresh()
            self.YellowEStopResetOld = True
            self.GreenEStopResetOld = True
            self.CyanEStopResetOld = True
            self.MagentaEStopResetOld = True
            
        else:
            self.YellowEStopResetOld = False
            self.GreenEStopResetOld = False
            self.CyanEStopResetOld = False
            self.MagentaEStopResetOld = False
            pass
       
        

#--------------------------------------------------------------------------------
    
    def Shadow(self):
        self.logger.info('Initialising Shadow System')
        
        ##winprops = WindowProperties.size(1024,1024)
        winprops = WindowProperties.size(2048*2,2048*2)
        props = FrameBufferProperties()
        props.setRgbColor(1)
        props.setAlphaBits(1)
        props.setDepthBits(1)
        LBuffer = base.graphicsEngine.makeOutput(
            base.pipe, "offscreen buffer", -2,
            props, winprops,
            GraphicsPipe.BFRefuseWindow,
            base.win.getGsg(), base.win)                 
        if (LBuffer == None):
            self.t = addTitle('no Buffer')
            return                 
        Ldepthmap = Texture()
        LBuffer.addRenderTexture(Ldepthmap, GraphicsOutput.RTMBindOrCopy, GraphicsOutput.RTPDepthStencil)
        if (base.win.getGsg().getSupportsShadowFilter()):
            Ldepthmap.setMinfilter(Texture.FTShadow)
            Ldepthmap.setMagfilter(Texture.FTShadow)
            
        Lcolormap= Texture()
        LBuffer.addRenderTexture(Lcolormap, GraphicsOutput.RTMBindOrCopy, GraphicsOutput.RTPColor)
                    
        base.camLens.setNearFar(1.0,10000)
        base.camLens.setFov(75)
        
        self.LCam=base.makeCamera(LBuffer)
        self.LCam.node().setScene(render)        
        lens = OrthographicLens()
        lens.setNearFar(100.0,1000)
        lens.setFilmSize(300, 300)
        lens.setFov(60)
        self.LCam.node().setLens(lens)
 
        #self.LCam.node().setLens(lens)
        #self.LCam.node().getLens().setFov(60)
        self.LCam.setPos(0,0,500)
        self.LCam.lookAt(0,0,0)
        #self.LCam.node().getLens().setNearFar(10.,1000)
        #self.LCam.node().showFrustum()
        self.LCam.reparentTo(render)
        
        self.pushBias=0.4
        self.ambient=0.2
        
        
        render.setShaderInput('light',self.LCam)
        render.setShaderInput('Ldepthmap',Ldepthmap)
        render.setShaderInput('ambient',self.ambient,0,0,1.0)
        render.setShaderInput('texDisable',0,0,0,0)
        render.setShaderInput('scale',1,1,1,1)
        
        # Put a shader on the Light camera.
        lci = NodePath(PandaNode("Light Camera Initializer"))
        lci.setShader(Shader.load('caster.sha'))
        self.LCam.node().setInitialState(lci.getState())    
        # Put a shader on the Main camera. ------> Moved to Create3Views 
        # Some video cards have special hardware for shadow maps.
        # If the card has that, use it.  If not, use a different
        # shader that does not require hardware support.
        
        #mci = NodePath(PandaNode("Main Camera Initializer"))
        #if (base.win.getGsg().getSupportsShadowFilter()):
        #    mci.setShader(Shader.load('shadow.sha'))
        #else:
        #    mci.setShader(Shader.load('shadow-nosupport.sha'))
        #base.cam.node().setInitialState(mci.getState())
        #render.camPersANP.setInitialState(mci.getState())
        #render.setShaderInput('push',self.pushBias,self.pushBias,self.pushBias,0)

      
        self.logger.info('Shadow System initialised')
        return True
    
    def InitViewPoint(self): 
        self.logger.info('Initialising View Point')
        ##Verschiebe Camera disable mouse Notwendig da Mousetask alles zuruecksetzt
        base.disableMouse()

        self.logger.info('View Point Initialised')
    def Anzeige(self):   
        self.inst8 = addInstructions(0.95, "")
        self.inst7 = addInstructions(0.90, "") 
        self.inst6 = addInstructions(0.85, "")
        self.inst5 = addInstructions(0.80, "")
        self.inst4 = addInstructions(0.75, "")
        self.inst3 = addInstructions(0.70, "")        
        self.inst8.setText('8')
        self.inst7.setText('7')
        self.inst6.setText('6')
        self.inst5.setText('5')
        self.inst4.setText('4')       
        self.inst3.setText('3') 
        return True
    def InsertFieldOfPlay(self): 
        self.logger.info('Inserting Field Of Play')
        
        #Insert Field of Play
        self.environ = loader.loadModel(self.environment)
        #self.environ.setShaderInput("texDisable",1,1,1,1)
        #self.environ.setAntialias(AntialiasAttrib.MAuto)
        render.setAntialias(AntialiasAttrib.MMultisample)

        self.environ.reparentTo(render)
        self.KeyPosNode.reparentTo(self.environ)
    
        self.logger.info('Field Of Play Inserted')
        
        return True
        
    def SetupBorders(self):
        self.logger.info('Setting Up Borders')
        
       #Border Point 1
        self.BorderYellow = loader.loadModel("./models/BallSmall")
        self.BorderYellow.setShaderInput("texDisable",1,1,1,1)        
        self.BP1x = self.YellowX+self.YellowBorderX
        self.BP1y = self.YellowY-self.YellowBorderY
        self.BP1z = self.YellowZ-self.YellowBorderZ
        self.BorderYellow.setPos(self.BP1x,self.BP1y,self.BP1z)            
        self.BorderYellow.reparentTo(self.environ)        
       #Border Point 2
        self.BorderGreen = loader.loadModel("./models/BallSmall")
        self.BorderGreen.setShaderInput("texDisable",1,1,1,1)
        self.BP2x = self.GreenX+self.GreenBorderX
        self.BP2y = self.GreenY+self.GreenBorderY
        self.BP2z = self.GreenZ-self.GreenBorderZ
        self.BorderGreen.setPos(self.BP2x,self.BP2y,self.BP2z)            
        self.BorderGreen.reparentTo(self.environ)
       #Border Point 3
        self.BorderCyan = loader.loadModel("./models/BallSmall")
        self.BorderCyan.setShaderInput("texDisable",1,1,1,1)
        self.BP3x = self.CyanX-self.CyanBorderX
        self.BP3y = self.CyanY-self.CyanBorderY
        self.BP3z = self.CyanZ-self.CyanBorderZ
        self.BorderCyan.setPos(self.BP3x,self.BP3y,self.BP3z)            
        self.BorderCyan.reparentTo(self.environ)
       #Border Point 4
        self.BorderMagenta = loader.loadModel("./models/BallSmall")
        self.BorderMagenta.setShaderInput("texDisable",1,1,1,1)
        self.BP4x = self.MagentaX-self.MagentaBorderX
        self.BP4y = self.MagentaY+self.MagentaBorderY
        self.BP4z = self.MagentaZ-self.MagentaBorderZ 
        self.BorderMagenta.setPos(self.BP4x,self.BP4y,self.BP4z)            
        self.BorderMagenta.reparentTo(self.environ)

       #Plane 1-2
        self.cPlane1_2_a = CollisionPolygon(Point3(self.BP1x,self.BP1y,self.BP1z),
                                            Point3(self.BP2x,self.BP2y,self.BP2z),
                                            Point3(self.BP2x,self.BP2y,0),
                                            Point3(self.BP1x,self.BP1y,0))
       
        self.cNode3_a = CollisionNode('Wall1Collider_a')
        self.cNode3_a.addSolid(self.cPlane1_2_a)        
        self.Wall1_2_a = self.environ.attachNewNode(self.cNode3_a)
        self.Wall1_2_a.setCollideMask(BitMask32.allOff())
        #self.Wall1_2.node().setIntoCollideMask(BitMask32.bit(0))        
        #self.Wall1_2.node().setIntoCollideMask(BitMask32.bit(1))
        self.Wall1_2_a.show()

        self.cPlane1_2 = CollisionPlane(Plane(Point3(self.BP1x,self.BP1y,self.BP1z),
                                        Point3(self.BP2x,self.BP2y,self.BP2z),
                                        Point3((self.BP1x+(self.BP2x-self.BP1x)/2),(self.BP1y+(self.BP2y-self.BP1y)/2),0)))
                                          

        self.cNode3 = CollisionNode('Wall1Collider')
        self.cNode3.addSolid(self.cPlane1_2)        
        self.Wall1_2 = self.environ.attachNewNode(self.cNode3)
        self.Wall1_2.setCollideMask(BitMask32.allOff())
        self.Wall1_2.node().setIntoCollideMask(BitMask32.bit(0))        
        self.Wall1_2.node().setIntoCollideMask(BitMask32.bit(1))
        #self.Wall1_2.show()

       #Plane 1-3
        self.cPlane1_3_a = CollisionPolygon(Point3(self.BP1x,self.BP1y,self.BP1z),
                                            Point3(self.BP1x,self.BP1y,0),
                                            Point3(self.BP3x,self.BP3y,0),
                                            Point3(self.BP3x,self.BP3y,self.BP3z))

        self.cNode4_a = CollisionNode('Wall2Collider_a')
        self.cNode4_a.addSolid(self.cPlane1_3_a)        
        self.Wall1_3_a = self.environ.attachNewNode(self.cNode4_a)
        self.Wall1_3_a.setCollideMask(BitMask32.allOff())
        self.Wall1_3_a.show()         

        self.cPlane1_3 = CollisionPlane(Plane(Point3(self.BP3x,self.BP3y,self.BP3z),
                                              Point3(self.BP1x,self.BP1y,self.BP1z),
                                              Point3((self.BP1x+(self.BP3x-self.BP1x)/2),(self.BP1y+(self.BP3y-self.BP1y)/2),0)))
        
        self.cNode4 = CollisionNode('Wall2Collider')
        self.cNode4.addSolid(self.cPlane1_3)        
        self.Wall1_3 = self.environ.attachNewNode(self.cNode4)
        self.Wall1_3.setCollideMask(BitMask32.allOff())
        self.Wall1_3.node().setIntoCollideMask(BitMask32.bit(0))        
        self.Wall1_3.node().setIntoCollideMask(BitMask32.bit(1))
        #self.Wall1_3.show()        

       #Plane 3-4        
        self.cPlane3_4_a = CollisionPolygon(Point3(self.BP3x,self.BP3y,self.BP3z),
                                          Point3(self.BP3x,self.BP3y,0),
                                          Point3(self.BP4x,self.BP4y,0),
                                          Point3(self.BP4x,self.BP4y,self.BP4z)) 
        self.cNode5_a = CollisionNode('Wall3Collider_a')
        self.cNode5_a.addSolid(self.cPlane3_4_a)        
        self.Wall1_4_a= self.environ.attachNewNode(self.cNode5_a)
        self.Wall1_4_a.setCollideMask(BitMask32.allOff())
        self.Wall1_4_a.show()         

        self.cPlane3_4 = CollisionPlane(Plane(Point3(self.BP4x,self.BP4y,self.BP4z),
                                              Point3(self.BP3x,self.BP3y,self.BP3z),                                              
                                              Point3((self.BP3x+(self.BP4x-self.BP3x)/2),(self.BP3y+(self.BP4y-self.BP3y)/2),0)))

        self.cNode5 = CollisionNode('Wall3Collider')
        self.cNode5.addSolid(self.cPlane3_4)        
        self.Wall1_4 = self.environ.attachNewNode(self.cNode5)
        self.Wall1_4.setCollideMask(BitMask32.allOff())
        self.Wall1_4.node().setIntoCollideMask(BitMask32.bit(0))        
        self.Wall1_4.node().setIntoCollideMask(BitMask32.bit(1))
        #self.Wall1_4.show()         


       #Plane 2-4
        self.cPlane2_4_a = CollisionPolygon(Point3(self.BP4x,self.BP4y,self.BP4z),
                                          Point3(self.BP4x,self.BP4y,0),
                                          Point3(self.BP2x,self.BP2y,0),
                                          Point3(self.BP2x,self.BP2y,self.BP2z))

        self.cNode6_a = CollisionNode('Wall4Collider_a')
        self.cNode6_a.addSolid(self.cPlane2_4_a)        
        self.Wall2_4_a = self.environ.attachNewNode(self.cNode6_a)
        self.Wall2_4_a.setCollideMask(BitMask32.allOff())
        self.Wall2_4_a.show()         

        self.cPlane2_4 = CollisionPlane(Plane(Point3(self.BP2x,self.BP2y,self.BP2z),
                                              Point3(self.BP4x,self.BP4y,self.BP4z),
                                              Point3((self.BP2x+(self.BP2x-self.BP4x)/2),(self.BP2y+(self.BP2y-self.BP4y)/2),0)))

        self.cNode6 = CollisionNode('Wall4Collider')
        self.cNode6.addSolid(self.cPlane2_4)        
        self.Wall2_4 = self.environ.attachNewNode(self.cNode6)
        self.Wall2_4.setCollideMask(BitMask32.allOff())
        self.Wall2_4.node().setIntoCollideMask(BitMask32.bit(0))        
        self.Wall2_4.node().setIntoCollideMask(BitMask32.bit(1))
        #self.Wall2_4.show() 

       #Top
        self.cPlaneTop = CollisionPlane(Plane(Vec3 (0,0,-1),Point3(self.BP1x,self.BP1y,self.BP1z)))

        self.cNode7 = CollisionNode('Wall5Collider')
        self.cNode7.addSolid(self.cPlaneTop)        
        self.WallTop = self.environ.attachNewNode(self.cNode7)
        self.WallTop.setCollideMask(BitMask32.allOff())
        self.WallTop.node().setIntoCollideMask(BitMask32.bit(0))        
        self.WallTop.node().setIntoCollideMask(BitMask32.bit(1))
        #self.WallTop.show() 

       #Bottom 
        self.cPlaneBottom = CollisionPlane(Plane(Vec3(0,0,1),Point3(self.BP2x,self.BP2y,self.DefHeight)))

        self.cNode8 = CollisionNode('Wall6Collider')
        self.cNode8.addSolid(self.cPlaneBottom)        
        self.WallBottom = self.environ.attachNewNode(self.cNode8)
        self.WallBottom.setCollideMask(BitMask32.allOff())
        self.WallBottom.node().setIntoCollideMask(BitMask32.bit(0))        
        self.WallBottom.node().setIntoCollideMask(BitMask32.bit(1))
        self.WallBottom.show()
        
        self.logger.info('Borders Set Up')
        return True
    def SetupForceCollision(self):
        self.logger.info('Setting Up Force Collision')
        #self.RasterPrepare ()
        #self.Raster()
        #self.KraefterechnungPrepare()
        self.logger.info('Force Collision Set Up ')
    def ReorderSceneGraph(self):
        self.logger.info('Reordering Scene Graph')
        ###################################################################     
        ## Umordnen des SceneGraphs --Teilen in allg Nodes und CollisionNodes
        ####################################################################
        #Suche CollisionNodes als NodePathCollection
        self.barrierNodePathCollection=self.environ.findAllMatches("**/+CollisionNode")
        #Anzahl der CollisionNodes
        self.numbarrierNodePathCollection = self.barrierNodePathCollection.getNumPaths()
        # barrierNodePath als instanz of Node path
        self.barrierNodePath = NodePath
        # barrier als DummyNode root fuer die CollisionsNodes
        self.barrier = render.attachNewNode("barrier")
        for j in range(self.numbarrierNodePathCollection):
            self.barrierNodePath = self.barrierNodePathCollection.getPath(j)
            self.barrierNodePath.reparentTo(self.barrier)
        ### Arbeiten nicht mit BitMasks
        #Set Into Colide Mask der Hindernisse    
        self.barrier.node().setIntoCollideMask(BitMask32.bit(0))
        ### End Arbeiten nicht mit BitMasks
        self.barrier.show()
        ######################################################
        ## Fertig Umgeordnet
        ######################################################
        self.logger.info('Scene Graph Reordered ')
        return True
  # Collision Control March 2012
    def InsertCharacter(self):
        self.logger.info('Inserting Character')
        #self.CPosition = loader.loadModel("/../Corsair/3DSteuerung/PandaProgramm/models/ball")
        self.CPosition = loader.loadModel("./models//BallSmall")
        #self.CPosition.setShaderInput("texDisable",1,1,1,1)
        self.CPosition.setPos(self.PosX,self.PosY,self.PosZ)
        self.CPosition.reparentTo(self.environ)
        self.CPosition.setCollideMask(BitMask32.allOff())
    #++ Ray Collider als Projektion nach vorne
        self.cRay = CollisionRay(0,0,0,0,0,-1)
        self.cNode10 = CollisionNode('CollisionRay')
        self.cNode10.addSolid(self.cRay)
        self.RayCollider = self.CPosition.attachNewNode(self.cNode10)
        self.RayCollider.setCollideMask(BitMask32.allOff())
        self.RayCollider.node().setFromCollideMask(BitMask32.bit(1))        
        #self.RayCollider.show()
    #++ Sphere um die Kamera Herum     
        self.cSphere = CollisionSphere(0, 0, 0, 1.5) 
        self.cNode2 = CollisionNode('BallCollider')
        self.cNode2.addSolid(self.cSphere)       
        self.BallCollider = self.CPosition.attachNewNode(self.cNode2)
        self.BallCollider.setCollideMask(BitMask32.allOff())        
        self.BallCollider.node().setFromCollideMask(BitMask32.bit(1))
        self.BallCollider.show()
    #++ Sphere nach vorne geschoben um das Pendeln um die Wand zu verringern    
        self.cSphereB = CollisionSphere(0, 0, 0, 1.5) 
        self.cNode2B = CollisionNode('BallColliderB')
        self.cNode2B.addSolid(self.cSphereB)       
        self.BallColliderB = self.CPosition.attachNewNode(self.cNode2B)
        self.BallColliderB.setCollideMask(BitMask32.allOff())        
        self.BallColliderB.node().setFromCollideMask(BitMask32.bit(1))
        #self.BallColliderB.show() 
        
    #+++ Debug Kugel fuer follow path
        self.SollPosition = loader.loadModel("./models//ball2")
        self.SollPosition.setPos(self.YellowX,self.YellowY,self.YellowZ)        
        self.SollPosition.reparentTo(self.environ)
    #+++ Pfeil fuer EditPoints
        self.PfeilRed = loader.loadModel("./models//Pfeil1")
        self.PfeilRed.setTag("key","Red")
        self.PfeilRed.setTexture(self.texPfeilRed)
        self.PfeilRed.setPos(self.YellowX,self.YellowY,self.YellowZ)
        self.PfeilRed.setHpr(0,0,90)
        self.PfeilRed.setScale(self.ScaleReps*0.5)
        self.PfeilRed.reparentTo(self.environ)
        
        self.corner = aspect2d.attachNewNode("corner of screen")
        self.corner.setPos(-2, 0, -0.9)

        self.Yaxis = loader.loadModel("./models//Pfeil1")
        self.Yaxis.setTexture(self.texPfeilGreen)
        self.Yaxis.setHpr(0,-90,0)
        self.Yaxis.setScale(0.0125)
        self.Xaxis = loader.loadModel("./models//Pfeil1")
        self.Xaxis.setTexture(self.texPfeilRed)
        self.Xaxis.setHpr(0,0,90)
        self.Xaxis.setScale(0.0125)        
        self.Zaxis = loader.loadModel("./models//Pfeil1")
        self.Zaxis.setTexture(self.texPfeilBlue)
        self.Zaxis.setScale(0.0125)
        
       
        self.Xaxis.reparentTo(self.corner)
        self.Yaxis.reparentTo(self.corner)
        self.Zaxis.reparentTo(self.corner)
        #print 'Add Tripod'
        taskMgr.add(self.TripodTask,'TripodTask')
        
        #self.alight = AmbientLight('alight')
        #self.alight.setColor(VBase4(1, 1, 1, 1))
        #self.alnp = self.frame.p3dViewport.CamPersANP.attachNewNode(self.alight)
                
        #self.corner = self.frame.p3dViewport.CamPersANP.attachNewNode("corner of screen")
        #self.corner.setPos(-3, 10, -2)
        #self.axis = loader.loadModel("zup-axis")
        #self.axis.setDepthTest(False)
        #self.axis.setBin("fixed",0)
        #self.axis.setScale(0.08)
        #self.corner.setLight(self.alnp)
        #self.axis.reparentTo(self.corner)
        #self.axis.setCompass()        

        self.TorusRed = loader.loadModel("./models//Torus1")
        self.TorusRed.setTag("key","RedTorus")
        self.TorusRed.setTexture(self.texPfeilRed)
        self.TorusRed.setPos(self.YellowX,self.YellowY,self.YellowZ)
        self.TorusRed.setHpr(0,0,90)
        self.TorusRed.setScale(self.ScaleReps*0.5)
        self.TorusRed.reparentTo(self.environ)        
    
        self.PfeilGreen = loader.loadModel("./models//Pfeil1")
        self.PfeilGreen.setTexture(self.texPfeilGreen)
        self.PfeilGreen.setTag("key","Green")
        self.PfeilGreen.setPos(self.YellowX,self.YellowY,self.YellowZ)
        self.PfeilGreen.setHpr(0,-90,0)
        self.PfeilGreen.setScale(self.ScaleReps*0.5)
        self.PfeilGreen.reparentTo(self.environ)
        
        self.TorusGreen = loader.loadModel("./models//Torus1")
        self.TorusGreen.setTag("key","GreenTorus")
        self.TorusGreen.setTexture(self.texPfeilGreen)
        self.TorusGreen.setPos(self.YellowX,self.YellowY,self.YellowZ)
        self.TorusGreen.setHpr(0,-90,0)
        self.TorusGreen.setScale(self.ScaleReps*0.5)
        self.TorusGreen.reparentTo(self.environ)
        
        self.PfeilBlue = loader.loadModel("./models//Pfeil1")
        self.PfeilBlue.setTexture(self.texPfeilBlue)
        self.PfeilBlue.setTag("key","Blue")
        self.PfeilBlue.setPos(self.YellowX,self.YellowY,self.YellowZ)
        self.PfeilBlue.setHpr(90,0,0)
        self.PfeilBlue.setScale(self.ScaleReps*0.5)
        self.PfeilBlue.reparentTo(self.environ) 
        
        self.TorusBlue = loader.loadModel("./models//Torus1")
        self.TorusBlue.setTag("key","BlueTorus")
        self.TorusBlue.setTexture(self.texPfeilBlue)
        self.TorusBlue.setPos(self.YellowX,self.YellowY,self.YellowZ)
        self.TorusBlue.setHpr(90,0,0)
        self.TorusBlue.setScale(self.ScaleReps*0.5)
        self.TorusBlue.reparentTo(self.environ)        
        
        self.logger.info('Character Inserted')
        
        #End Insert Character
    def TripodTask(self,task):
        self.corner.setQuat(render.getQuat(self.frame.p3dViewport.CamPersANP))
        return task.cont
        
    def InsertRopes(self):
        self.logger.info('Inserting Ropes')            
        self.Rope1 = loader.loadModel("./models/seil2")
        self.Rope2 = loader.loadModel("./models/seil2")
        self.Rope3 = loader.loadModel("./models/seil2")
        self.Rope4 = loader.loadModel("./models/seil2")

        self.Rope1.setShaderOff()
        self.Rope2.setShaderOff()
        self.Rope3.setShaderOff()
        self.Rope4.setShaderOff()
        
        #self.Rope1.setShaderInput("texDisable",1,1,1,1)
        #self.Rope2.setShaderInput("texDisable",1,1,1,1)
        #self.Rope3.setShaderInput("texDisable",1,1,1,1)
        #self.Rope4.setShaderInput("texDisable",1,1,1,1)

        self.Rope1.reparentTo(self.environ)
        self.Rope2.reparentTo(self.environ)
        self.Rope3.reparentTo(self.environ)
        self.Rope4.reparentTo(self.environ)

        self.Rope1.setAntialias(AntialiasAttrib.MAuto)
        self.Rope2.setAntialias(AntialiasAttrib.MAuto)
        self.Rope3.setAntialias(AntialiasAttrib.MAuto)
        self.Rope4.setAntialias(AntialiasAttrib.MAuto)

        self.Rope1.setPosHprScale(self.YellowX,self.YellowY,self.YellowZ,0,0,0,0.5,0.5,0.5)
        self.Rope2.setPosHprScale(self.GreenX,self.GreenY,self.GreenZ,0,0,0,0.5,0.5,0.5)
        self.Rope3.setPosHprScale(self.CyanX,self.CyanY,self.CyanZ,0,0,0,0.5,0.5,0.5)
        self.Rope4.setPosHprScale(self.MagentaX,self.MagentaY,self.MagentaZ,0,0,0,0.5,0.5,0.5)
        
        self.YellowSegment = CollisionSegment(self.YellowX,self.YellowY,self.YellowZ,0,0,20)
        self.cNode11 = CollisionNode('YellowSegment')
        self.cNode11.addSolid(self.YellowSegment)
        self.YellowCollider = self.environ.attachNewNode(self.cNode11)
        self.YellowCollider.setCollideMask(BitMask32.allOff())
        self.YellowCollider.node().setFromCollideMask(BitMask32.bit(2))
        self.YellowCollider.node().setIntoCollideMask(BitMask32.bit(0))
        #self.YellowCollider.show()
        
        
        self.GreenSegment = CollisionSegment(self.GreenX,self.GreenY,self.GreenZ,0,0,20)
        self.cNode12 = CollisionNode('GreenSegment')
        self.cNode12.addSolid(self.GreenSegment)
        self.GreenCollider = self.environ.attachNewNode(self.cNode12)
        self.GreenCollider.setCollideMask(BitMask32.allOff())
        self.GreenCollider.node().setFromCollideMask(BitMask32.bit(2))
        self.GreenCollider.node().setIntoCollideMask(BitMask32.bit(0))
        #self.GreenCollider.show()
        
        self.CyanSegment = CollisionSegment(self.CyanX,self.CyanY,self.CyanZ,0,0,20)
        self.cNode13 = CollisionNode('CyanSegment')
        self.cNode13.addSolid(self.CyanSegment)
        self.CyanCollider = self.environ.attachNewNode(self.cNode13)
        self.CyanCollider.setCollideMask(BitMask32.allOff())
        self.CyanCollider.node().setFromCollideMask(BitMask32.bit(2))
        self.CyanCollider.node().setIntoCollideMask(BitMask32.bit(0))
        #self.CyanCollider.show()
        
        self.MagentaSegment = CollisionSegment(self.MagentaX,self.MagentaY,self.MagentaZ,0,0,20)
        self.cNode14 = CollisionNode('MagentaSegment')
        self.cNode14.addSolid(self.MagentaSegment)
        self.MagentaCollider = self.environ.attachNewNode(self.cNode14)
        self.MagentaCollider.setCollideMask(BitMask32.allOff())
        self.MagentaCollider.node().setFromCollideMask(BitMask32.bit(2))
        self.MagentaCollider.node().setIntoCollideMask(BitMask32.bit(0))
        #self.MagentaCollider.show()          
        self.logger.info('Ropes Inserted')        
        #End Insert Ropes
        return True
    def InsertPillars(self): 
        self.logger.info('Inserting Pillars')
        self.Pillar1 = loader.loadModel("./models/ZylinderYellow")
        self.Pillar2 = loader.loadModel("./models/ZylinderGruen")
        self.Pillar3 = loader.loadModel("./models/ZylinderBlau")
        self.Pillar4 = loader.loadModel("./models/ZylinderMagenta")

        self.Pillar1.reparentTo(self.environ)
        self.Pillar2.reparentTo(self.environ)
        self.Pillar3.reparentTo(self.environ)
        self.Pillar4.reparentTo(self.environ)

        self.Pillar1.setAntialias(AntialiasAttrib.MAuto)
        self.Pillar2.setAntialias(AntialiasAttrib.MAuto)
        self.Pillar3.setAntialias(AntialiasAttrib.MAuto)
        self.Pillar4.setAntialias(AntialiasAttrib.MAuto)

        self.Pillar1.setPosHprScale(self.YellowX,self.YellowY,self.YellowZ,0,0,0,0.2,0.2,self.YellowZ)
        self.Pillar2.setPosHprScale(self.GreenX,self.GreenY,self.GreenZ,0,0,0,0.2,0.2,self.GreenZ)
        self.Pillar3.setPosHprScale(self.CyanX,self.CyanY,self.CyanZ,0,0,0,0.2,0.2,self.CyanZ) 
        self.Pillar4.setPosHprScale(self.MagentaX,self.MagentaY,self.MagentaZ,0,0,0,0.2,0.2,self.MagentaZ)
        
        #self.terrain = GeoMipTerrain("mySimpleTerrain")
        #self.terrain.setHeightfield("Heightmap.png")
        #self.terrain.getRoot().setTexture(self.texStone)
        
        #terrain.setBruteforce(True)
        #EckenschwerpunktX = 1/4*(self.YellowX+self.GreenX+self.CyanX+self.MagentaX)
        #EckenschwerpunktY = 1/4*(self.YellowY+self.GreenY+self.CyanY+self.MagentaY)
        #self.terrain.getRoot().reparentTo(render)
        #self.terrain.getRoot().setSz(10)
        #self.terrain.getRoot().setSx(1)
        #self.terrain.getRoot().setSy(1)
        #self.terrain.getRoot().setPos(EckenschwerpunktX-128,EckenschwerpunktX-128,0)
        #self.terrain.generate()        

        self.logger.info('Pillars Inserted')
        #End Insert Pillars   
    def initJoystick(self):
        self.logger.info('Initialising Joystick')
        #Joystick auslesen und Umrechnungen vorbereiten
        self.stick = wx.Joystick()
        self.min0 = self.stick.GetXMin()
        self.max0 = self.stick.GetXMax()
        self.diff0 = float((self.max0-self.min0)/2)
        self.min1 = self.stick.GetYMin()
        self.max1 = self.stick.GetYMax()
        self.diff1 = float((self.max1-self.min1)/2)
        self.min2 = self.stick.GetRudderMin()
        self.max2 = self.stick.GetRudderMax()
        self.diff2 = float((self.max2-self.min2)/2)
        self.min3 = self.stick.GetZMin()
        self.max3 = self.stick.GetZMax()
        self.diff3 = float((self.max3-self.min3)/2)
        if self.diff0 == 0.0 or self.diff1 == 0.0 or self.diff2 == 0.0 or self.diff3 == 0.0:
            dlg = wx.MessageDialog(self.frame, ' Joystick configuration error',' Joystick configuration error!', wx.OK|wx.ICON_EXCLAMATION)
            self.logger.debug('No Joystick')
            if dlg.ShowModal() == wx.ID_OK:
                dlg.Destroy()        
        
        self.logger.info('Joystick Initialised')
    def initTraverser(self): 
        self.logger.info('Initialising Collision Traversers')
        base.cTrav = CollisionTraverser('Ball')
        # Collision Handler queue
        self.queue=CollisionHandlerQueue()
        #Kamera
        base.cTrav.addCollider(self.RayCollider,self.queue)
        base.cTrav.addCollider(self.BallCollider, self.queue)
        base.cTrav.addCollider(self.BallColliderB, self.queue)
        # Seile        
        base.cTrav.addCollider(self.YellowCollider, self.queue)
        base.cTrav.addCollider(self.GreenCollider, self.queue)        
        base.cTrav.addCollider(self.CyanCollider, self.queue)        
        base.cTrav.addCollider(self.MagentaCollider, self.queue)                
        #debug rendering
        #base.cTrav.showCollisions(render)        
        self.logger.info('Collision Traversers Initialised')
    def initMouseColider(self):
        self.logger.info('Initialising MouseCollider')
        #Since we are using collision detection to do picking, we set it up like
        #any other collision detection system with a traverser and a handler
        self.picker = CollisionTraverser()            #Make a traverser
        self.pq     = CollisionHandlerQueue()         #Make a handler
        #Make a collision node for our picker ray
        self.pickerNode = CollisionNode('mouseRay')
        #Attach that node to the camera since the ray will need to be positioned
        #relative to it
        #
        #self.pickerNP = camera.attachNewNode(self.pickerNode)
        self.pickerNP = self.frame.p3dViewport.CamPersANP.attachNewNode(self.pickerNode)
        self.pickerNP.setCollideMask(BitMask32.allOff())
        # ver 0 self.pickerNode.setFromCollideMask(BitMask32.bit(3))
        
        self.pickerNode.setFromCollideMask(BitMask32.allOff())
        self.pickerNode.setFromCollideMask(BitMask32.bit(3))        


        self.pickerRay = CollisionRay()               #Make our ray
        self.pickerNode.addSolid(self.pickerRay)      #Add it to the collision node
        #Register the ray as something that can cause collisions
        self.picker.addCollider(self.pickerNP, self.pq)
        self.picker.showCollisions(render)
        self.logger.info('Initialised MouseCollider ')

    def initCtrls(self):
        self.logger.info('Initialising Controls')
        self.TopPanel = xrc.XRCCTRL(self.frame,'TopPanel')
        self.BottomPanel = xrc.XRCCTRL(self.frame,'BottomPanel')
        self.LeftPanel = xrc.XRCCTRL(self.frame,'LeftPanel')
        self.RightPanel = xrc.XRCCTRL(self.frame,'RightPanel')

        self.ctrlPosX = xrc.XRCCTRL(self.TopPanel,'PosX')
        self.ctrlPosX.SetEditable( False )
        self.ctrlPosY = xrc.XRCCTRL(self.TopPanel,'PosY')
        self.ctrlPosY.SetEditable( False )
        self.ctrlPosZ = xrc.XRCCTRL(self.TopPanel,'PosZ')
        self.ctrlPosZ.SetEditable( False )
        self.ctrlPosF = xrc.XRCCTRL(self.TopPanel,'PosF')
        self.ctrlPosF.SetEditable( False )
        
        self.btStart = xrc.XRCCTRL(self.TopPanel,'Start')
        self.btStartBitmapLabel = self.btStart.GetBitmapLabel()
        self.btStartBitmapSelected = self.btStart.GetBitmapSelected()
        self.btStart.Enable(False)
        self.btPosSetup = xrc.XRCCTRL(self.TopPanel,'btPosSetup')
        self.btAxisSetup = xrc.XRCCTRL(self.TopPanel,'btAxisSetup')
        self.btWStatus = xrc.XRCCTRL(self.TopPanel,'WStatus')
        self.btYellowSetup = xrc.XRCCTRL(self.LeftPanel,'btnSetupYellow/NW')
        self.btGreenSetup = xrc.XRCCTRL(self.LeftPanel,'btnSetupGreen/SW')        
        self.btCyanSetup = xrc.XRCCTRL(self.RightPanel,'btnSetupCyan/NE') 
        self.btMagentaSetup = xrc.XRCCTRL(self.RightPanel,'btnSetupMagenta/SW')

               
        self.ctrlDiffT = xrc.XRCCTRL(self.TopPanel,'DiffT')
        self.ctrlDiffT.SetEditable( False )
        self.ctrlVelX = xrc.XRCCTRL(self.TopPanel,'VelX')
        self.ctrlVelX.SetEditable( False )
        self.ctrlVelY = xrc.XRCCTRL(self.TopPanel,'VelY')
        self.ctrlVelY.SetEditable( False )
        self.ctrlVelZ = xrc.XRCCTRL(self.TopPanel,'VelZ')
        self.ctrlVelZ.SetEditable( False )
        self.ctrlVelAbs = xrc.XRCCTRL(self.TopPanel,'VelAbs')
        self.ctrlVelAbs.SetEditable( False ) 

        self.ctrlaAcc = xrc.XRCCTRL(self.BottomPanel,'aAcc')
        self.ctrlaAcc.SetEditable(False)              
        self.ctrlaVel = xrc.XRCCTRL(self.BottomPanel,'aVel')
        self.ctrlaVel.SetEditable(False)
        self.ctrlmaxAcc = xrc.XRCCTRL(self.BottomPanel,'maxAcc')
        self.ctrlmaxAcc.SetValue(str(self.maxAcc))
        self.ctrlmaxAcc.SetEditable(False)              
        self.ctrlmaxVel = xrc.XRCCTRL(self.BottomPanel,'maxVel')
        self.ctrlmaxVel.SetValue(str(self.maxVel))
        self.ctrlmaxVel.SetEditable(False)
        self.KeyPointPanel = xrc.XRCCTRL(self.BottomPanel,'KeyPointPanel')
        self.btKeyPointSave = xrc.XRCCTRL(self.BottomPanel,'btKeyPointSave')
        self.btKeyPointLoad = xrc.XRCCTRL(self.BottomPanel,'btKeyPointLoad')
        
        self.PathPanel = xrc.XRCCTRL(self.BottomPanel,'PathPanel')
        self.btPosMode = xrc.XRCCTRL(self.BottomPanel,'btPosMode')
        self.btPathSave = xrc.XRCCTRL(self.BottomPanel,'btPathSave')
        self.btPathLoad = xrc.XRCCTRL(self.BottomPanel,'btPathLoad')
        self.btPathMode = xrc.XRCCTRL(self.BottomPanel,'btPathMode')
        self.btKeyPointLoad.Enable(False)
        self.btKeyPointSave.Enable(False)
        self.btPosMode.Enable(False)
        self.btPathLoad.Enable(False)
        self.btPathSave.Enable(False)
        self.btPathMode.Enable(False)
        self.listKeyPoints = xrc.XRCCTRL(self.BottomPanel,'listKeyPoints')
        self.listKeyPoints.Bind(wx.EVT_LIST_BEGIN_LABEL_EDIT, self.OnBeginLabelKeyPointListEdit)
        self.listKeyPoints.Bind(wx.EVT_LIST_END_LABEL_EDIT ,self.OnUpdateAfterListEdit)
        #self.listKeyPoints.DeleteAllColumns()
        #self.listKeyPoints.InsertColumn(0,'Description',format= wx.LIST_FORMAT_LEFT,width = 80)
        #self.listKeyPoints.InsertColumn(1,'Number',format= wx.LIST_FORMAT_CENTER,width = 55)
        #self.listKeyPoints.InsertColumn(2,'X-Coord',format= wx.LIST_FORMAT_CENTER,width = 60)
        #self.listKeyPoints.InsertColumn(3,'Y-Coord',format= wx.LIST_FORMAT_CENTER,width = 60)
        #self.listKeyPoints.InsertColumn(4,'Z-Coord',format= wx.LIST_FORMAT_CENTER,width = 60)
        #self.listKeyPoints.InsertColumn(5,'Time',format= wx.LIST_FORMAT_CENTER,width = 60)
        #self.listKeyPoints.InsertColumn(6,'Vx',format= wx.LIST_FORMAT_CENTER,width = 60)
        #self.listKeyPoints.InsertColumn(7,'Vy',format= wx.LIST_FORMAT_CENTER,width = 60)
        #self.listKeyPoints.InsertColumn(8,'Vz',format= wx.LIST_FORMAT_CENTER,width = 60)
        #self.listKeyPoints.InsertColumn(9,'VAbs',format= wx.LIST_FORMAT_CENTER,width = 60)
        
        
        self.listPaths = xrc.XRCCTRL(self.BottomPanel,'listPaths')
        self.listPaths.DeleteAllColumns()
        self.listPaths.InsertColumn(0,'Description',format= wx.LIST_FORMAT_LEFT,width = 75)
        self.listPaths.InsertColumn(1,'Vis',format= wx.LIST_FORMAT_CENTER,width = 30)
        self.listPaths.InsertColumn(2,'Number',format= wx.LIST_FORMAT_CENTER,width = 55)
        self.listPaths.InsertColumn(3,'X-Start',format= wx.LIST_FORMAT_CENTER,width = 55)
        self.listPaths.InsertColumn(4,'Y-Start',format= wx.LIST_FORMAT_CENTER,width = 55)
        self.listPaths.InsertColumn(5,'Z-Start',format= wx.LIST_FORMAT_CENTER,width = 55)
        self.listPaths.InsertColumn(6,'X-End',format= wx.LIST_FORMAT_CENTER,width = 55)
        self.listPaths.InsertColumn(7,'Y-End',format= wx.LIST_FORMAT_CENTER,width = 55)
        self.listPaths.InsertColumn(8,'Z-End',format= wx.LIST_FORMAT_CENTER,width = 55)
        self.listPaths.InsertColumn(9,'Length',format= wx.LIST_FORMAT_CENTER,width = 65)
        self.listPaths.InsertColumn(10,'Speed Desc.',format= wx.LIST_FORMAT_CENTER,width = 65)
        self.listPaths.InsertColumn(11,'Duration',format= wx.LIST_FORMAT_CENTER,width = 65)
        self.listPaths.Bind(wx.EVT_LIST_BEGIN_LABEL_EDIT, self.OnBeginLabelPathListEdit)
        self.listPaths.Bind(wx.EVT_LIST_END_LABEL_EDIT ,self.OnUpdateAfterPathEdit)        

        self.ctrlYellowName = xrc.XRCCTRL(self.LeftPanel,'txtYellowName')
        self.ctrlYellowName.SetEditable( False )
        self.ctrlYellowStatus = xrc.XRCCTRL(self.LeftPanel,'txtYellowStatus')
        self.ctrlYellowStatus.SetEditable( False )
        self.ctrlYellowVel = xrc.XRCCTRL(self.LeftPanel,'YellowVel')
        self.ctrlYellowVel.SetEditable( False )
        self.ctrlYellowForce = xrc.XRCCTRL(self.LeftPanel,'YellowForce')
        self.ctrlYellowForce.SetEditable( False )
        self.ctrlYellowLength = xrc.XRCCTRL(self.LeftPanel,'YellowLength')
        self.ctrlYellowLength.SetEditable( False )
        self.ctrlYellowIstForce = xrc.XRCCTRL(self.LeftPanel,'YellowIstForce')
        self.ctrlYellowIstForce.SetEditable( False )
        self.YellowForcePanel = xrc.XRCCTRL(self.LeftPanel,'YellowForcePanel')

        self.ctrlGreenName = xrc.XRCCTRL(self.LeftPanel,'txtGreenName')
        self.ctrlGreenName.SetEditable( False )
        self.ctrlGreenStatus = xrc.XRCCTRL(self.LeftPanel,'txtGreenStatus')
        self.ctrlGreenStatus.SetEditable( False )
        self.ctrlGreenVel = xrc.XRCCTRL(self.LeftPanel,'GreenVel')
        self.ctrlGreenVel.SetEditable( False )
        self.ctrlGreenForce = xrc.XRCCTRL(self.LeftPanel,'GreenForce')
        self.ctrlGreenForce.SetEditable( False )
        self.ctrlGreenLength = xrc.XRCCTRL(self.LeftPanel,'GreenLength')
        self.ctrlGreenLength.SetEditable( False )
        self.ctrlGreenIstForce = xrc.XRCCTRL(self.LeftPanel,'GreenIstForce')
        self.ctrlGreenIstForce.SetEditable( False )
        self.GreenForcePanel = xrc.XRCCTRL(self.LeftPanel,'GreenForcePanel')

        self.ctrlCyanName = xrc.XRCCTRL(self.RightPanel,'txtCyanName')
        self.ctrlCyanName.SetEditable( False )
        self.ctrlCyanStatus = xrc.XRCCTRL(self.RightPanel,'txtCyanStatus')
        self.ctrlCyanStatus.SetEditable( False )
        self.ctrlCyanVel = xrc.XRCCTRL(self.RightPanel,'CyanVel')
        self.ctrlCyanVel.SetEditable( False )
        self.ctrlCyanForce = xrc.XRCCTRL(self.RightPanel,'CyanForce')
        self.ctrlCyanForce.SetEditable( False )
        self.ctrlCyanLength = xrc.XRCCTRL(self.RightPanel,'CyanLength')
        self.ctrlCyanLength.SetEditable( False )
        self.ctrlCyanIstForce = xrc.XRCCTRL(self.RightPanel,'CyanIstForce')
        self.ctrlCyanIstForce.SetEditable( False )
        self.CyanForcePanel = xrc.XRCCTRL(self.RightPanel,'CyanForcePanel')        

        self.ctrlMagentaName = xrc.XRCCTRL(self.RightPanel,'txtMagentaName')
        self.ctrlMagentaName.SetEditable( False )
        self.ctrlMagentaStatus = xrc.XRCCTRL(self.RightPanel,'txtMagentaStatus') 
        self.ctrlMagentaStatus.SetEditable( False )
        self.ctrlMagentaVel = xrc.XRCCTRL(self.RightPanel,'MagentaVel')
        self.ctrlMagentaVel.SetEditable( False )
        self.ctrlMagentaForce = xrc.XRCCTRL(self.RightPanel,'MagentaForce')
        self.ctrlMagentaForce.SetEditable( False )
        self.ctrlMagentaLength = xrc.XRCCTRL(self.RightPanel,'MagentaLength')
        self.ctrlMagentaLength.SetEditable( False )
        self.ctrlMagentaIstForce = xrc.XRCCTRL(self.RightPanel,'MagentaIstForce')
        self.ctrlMagentaIstForce.SetEditable( False )
        self.MagentaForcePanel = xrc.XRCCTRL(self.RightPanel,'MagentaForcePanel')
        
        self.ctrlDefHeight = xrc.XRCCTRL(self.RightPanel,'DefHeight')
        self.ctrlDefHeight.SetValue(str(self.DefHeight) )
        self.ctrlDefHeight.SetEditable( False )
        self.btGetDefHeight = xrc.XRCCTRL(self.RightPanel,'btGetDefHeight')
        #self.btGetDefHeight.Enable(False)
        #self.ctrlspHeight = xrc.XRCCTRL(self.RightPanel,'spHeight')
        self.txtspHeight = xrc.XRCCTRL(self.RightPanel,'spHeight')
        #self.ctrlspHeight.Enable(False)
        self.ctrlActHeight = xrc.XRCCTRL(self.RightPanel,'ActHeight')
        self.ctrlActHeight.SetValue(str(self.ActHeight) )
        self.ctrlActHeight.SetEditable( False )
        self.btSetDefHeight = xrc.XRCCTRL(self.RightPanel,'btSetDefHeight')
        #self.ctrlSetDefHeight.SetEditable( False )
        
        self.InitMeters()

        self.logger.info('Controls Initialised')
        
    
    def OnBeginLabelPathListEdit(self,evt):
        evt.Veto()
        #Quik and Dirty Translation des Pfades ueber die Tabelle rechts unten deaktiviert
        #if evt.m_col == 0 or evt.m_col == 2 or evt.m_col == 3 or evt.m_col == 9 or evt.m_col == 10 or evt.m_col == 11 :
            #evt.Veto()
        #else:
            #evt.Skip()
            
    def OnBeginLabelKeyPointListEdit(self,evt):
        if evt.m_col == 1 or evt.m_col == 5 or evt.m_col == 6 or evt.m_col == 7 or evt.m_col == 8 :
            evt.Veto()
        else:
            evt.Skip()        
        
    def OnUpdateAfterPathEdit(self,evt):
        item = evt.m_itemIndex
        col = evt.m_col
        text = evt.GetText()
        self._HelperOnUpdateAfterPathEdit(item,col,text)
        
    def _HelperOnUpdateAfterPathEdit(self,item,col,text):

        OldPos = self.listPaths.GetItem(item,col).GetText()
        self.listPaths.SetStringItem(item,col,text)        
        Delta = float(OldPos) - float(text)
        Pos = self.PathModell[item].getPos()

        if col == 3 or col == 6:
            self.PathModell[item].setPos(Pos[0]-Delta,Pos[1],Pos[2])
            self.KeyPathDic[item][6]= self.PathModell[item].getTransform() 
        if col == 4 or col == 7:
            self.PathModell[item].setPos(Pos[0],Pos[1]-Delta,Pos[2])
            self.KeyPathDic[item][6]= self.PathModell[item].getTransform() 
        if col == 5 or col ==8:
            self.PathModell[item].setPos(Pos[0],Pos[1],Pos[2]-Delta)
            self.KeyPathDic[item][6]= self.PathModell[item].getTransform()         

        self.SavePaths('TempPaths.kpat')
        self.LoadPaths('TempPaths.kpat') 
        Pos = self.PathModell[item].getChild(0).getPos(render)
        self.listPaths.SetStringItem(item, 3, str('%2f'%Pos[0]))
        self.listPaths.SetStringItem(item, 4, str('%2f'%Pos[1]))
        self.listPaths.SetStringItem(item, 5, str('%2f'%Pos[2]))
        Pos = self.PathModell[item].getChild(2).getPos(render)
        self.listPaths.SetStringItem(item, 6, str('%2f'%Pos[0]))
        self.listPaths.SetStringItem(item, 7, str('%2f'%Pos[1]))
        self.listPaths.SetStringItem(item, 8, str('%2f'%Pos[2]))        
    
    def OnUpdateAfterListEdit(self,evt):
        item = evt.m_itemIndex
        col = evt.m_col
        text = evt.GetText()
        self._HelperOnUpdateAfterListEdit(item,col,text)
        
    def _HelperOnUpdateAfterListEdit(self,item,col,text):
        self.listKeyPoints.SetStringItem(item,col,text)
        self.SaveKeyPoints('TempKPos.kpos')
        self.LoadKeyPoints('TempKPos.kpos')        

        
  
# ************ Meters Beginn 
    def InitMeters(self):
        self.logger.info('Initialise Meters')
        #Yellow
        size =  self.YellowForcePanel.GetSize()
        self.Yellowbuffer = wx.EmptyBitmap(size.width,size.height)       
        self.dcYellowForcePanel = wx.BufferedDC(None, self.Yellowbuffer)
        self.cx= size.width/2
        self.cy= size.height/2
        self.dcYellowForcePanel.SetBrush(wx.Brush((187,187,187), wx.SOLID))
        self.dcYellowForcePanel.DrawRectangle(-1,-1,size.width+2,size.height+2)
        self.dcYellowForcePanel.SetBrush(wx.WHITE_BRUSH)
        self.dcYellowForcePanel.SetPen(wx.Pen((187,187,187),1))
        self.dcYellowForcePanel.DrawRoundedRectangle(0,0,size.width+1,size.height-4,5)
        #Green
        self.Greenbuffer = wx.EmptyBitmap(size.width,size.height)       
        self.dcGreenForcePanel = wx.BufferedDC(None, self.Greenbuffer)
        self.dcGreenForcePanel.SetBrush(wx.Brush((187,187,187), wx.SOLID))
        self.dcGreenForcePanel.DrawRectangle(-1,-1,size.width+2,size.height+2)
        self.dcGreenForcePanel.SetPen(wx.Pen((187,187,187),1))
        self.dcGreenForcePanel.SetBrush(wx.WHITE_BRUSH)
        self.dcGreenForcePanel.DrawRoundedRectangle(0,0,size.width+1,size.height-4,5)
        #Cyan
        self.Cyanbuffer = wx.EmptyBitmap(size.width,size.height)       
        self.dcCyanForcePanel = wx.BufferedDC(None, self.Cyanbuffer)
        self.dcCyanForcePanel.SetBrush(wx.Brush((187,187,187), wx.SOLID))
        self.dcCyanForcePanel.DrawRectangle(-1,-1,size.width+2,size.height+2)
        self.dcCyanForcePanel.SetPen(wx.Pen((187,187,187),1))
        self.dcCyanForcePanel.SetBrush(wx.WHITE_BRUSH)
        self.dcCyanForcePanel.DrawRoundedRectangle(0,0,size.width+1,size.height-4,5)
        #Magenta
        self.Magentabuffer = wx.EmptyBitmap(size.width,size.height)       
        self.dcMagentaForcePanel = wx.BufferedDC(None, self.Magentabuffer)
        self.dcMagentaForcePanel.SetBrush(wx.Brush((187,187,187), wx.SOLID))
        self.dcMagentaForcePanel.DrawRectangle(-1,-1,size.width+2,size.height+2)
        self.dcMagentaForcePanel.SetPen(wx.Pen((187,187,187),1))
        self.dcMagentaForcePanel.SetBrush(wx.WHITE_BRUSH)
        self.dcMagentaForcePanel.DrawRoundedRectangle(0,0,size.width+1,size.height-4,5) 
        
        self.logger.info('Meters initialised')


    def DrawYellowMeter(self,Data1,Data2):
        
        dcYellow = wx.ClientDC(self.YellowForcePanel)
        
        dw,dh = self.YellowForcePanel.GetSize()
        
        self.dcYellowForcePanel.SetPen(wx.Pen((255,255,255),1))
        self.dcYellowForcePanel.SetBrush(wx.Brush((255,255,255), wx.SOLID))        
        self.dcYellowForcePanel.DrawRectangle(4,0,self.cx-5,153)
        
        self.dcYellowForcePanel.SetPen(wx.Pen((255,255,255),1))
        self.dcYellowForcePanel.SetBrush(wx.Brush((255,255,255), wx.SOLID))        
        self.dcYellowForcePanel.DrawRectangle(self.cx+5,0,38,153)
        
        dcYellow.Blit(0,0,dw,dh,self.dcYellowForcePanel,0,0)
        
        if self.YellowHoldData1 < Data1:
            self.YellowHoldData1 = Data1
        self.dcYellowForcePanel.SetPen(wx.Pen((125,80,80),3))
        StartPoint = (-35/25.0)*self.YellowHoldData1+152
        self.dcYellowForcePanel.DrawLine(5,StartPoint,self.cx-5,StartPoint)
         
        self.YellowFalloff1 = self.YellowFalloff1+1
        if self.YellowFalloff1 > 20:
            self.YellowHoldData1 = self.YellowHoldData1-2
            self.YellowFalloff1 = 0
            
        if self.YellowHoldData2 < Data2:
            self.YellowHoldData2 = Data2
        self.dcYellowForcePanel.SetPen(wx.Pen((125,80,80),3))
        StartPoint = (-35/25.0)*self.YellowHoldData2+152
        self.dcYellowForcePanel.DrawLine(self.cx+5,StartPoint,38,StartPoint)
         
        self.YellowFalloff2 = self.YellowFalloff2+1
        if self.YellowFalloff2 > 10:
            self.YellowHoldData2 = self.YellowHoldData2-1
            self.YellowFalloff2 = 0
        
        if Data1 < 75:            
            self.dcYellowForcePanel.SetPen(wx.Pen((40,240,40),1))
            self.dcYellowForcePanel.SetBrush(wx.Brush((40,240,40), wx.SOLID))
            StartPoint = (-35/25.0)*Data1+152
            Height = 153 - StartPoint
            self.dcYellowForcePanel.DrawRectangle(5,StartPoint,self.cx-10,Height)            
        if Data1 >=75 and Data1 < 90:
            self.dcYellowForcePanel.SetPen(wx.Pen((40,240,40),1))
            self.dcYellowForcePanel.SetBrush(wx.Brush((40,240,40), wx.SOLID))
            self.dcYellowForcePanel.DrawRectangle(5,48,self.cx-10,105) 
            
            self.dcYellowForcePanel.SetPen(wx.Pen((240,240,40),1))
            self.dcYellowForcePanel.SetBrush(wx.Brush((240,240,40), wx.SOLID))
            StartPoint = (-35/25.0)*Data1+152
            Height = 153 - StartPoint - 104
            self.dcYellowForcePanel.DrawRectangle(5,StartPoint,self.cx-10,Height)            
        if Data1 >=90:
            self.dcYellowForcePanel.SetPen(wx.Pen((40,240,40),1))
            self.dcYellowForcePanel.SetBrush(wx.Brush((40,240,40), wx.SOLID))
            self.dcYellowForcePanel.DrawRectangle(5,48,self.cx-10,105) 
            
            self.dcYellowForcePanel.SetPen(wx.Pen((240,240,40),1))
            self.dcYellowForcePanel.SetBrush(wx.Brush((240,240,40), wx.SOLID))
            StartPoint = 27
            Height = 153 - StartPoint - 104
            self.dcYellowForcePanel.DrawRectangle(5,StartPoint,self.cx-10,Height)
            
            self.dcYellowForcePanel.SetPen(wx.Pen((240,40,40),1))
            self.dcYellowForcePanel.SetBrush(wx.Brush((240,40,40), wx.SOLID))
            StartPoint = (-35/25.0)*Data1+152
            Height = 153 - StartPoint - 104 -22
            self.dcYellowForcePanel.DrawRectangle(5,StartPoint,self.cx-10,Height)
            
        if Data2 < 75:            
            self.dcYellowForcePanel.SetPen(wx.Pen((40,240,40),1))
            self.dcYellowForcePanel.SetBrush(wx.Brush((40,240,40), wx.SOLID))
            StartPoint = (-35/25.0)*Data2+152
            Height = 153 - StartPoint
            self.dcYellowForcePanel.DrawRectangle(self.cx+5,StartPoint,self.cx-10,Height)
            
        if Data2 >=75 and Data2 < 90:
            self.dcYellowForcePanel.SetPen(wx.Pen((40,240,40),1))
            self.dcYellowForcePanel.SetBrush(wx.Brush((40,240,40), wx.SOLID))
            self.dcYellowForcePanel.DrawRectangle(self.cx+5,48,self.cx-10,105) 
            
            self.dcYellowForcePanel.SetPen(wx.Pen((240,240,40),1))
            self.dcYellowForcePanel.SetBrush(wx.Brush((240,240,40), wx.SOLID))
            StartPoint = (-35/25.0)*Data2+152
            Height = 153 - StartPoint - 104
            self.dcYellowForcePanel.DrawRectangle(self.cx+5,StartPoint,self.cx-10,Height)
            
        if Data2 >=90:
            self.dcYellowForcePanel.SetPen(wx.Pen((40,240,40),1))
            self.dcYellowForcePanel.SetBrush(wx.Brush((40,240,40), wx.SOLID))
            self.dcYellowForcePanel.DrawRectangle(self.cx+5,48,self.cx-10,105) 
            
            self.dcYellowForcePanel.SetPen(wx.Pen((240,240,40),1))
            self.dcYellowForcePanel.SetBrush(wx.Brush((240,240,40), wx.SOLID))
            StartPoint = 27
            Height = 153 - StartPoint - 104
            self.dcYellowForcePanel.DrawRectangle(self.cx+5,StartPoint,self.cx-10,Height)
            
            self.dcYellowForcePanel.SetPen(wx.Pen((240,40,40),1))
            self.dcYellowForcePanel.SetBrush(wx.Brush((240,40,40), wx.SOLID))
            StartPoint = (-35/25.0)*Data2+152
            Height = 153 - StartPoint - 104 -22
            self.dcYellowForcePanel.DrawRectangle(self.cx+5,StartPoint,self.cx-10,Height)
            
        self.dcYellowForcePanel.SetPen(wx.Pen('black',1))
        self.dcYellowForcePanel.DrawLine(5,0,dw-4,0)
        self.dcYellowForcePanel.DrawLine(self.cx,0,self.cx,dh-5)
        self.dcYellowForcePanel.DrawLine(5,dh-5,dw-4,dh-5)
        self.dcYellowForcePanel.DrawLine(self.cx-15,(0*14)+12,self.cx+16,(0*14)+12)        
        self.dcYellowForcePanel.DrawLine(self.cx-5,(1*14)+12,self.cx+6,(1*14)+12)
        self.dcYellowForcePanel.DrawLine(self.cx-5,(2*14)+12,self.cx+6,(2*14)+12)        
        self.dcYellowForcePanel.DrawLine(self.cx-5,(3*14)+12,self.cx+6,(3*14)+12)        
        self.dcYellowForcePanel.DrawLine(self.cx-5,(4*14)+12,self.cx+6,(4*14)+12)        
        self.dcYellowForcePanel.DrawLine(self.cx-15,(5*14)+12,self.cx+16,(5*14)+12)        
        self.dcYellowForcePanel.DrawLine(self.cx-5,(6*14)+12,self.cx+6,(6*14)+12)        
        self.dcYellowForcePanel.DrawLine(self.cx-5,(7*14)+12,self.cx+6,(7*14)+12)
        self.dcYellowForcePanel.DrawLine(self.cx-5,(8*14)+12,self.cx+6,(8*14)+12)        
        self.dcYellowForcePanel.DrawLine(self.cx-5,(9*14)+12,self.cx+6,(9*14)+12)        
        self.dcYellowForcePanel.DrawLine(self.cx-2,(0*14)+6,self.cx+3,(0*14)+6)        
        self.dcYellowForcePanel.DrawLine(self.cx-2,(1*14)+6,self.cx+3,(1*14)+6)
        self.dcYellowForcePanel.DrawLine(self.cx-2,(2*14)+6,self.cx+3,(2*14)+6)        
        self.dcYellowForcePanel.DrawLine(self.cx-2,(3*14)+6,self.cx+3,(3*14)+6)        
        self.dcYellowForcePanel.DrawLine(self.cx-2,(4*14)+6,self.cx+3,(4*14)+6)        
        self.dcYellowForcePanel.DrawLine(self.cx-2,(5*14)+6,self.cx+3,(5*14)+6)        
        self.dcYellowForcePanel.DrawLine(self.cx-2,(6*14)+6,self.cx+3,(6*14)+6)        
        self.dcYellowForcePanel.DrawLine(self.cx-2,(7*14)+6,self.cx+3,(7*14)+6)
        self.dcYellowForcePanel.DrawLine(self.cx-2,(8*14)+6,self.cx+3,(8*14)+6)        
        self.dcYellowForcePanel.DrawLine(self.cx-2,(9*14)+6,self.cx+3,(9*14)+6)      
        self.dcYellowForcePanel.DrawLine(self.cx-2,(10*14)+6,self.cx+3,(10*14)+6)        
        
        
        dcYellow.Blit(0,0,dw,dh,self.dcYellowForcePanel,0,0)

    def DrawGreenMeter(self,Data1,Data2):
        
        dcGreen = wx.ClientDC(self.GreenForcePanel)
        
        dw,dh = self.GreenForcePanel.GetSize()
        
        self.dcGreenForcePanel.SetPen(wx.Pen((255,255,255),1))
        self.dcGreenForcePanel.SetBrush(wx.Brush((255,255,255), wx.SOLID))        
        self.dcGreenForcePanel.DrawRectangle(4,0,self.cx-5,153)
        
        self.dcGreenForcePanel.SetPen(wx.Pen((255,255,255),1))
        self.dcGreenForcePanel.SetBrush(wx.Brush((255,255,255), wx.SOLID))        
        self.dcGreenForcePanel.DrawRectangle(self.cx+5,0,38,153)
        
        dcGreen.Blit(0,0,dw,dh,self.dcYellowForcePanel,0,0)
        
        if self.GreenHoldData1 < Data1:
            self.GreenHoldData1 = Data1
        self.dcGreenForcePanel.SetPen(wx.Pen((125,80,80),3))
        StartPoint = (-35/25.0)*self.GreenHoldData1+152
        self.dcGreenForcePanel.DrawLine(5,StartPoint,self.cx-5,StartPoint)
         
        self.GreenFalloff1 = self.GreenFalloff1+1
        if self.GreenFalloff1 > 20:
            self.GreenHoldData1 = self.GreenHoldData1-2
            self.GreenFalloff1 = 0
            
        if self.GreenHoldData2 < Data2:
            self.GreenHoldData2 = Data2
        self.dcGreenForcePanel.SetPen(wx.Pen((125,80,80),3))
        StartPoint = (-35/25.0)*self.GreenHoldData2+152
        self.dcGreenForcePanel.DrawLine(self.cx+5,StartPoint,38,StartPoint)
         
        self.GreenFalloff2 = self.GreenFalloff2+1
        if self.GreenFalloff2 > 20:
            self.GreenHoldData2 = self.GreenHoldData2-2
            self.GreenFalloff2 = 0
        
        if Data1 < 75:            
            self.dcGreenForcePanel.SetPen(wx.Pen((40,240,40),1))
            self.dcGreenForcePanel.SetBrush(wx.Brush((40,240,40), wx.SOLID))
            StartPoint = (-35/25.0)*Data1+152
            Height = 153 - StartPoint
            self.dcGreenForcePanel.DrawRectangle(5,StartPoint,self.cx-10,Height)            
        if Data1 >=75 and Data1 < 90:
            self.dcGreenForcePanel.SetPen(wx.Pen((40,240,40),1))
            self.dcGreenForcePanel.SetBrush(wx.Brush((40,240,40), wx.SOLID))
            self.dcGreenForcePanel.DrawRectangle(5,48,self.cx-10,105) 
            
            self.dcGreenForcePanel.SetPen(wx.Pen((240,240,40),1))
            self.dcGreenForcePanel.SetBrush(wx.Brush((240,240,40), wx.SOLID))
            StartPoint = (-35/25.0)*Data1+152
            Height = 153 - StartPoint - 104
            self.dcGreenForcePanel.DrawRectangle(5,StartPoint,self.cx-10,Height)            
        if Data1 >=90:
            self.dcGreenForcePanel.SetPen(wx.Pen((40,240,40),1))
            self.dcGreenForcePanel.SetBrush(wx.Brush((40,240,40), wx.SOLID))
            self.dcGreenForcePanel.DrawRectangle(5,48,self.cx-10,105) 
            
            self.dcGreenForcePanel.SetPen(wx.Pen((240,240,40),1))
            self.dcGreenForcePanel.SetBrush(wx.Brush((240,240,40), wx.SOLID))
            StartPoint = 27
            Height = 153 - StartPoint - 104
            self.dcGreenForcePanel.DrawRectangle(5,StartPoint,self.cx-10,Height)
            
            self.dcGreenForcePanel.SetPen(wx.Pen((240,40,40),1))
            self.dcGreenForcePanel.SetBrush(wx.Brush((240,40,40), wx.SOLID))
            StartPoint = (-35/25.0)*Data1+152
            Height = 153 - StartPoint - 104 -22
            self.dcGreenForcePanel.DrawRectangle(5,StartPoint,self.cx-10,Height)
            
        if Data2 < 75:            
            self.dcGreenForcePanel.SetPen(wx.Pen((40,240,40),1))
            self.dcGreenForcePanel.SetBrush(wx.Brush((40,240,40), wx.SOLID))
            StartPoint = (-35/25.0)*Data2+152
            Height = 153 - StartPoint
            self.dcGreenForcePanel.DrawRectangle(self.cx+5,StartPoint,self.cx-10,Height)
            
        if Data2 >=75 and Data2 < 90:
            self.dcGreenForcePanel.SetPen(wx.Pen((40,240,40),1))
            self.dcGreenForcePanel.SetBrush(wx.Brush((40,240,40), wx.SOLID))
            self.dcGreenForcePanel.DrawRectangle(self.cx+5,48,self.cx-10,105) 
            
            self.dcGreenForcePanel.SetPen(wx.Pen((240,240,40),1))
            self.dcGreenForcePanel.SetBrush(wx.Brush((240,240,40), wx.SOLID))
            StartPoint = (-35/25.0)*Data2+152
            Height = 153 - StartPoint - 104
            self.dcGreenForcePanel.DrawRectangle(self.cx+5,StartPoint,self.cx-10,Height)
            
        if Data2 >=90:
            self.dcGreenForcePanel.SetPen(wx.Pen((40,240,40),1))
            self.dcGreenForcePanel.SetBrush(wx.Brush((40,240,40), wx.SOLID))
            self.dcGreenForcePanel.DrawRectangle(self.cx+5,48,self.cx-10,105) 
            
            self.dcGreenForcePanel.SetPen(wx.Pen((240,240,40),1))
            self.dcGreenForcePanel.SetBrush(wx.Brush((240,240,40), wx.SOLID))
            StartPoint = 27
            Height = 153 - StartPoint - 104
            self.dcGreenForcePanel.DrawRectangle(self.cx+5,StartPoint,self.cx-10,Height)
            
            self.dcGreenForcePanel.SetPen(wx.Pen((240,40,40),1))
            self.dcGreenForcePanel.SetBrush(wx.Brush((240,40,40), wx.SOLID))
            StartPoint = (-35/25.0)*Data2+152
            Height = 153 - StartPoint - 104 -22
            self.dcGreenForcePanel.DrawRectangle(self.cx+5,StartPoint,self.cx-10,Height)
            
        self.dcGreenForcePanel.SetPen(wx.Pen('black',1))
        self.dcGreenForcePanel.DrawLine(5,0,dw-4,0)
        self.dcGreenForcePanel.DrawLine(self.cx,0,self.cx,dh-5)
        self.dcGreenForcePanel.DrawLine(5,dh-5,dw-4,dh-5)
        self.dcGreenForcePanel.DrawLine(self.cx-15,(0*14)+12,self.cx+16,(0*14)+12)        
        self.dcGreenForcePanel.DrawLine(self.cx-5,(1*14)+12,self.cx+6,(1*14)+12)
        self.dcGreenForcePanel.DrawLine(self.cx-5,(2*14)+12,self.cx+6,(2*14)+12)        
        self.dcGreenForcePanel.DrawLine(self.cx-5,(3*14)+12,self.cx+6,(3*14)+12)        
        self.dcGreenForcePanel.DrawLine(self.cx-5,(4*14)+12,self.cx+6,(4*14)+12)        
        self.dcGreenForcePanel.DrawLine(self.cx-15,(5*14)+12,self.cx+16,(5*14)+12)        
        self.dcGreenForcePanel.DrawLine(self.cx-5,(6*14)+12,self.cx+6,(6*14)+12)        
        self.dcGreenForcePanel.DrawLine(self.cx-5,(7*14)+12,self.cx+6,(7*14)+12)
        self.dcGreenForcePanel.DrawLine(self.cx-5,(8*14)+12,self.cx+6,(8*14)+12)        
        self.dcGreenForcePanel.DrawLine(self.cx-5,(9*14)+12,self.cx+6,(9*14)+12)        
        self.dcGreenForcePanel.DrawLine(self.cx-2,(0*14)+6,self.cx+3,(0*14)+6)        
        self.dcGreenForcePanel.DrawLine(self.cx-2,(1*14)+6,self.cx+3,(1*14)+6)
        self.dcGreenForcePanel.DrawLine(self.cx-2,(2*14)+6,self.cx+3,(2*14)+6)        
        self.dcGreenForcePanel.DrawLine(self.cx-2,(3*14)+6,self.cx+3,(3*14)+6)        
        self.dcGreenForcePanel.DrawLine(self.cx-2,(4*14)+6,self.cx+3,(4*14)+6)        
        self.dcGreenForcePanel.DrawLine(self.cx-2,(5*14)+6,self.cx+3,(5*14)+6)        
        self.dcGreenForcePanel.DrawLine(self.cx-2,(6*14)+6,self.cx+3,(6*14)+6)        
        self.dcGreenForcePanel.DrawLine(self.cx-2,(7*14)+6,self.cx+3,(7*14)+6)
        self.dcGreenForcePanel.DrawLine(self.cx-2,(8*14)+6,self.cx+3,(8*14)+6)        
        self.dcGreenForcePanel.DrawLine(self.cx-2,(9*14)+6,self.cx+3,(9*14)+6)      
        self.dcGreenForcePanel.DrawLine(self.cx-2,(10*14)+6,self.cx+3,(10*14)+6)        
        
        
        dcGreen.Blit(0,0,dw,dh,self.dcGreenForcePanel,0,0)
        
        
    def DrawCyanMeter(self,Data1,Data2):
        
        dcCyan = wx.ClientDC(self.CyanForcePanel)
        
        dw,dh = self.CyanForcePanel.GetSize()
        
        self.dcCyanForcePanel.SetPen(wx.Pen((255,255,255),1))
        self.dcCyanForcePanel.SetBrush(wx.Brush((255,255,255), wx.SOLID))        
        self.dcCyanForcePanel.DrawRectangle(4,0,self.cx-5,153)
        
        self.dcCyanForcePanel.SetPen(wx.Pen((255,255,255),1))
        self.dcCyanForcePanel.SetBrush(wx.Brush((255,255,255), wx.SOLID))        
        self.dcCyanForcePanel.DrawRectangle(self.cx+5,0,38,153)
        
        dcCyan.Blit(0,0,dw,dh,self.dcCyanForcePanel,0,0)
        
        if self.CyanHoldData1 < Data1:
            self.CyanHoldData1 = Data1
        self.dcCyanForcePanel.SetPen(wx.Pen((125,80,80),3))
        StartPoint = (-35/25.0)*self.CyanHoldData1+152
        self.dcCyanForcePanel.DrawLine(5,StartPoint,self.cx-5,StartPoint)
         
        self.CyanFalloff1 = self.CyanFalloff1+1
        if self.CyanFalloff1 > 20:
            self.CyanHoldData1 = self.CyanHoldData1-2
            self.CyanFalloff1 = 0
            
        if self.CyanHoldData2 < Data2:
            self.CyanHoldData2 = Data2
        self.dcCyanForcePanel.SetPen(wx.Pen((125,80,80),3))
        StartPoint = (-35/25.0)*self.CyanHoldData2+152
        self.dcCyanForcePanel.DrawLine(self.cx+5,StartPoint,38,StartPoint)
         
        self.CyanFalloff2 = self.CyanFalloff2+1
        if self.CyanFalloff2 > 20:
            self.CyanHoldData2 = self.CyanHoldData2-2
            self.CyanFalloff2 = 0
        
        if Data1 < 75:            
            self.dcCyanForcePanel.SetPen(wx.Pen((40,240,40),1))
            self.dcCyanForcePanel.SetBrush(wx.Brush((40,240,40), wx.SOLID))
            StartPoint = (-35/25.0)*Data1+152
            Height = 153 - StartPoint
            self.dcCyanForcePanel.DrawRectangle(5,StartPoint,self.cx-10,Height)            
        if Data1 >=75 and Data1 < 90:
            self.dcCyanForcePanel.SetPen(wx.Pen((40,240,40),1))
            self.dcCyanForcePanel.SetBrush(wx.Brush((40,240,40), wx.SOLID))
            self.dcCyanForcePanel.DrawRectangle(5,48,self.cx-10,105) 
            
            self.dcCyanForcePanel.SetPen(wx.Pen((240,240,40),1))
            self.dcCyanForcePanel.SetBrush(wx.Brush((240,240,40), wx.SOLID))
            StartPoint = (-35/25.0)*Data1+152
            Height = 153 - StartPoint - 104
            self.dcCyanForcePanel.DrawRectangle(5,StartPoint,self.cx-10,Height)            
        if Data1 >=90:
            self.dcCyanForcePanel.SetPen(wx.Pen((40,240,40),1))
            self.dcCyanForcePanel.SetBrush(wx.Brush((40,240,40), wx.SOLID))
            self.dcCyanForcePanel.DrawRectangle(5,48,self.cx-10,105) 
            
            self.dcCyanForcePanel.SetPen(wx.Pen((240,240,40),1))
            self.dcCyanForcePanel.SetBrush(wx.Brush((240,240,40), wx.SOLID))
            StartPoint = 27
            Height = 153 - StartPoint - 104
            self.dcCyanForcePanel.DrawRectangle(5,StartPoint,self.cx-10,Height)
            
            self.dcCyanForcePanel.SetPen(wx.Pen((240,40,40),1))
            self.dcCyanForcePanel.SetBrush(wx.Brush((240,40,40), wx.SOLID))
            StartPoint = (-35/25.0)*Data1+152
            Height = 153 - StartPoint - 104 -22
            self.dcCyanForcePanel.DrawRectangle(5,StartPoint,self.cx-10,Height)
            
        if Data2 < 75:            
            self.dcCyanForcePanel.SetPen(wx.Pen((40,240,40),1))
            self.dcCyanForcePanel.SetBrush(wx.Brush((40,240,40), wx.SOLID))
            StartPoint = (-35/25.0)*Data2+152
            Height = 153 - StartPoint
            self.dcCyanForcePanel.DrawRectangle(self.cx+5,StartPoint,self.cx-10,Height)
            
        if Data2 >=75 and Data2 < 90:
            self.dcCyanForcePanel.SetPen(wx.Pen((40,240,40),1))
            self.dcCyanForcePanel.SetBrush(wx.Brush((40,240,40), wx.SOLID))
            self.dcCyanForcePanel.DrawRectangle(self.cx+5,48,self.cx-10,105) 
            
            self.dcCyanForcePanel.SetPen(wx.Pen((240,240,40),1))
            self.dcCyanForcePanel.SetBrush(wx.Brush((240,240,40), wx.SOLID))
            StartPoint = (-35/25.0)*Data2+152
            Height = 153 - StartPoint - 104
            self.dcCyanForcePanel.DrawRectangle(self.cx+5,StartPoint,self.cx-10,Height)
            
        if Data2 >=90:
            self.dcCyanForcePanel.SetPen(wx.Pen((40,240,40),1))
            self.dcCyanForcePanel.SetBrush(wx.Brush((40,240,40), wx.SOLID))
            self.dcCyanForcePanel.DrawRectangle(self.cx+5,48,self.cx-10,105) 
            
            self.dcCyanForcePanel.SetPen(wx.Pen((240,240,40),1))
            self.dcCyanForcePanel.SetBrush(wx.Brush((240,240,40), wx.SOLID))
            StartPoint = 27
            Height = 153 - StartPoint - 104
            self.dcCyanForcePanel.DrawRectangle(self.cx+5,StartPoint,self.cx-10,Height)
            
            self.dcCyanForcePanel.SetPen(wx.Pen((240,40,40),1))
            self.dcCyanForcePanel.SetBrush(wx.Brush((240,40,40), wx.SOLID))
            StartPoint = (-35/25.0)*Data2+152
            Height = 153 - StartPoint - 104 -22
            self.dcCyanForcePanel.DrawRectangle(self.cx+5,StartPoint,self.cx-10,Height)
            
        self.dcCyanForcePanel.SetPen(wx.Pen('black',1))
        self.dcCyanForcePanel.DrawLine(5,0,dw-4,0)
        self.dcCyanForcePanel.DrawLine(self.cx,0,self.cx,dh-5)
        self.dcCyanForcePanel.DrawLine(5,dh-5,dw-4,dh-5)
        self.dcCyanForcePanel.DrawLine(self.cx-15,(0*14)+12,self.cx+16,(0*14)+12)        
        self.dcCyanForcePanel.DrawLine(self.cx-5,(1*14)+12,self.cx+6,(1*14)+12)
        self.dcCyanForcePanel.DrawLine(self.cx-5,(2*14)+12,self.cx+6,(2*14)+12)        
        self.dcCyanForcePanel.DrawLine(self.cx-5,(3*14)+12,self.cx+6,(3*14)+12)        
        self.dcCyanForcePanel.DrawLine(self.cx-5,(4*14)+12,self.cx+6,(4*14)+12)        
        self.dcCyanForcePanel.DrawLine(self.cx-15,(5*14)+12,self.cx+16,(5*14)+12)        
        self.dcCyanForcePanel.DrawLine(self.cx-5,(6*14)+12,self.cx+6,(6*14)+12)        
        self.dcCyanForcePanel.DrawLine(self.cx-5,(7*14)+12,self.cx+6,(7*14)+12)
        self.dcCyanForcePanel.DrawLine(self.cx-5,(8*14)+12,self.cx+6,(8*14)+12)        
        self.dcCyanForcePanel.DrawLine(self.cx-5,(9*14)+12,self.cx+6,(9*14)+12)        
        self.dcCyanForcePanel.DrawLine(self.cx-2,(0*14)+6,self.cx+3,(0*14)+6)        
        self.dcCyanForcePanel.DrawLine(self.cx-2,(1*14)+6,self.cx+3,(1*14)+6)
        self.dcCyanForcePanel.DrawLine(self.cx-2,(2*14)+6,self.cx+3,(2*14)+6)        
        self.dcCyanForcePanel.DrawLine(self.cx-2,(3*14)+6,self.cx+3,(3*14)+6)        
        self.dcCyanForcePanel.DrawLine(self.cx-2,(4*14)+6,self.cx+3,(4*14)+6)        
        self.dcCyanForcePanel.DrawLine(self.cx-2,(5*14)+6,self.cx+3,(5*14)+6)        
        self.dcCyanForcePanel.DrawLine(self.cx-2,(6*14)+6,self.cx+3,(6*14)+6)        
        self.dcCyanForcePanel.DrawLine(self.cx-2,(7*14)+6,self.cx+3,(7*14)+6)
        self.dcCyanForcePanel.DrawLine(self.cx-2,(8*14)+6,self.cx+3,(8*14)+6)        
        self.dcCyanForcePanel.DrawLine(self.cx-2,(9*14)+6,self.cx+3,(9*14)+6)      
        self.dcCyanForcePanel.DrawLine(self.cx-2,(10*14)+6,self.cx+3,(10*14)+6)        
        

        dcCyan.Blit(0,0,dw,dh,self.dcCyanForcePanel,0,0)

        
        
        
    def DrawMagentaMeter(self,Data1,Data2):
        
        dcMagenta = wx.ClientDC(self.MagentaForcePanel)
        
        dw,dh = self.MagentaForcePanel.GetSize()
        
        self.dcMagentaForcePanel.SetPen(wx.Pen((255,255,255),1))
        self.dcMagentaForcePanel.SetBrush(wx.Brush((255,255,255), wx.SOLID))        
        self.dcMagentaForcePanel.DrawRectangle(4,0,self.cx-5,153)
        
        self.dcMagentaForcePanel.SetPen(wx.Pen((255,255,255),1))
        self.dcMagentaForcePanel.SetBrush(wx.Brush((255,255,255), wx.SOLID))        
        self.dcMagentaForcePanel.DrawRectangle(self.cx+5,0,38,153)        
        
        dcMagenta.Blit(0,0,dw,dh,self.dcMagentaForcePanel,0,0)
        
        if self.MagentaHoldData1 < Data1:
            self.MagentaHoldData1 = Data1
        self.dcMagentaForcePanel.SetPen(wx.Pen((125,80,80),3))
        StartPoint = (-35/25.0)*self.MagentaHoldData1+152
        self.dcMagentaForcePanel.DrawLine(5,StartPoint,self.cx-5,StartPoint)
         
        self.MagentaFalloff1 = self.MagentaFalloff1+1
        if self.MagentaFalloff1 > 20:
            self.MagentaHoldData1 = self.MagentaHoldData1-2
            self.MagentaFalloff1 = 0
            
        if self.MagentaHoldData2 < Data2:
            self.MagentaHoldData2 = Data2
        self.dcMagentaForcePanel.SetPen(wx.Pen((125,80,80),3))
        StartPoint = (-35/25.0)*self.MagentaHoldData2+152
        self.dcMagentaForcePanel.DrawLine(self.cx+5,StartPoint,38,StartPoint)
         
        self.MagentaFalloff2 = self.MagentaFalloff2+1
        if self.MagentaFalloff2 > 20:
            self.MagentaHoldData2 = self.MagentaHoldData2-2
            self.MagentaFalloff2 = 0
        
        if Data1 < 75:            
            self.dcMagentaForcePanel.SetPen(wx.Pen((40,240,40),1))
            self.dcMagentaForcePanel.SetBrush(wx.Brush((40,240,40), wx.SOLID))
            StartPoint = (-35/25.0)*Data1+152
            Height = 153 - StartPoint
            self.dcMagentaForcePanel.DrawRectangle(5,StartPoint,self.cx-10,Height)            
        if Data1 >=75 and Data1 < 90:
            self.dcMagentaForcePanel.SetPen(wx.Pen((40,240,40),1))
            self.dcMagentaForcePanel.SetBrush(wx.Brush((40,240,40), wx.SOLID))
            self.dcMagentaForcePanel.DrawRectangle(5,48,self.cx-10,105) 
            
            self.dcMagentaForcePanel.SetPen(wx.Pen((240,240,40),1))
            self.dcMagentaForcePanel.SetBrush(wx.Brush((240,240,40), wx.SOLID))
            StartPoint = (-35/25.0)*Data1+152
            Height = 153 - StartPoint - 104
            self.dcMagentaForcePanel.DrawRectangle(5,StartPoint,self.cx-10,Height)            
        if Data1 >=90:
            self.dcMagentaForcePanel.SetPen(wx.Pen((40,240,40),1))
            self.dcMagentaForcePanel.SetBrush(wx.Brush((40,240,40), wx.SOLID))
            self.dcMagentaForcePanel.DrawRectangle(5,48,self.cx-10,105) 
            
            self.dcMagentaForcePanel.SetPen(wx.Pen((240,240,40),1))
            self.dcMagentaForcePanel.SetBrush(wx.Brush((240,240,40), wx.SOLID))
            StartPoint = 27
            Height = 153 - StartPoint - 104
            self.dcMagentaForcePanel.DrawRectangle(5,StartPoint,self.cx-10,Height)
            
            self.dcMagentaForcePanel.SetPen(wx.Pen((240,40,40),1))
            self.dcMagentaForcePanel.SetBrush(wx.Brush((240,40,40), wx.SOLID))
            StartPoint = (-35/25.0)*Data1+152
            Height = 153 - StartPoint - 104 -22
            self.dcMagentaForcePanel.DrawRectangle(5,StartPoint,self.cx-10,Height)
            
        if Data2 < 75:            
            self.dcMagentaForcePanel.SetPen(wx.Pen((40,240,40),1))
            self.dcMagentaForcePanel.SetBrush(wx.Brush((40,240,40), wx.SOLID))
            StartPoint = (-35/25.0)*Data2+152
            Height = 153 - StartPoint
            self.dcMagentaForcePanel.DrawRectangle(self.cx+5,StartPoint,self.cx-10,Height)
            
        if Data2 >=75 and Data2 < 90:
            self.dcMagentaForcePanel.SetPen(wx.Pen((40,240,40),1))
            self.dcMagentaForcePanel.SetBrush(wx.Brush((40,240,40), wx.SOLID))
            self.dcMagentaForcePanel.DrawRectangle(self.cx+5,48,self.cx-10,105) 
            
            self.dcMagentaForcePanel.SetPen(wx.Pen((240,240,40),1))
            self.dcMagentaForcePanel.SetBrush(wx.Brush((240,240,40), wx.SOLID))
            StartPoint = (-35/25.0)*Data2+152
            Height = 153 - StartPoint - 104
            self.dcMagentaForcePanel.DrawRectangle(self.cx+5,StartPoint,self.cx-10,Height)
            
        if Data2 >=90:
            self.dcMagentaForcePanel.SetPen(wx.Pen((40,240,40),1))
            self.dcMagentaForcePanel.SetBrush(wx.Brush((40,240,40), wx.SOLID))
            self.dcMagentaForcePanel.DrawRectangle(self.cx+5,48,self.cx-10,105) 
            
            self.dcMagentaForcePanel.SetPen(wx.Pen((240,240,40),1))
            self.dcMagentaForcePanel.SetBrush(wx.Brush((240,240,40), wx.SOLID))
            StartPoint = 27
            Height = 153 - StartPoint - 104
            self.dcMagentaForcePanel.DrawRectangle(self.cx+5,StartPoint,self.cx-10,Height)
            
            self.dcMagentaForcePanel.SetPen(wx.Pen((240,40,40),1))
            self.dcMagentaForcePanel.SetBrush(wx.Brush((240,40,40), wx.SOLID))
            StartPoint = (-35/25.0)*Data2+152
            Height = 153 - StartPoint - 104 -22
            self.dcMagentaForcePanel.DrawRectangle(self.cx+5,StartPoint,self.cx-10,Height)
            
        self.dcMagentaForcePanel.SetPen(wx.Pen('black',1))
        self.dcMagentaForcePanel.DrawLine(5,0,dw-4,0)
        self.dcMagentaForcePanel.DrawLine(self.cx,0,self.cx,dh-5)
        self.dcMagentaForcePanel.DrawLine(5,dh-5,dw-4,dh-5)
        self.dcMagentaForcePanel.DrawLine(self.cx-15,(0*14)+12,self.cx+16,(0*14)+12)        
        self.dcMagentaForcePanel.DrawLine(self.cx-5,(1*14)+12,self.cx+6,(1*14)+12)
        self.dcMagentaForcePanel.DrawLine(self.cx-5,(2*14)+12,self.cx+6,(2*14)+12)        
        self.dcMagentaForcePanel.DrawLine(self.cx-5,(3*14)+12,self.cx+6,(3*14)+12)        
        self.dcMagentaForcePanel.DrawLine(self.cx-5,(4*14)+12,self.cx+6,(4*14)+12)        
        self.dcMagentaForcePanel.DrawLine(self.cx-15,(5*14)+12,self.cx+16,(5*14)+12)        
        self.dcMagentaForcePanel.DrawLine(self.cx-5,(6*14)+12,self.cx+6,(6*14)+12)        
        self.dcMagentaForcePanel.DrawLine(self.cx-5,(7*14)+12,self.cx+6,(7*14)+12)
        self.dcMagentaForcePanel.DrawLine(self.cx-5,(8*14)+12,self.cx+6,(8*14)+12)        
        self.dcMagentaForcePanel.DrawLine(self.cx-5,(9*14)+12,self.cx+6,(9*14)+12)        
        self.dcMagentaForcePanel.DrawLine(self.cx-2,(0*14)+6,self.cx+3,(0*14)+6)        
        self.dcMagentaForcePanel.DrawLine(self.cx-2,(1*14)+6,self.cx+3,(1*14)+6)
        self.dcMagentaForcePanel.DrawLine(self.cx-2,(2*14)+6,self.cx+3,(2*14)+6)        
        self.dcMagentaForcePanel.DrawLine(self.cx-2,(3*14)+6,self.cx+3,(3*14)+6)        
        self.dcMagentaForcePanel.DrawLine(self.cx-2,(4*14)+6,self.cx+3,(4*14)+6)        
        self.dcMagentaForcePanel.DrawLine(self.cx-2,(5*14)+6,self.cx+3,(5*14)+6)        
        self.dcMagentaForcePanel.DrawLine(self.cx-2,(6*14)+6,self.cx+3,(6*14)+6)        
        self.dcMagentaForcePanel.DrawLine(self.cx-2,(7*14)+6,self.cx+3,(7*14)+6)
        self.dcMagentaForcePanel.DrawLine(self.cx-2,(8*14)+6,self.cx+3,(8*14)+6)        
        self.dcMagentaForcePanel.DrawLine(self.cx-2,(9*14)+6,self.cx+3,(9*14)+6)      
        self.dcMagentaForcePanel.DrawLine(self.cx-2,(10*14)+6,self.cx+3,(10*14)+6)        
        
        dcMagenta = wx.ClientDC(self.MagentaForcePanel)
        dcMagenta.Blit(0,0,dw,dh,self.dcMagentaForcePanel,0,0)
        
    def DrawMeters(self):
        self.DrawYellowMeter(float(self.ctrlYellowForce.GetValue())/(self.MaxSeilKraft*self.MaxSeilKraftProzentsatz)*100,
                             float(self.Yellow.MasterMomentUI)/(self.MaxSeilKraft*self.MaxSeilKraftProzentsatz)*200) #float(self.Yellow.ActCurUI)
        self.ctrlYellowIstForce.SetValue(self.Yellow.MasterMomentUI)
        self.DrawGreenMeter(float(self.ctrlGreenForce.GetValue())/(self.MaxSeilKraft*self.MaxSeilKraftProzentsatz)*100,
                            float(self.Green.MasterMomentUI)/(self.MaxSeilKraft*self.MaxSeilKraftProzentsatz)*200) #float(self.Green.ActCurUI)
        self.ctrlGreenIstForce.SetValue(self.Green.MasterMomentUI)
        self.DrawCyanMeter(float(self.ctrlCyanForce.GetValue())/(self.MaxSeilKraft*self.MaxSeilKraftProzentsatz)*100,
                           float(self.Cyan.MasterMomentUI)/(self.MaxSeilKraft*self.MaxSeilKraftProzentsatz)*200)  #float(self.Cyan.ActCurUI)
        self.ctrlCyanIstForce.SetValue(self.Cyan.MasterMomentUI)
        self.DrawMagentaMeter(float(self.ctrlMagentaForce.GetValue())/(self.MaxSeilKraft*self.MaxSeilKraftProzentsatz)*100,
                              float(self.Magenta.MasterMomentUI)/(self.MaxSeilKraft*self.MaxSeilKraftProzentsatz)*200) #float(self.Magenta.ActCurUI)
        self.ctrlMagentaIstForce.SetValue(self.Magenta.MasterMomentUI)
    
# ************ Meters End
# ************ Zoom Representationen Beginn
    def ZoomRepsIn(self):
        #self.logger.info('Zoom Reps In')
        self.ScaleReps = self.ScaleReps*1.1
        sp1x=self.Pillar1.getScale().getX()*1.1
        sp1y=self.Pillar1.getScale().getY()*1.1
        sp2x=self.Pillar2.getScale().getX()*1.1
        sp2y=self.Pillar2.getScale().getY()*1.1
        sp3x=self.Pillar3.getScale().getX()*1.1
        sp3y=self.Pillar3.getScale().getY()*1.1
        sp4x=self.Pillar4.getScale().getX()*1.1
        sp4y=self.Pillar4.getScale().getY()*1.1         
        self.Pillar1.setPosHprScale(self.YellowX,self.YellowY,self.YellowZ,0,0,0,sp1x,sp1y,self.YellowZ)
        self.Pillar2.setPosHprScale(self.GreenX,self.GreenY,self.GreenZ,0,0,0,sp2x,sp2y,self.GreenZ)
        self.Pillar3.setPosHprScale(self.CyanX,self.CyanY,self.CyanZ,0,0,0,sp3x,sp3y,self.CyanZ) 
        self.Pillar4.setPosHprScale(self.MagentaX,self.MagentaY,self.MagentaZ,0,0,0,sp4x,sp4y,self.MagentaZ)
        #sp1x=self.Rope1.getScale().getX()*1.1
        #sp1y=self.Rope1.getScale().getY()*1.1
        #sp1z=self.Rope1.getScale().getZ()*1.1
        #sp2x=self.Rope2.getScale().getX()*1.1
        #sp2y=self.Rope2.getScale().getY()*1.1
        #sp2z=self.Rope2.getScale().getZ()*1.1
        #sp3x=self.Rope3.getScale().getX()*1.1
        #sp3y=self.Rope3.getScale().getY()*1.1
        #sp3z=self.Rope3.getScale().getZ()*1.1
        #sp4x=self.Rope4.getScale().getX()*1.1
        #sp4y=self.Rope4.getScale().getY()*1.1
        #sp4z=self.Rope3.getScale().getZ()*1.1
        #self.Rope1.setScale(sp1x,sp1y,sp1z)
        #self.Rope2.setScale(sp2x,sp2y,sp2z)
        #self.Rope3.setScale(sp3x,sp3y,sp3z)
        #self.Rope4.setScale(sp4x,sp4y,sp4z)
        sp1x=self.BorderYellow.getScale().getX()*1.1
        sp1y=self.BorderYellow.getScale().getY()*1.1
        sp1z=self.BorderYellow.getScale().getZ()*1.1
        sp2x=self.BorderGreen.getScale().getX()*1.1
        sp2y=self.BorderGreen.getScale().getY()*1.1
        sp2z=self.BorderGreen.getScale().getZ()*1.1
        sp3x=self.BorderCyan.getScale().getX()*1.1
        sp3y=self.BorderCyan.getScale().getY()*1.1
        sp3z=self.BorderCyan.getScale().getZ()*1.1
        sp4x=self.BorderMagenta.getScale().getX()*1.1
        sp4y=self.BorderMagenta.getScale().getY()*1.1
        sp4z=self.BorderMagenta.getScale().getZ()*1.1
        self.BorderYellow.setScale(sp1x,sp1y,sp1z)
        self.BorderGreen.setScale(sp1x,sp1y,sp1z)
        self.BorderCyan.setScale(sp1x,sp1y,sp1z)
        self.BorderMagenta.setScale(sp1x,sp1y,sp1z)
        if self.KeyPosModell != None:
            for key in self.KeyPosModell.iterkeys():
                self.KeyPosModell[key].setScale(self.ScaleReps)
        if self.PathModell != None:
            for key in self.PathModell.iterkeys():
                t= self.PathModell[key].getChild(0).getScale()
                self.PathModell[key].getChild(0).setScale(t*1.1)
                t= self.PathModell[key].getChild(1).getScale()
                self.PathModell[key].getChild(1).setScale(t*1.1)
                t= self.PathModell[key].getChild(2).getScale()
                self.PathModell[key].getChild(2).setScale(t*1.1)
                t = self.PathModell[key].getChild(3).node().getThickness()
                self.PathModell[key].getChild(3).node().setThickness(t*1.1)
            try:
                for i in range(5,self.PathModell[self.ActivePath].getNumChildren()):
                    t = self.PathModell[self.ActivePath].getChild(i).getScale()
                    t = self.PathModell[self.ActivePath].getChild(i).setScale(t*1.1)
            except KeyError:
                pass
        t = self.SollPosition.getScale()
        self.SollPosition.setScale(t*1.1)
        t = self.PfeilRed.getScale()
        self.PfeilRed.setScale(t*1.1)
        t = self.PfeilGreen.getScale()
        self.PfeilGreen.setScale(t*1.1)
        t = self.PfeilBlue.getScale()
        self.PfeilBlue.setScale(t*1.1) 
        t = self.TorusRed.getScale()
        self.TorusRed.setScale(t*1.1)
        t = self.TorusGreen.getScale()
        self.TorusGreen.setScale(t*1.1)
        t = self.TorusBlue.getScale()
        self.TorusBlue.setScale(t*1.1)        
        
        
    def ZoomRepsOut(self):
        #self.logger.info('Zoom Reps Out')
        self.ScaleReps = self.ScaleReps*0.9
        sp1x=self.Pillar1.getScale().getX()*0.9
        sp1y=self.Pillar1.getScale().getY()*0.9
        sp2x=self.Pillar2.getScale().getX()*0.9
        sp2y=self.Pillar2.getScale().getY()*0.9
        sp3x=self.Pillar3.getScale().getX()*0.9
        sp3y=self.Pillar3.getScale().getY()*0.9
        sp4x=self.Pillar4.getScale().getX()*0.9
        sp4y=self.Pillar4.getScale().getY()*0.9        
        self.Pillar1.setPosHprScale(self.YellowX,self.YellowY,self.YellowZ,0,0,0,sp1x,sp1y,self.YellowZ)
        self.Pillar2.setPosHprScale(self.GreenX,self.GreenY,self.GreenZ,0,0,0,sp2x,sp2y,self.GreenZ)
        self.Pillar3.setPosHprScale(self.CyanX,self.CyanY,self.CyanZ,0,0,0,sp3x,sp3y,self.CyanZ) 
        self.Pillar4.setPosHprScale(self.MagentaX,self.MagentaY,self.MagentaZ,0,0,0,sp4x,sp4y,self.MagentaZ)
        #sp1x=self.Rope1.getScale().getX()*0.9
        #sp1y=self.Rope1.getScale().getY()*0.9
        #sp1z=self.Rope1.getScale().getZ()*0.9
        #sp2x=self.Rope2.getScale().getX()*0.9
        #sp2y=self.Rope2.getScale().getY()*0.9
        #sp2z=self.Rope2.getScale().getZ()*0.9
        #sp3x=self.Rope3.getScale().getX()*0.9
        #sp3y=self.Rope3.getScale().getY()*0.9
        #sp3z=self.Rope3.getScale().getZ()*0.9
        #sp4x=self.Rope4.getScale().getX()*0.9
        #sp4y=self.Rope4.getScale().getY()*0.9
        #sp4z=self.Rope4.getScale().getZ()*0.9
        #self.Rope1.setScale(sp1x,sp1y,sp1z)
        #self.Rope2.setScale(sp2x,sp2y,sp2z)
        #self.Rope3.setScale(sp3x,sp3y,sp3z)
        #self.Rope4.setScale(sp4x,sp4y,sp4z)
        #self.Rope1.setPosHprScale(self.YellowX,self.YellowY,self.YellowZ,0,0,0,sp1x,sp1y,sp1z)
        #self.Rope2.setPosHprScale(self.GreenX,self.GreenY,self.GreenZ,0,0,0,sp2x,sp2y,sp2z)
        #self.Rope3.setPosHprScale(self.CyanX,self.CyanY,self.CyanZ,0,0,0,sp3x,sp3y,sp3z)
        #self.Rope4.setPosHprScale(self.MagentaX,self.MagentaY,self.MagentaZ,0,0,0,sp4x,sp4y,sp4z)        
        sp1x=self.BorderYellow.getScale().getX()*0.9
        sp1y=self.BorderYellow.getScale().getY()*0.9
        sp1z=self.BorderYellow.getScale().getZ()*0.9
        sp2x=self.BorderGreen.getScale().getX()*0.9
        sp2y=self.BorderGreen.getScale().getY()*0.9
        sp2z=self.BorderGreen.getScale().getZ()*0.9
        sp3x=self.BorderCyan.getScale().getX()*0.9
        sp3y=self.BorderCyan.getScale().getY()*0.9
        sp3z=self.BorderCyan.getScale().getZ()*0.9
        sp4x=self.BorderMagenta.getScale().getX()*0.9
        sp4y=self.BorderMagenta.getScale().getY()*0.9
        sp4z=self.BorderMagenta.getScale().getZ()*0.9
        self.BorderYellow.setScale(sp1x,sp1y,sp1z)
        self.BorderGreen.setScale(sp1x,sp1y,sp1z)
        self.BorderCyan.setScale(sp1x,sp1y,sp1z)
        self.BorderMagenta.setScale(sp1x,sp1y,sp1z)
        if self.KeyPosModell != None:
            for key in self.KeyPosModell.iterkeys():
                self.KeyPosModell[key].setScale(self.ScaleReps)
        if self.PathModell != None:
            for key in self.PathModell.iterkeys():
                t= self.PathModell[key].getChild(0).getScale()
                self.PathModell[key].getChild(0).setScale(t*0.9)
                t= self.PathModell[key].getChild(1).getScale()
                self.PathModell[key].getChild(1).setScale(t*0.9)
                t= self.PathModell[key].getChild(2).getScale()
                self.PathModell[key].getChild(2).setScale(t*0.9)
                t = self.PathModell[key].getChild(3).node().getThickness()
                self.PathModell[key].getChild(3).node().setThickness(t*0.9)
            try:
                for i in range(5,self.PathModell[self.ActivePath].getNumChildren()):
                    t = self.PathModell[self.ActivePath].getChild(i).getScale()
                    t = self.PathModell[self.ActivePath].getChild(i).setScale(t*0.9)
            except:
                pass
            t = self.SollPosition.getScale()
        self.SollPosition.setScale(t*0.9)
        t = self.PfeilRed.getScale()
        self.PfeilRed.setScale(t*0.9)
        t = self.PfeilGreen.getScale()
        self.PfeilGreen.setScale(t*0.9)
        t = self.PfeilBlue.getScale()
        self.PfeilBlue.setScale(t*0.9)
        t = self.TorusRed.getScale()
        self.TorusRed.setScale(t*0.9)
        t = self.TorusGreen.getScale()
        self.TorusGreen.setScale(t*0.9)
        t = self.TorusBlue.getScale()
        self.TorusBlue.setScale(t*0.9)        
        
        
# ************ Zoom Representationen End
# *********************************************************************************************** Move Task Beginn
    def move(self, task):
        T1     = time.clock()
        self.DiffT= T1-self.T1Old
        self.T1Old  = T1
        self.ctrlDiffT.SetValue(str(self.DiffT))

        try:
            self.Yellow
            self.Green
            self.Cyan
            self.Magenta
            AchsenInitialisiert=True            
        except:
            AchsenInitialisiert=False
        if AchsenInitialisiert:
            
            if self.firstmove == 1:
                #print "###################### firstmove"
                self.firstmove = 0
                self.SollPosX = self.PosX
                self.SollPosY = self.PosY
                self.SollPosZ = self.PosZ
            
            self.CommunicateTimer.start()
            self.AchsenComunicate()
            self.CommunicateTimer.stop()
            if   (not(App.Yellow.EsNetwork) or 
                  not(App.Green.EsNetwork)or
                  not(App.Cyan.EsNetwork) or
                  not(App.Magenta.EsNetwork)):
                self.OnStart(1)
                self.EStopOpen()
                self.SollPosX = self.PosX
                self.SollPosY = self.PosY
                self.SollPosZ = self.PosZ
                self.VX = 0.0
                self.VY = 0.0
                self.VZ = 0.0
# Dialog Achsfehler
        else:
            dlge = wx.MessageDialog(self.frame, ' Engines configuration error','Engine assignment error!', wx.OK|wx.ICON_EXCLAMATION)
            self.logger.debug('Tried to access Engines with out engine object')
            if dlge.ShowModal() == wx.ID_OK:
                dlge.Destroy()
                self.logger.info('Stopping 3D Control due to nonexistence of Axis object')
                self.btStart.Enable(True)
                self.btStartState = True
                self.btStart.SetLabel('Start')
                self.btStart.Refresh()
                self.btAxisSetup.Enable(True)
                self.btYellowSetup.Enable(True)
                self.btGreenSetup.Enable(True)            
                self.btCyanSetup.Enable(True)
                self.btMagentaSetup.Enable(True)
                self.btPosSetup.Enable(True)
                taskMgr.remove("MoveTask")
                return task.cont
            
        self.MeterTimer.start()          
        self.DrawMeters()
        self.MeterTimer.stop()        
        
        self.CalculateMeanPosition()
        self.CalculateRopeVectors()
        
        self.PosVec=Vec3(self.PosX,self.PosY,self.PosZ)
        
        self.SumDiffT += self.DiffT
        # buttons auslesen 
        buttons  = self.stick.GetButtonState()
        POV      = self.stick.GetPOVPosition()
        PathJoyVel  = self.stick.GetVPosition()
        
        if buttons & 16:
            self.direction = -1.0
        else:
            self.direction = 1.0           

        # Motoren enable/disable
        #if (buttons & 32 ):
            #self.Yellow.Enable  = 1
            #self.Green.Enable   = 1
            #self.Cyan.Enable    = 1
            #self.Magenta.Enable = 1
            #if self.Hold == 0:                      # beim ersten mal totmann druecken Soll Pos auf ist Pos setzen
                #self.SollPosX = self.PosX
                #self.SollPosY = self.PosY
                #self.SollPosZ = self.PosZ 
                #self.Hold = 1
        #else:
            #pass
        # Modifikation Totmann Taster weniger gefaerlich
            #self.Yellow.Enable  = 0
            #self.Green.Enable   = 0
            #self.Cyan.Enable    = 0
            #self.Magenta.Enable = 0
            #self.Hold = 0
            
        #Vel und Acc verstellen
        if self.SumDiffT > 0.08:
            if buttons & 1 and (self.VAbs == 0):
                # Increase Acceleration
                if self.aAcc < self.maxAcc:
                    self.aAcc += self.maxAcc / 50
                    if self.aAcc >= self.maxAcc:
                        self.aAcc = self.maxAcc
                self.SumDiffT = 0
            if buttons & 4 and (self.VAbs == 0):
                # Decrease Acceleration
                self.aAcc-=self.maxAcc/50
                if self.aAcc <= 0.1:
                    self.aAcc = 0.1
                self.SumDiffT = 0
            if buttons & 2 and (self.VAbs == 0):
                # Increase Velocity
                if self.aktuelleVel < self.maxVel:
                    self.aktuelleVel += self.maxVel / 50
                    if self.aktuelleVel >=self.maxVel:
                        self.aktuelleVel = self.maxVel
                self.SumDiffT = 0
            if buttons & 8 and (self.VAbs == 0):
                # Decrease Velocity
                self.aktuelleVel -= self.maxVel / 50
                if (self.aktuelleVel <= 0):
                    self.aktuelleVel = 0
                self.SumDiffT = 0
        # Bodenhoehe verstellen          
        if not(buttons & 32) and (self.VAbs == 0):
            self.btGetDefHeight.Enable( True )
            self.txtspHeight.Enable ( True )
            self.btSetDefHeight.Enable( True )
        else:
            self.btGetDefHeight.Enable( False )
            self.txtspHeight.Enable ( False )
            self.btSetDefHeight.Enable( False )
            
        if self.SumDiffT > 0.5: 
            
            if POV == 22500 and (self.VAbs == 0) and not(buttons & 32): # Links und Unten (27000:Links)  KeyPoints Active
                self.NewTargetPoint = True
                self.TargetPoint[0] = self.PosX
                self.TargetPoint[1] = self.PosY
                self.TargetPoint[2] = self.PosZ
                self.PointModeStartX = self.PosX
                self.PointModeStartY = self.PosY
                self.PointModeStartZ = self.PosZ                
                self.KeyPointActive = True
                self.PathActive = False
                self.OnPathFlag = 0
                try:
                    # Anzeige der Punkte zuruecksetzen 
                    for i in range (0,len(self.KeyPosDic.keys())):
                        self.KeyPosModell[self.KeyPosDic.keys()[i]].setTexture(self.texGrayPink)
                        self.KeyPosModell[self.KeyPosDic.keys()[i]].setScale(self.ScaleReps)
                    # Anzeige Pfad zuruecksetzen
                    self.PathModell[self.ActivePath].getChild(0).setTexture(self.texPathPink)
                    self.PathModell[self.ActivePath].getChild(0).setScale(self.ScaleReps)
                    self.PathModell[self.ActivePath].getChild(2).setTexture(self.texPathPink)
                    self.PathModell[self.ActivePath].getChild(2).setScale(self.ScaleReps)
                    self.PathModell[self.ActivePath].getChild(3).setTexture(self.texPathPink)
                    self.PathModell[self.ActivePath].getChild(3).node().setThickness(0.3*self.ScaleReps)  
                    self.SollPosition.setPos(self.YellowX,self.YellowY,self.YellowZ) 
                except KeyError:
                    pass                 
                self.btPosMode.SetValue(True)
                self.btPathMode.SetValue(False)
                self.KeyPointPanel.SetBackgroundColour(wx.Colour(102,204,0))
                self.KeyPointPanel.Refresh()
                self.PathPanel.SetBackgroundColour(wx.Colour(187,187,187))
                self.PathPanel.Refresh()
            if POV == 13500 and (self.VAbs == 0) and not(buttons & 32): # Rechts und Unten (9000:Rechts)  Path Active
                self.NewTargetPoint = True
                self.TargetPoint[0] = self.PosX
                self.TargetPoint[1] = self.PosY
                self.TargetPoint[2] = self.PosZ
                self.TargetPointOld[0] = self.PosX
                self.TargetPointOld[1] = self.PosY
                self.TargetPointOld[2] = self.PosZ                
                self.PointModeStartX = self.PosX
                self.PointModeStartY = self.PosY
                self.PointModeStartZ = self.PosZ                  
                self.KeyPointActive = False
                self.btPosMode.SetValue(False)
                self.btPathMode.SetValue(True)
                self.PathActive = True
                self.OnPathFlag = 0
                try:
                    # Anzeige der Punkte zuruecksetzen 
                    for i in range (0,len(self.KeyPosDic.keys())):
                        self.KeyPosModell[self.KeyPosDic.keys()[i]].setTexture(self.texGrayPink)
                        self.KeyPosModell[self.KeyPosDic.keys()[i]].setScale(self.ScaleReps)
                    # Anzeige Pfad zuruecksetzen
                    self.PathModell[self.ActivePath].getChild(0).setTexture(self.texPathPink)
                    self.PathModell[self.ActivePath].getChild(0).setScale(self.ScaleReps)
                    self.PathModell[self.ActivePath].getChild(2).setTexture(self.texPathPink)
                    self.PathModell[self.ActivePath].getChild(2).setScale(self.ScaleReps)
                    self.PathModell[self.ActivePath].getChild(3).setTexture(self.texPathPink)
                    self.PathModell[self.ActivePath].getChild(3).node().setThickness(0.3*self.ScaleReps)                    
                except KeyError:
                    pass 
                # fuer aktivieren text fragment
                #try:
                    #self.PathModell[self.ActivePath].getChild(3).setTexture(self.texLime)
                    #self.PathModell[self.ActivePath].getChild(3).node().setThickness(4.0*self.ScaleReps)
                #except KeyError:
                    #pass                   
                self.KeyPointPanel.SetBackgroundColour(wx.Colour(187,187,187))
                self.KeyPointPanel.Refresh()
                self.PathPanel.SetBackgroundColour(wx.Colour(102,204,0))
                self.PathPanel.Refresh()
            if POV == (4500 or POV == 31500) and (self.VAbs == 0) and not(buttons & 32):        #Rechts und Oben links und Oben und Oben Key Points Inactive Path Inactive
                self.KeyPointActive = False
                self.btPosMode.SetValue(False)
                self.btPathMode.SetValue(False)
                self.PathActive = False
                self.OnPathFlag = 0
                try:
                    # Anzeige der Punkte zuruecksetzen 
                    for i in range (0,len(self.KeyPosDic.keys())):
                        self.KeyPosModell[self.KeyPosDic.keys()[i]].setTexture(self.texGrayPink)
                        self.KeyPosModell[self.KeyPosDic.keys()[i]].setScale(self.ScaleReps)
                    # Anzeige Pfad zuruecksetzen
                    self.PathModell[self.ActivePath].getChild(0).setTexture(self.texPathPink)
                    self.PathModell[self.ActivePath].getChild(0).setScale(self.ScaleReps)
                    self.PathModell[self.ActivePath].getChild(2).setTexture(self.texPathPink)
                    self.PathModell[self.ActivePath].getChild(2).setScale(self.ScaleReps)
                    self.PathModell[self.ActivePath].getChild(3).setTexture(self.texPathPink)
                    self.PathModell[self.ActivePath].getChild(3).node().setThickness(0.3*self.ScaleReps)
                    self.SollPosition.setPos(self.YellowX,self.YellowY,self.YellowZ) 
                except KeyError:
                    pass
                self.KeyPointPanel.SetBackgroundColour(wx.Colour(187,187,187))
                self.KeyPointPanel.Refresh()
                self.PathPanel.SetBackgroundColour(wx.Colour(187,187,187))
                self.PathPanel.Refresh()
            if self.KeyPointActive and POV ==18000:# and (self.VAbs == 0) and not(buttons & 32):  #Select Next KeyPoint
                self.OnPOVKeyPointSelectDown()
            if self.KeyPointActive and POV ==0:# and (self.VAbs == 0) and not(buttons & 32):      #Select Previous KeyPoint
                self.OnPOVKeyPointSelectUp()
            if self.PathActive and POV ==18000 and (self.VAbs == 0) and not(buttons & 32):      #Select Next Path
                self.OnPOVPathSelectDown()
            if self.PathActive and POV ==0 and (self.VAbs == 0) and not(buttons & 32):          #Select Previous Path
                self.OnPOVPathPointSelectUp()
               
            self.SumDiffT = 0
            
            
#-------------- KeyPoints and Path handling-----------------------Beginn
        if buttons & 128 and self.RecPointOld == 0:
            self.RecPointOld = 1
            self.RecPoint = 1
        else:
            self.RecPoint = 0
        if not(buttons & 128) and self.RecPointOld ==1:
            self.RecPointOld = 0
            self.RecPoint = 0
        # Pfad   
        if (buttons & 64):
            self.RecPoint = 1
            #self.Yellow.SaveAccData('Yellow.Acc')
            #self.Green.SaveAccData('Green.Acc')
            #self.Cyan.SaveAccData('Cyan.Acc')
            #self.Magenta.SaveAccData('Magenta.Acc')
            
        if self.RecPoint ==1:
            DistKeyPos = self.CalcKeyPosDistance()            
            if len(DistKeyPos)==0:
                self.InsertKeyPos()            
            elif DistKeyPos[0] >= 0.5:
                self.InsertKeyPos()
                
        if (self.KeyPointActive or self.PathActive) and (self.VAbs == 0) and not(buttons & 32):
            self.SelectDeleteKeyPos()
        #if (self.KeyPointActive) and (self.VAbs == 0) and not(buttons & 32):
            #self.SelectDeleteKeyPos()        
              
#-------------- KeyPoints and Path handling-----------------------End        
        
        self.ctrlaAcc.SetValue("%4.1f"%self.aAcc)
        self.ctrlaVel.SetValue("%4.1f"%self.aktuelleVel)             

        x1=self.JoystickToAxisX()
        #print x1
        y1=self.JoystickToAxisY()
        #print y1
        z1=self.JoystickToAxisZ()
        #print z1
        p1=self.JoystickToAxisP()
        #print p1

        x1,y1,z1=self.TransformJoystick(x1,y1,z1,
                                        self.AxXRot,self.AxYRot,self.AxZRot,
                                        self.AxXScale,self.AxYScale,self.AxZScale)
        self.JNorm=math.sqrt(x1**2+y1**2+z1**2)
        
        
        # ++++++++++++++++++++Pos Modus++++++++++++++++++++++++++++++++++++++++++++++
        if self.btPosMode.GetValue() or self.btPathMode.GetValue():
            if self.btPosMode.GetValue():
                if self.indexSelectedPoint != -1000:

                    if self.NewTargetPoint and self.VAbs == 0 :                        
                        self.PointModeStartX = self.PosX
                        self.PointModeStartY = self.PosY
                        self.PointModeStartZ = self.PosZ
                        
                        self.PointModeTargetVec = self.TargetPoint-self.PosVec
                        
                        # Auf Soll Pos oder auf Act Pos ??? 
                        self.SollPosVec[0] = self.SollPosX
                        self.SollPosVec[1] = self.SollPosY
                        self.SollPosVec[2] = self.SollPosZ
                        
                        #self.SollPosVec[0] = self.PosX
                        #self.SollPosVec[1] = self.PosY
                        #self.SollPosVec[2] = self.PosZ   
                        
                        self.PointBrake = False
                        self.NewTargetPoint = False
                        
                    if (buttons & 32):
                        PathJoyVel = (65535.0-PathJoyVel)/65535.0*self.aktuelleVel
                    else:
                        PathJoyVel = 0
                    Bremsweg = self.ApproachVel**2/(2.0*(self.aAcc))

                    dist = (self.TargetPoint-self.SollPosVec).length()
                    approachVelMax = math.sqrt(dist *2*self.aAcc)
                    
                    if dist <= Bremsweg or dist <0.1 or self.PointBrake:
                        PathJoyVel = 0
                        self.PointBrake = True

                    if dist < 0.01:
                        try:
                            self.KeyPosModell[self.indexSelectedPoint].setTexture(self.texRed)
                        except:
                            pass
                    else:
                        try:
                            self.KeyPosModell[self.indexSelectedPoint].setTexture(self.texLime)
                        except:
                            pass
                    PathJoyVel = min(PathJoyVel,approachVelMax)

                    if self.ApproachVel < PathJoyVel:
                        self.ApproachVel = self.ApproachVel + self.aAcc*(self.DiffT)#*0.5774
                        if self.ApproachVel >= PathJoyVel:
                            self.ApproachVel = PathJoyVel
                    elif self.ApproachVel > PathJoyVel:
                        self.ApproachVel = self.ApproachVel - self.aAcc*(self.DiffT)#*0.5774
                        if self.ApproachVel <= PathJoyVel:
                            self.ApproachVel = PathJoyVel
                    self.ApproachVel = max (self.ApproachVel ,0)
                            
                    TargetVec = Vec3()        
                    TargetVec[0] = self.TargetPoint[0]-self.SollPosX
                    TargetVec[1] = self.TargetPoint[1]-self.SollPosY
                    TargetVec[2] = self.TargetPoint[2]-self.SollPosZ
                    TargetVec.normalize()
                    TargetVec = TargetVec * self.ApproachVel

                    self.VX = TargetVec[0]
                    self.VY = TargetVec[1]
                    self.VZ = TargetVec[2]
                    
                    self.PointModeStartX = self.PointModeStartX + self.VX*(self.DiffT)
                    self.PointModeStartY = self.PointModeStartY + self.VY*(self.DiffT)
                    self.PointModeStartZ = self.PointModeStartZ + self.VZ*(self.DiffT)
                    
                    self.SollPosX = self.PointModeStartX 
                    self.SollPosY = self.PointModeStartY 
                    self.SollPosZ = self.PointModeStartZ
                    
                    self.SollPosVec[0] = self.SollPosX
                    self.SollPosVec[1] = self.SollPosY
                    self.SollPosVec[2] = self.SollPosZ
                    
                    #Velocities Anzeigen
                    self.ctrlVelX.SetValue("%4.2f"%self.VX)
                    self.ctrlVelY.SetValue("%4.2f"%self.VY)
                    self.ctrlVelZ.SetValue("%4.2f"%self.VZ)
                    self.VAbs = math.sqrt(self.VX**2+self.VY**2+self.VZ**2)
                    self.ctrlVelAbs.SetValue("%4.2f"%self.VAbs)
            
                    #Positionen Anzeigen
                    self.ctrlPosX.SetValue("%4.2f"%self.SollPosX)
                    self.ctrlPosY.SetValue("%4.2f"%self.SollPosY)
                    self.ctrlPosZ.SetValue("%4.2f"%self.SollPosZ) 
                    
                    self.TKamera=numpy.array([self.SollPosX,self.SollPosY,self.SollPosZ]) 
                   
                    # Umrechnen auf Winden Koordinaten
                    self.CalculateRopeVectors()
                    self.SollPostoRopeLength()
                    self.ProjectVelSoltoRopes()                    
                    self.RopesForRender()

                    # und Zykel von Neuem durchlaufen
                    return task.cont                         
                    
                else:
                    
                    return task.cont
                
                
            # +++++++++++++++++++Path Modus++++++++++++++++++++++++++++++++++++++++++++
                       # Zuerst Angewaehlten Path point anfliegen 
            if self.btPathMode.GetValue():
                if self.KeyPathDic != {}:
                    try:
                        tckp =  self.KeyPathDic[self.ActivePath][5][0]
                        self.Bogen2Param = self.KeyPathDic[self.ActivePath][12]
                        laenge = self.KeyPathDic[self.ActivePath][4]
                        self.InterpolateParameter = interp1d(self.Bogen2Param, linspace(0,1,100000),  kind='linear',copy=False)
                        #self.ProzentAccGrenzParaMinima = self.KeyPathDict[self.ActivePath][8]
                        #self.InterpolateGrenz = interp1d(self.ProzentAccGrenzParaMinima[0],self.ProzentAccGrenzParaMinima[1],kind='linear',copy=False)
                    except:
                        dlge = wx.MessageDialog(self.frame, ' Path error','Path error!', wx.OK|wx.ICON_EXCLAMATION)
                        self.logger.debug('Path error while getting ready to follow it')
                        if dlge.ShowModal() == wx.ID_OK:
                            dlge.Destroy()
                        self.btPathMode.SetValue(False)
                        self.KeyPointPanel.SetBackgroundColour(wx.Colour(102,204,0))
                        self.KeyPointPanel.Refresh()
                        return task.cont
                    self.ProzentAccGrenzParaMinima = self.KeyPathDic[self.ActivePath][8]
                    self.InterpolateGrenz = interp1d(self.ProzentAccGrenzParaMinima[0],self.ProzentAccGrenzParaMinima[1],kind='linear',copy=False,bounds_error=False,fill_value=0.0)                    
                
                    
                if self.OnPathFlag == 0:                            
                   # Start Movement to Start Point                    
                    
                    if self.NewTargetPoint and self.VAbs == 0 :                        
                        self.PointModeStartX = self.PosX
                        self.PointModeStartY = self.PosY
                        self.PointModeStartZ = self.PosZ
                        
                        self.PointModeTargetVec = self.TargetPoint-self.PosVec
                        
                        # Auf Soll Pos oder auf Act Pos ??? 
                        self.SollPosVec[0] = self.SollPosX
                        self.SollPosVec[1] = self.SollPosY
                        self.SollPosVec[2] = self.SollPosZ
                        
                        #self.SollPosVec[0] = self.PosX
                        #self.SollPosVec[1] = self.PosY
                        #self.SollPosVec[2] = self.PosZ                        
                        
                        self.PointBrake = False
                        self.NewTargetPoint = False
                        
                    if (buttons & 32):
                        PathJoyVel = (65535.0-PathJoyVel)/65535.0*self.aktuelleVel
                    else:
                        PathJoyVel = 0
                    Bremsweg = self.ApproachVel**2/(2.0*(self.aAcc))

                    dist = (self.TargetPoint-self.SollPosVec).length()
                    distToPath = (self.PathTargetPoint -self.SollPosVec).length()
                    approachVelMax = math.sqrt(dist *2*self.aAcc)
                    
                    if dist <= Bremsweg or dist <0.1 or self.PointBrake:
                        PathJoyVel = 0
                        self.PointBrake = True
                        
                    if distToPath < 0.01: # Path reached 
                        self.OnPathFlag = 1
                        
                        # Auf Soll Pos oder auf Act Pos ???
                        self.PathTargetXOld = self.SollPosX
                        self.PathTargetYOld = self.SollPosY
                        self.PathTargetZOld = self.SollPosZ
                        
                        #self.PathTargetXOld = self.PosX
                        #self.PathTargetYOld = self.PosY
                        #self.PathTargetZOld = self.PosZ                        
                        try:
                            self.PathModell[self.ActivePath].getChild(3).setTexture(self.texRed)                          
                        except:
                            pass
                        
                    PathJoyVel = min(PathJoyVel,approachVelMax)

                    if self.ApproachVel < PathJoyVel:
                        self.ApproachVel = self.ApproachVel + self.aAcc*(self.DiffT)#*0.5774
                        if self.ApproachVel >= PathJoyVel:
                            self.ApproachVel = PathJoyVel
                    elif self.ApproachVel > PathJoyVel:
                        self.ApproachVel = self.ApproachVel - self.aAcc*(self.DiffT)#*0.5774
                        if self.ApproachVel <= PathJoyVel:
                            self.ApproachVel = PathJoyVel
                    self.ApproachVel = max (self.ApproachVel ,0)
                    
                    TargetVec = Vec3()        
                    TargetVec[0] = self.TargetPoint[0]-self.SollPosX
                    TargetVec[1] = self.TargetPoint[1]-self.SollPosY
                    TargetVec[2] = self.TargetPoint[2]-self.SollPosZ
                    TargetVec.normalize()
                    TargetVec = TargetVec * self.ApproachVel

                    self.VX = TargetVec[0]
                    self.VY = TargetVec[1]
                    self.VZ = TargetVec[2]
                    
                    self.PointModeStartX = self.PointModeStartX + self.VX*(self.DiffT)
                    self.PointModeStartY = self.PointModeStartY + self.VY*(self.DiffT)
                    self.PointModeStartZ = self.PointModeStartZ + self.VZ*(self.DiffT)
                    
                    self.SollPosX = self.PointModeStartX 
                    self.SollPosY = self.PointModeStartY 
                    self.SollPosZ = self.PointModeStartZ
                    
                    self.SollPosVec[0] = self.SollPosX
                    self.SollPosVec[1] = self.SollPosY
                    self.SollPosVec[2] = self.SollPosZ
                    
                    #Velocities Anzeigen
                    self.ctrlVelX.SetValue("%4.2f"%self.VX)
                    self.ctrlVelY.SetValue("%4.2f"%self.VY)
                    self.ctrlVelZ.SetValue("%4.2f"%self.VZ)
                    self.VAbs = math.sqrt(self.VX**2+self.VY**2+self.VZ**2)
                    self.ctrlVelAbs.SetValue("%4.2f"%self.VAbs)
            
                    #Positionen Anzeigen
                    self.ctrlPosX.SetValue("%4.2f"%self.SollPosX)
                    self.ctrlPosY.SetValue("%4.2f"%self.SollPosY)
                    self.ctrlPosZ.SetValue("%4.2f"%self.SollPosZ) 
                    
                    self.TKamera=numpy.array([self.SollPosX,self.SollPosY,self.SollPosZ]) 
                   
                    # Umrechnen auf Winden Koordinaten
                    self.CalculateRopeVectors()
                    self.SollPostoRopeLength()
                    self.ProjectVelSoltoRopes()                    
                    self.RopesForRender()

                    # und Zykel von Neuem durchlaufen
                    return task.cont 
                
                else: # We are on the Path so we follow it
                    PathJoyVel = float(p1)
                    # Damit's nicht ueber die Endenden der Kurve hinauslaeuft.
                    Bremsweg = self.PathVel**2/(1.0*(self.aAcc))                        
                    if not(buttons & 32):
                        PathJoyVel = 0 
                    if (self.PathBogenPos > laenge-Bremsweg or self.PathBogenPos >= laenge) and PathJoyVel >= 0:
                        PathJoyVel = 0
                    if (self.PathBogenPos < Bremsweg or self.PathBogenPos <= 0) and PathJoyVel < 0 :
                        PathJoyVel = 0
                        
                    # damit die maximale Joystick-Beschleunigung und Joystick-Geschwindigkeit (auf dem Pfad) nicht ueberschritten wird.
                    if self.PathVel < PathJoyVel:
                        self.PathVel = self.PathVel + self.aAcc*(self.DiffT) #*0.5774
                        if self.PathVel >= PathJoyVel:
                            self.PathVel = PathJoyVel
                    elif self.PathVel > PathJoyVel:
                        self.PathVel = self.PathVel - self.aAcc*(self.DiffT) #*0.5774
                        if self.PathVel <= PathJoyVel:
                            self.PathVel = PathJoyVel

                    # Begrenzung vol self.PathVel durch maxVel aus GrenzVel                        
                    if self.PathBogenPos <= 0.02:
                        lookupPos = self.PathBogenPos+ 0.02
                    elif self.PathBogenPos >= laenge - 0.12:
                        lookupPos = laenge- 0.12
                    else:
                        lookupPos = self.PathBogenPos
                    GrenzV = self.InterpolateGrenz(lookupPos)
                    if abs(self.PathVel) > GrenzV:
                        if (self.PathVel < 0):
                            self.PathVel = -GrenzV
                        else:
                            self.PathVel = GrenzV
                             
                            
                    #Bogenlaenge Aufintegrieren und begrenzen                        
                    self.PathBogenPos  = self.PathBogenPos + self.PathVel*(self.DiffT)                 
                    self.PathBogenPos  = min( max(self.PathBogenPos, 0.02), laenge-0.02)
                    
                    # Auf Index umparametrisieren (Bogenlaenge -> Pfadindex)
                    Param = self.InterpolateParameter(self.PathBogenPos)
                    # X,Y,Z in PfadKoordinaten
                    PathTargetX,PathTargetY,PathTargetZ = splev(Param,tckp)

                    #printf = "%3.5f"
                    #printf1 = "%3.5f"
                    #print 'PathJoyVel : '+printf%(float(PathJoyVel))+' PathVel : '+printf%(float(self.PathVel))
                    #print 'PathBogenPos : '+printf%(float(self.PathBogenPos))+' Param :'+printf1%(float(Param))+' GrenzV :'+printf%(float(GrenzV)) 
                    
                    # Umrechnen auf render Koordinaten
                    renderTargetPoint= render.getRelativePoint(self.PathModell[self.ActivePath],(PathTargetX,PathTargetY,PathTargetZ))
                   
                    # Im GUI anzeigen 
                    self.SollPosition.setTexture(self.texGrayPink)
                    self.SollPosition.setPos(self.PathModell[self.ActivePath],PathTargetX,PathTargetY,PathTargetZ)
                    
                    self.VX = -(self.PathTargetXOld - renderTargetPoint[0])/self.DiffT
                    self.VY = -(self.PathTargetYOld - renderTargetPoint[1])/self.DiffT
                    self.VZ = -(self.PathTargetZOld - renderTargetPoint[2])/self.DiffT                        
                    
                    self.SollPosX = renderTargetPoint[0]
                    self.SollPosY = renderTargetPoint[1]
                    self.SollPosZ = renderTargetPoint[2]
                    
                    #print 'X     : '+("%4.5f"%self.SollPosX)+      ' Y     : '+("%4.5f"%self.SollPosY)+      ' Z     :'+("%4.5f"%self.SollPosZ)
                    #print 'X Old : '+("%4.5f"%self.PathTargetXOld)+' Y Old : '+("%4.5f"%self.PathTargetYOld)+' Z Old :'+("%4.5f"%self.PathTargetZOld)                        
                    #print 'X Dif : '+("%4.5f"%(self.SollPosX-self.PathTargetXOld))+' Y Dif : '+("%4.5f"%(self.SollPosX-self.PathTargetYOld))+' Z Dif : '+("%4.5f"%(self.SollPosZ-self.PathTargetZOld)) 
                    #print 'Diff : T'+str(self.DiffT)
                    self.PathTargetXOld = renderTargetPoint[0]
                    self.PathTargetYOld = renderTargetPoint[1]
                    self.PathTargetZOld = renderTargetPoint[2]
                        
                    #Velocities Anzeigen
                    self.ctrlVelX.SetValue("%4.2f"%self.VX)
                    self.ctrlVelY.SetValue("%4.2f"%self.VY)
                    self.ctrlVelZ.SetValue("%4.2f"%self.VZ)
                    self.VAbs = math.sqrt(self.VX**2+self.VY**2+self.VZ**2)
                    self.ctrlVelAbs.SetValue("%4.2f"%self.VAbs)
            
                    #Positionen Anzeigen
                    self.ctrlPosX.SetValue("%4.2f"%self.SollPosX)
                    self.ctrlPosY.SetValue("%4.2f"%self.SollPosY)
                    self.ctrlPosZ.SetValue("%4.2f"%self.SollPosZ) 

                    self.TKamera=numpy.array([self.SollPosX,self.SollPosY,self.SollPosZ]) 
                    
                    # Umrechnen auf Winden Koordinaten
                    self.CalculateRopeVectors()
                    self.SollPostoRopeLength()
                    self.ProjectVelSoltoRopes()                        
                    self.RopesForRender()
                    #print ' YellowIst  : %3.5f  GreenIst  : %3.5f  CyanIst  : %3.5f  MagentaIst  : %3.5f'%(float(self.Yellow.PosIst)     -float(self.Yellow.PosSoll),
                    #print '#YellowIst  : %3.5f #GreenIst  : %3.5f #CyanIst  : %3.5f #MagentaIst  : %3.5f'%(float(self.Yellow.SpeedIstUI)  -float(self.Yellow.SpeedSoll),
                    # und Zykel von Neuem durchlaufen
                    return task.cont                        
                        
                       
        else:
            self.CorrectionPosMode.set(0,0,0) 

  
        #Collision Control anwenden        
        x = x1 + self.cCorrection[0]+ self.cCorrectionMaxKraft[0]+self.cCorrectionMinKraft[0]+self.CorrectionPosMode.getX()       
        y = y1 + self.cCorrection[1]+ self.cCorrectionMaxKraft[1]+self.cCorrectionMinKraft[1]+self.CorrectionPosMode.getY() 
        z = z1 + self.cCorrection[2]+ self.cCorrectionMaxKraft[2]+self.cCorrectionMinKraft[2]+self.CorrectionPosMode.getZ()
        
        #x = x1 + self.cCorrection[0]+ self.CorrectionPosMode.getX()       
        #y = y1 + self.cCorrection[1]+ self.CorrectionPosMode.getY() 
        #z = z1 + self.cCorrection[2]+ self.CorrectionPosMode.getZ()        
        
        StatusYellow=self.Decode.Decode(App.Yellow.Status)[1][0][1]
        #print StatusYellow
        StatusGreen=self.Decode.Decode(App.Green.Status)[1][0][1]
        StatusCyan=self.Decode.Decode(App.Cyan.Status)[1][0][1]
        StatusMagenta=self.Decode.Decode(App.Magenta.Status)[1][0][1]

        if  ((App.Yellow.EsTaster and App.Green.EsTaster and App.Cyan.EsTaster and App.Magenta.EsTaster) and   # Tastergedrueckt
            ((buttons & 32)) and
            (StatusYellow =="10"or  StatusYellow =="SIMUL") and             # Ready or Simul
            (StatusGreen =="10"or StatusGreen =="SIMUL") and               # Ready or Simul
            (StatusCyan =="10"or StatusCyan =="SIMUL") and                 # Ready or Simul
            (StatusMagenta == "10" or StatusMagenta == "SIMUL")):
            pass
        else:# Ready or Simul 
            #print 'stopping'
            x=0
            y=0
            z=0        


        # Anzeigen von cCorrection <>0 cCorrectionMaxKraft <>0 cCorrectionMinKraft <>0
        if ((self.cCorrection[0]<>0 or self.cCorrection[1]<>0 or self.cCorrection[2] <>0) or
            (self.cCorrectionMaxKraft[0]<>0 or self.cCorrectionMaxKraft[1]<>0 or self.cCorrectionMaxKraft[2] <>0) or
            (self.cCorrectionMinKraft[0]<>0 or self.cCorrectionMinKraft[1]<>0 or self.cCorrectionMinKraft[2] <>0)):
            self.ctrlDiffT.SetBackgroundColour('#FFFF00')
        else:
            self.ctrlDiffT.SetBackgroundColour('#FFFFFF')

           
#Berechnung von Vel und Pos
         
        #VelX
        if self.VX < x:
            self.VX = self.VX + self.aAcc*(self.DiffT)#*0.5774
            if self.VX >= x:
                self.VX = x
        elif self.VX > x:
            self.VX = self.VX - self.aAcc*(self.DiffT)#*0.5774
            if self.VX <= x:
                self.VX = x
        #PosX
        self.SollPosX= self.SollPosX + self.VX*(self.DiffT)

        #VelY        
        if self.VY < y:
            self.VY = self.VY + self.aAcc*(self.DiffT)#*0.5774
            if self.VY >= y:
                self.VY = y
        elif self.VY > y:    
            self.VY = self.VY - self.aAcc*(self.DiffT)#*0.5774
            if self.VY <= y:
                self.VY = y
        #PosY
        self.SollPosY= self.SollPosY + self.VY*(self.DiffT)
        
        #VelZ
        if self.VZ < z:
            self.VZ = self.VZ + self.aAcc*(self.DiffT)#*0.5774
            if self.VZ >= z:
                self.VZ = z
        elif self.VZ > z:    
            self.VZ = self.VZ - self.aAcc*(self.DiffT)#*0.5774
            if self.VZ <= z:
                self.VZ = z
        #PosZ
        self.SollPosZ= self.SollPosZ + self.VZ*(self.DiffT)
        
        self.TKamera=numpy.array([self.SollPosX,self.SollPosY,self.SollPosZ])        
               
        #Velocities Anzeigen
        self.ctrlVelX.SetValue("%4.2f"%self.VX)
        self.ctrlVelY.SetValue("%4.2f"%self.VY)
        self.ctrlVelZ.SetValue("%4.2f"%self.VZ)
        self.VAbs = math.sqrt(self.VX**2+self.VY**2+self.VZ**2)
        self.ctrlVelAbs.SetValue("%4.2f"%self.VAbs)

        #Positionen Anzeigen
        self.ctrlPosX.SetValue("%4.2f"%self.SollPosX)
        self.ctrlPosY.SetValue("%4.2f"%self.SollPosY)
        self.ctrlPosZ.SetValue("%4.2f"%self.SollPosZ)
 
        
        #if not(buttons & 32 ) and abs(self.VX) <0.2 and abs(self.VY) <0.2 and abs(self.VZ) <0.2 :
            #self.Yellow.Enable  = 0
            #self.Green.Enable   = 0
            #self.Cyan.Enable    = 0
            #self.Magenta.Enable = 0
            #self.Hold = 0        
        
# Brems ueberwachung

        self.Bremsweg = self.VAbs**2/(2*self.aAcc)
        if self.VAbs == 0:
            self.PointBX=0
            self.PointBY=0
            self.PointBZ=0
            self.cRay.setDirection(self.PointBX,self.PointBY,self.PointBZ-1)
            self.BallColliderB.setPos(0,0,0)
        else:
            self.PointBX = self.Bremsweg*(self.VX/self.VAbs)
            self.PointBY = self.Bremsweg*(self.VY/self.VAbs)
            self.PointBZ = self.Bremsweg*(self.VZ/self.VAbs) 
            BallColliderBPointX = 1.1*self.Bremsweg*(self.VX/self.VAbs)
            BallColliderBPointY = 1.1*self.Bremsweg*(self.VY/self.VAbs)
            BallColliderBPointZ = 1.1*self.Bremsweg*(self.VZ/self.VAbs) 
            if (self.PointBX == 0 and self.PointBY == 0 and self.PointBZ == 0):
                self.cRay.setDirection(self.PointBX,self.PointBY,self.PointBZ-1)
            else:
                self.cRay.setDirection(self.PointBX,self.PointBY,self.PointBZ)
            self.BallColliderB.setPos(BallColliderBPointX,BallColliderBPointY,BallColliderBPointZ)
            
#Seil ueberwachung

        self.YellowSegment.setPointB((self.SollPosX+self.PointBX),(self.SollPosY+self.PointBY),(self.SollPosZ+self.PointBZ)) 
        self.GreenSegment.setPointB((self.SollPosX+self.PointBX),(self.SollPosY+self.PointBY),(self.SollPosZ+self.PointBZ))
        self.CyanSegment.setPointB((self.SollPosX+self.PointBX),(self.SollPosY+self.PointBY),(self.SollPosZ+self.PointBZ))
        self.MagentaSegment.setPointB((self.SollPosX+self.PointBX),(self.SollPosY+self.PointBY),(self.SollPosZ+self.PointBZ))        
                   
        #self.cSphere.setCenter(self.PointBX,self.PointBY,self.PointBZ)
        #-------------------------------------------------------------------------------
        self.Seilkraftkorrektur() 
            
                        
        #collision traverser
        base.cTrav.traverse(render)
        self.queue.sortEntries()
        ##print self.queue
        num=self.queue.getNumEntries()
        if num>0 :
            self.cCorrection = [0,0,0]
            #-------------------------------------------------------------------------------
            for a in range(0,min(16, num)):# Hier nun bis self.queue.getNumEntries() zaehlen
                self.firsthit = self.queue.getEntry(a)
                cType = str(self.firsthit.getFrom().getClassType())
                if cType == 'CollisionSegment':
                    ##print('CollSegment erwischt')
                    normal = self.firsthit.getSurfaceNormal(self.environ)     
                    betrag = math.sqrt(sum(x**2 for x in normal))
                    self.cCorrection[0] += self.JNorm *(normal[0] / betrag)
                    self.cCorrection[1] += self.JNorm *(normal[1] / betrag)     
                    self.cCorrection[2] += self.JNorm *(normal[2] / betrag)
                elif cType == 'CollisionRay':
                    posEnviron = self.firsthit.getSurfacePoint(self.environ)        
                    DistCharacterCollision=math.sqrt((posEnviron.getX()-self.SollPosX)**2+(posEnviron.getY()-self.SollPosY)**2+(posEnviron.getZ()-self.SollPosZ)**2)
                    posEnviron = 0
                    if  (DistCharacterCollision <= (self.Bremsweg)+1.5) :
                        normal = self.firsthit.getSurfaceNormal(self.environ)     
                        betrag = math.sqrt(sum(x**2 for x in normal))
                        self.cCorrection[0] += self.JNorm *(normal[0] / betrag)
                        self.cCorrection[1] += self.JNorm *(normal[1] / betrag)    
                        self.cCorrection[2] += self.JNorm *(normal[2] / betrag)
                elif cType == 'CollisionSphere':
                    normal = self.firsthit.getSurfaceNormal(self.environ)     
                    betrag = math.sqrt(sum(x**2 for x in normal))
                    self.cCorrection[0] += self.JNorm *(normal[0] / betrag)
                    self.cCorrection[1] += self.JNorm *(normal[1] / betrag)     
                    self.cCorrection[2] += self.JNorm *(normal[2] / betrag)
                else:
                    DistCharacterCollision=50000000
                    self.cCorrection[0] =0
                    self.cCorrection[1] =0       
                    self.cCorrection[2] =0
                         
            #-------------------------------------------------------------------------------
        
        self.SollPostoRopeLength()
        self.ProjectVelSoltoRopes()        
        self.RopesForRender()    
        #print ' YellowIst  : %3.5f  GreenIst  : %3.5f  CyanIst  : %3.5f  MagentaIst  : %3.5f'%(float(self.Yellow.PosIst)     -float(self.Yellow.PosSoll),
                                                                                               #float(self.Green.PosIst)       -float(self.Green.PosSoll),
                                                                                               #float(self.Cyan.PosIst)        -float(self.Cyan.PosSoll),
                                                                                               #float(self.Magenta.PosIst)     -float(self.Magenta.PosSoll))
        #print '#YellowIst  : %3.5f #GreenIst  : %3.5f #CyanIst  : %3.5f #MagentaIst  : %3.5f'%(float(self.Yellow.SpeedIstUI)  -float(self.Yellow.SpeedSoll),
                                                                                               #float(self.Green.SpeedIstUI)   -float(self.Green.SpeedSoll),
                                                                                               #float(self.Cyan.SpeedIstUI)    -float(self.Cyan.SpeedSoll),
                                                                                               #float(self.Magenta.SpeedIstUI) -float(self.Magenta.SpeedSoll))

        return task.cont


    def SelectPathTask(self,task):
        T1     = time.clock()
        self.DiffT= T1-self.T1Old
        self.T1Old  = T1

        self.NewMousePosX = self.camHandler.mousepos.getX()
        self.NewMousePosY = self.camHandler.mousepos.getY()         
 
        buttons  =self.stick.GetButtonState()
        POV      = self.stick.GetPOVPosition()        

        self.SumDiffT += self.DiffT
        if self.SumDiffT > 0.5:  
            if POV == 22500 and (self.VAbs == 0) and not(buttons & 32): # Links und Unten (27000:Links)  KeyPoints Active
                self.NewTargetPoint = True
                self.TargetPoint[0] = self.PosX
                self.TargetPoint[1] = self.PosY
                self.TargetPoint[2] = self.PosZ
                self.PointModeStartX = self.PosX
                self.PointModeStartY = self.PosY
                self.PointModeStartZ = self.PosZ                 
                self.KeyPointActive = True
                self.PathActive = False
                self.OnPathFlag = 0
                try:
                    self.PathModell[self.ActivePath].getChild(0).setTexture(self.texPathPink)
                    self.PathModell[self.ActivePath].getChild(0).setScale(self.ScaleReps)
                    self.PathModell[self.ActivePath].getChild(2).setTexture(self.texPathPink)
                    self.PathModell[self.ActivePath].getChild(2).setScale(self.ScaleReps)
                    self.PathModell[self.ActivePath].getChild(3).setTexture(self.texPathPink)
                    self.PathModell[self.ActivePath].getChild(3).node().setThickness(0.3*self.ScaleReps)  
                    self.SollPosition.setPos(self.YellowX,self.YellowY,self.YellowZ) 
                except KeyError:
                    pass                 
                self.btPosMode.SetValue(True)
                self.btPathMode.SetValue(False)
                self.KeyPointPanel.SetBackgroundColour(wx.Colour(102,204,0))
                self.KeyPointPanel.Refresh()
                self.PathPanel.SetBackgroundColour(wx.Colour(187,187,187))
                self.PathPanel.Refresh()
            if POV == 13500 and (self.VAbs == 0) and not(buttons & 32): # Rechts und Unten (9000:Rechts)  Path Active
                self.NewTargetPoint = True
                self.TargetPoint[0] = self.PosX
                self.TargetPoint[1] = self.PosY
                self.TargetPoint[2] = self.PosZ
                self.PointModeStartX = self.PosX
                self.PointModeStartY = self.PosY
                self.PointModeStartZ = self.PosZ                 
                self.KeyPointActive = False
                self.btPosMode.SetValue(False)
                self.btPathMode.SetValue(True)
                self.PathActive = True
                self.OnPathFlag = 0
                try:
                    self.PathModell[self.ActivePath].getChild(3).setTexture(self.texLime)
                    self.PathModell[self.ActivePath].getChild(3).node().setThickness(4.0*self.ScaleReps)
                except KeyError:
                    pass                
                self.KeyPointPanel.SetBackgroundColour(wx.Colour(187,187,187))
                self.KeyPointPanel.Refresh()
                self.PathPanel.SetBackgroundColour(wx.Colour(102,204,0))
                self.PathPanel.Refresh()
            if POV == (4500 or POV == 31500) and (self.VAbs == 0) and not(buttons & 32) :        #Rechts und Oben links und Oben und Oben Key Points Inactive Path Inactive
                self.KeyPointActive = False
                self.btPosMode.SetValue(False)
                self.btPathMode.SetValue(False)
                self.PathActive = False
                self.OnPathFlag = 0
                try:
                    # Anzeige der Punkte zuruecksetzen 
                    for i in range (0,len(self.KeyPosDic.keys())):
                        self.KeyPosModell[self.KeyPosDic.keys()[i]].setTexture(self.texGrayPink)
                        self.KeyPosModell[self.KeyPosDic.keys()[i]].setScale(self.ScaleReps)
                    # Anzeige Pfad zuruecksetzen                    
                    self.PathModell[self.ActivePath].getChild(0).setTexture(self.texPathPink)
                    self.PathModell[self.ActivePath].getChild(0).setScale(self.ScaleReps)
                    self.PathModell[self.ActivePath].getChild(2).setTexture(self.texPathPink)
                    self.PathModell[self.ActivePath].getChild(2).setScale(self.ScaleReps)
                    self.PathModell[self.ActivePath].getChild(3).setTexture(self.texPathPink)
                    self.PathModell[self.ActivePath].getChild(3).node().setThickness(0.3*self.ScaleReps)  
                    self.SollPosition.setPos(self.YellowX,self.YellowY,self.YellowZ)  
                except:
                    pass
                self.KeyPointPanel.SetBackgroundColour(wx.Colour(187,187,187))
                self.KeyPointPanel.Refresh()
                self.PathPanel.SetBackgroundColour(wx.Colour(187,187,187))
                self.PathPanel.Refresh()
            if self.KeyPointActive and POV ==18000  and (self.VAbs == 0) and not(buttons & 32):  #Select Next KeyPoint
                self.OnPOVKeyPointSelectDown()
            if self.KeyPointActive and POV ==0  and (self.VAbs == 0) and not(buttons & 32):      #Select Previous KeyPoint
                self.OnPOVKeyPointSelectUp()
            if self.PathActive and POV ==18000  and (self.VAbs == 0) and not(buttons & 32):      #Select Next Path
                self.OnPOVPathSelectDown()
            if self.PathActive and POV ==0  and (self.VAbs == 0) and not(buttons & 32):          #Select Previous Path
                self.OnPOVPathPointSelectUp()
               
            self.SumDiffT = 0      
        self.SelectDeleteKeyPos()
        
        self.OldMousePosX = self.NewMousePosX
        self.OldMousePosY = self.NewMousePosY          
        
        return task.cont 
   
    def SelectDeleteKeyPos(self):
        splitEntry = [0,0,0]
       
        self.pickerRay.setFromLens(self.frame.p3dViewport.CamPersANP.node(),
                                   self.frame.p3dViewport.camHandlerPers.mousepos.getX(), 
                                   self.frame.p3dViewport .camHandlerPers.mousepos.getY())
        
        self.picker.traverse(render)
        num=self.pq.getNumEntries()
        self.pq.sortEntries()
        if num>0 :
            Picked = self.pq.getEntry(0)
            splitEntry =  str(Picked.getIntoNode()).lstrip('CollisionNode ').split()
            if self.EditingPoint == 0 and self.EditingPath == 0 and self.EditingKeyPoint == 0 :
                # KeyPos
                if  (splitEntry[0] =='KeyPos') and self.KeyPointActive :             # self.EditingPoint == 0 and self.EditingPath == 0 and self.EditingKeyPoint == 0
                    indexSelected = int(splitEntry[1])
                                        
                    for i in range(0,self.listKeyPoints.GetItemCount()):
                            if (self.listKeyPoints.GetItem(i,1).GetText() == str(splitEntry[1])):
                                self.indexSelectedListindex = i
                                break
                    if self.camHandler.mouseleft == '1' and self.OnPathFlag == 0 :
                        self.indexSelectedPoint = indexSelected
                        try:
                            self.TargetPoint[0]=float(self.listKeyPoints.GetItem(self.indexSelectedPoint,2).GetText())
                            self.TargetPoint[1]=float(self.listKeyPoints.GetItem(self.indexSelectedPoint,3).GetText())
                            self.TargetPoint[2]=float(self.listKeyPoints.GetItem(self.indexSelectedPoint,4).GetText())                          
                        except:
                            pass
                        if self.TargetPoint != self.TargetPointOld:
                            self.NewTargetPoint = True
                            self.TargetPointOld[0] = self.TargetPoint[0]
                            self.TargetPointOld[1] = self.TargetPoint[1]
                            self.TargetPointOld[2] = self.TargetPoint[2]
                        else:
                            self.NewTargetPoint = False 
                            
                        for i in range (0,len(self.KeyPosDic.keys())):
                            self.KeyPosModell[self.KeyPosDic.keys()[i]].setTexture(self.texGrayPink)
                            self.KeyPosModell[self.KeyPosDic.keys()[i]].setScale(self.ScaleReps)
                        self.KeyPosModell[indexSelected].setTexture(self.texLime)
                        self.KeyPosModell[indexSelected].setScale(self.ScaleReps*1.5)
                        self.btPosMode.Enable(True)
                        for i in range(0,self.listKeyPoints.GetItemCount()):
                            if (self.listKeyPoints.GetItem(i,1).GetText() == str(indexSelected)):
                                self.listKeyPoints.EnsureVisible(i)                            
                                break
                    if (self.camHandler.mouseleft == '1'and self.camHandler.mousemod == '1' and not(self.btStartState)):
                        self.DeletePoint(indexSelected)
                        self.indexSelectedPoint = -1000
                    if (self.camHandler.mouseleft == '1'and self.camHandler.mousemod == '2' and not(self.btStartState)):                                       # e-Key pressed
                        self.EditingPoint = 1
                        self.indexSelectedPoint = indexSelected
                        self.OnKeyPointColumnClick("0")

                # Paths
                elif  ((splitEntry[0] =='PathMarkerBeginn'  or splitEntry[0] =='PathMarkerEnd' or splitEntry[0] =='PathMarker')) and self.PathActive:   #and self.EditingKeyPoint == 0 and self.EditingPoint == 0 and self.EditingPath == 0 ) :
                    self.indexSelectedPath = int(splitEntry[1])
                    indexSelectedPath = int(splitEntry[1])
                    if splitEntry[0] == 'PathMarkerBeginn':
                        self.EditNode = 0
                    elif splitEntry[0] == 'PathMarkerEnd':
                        self.EditNode = 2                         
                    else:
                        self.EditNode = 1                            
                    if self.camHandler.mouseleft == '1'and self.OnPathFlag == 0:
                        indexSelected = int(splitEntry[1])
                        PickedNodePath = self.pq.getEntry(0).getIntoNodePath()                    
                        PickedNodePathPos = PickedNodePath.getPos(render)
                        if self.ShowKeyPointsFlag == 1:
                            self.OnShowKeyPoints()                        
                        self.ActivatePath(indexSelected,PickedNodePathPos)
                        if self.EditNode == 2:
                            try:
                                self.TargetPoint[0] = self.PathModell[self.ActivePath].getChild(2).getPos(render)[0]
                                self.TargetPoint[1] = self.PathModell[self.ActivePath].getChild(2).getPos(render)[1]
                                self.TargetPoint[2] = self.PathModell[self.ActivePath].getChild(2).getPos(render)[2]
                                self.PathTargetPoint[0] = self.TargetPoint[0]
                                self.PathTargetPoint[1] = self.TargetPoint[1]
                                self.PathTargetPoint[2] = self.TargetPoint[2]                                
                                if self.TargetPoint != self.TargetPointOld:
                                    self.NewTargetPoint = True
                                    self.TargetPointOld[0] = self.TargetPoint[0]
                                    self.TargetPointOld[1] = self.TargetPoint[1]
                                    self.TargetPointOld[2] = self.TargetPoint[2]
                                else:
                                    self.NewTargetPoint = False
                                #self.PathBogenPos=1.0*self.KeyPathDic[self.ActivePath][4]
                                #nicht ganz bis Ende
                                self.PathBogenPos=0.999*self.KeyPathDic[self.ActivePath][4]
                            except KeyError:
                                pass 
                        else:
                            try:
                                self.TargetPoint[0] = self.PathModell[self.ActivePath].getChild(0).getPos(render)[0]
                                self.TargetPoint[1] = self.PathModell[self.ActivePath].getChild(0).getPos(render)[1]
                                self.TargetPoint[2] = self.PathModell[self.ActivePath].getChild(0).getPos(render)[2]
                                self.PathTargetPoint[0] = self.TargetPoint[0]
                                self.PathTargetPoint[1] = self.TargetPoint[1]
                                self.PathTargetPoint[2] = self.TargetPoint[2]                                
                                if self.TargetPoint != self.TargetPointOld:
                                    self.NewTargetPoint = True
                                    self.TargetPointOld[0] = self.TargetPoint[0]
                                    self.TargetPointOld[1] = self.TargetPoint[1]
                                    self.TargetPointOld[2] = self.TargetPoint[2]
                                else:
                                    self.NewTargetPoint = False
                                #self.PathBogenPos=0.0*self.KeyPathDic[self.ActivePath][4]
                                #nicht ganz bis Anfang
                                self.PathBogenPos=0.001*self.KeyPathDic[self.ActivePath][4]
                            except KeyError:
                                pass                         
                    if (self.camHandler.mouseright == '1'and self.camHandler.mousemod == '1'and not(self.btStartState)):
                        indexSelected = int(splitEntry[1])
                        self.HidePath(indexSelected)
                    if (self.camHandler.mouseleft == '1'and self.camHandler.mousemod == '2' and not(self.btStartState)):
                        self.EditingPath = 1
                        indexSelected = int(splitEntry[1])
                        self.indexSelectedPath = indexSelected                        
                        self.OpenEditingPathWindow(indexSelected)
                        self.EditPath(indexSelected,self.EditNode)
                elif (splitEntry[0] =='KeyPoint'):                                                                                  #and self.EditingPath == 0 and self.EditingPoint == 0)
                    if (self.camHandler.mouseleft == '1' and self.camHandler.mousemod == '2'and not(self.btStartState)):                                      # e-Key pressed
                            self.EditingKeyPoint = 1
                            if self.PathModell[self.indexSelectedPath].find('KeyPointSuperNodeCopy').isEmpty():
                                KeyPointSuperNodeCopy = self.PathModell[self.indexSelectedPath].attachNewNode('KeyPointSuperNodeCopy')        
                                self.PathModell[self.indexSelectedPath].find('KeyPointSuperNode').copyTo(KeyPointSuperNodeCopy)
                            self.indexSelectedKeyPoint = int(splitEntry[1])
                            if self.OpenEditingKeyPointWindow != None:
                                self.OpenEditingKeyPointWindow(self.indexSelectedPath,self.indexSelectedKeyPoint)                          
                            self.EditKeyPoint(self.indexSelectedPath,self.indexSelectedKeyPoint,'New') 

        if self.EditingPoint ==1:
            if num > 0:
                try:
                    int(splitEntry[1])
                    EntryInt = True
                except ValueError:
                    EntryInt = False
                if (self.camHandler.mouseleft == '1' and EntryInt ):
                                        self.indexSelectedPoint = int(splitEntry[1]) 
                                        for i in range(0,self.listKeyPoints.GetItemCount()):
                                                if (self.listKeyPoints.GetItem(i,1).GetText() == str(splitEntry[1])):
                                                    index = i                                        
                                        self.KeyPosListWindow.listBigKeyPoints.SetItemState(index,wx.LIST_STATE_SELECTED,wx.LIST_STATE_SELECTED)
                                        self.EditPoint(self.indexSelectedPoint)                 
            self.EditPoint(self.indexSelectedPoint)
        if self.EditingPath ==1:
            self.EditPath(self.indexSelectedPath,self.EditNode)
        if self.EditingKeyPoint == 1 :
            if num > 0 and self.Drag == 0:
                try:
                    int(splitEntry[1])
                    EntryInt = True
                except ValueError:
                    EntryInt = False
                if (self.camHandler.mouseleft == '1' and EntryInt ):
                                        self.indexSelectedKeyPoint = int(splitEntry[1])
                                        for i in range(0,self.KeyPointWindow.listPoints.GetItemCount()):
                                            self.KeyPointWindow.listPoints.SetItemState(i,0,wx.LIST_STATE_SELECTED)
                                        self.KeyPointWindow.listPoints.SetItemState(self.indexSelectedKeyPoint,wx.LIST_STATE_SELECTED,wx.LIST_STATE_SELECTED)
                                        self.KeyPointWindow.listPoints.EnsureVisible(self.indexSelectedKeyPoint)
                                        self.EditKeyPoint(self.indexSelectedPath,self.indexSelectedKeyPoint,'New')                 
            self.EditKeyPoint(self.indexSelectedPath,self.indexSelectedKeyPoint,'Old')
                
        if self.camHandler.mousemod == '3':
            self.EditingPoint = 0
            self.EditingPath = 0
            self.EditingKeyPoint = 0
            self.PfeilRed.setPos(self.YellowX,self.YellowY,self.YellowZ)
            self.PfeilBlue.setPos(self.YellowX,self.YellowY,self.YellowZ)
            self.PfeilGreen.setPos(self.YellowX,self.YellowY,self.YellowZ)
            self.TorusRed.setPos(self.YellowX,self.YellowY,self.YellowZ)
            self.TorusGreen.setPos(self.YellowX,self.YellowY,self.YellowZ)
            self.TorusBlue.setPos(self.YellowX,self.YellowY,self.YellowZ)
            
# ************ Path Edit Window Beginn 
    def OpenEditingPathWindow(self,indexSelectedPath):
        self.logger.info('Initialised / PathEditWindow')
        
        self.btStart.Enable(False)
        self.btAxisSetup.Enable(False)
        self.btYellowSetup.Enable(False)
        self.btGreenSetup.Enable(False)            
        self.btCyanSetup.Enable(False)
        self.btMagentaSetup.Enable(False)
        self.btPosSetup.Enable(False)
        self.btKeyPointLoad.Enable(False)
        self.btKeyPointSave.Enable(False)
        self.btPosMode.Enable(False)
        self.btPathLoad.Enable(False)
        self.btPathSave.Enable(False)
        self.btPathMode.Enable(False)
        self.listKeyPoints.Enable(False)
        self.listPaths.Enable(False)
        
        if render.find('PathsNode').find('PathNodeCopy').isEmpty():
            PathNodeCopy = render.find('PathsNode').attachNewNode('PathNodeCopy')
            self.PathModell[indexSelectedPath].copyTo(PathNodeCopy)
        if not(render.find('PathsNode').find('PathNodeCopy').isEmpty()):
            self.PathModell[indexSelectedPath].find('**/Rope').setTexture(self.texBlue)
            
        self.PathModellPreTransform = NodePath('PathModellPreTransform')
        self.PathModell[indexSelectedPath].copyTo(self.PathModellPreTransform)
      
        res = xrc.XmlResource('WWLayout0-12a.xrc')
        self.PathEditWindow = res.LoadFrame(self.frame,'PathEditWindow')        
        self.PathEditWindow.Show()
        self.logger.info('Initialising / PathEditWindow')
        
        self.PathEditWindow.btnAdd      = xrc.XRCCTRL(self.PathEditWindow,'btnAdd')
        self.PathEditWindow.btnReplace  = xrc.XRCCTRL(self.PathEditWindow,'btnReplace')
        self.PathEditWindow.btnQuit     = xrc.XRCCTRL(self.PathEditWindow,'btnQuit')  
        
        self.PathEditWindow.listPathsOriginal = xrc.XRCCTRL(self.PathEditWindow,'listPathOriginal')
        self.PathEditWindow.listPathsOriginal.InsertColumn(0,'Description',format= wx.LIST_FORMAT_LEFT,width = 75)
        self.PathEditWindow.listPathsOriginal.InsertColumn(1,'Vis',format= wx.LIST_FORMAT_CENTER,width = 30)
        self.PathEditWindow.listPathsOriginal.InsertColumn(2,'Number',format= wx.LIST_FORMAT_CENTER,width = 55)
        self.PathEditWindow.listPathsOriginal.InsertColumn(3,'X-Start',format= wx.LIST_FORMAT_CENTER,width = 55)
        self.PathEditWindow.listPathsOriginal.InsertColumn(4,'Y-Start',format= wx.LIST_FORMAT_CENTER,width = 55)
        self.PathEditWindow.listPathsOriginal.InsertColumn(5,'Z-Start',format= wx.LIST_FORMAT_CENTER,width = 55)
        self.PathEditWindow.listPathsOriginal.InsertColumn(6,'X-End',format= wx.LIST_FORMAT_CENTER,width = 55)
        self.PathEditWindow.listPathsOriginal.InsertColumn(7,'Y-End',format= wx.LIST_FORMAT_CENTER,width = 55)
        self.PathEditWindow.listPathsOriginal.InsertColumn(8,'Z-End',format= wx.LIST_FORMAT_CENTER,width = 55)
        self.PathEditWindow.listPathsOriginal.InsertColumn(9,'Length',format= wx.LIST_FORMAT_CENTER,width = 55)
        self.PathEditWindow.listPathsOriginal.InsertColumn(10,'Speed Desc.',format= wx.LIST_FORMAT_CENTER,width = 100)
        self.PathEditWindow.listPathsOriginal.InsertColumn(11,'Duration',format= wx.LIST_FORMAT_CENTER,width = 100)
        
        self.PathEditWindow.listPathTransformation = xrc.XRCCTRL(self.PathEditWindow,'listPathTransformation')
        self.PathEditWindow.listPathTransformation.Bind(wx.EVT_LIST_BEGIN_LABEL_EDIT, self.OnBeginLabelPathEditWindowListEdit)
        self.PathEditWindow.listPathTransformation.Bind(wx.EVT_LIST_END_LABEL_EDIT ,self.OnUpdateAfterPathEditWindowListEdit)        
        self.PathEditWindow.listPathTransformation.InsertColumn(0,'                            Rotation',format= wx.LIST_FORMAT_CENTER,width = 271)
        self.PathEditWindow.listPathTransformation.InsertColumn(1,'Rot - R',format= wx.LIST_FORMAT_CENTER,width = 55)
        self.PathEditWindow.listPathTransformation.InsertColumn(2,'Rot - G',format= wx.LIST_FORMAT_CENTER,width = 55)
        self.PathEditWindow.listPathTransformation.InsertColumn(3,'Rot - B',format= wx.LIST_FORMAT_CENTER,width = 55)
        self.PathEditWindow.listPathTransformation.InsertColumn(4,'         Change Speed Desc.',format= wx.LIST_FORMAT_CENTER,width = 310)

        
        self.PathEditWindow.listPathsCopy = xrc.XRCCTRL(self.PathEditWindow,'listPathCopy')
        self.PathEditWindow.listPathsCopy.Bind(wx.EVT_LIST_BEGIN_LABEL_EDIT, self.OnBeginLabelPathEditWindowCopyListEdit)
        self.PathEditWindow.listPathsCopy.Bind(wx.EVT_LIST_END_LABEL_EDIT ,self.OnUpdateAfterPathEditWindowCopyListEdit)         
        self.PathEditWindow.listPathsCopy.InsertColumn(0,'Description',format= wx.LIST_FORMAT_LEFT,width = 75)
        self.PathEditWindow.listPathsCopy.InsertColumn(1,'Vis',format= wx.LIST_FORMAT_CENTER,width = 30)
        self.PathEditWindow.listPathsCopy.InsertColumn(2,'Number',format= wx.LIST_FORMAT_CENTER,width = 55)
        self.PathEditWindow.listPathsCopy.InsertColumn(3,'X-Start',format= wx.LIST_FORMAT_CENTER,width = 55)
        self.PathEditWindow.listPathsCopy.InsertColumn(4,'Y-Start',format= wx.LIST_FORMAT_CENTER,width = 55)
        self.PathEditWindow.listPathsCopy.InsertColumn(5,'Z-Start',format= wx.LIST_FORMAT_CENTER,width = 55)
        self.PathEditWindow.listPathsCopy.InsertColumn(6,'X-End',format= wx.LIST_FORMAT_CENTER,width = 55)
        self.PathEditWindow.listPathsCopy.InsertColumn(7,'Y-End',format= wx.LIST_FORMAT_CENTER,width = 55)
        self.PathEditWindow.listPathsCopy.InsertColumn(8,'Z-End',format= wx.LIST_FORMAT_CENTER,width = 55)
        self.PathEditWindow.listPathsCopy.InsertColumn(9,'Length',format= wx.LIST_FORMAT_CENTER,width = 55)
        self.PathEditWindow.listPathsCopy.InsertColumn(10,'Speed Desc.',format= wx.LIST_FORMAT_CENTER,width = 100)
        self.PathEditWindow.listPathsCopy.InsertColumn(11,'Duration',format= wx.LIST_FORMAT_CENTER,width = 100) 

        for i in range(0,self.listPaths.GetItemCount()):
                if (self.listPaths.GetItem(i,2).GetText() == str(indexSelectedPath)):
                    index = i        

        pos = self.PathEditWindow.listPathsOriginal.InsertStringItem(0,self.listPaths.GetItem(index).GetText())
        self.PathEditWindow.listPathsOriginal.SetStringItem(0, 1, self.listPaths.GetItem(index,1).GetText() )
        self.PathEditWindow.listPathsOriginal.SetStringItem(0, 2, self.listPaths.GetItem(index,2).GetText() )
        kp = float(self.listPaths.GetItem(index,3).GetText())
        self.PathEditWindow.listPathsOriginal.SetStringItem(0, 3, str('%.2f'%kp) )
        kp = float(self.listPaths.GetItem(index,4).GetText())
        self.PathEditWindow.listPathsOriginal.SetStringItem(0, 4, str('%.2f'%kp) )
        kp = float(self.listPaths.GetItem(index,5).GetText())
        self.PathEditWindow.listPathsOriginal.SetStringItem(0, 5, str('%.2f'%kp) )
        kp = float(self.listPaths.GetItem(index,6).GetText())
        self.PathEditWindow.listPathsOriginal.SetStringItem(0, 6, str('%.2f'%kp) )
        kp = float(self.listPaths.GetItem(index,7).GetText())
        self.PathEditWindow.listPathsOriginal.SetStringItem(0, 7, str('%.2f'%kp) )
        kp = float(self.listPaths.GetItem(index,8).GetText())
        self.PathEditWindow.listPathsOriginal.SetStringItem(0, 8, str('%.2f'%kp) )
        kp = float(self.listPaths.GetItem(index,9).GetText())
        self.PathEditWindow.listPathsOriginal.SetStringItem(0, 9, str('%.2f'%kp) )
        kp = (self.listPaths.GetItem(index,10).GetText())
        self.PathEditWindow.listPathsOriginal.SetStringItem(0, 10, kp)  
        kp = float(self.listPaths.GetItem(index,11).GetText())
        self.PathEditWindow.listPathsOriginal.SetStringItem(0, 11, str('%.2f'%kp) )        
        
        self.dummy = render.attachNewNode("dummy")        
        self.dummy.reparentTo(render)        
        

        if self.KeyPathDic[indexSelectedPath][6].isIdentity() :
            TransX = 0.00
            TransY = 0.00
            TransZ = 0.00
            RotX = 0.00
            RotY = 0.00
            RotZ = 0.00
        if self.KeyPathDic[indexSelectedPath][6].hasPos():
            Pos = self.KeyPathDic[indexSelectedPath][6].getPos()
            TransX = Pos[0]
            TransY = Pos[1]
            TransZ = Pos[2]
        else:
            TransX = 0.00
            TransY = 0.00
            TransZ = 0.00            
        if self.KeyPathDic[indexSelectedPath][6].hasHpr():
            Rot = self.KeyPathDic[indexSelectedPath][6].getHpr()
            RotX = Rot[1]
            RotY = Rot[2]
            RotZ = Rot[0]
        else:
            RotX = 0.00
            RotY = 0.00
            RotZ = 0.00            
        
        pos = self.PathEditWindow.listPathTransformation.InsertStringItem(0,'')
        self.PathEditWindow.listPathTransformation.SetStringItem(0, 1,   str('%.2f'%RotX) )
        self.PathEditWindow.listPathTransformation.SetStringItem(0, 2,   str('%.2f'%RotY) )
        self.PathEditWindow.listPathTransformation.SetStringItem(0, 3,  str('%.2f'%RotZ) )
        self.PathEditWindow.listPathTransformation.SetStringItem(0, 4,  'Click to Change')
       
        
        pos = self.PathEditWindow.listPathsCopy.InsertStringItem(0,self.listPaths.GetItem(index).GetText())
        self.PathEditWindow.listPathsCopy.SetStringItem(0, 1, self.listPaths.GetItem(index,1).GetText() )
        self.PathEditWindow.listPathsCopy.SetStringItem(0, 2, self.listPaths.GetItem(index,2).GetText() )
        kp = float(self.listPaths.GetItem(index,3).GetText())
        self.PathEditWindow.listPathsCopy.SetStringItem(0, 3, str('%.2f'%kp) )
        kp = float(self.listPaths.GetItem(index,4).GetText())
        self.PathEditWindow.listPathsCopy.SetStringItem(0, 4, str('%.2f'%kp) )
        kp = float(self.listPaths.GetItem(index,5).GetText())
        self.PathEditWindow.listPathsCopy.SetStringItem(0, 5, str('%.2f'%kp) )
        kp = float(self.listPaths.GetItem(index,6).GetText())
        self.PathEditWindow.listPathsCopy.SetStringItem(0, 6, str('%.2f'%kp) )
        kp = float(self.listPaths.GetItem(index,7).GetText())
        self.PathEditWindow.listPathsCopy.SetStringItem(0, 7, str('%.2f'%kp) )
        kp = float(self.listPaths.GetItem(index,8).GetText())
        self.PathEditWindow.listPathsCopy.SetStringItem(0, 8, str('%.2f'%kp) )
        kp = float(self.listPaths.GetItem(index,9).GetText())
        self.PathEditWindow.listPathsCopy.SetStringItem(0, 9, str('%.2f'%kp) ) 
        kp = (self.listPaths.GetItem(index,10).GetText())
        self.PathEditWindow.listPathsCopy.SetStringItem(0, 10, kp) 
        kp = float(self.listPaths.GetItem(index,11).GetText())
        self.PathEditWindow.listPathsCopy.SetStringItem(0, 11, str('%.2f'%kp) )        
            
        self.PathEditWindow.Bind(wx.EVT_BUTTON, self.OnPathEditAdd, id=xrc.XRCID('btnAdd'))
        self.PathEditWindow.Bind(wx.EVT_BUTTON, self.OnPathEditReplace, id=xrc.XRCID('btnReplace'))
        self.PathEditWindow.Bind(wx.EVT_BUTTON, self.OnPathEditQuit, id=xrc.XRCID('btnQuit'))
        self.PathEditWindow.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnPathListDoubleClick , id=xrc.XRCID('listPaths'))        
        
        self.logger.info('Initialised / PathEditWindow')
    def OnBeginLabelPathEditWindowCopyListEdit(self,evt):
        # Anfangs und Endposition 
        if evt.m_col == 0 or evt.m_col == 1 or evt.m_col == 2 or evt.m_col == 9 or evt.m_col == 10 or evt.m_col == 11:
            evt.Veto()
        else:
            evt.Skip()        
    def OnUpdateAfterPathEditWindowCopyListEdit(self,evt):
        # Anfangs und Endposition
        item = evt.m_itemIndex
        col = evt.m_col
        text = evt.GetText()
        self._HelperOnUpdateAfterPathEditWindowCopyListEdit(item,col,text)
        
    def _HelperOnUpdateAfterPathEditWindowCopyListEdit(self,item,col,text):
        # Anfangs und Endposition

        OldPos = self.PathEditWindow.listPathsCopy.GetItem(item,col).GetText()
        PosStart = self.PathModell[self.indexSelectedPath].getChild(0).getPos()
        PosEnd = self.PathModell[self.indexSelectedPath].getChild(2).getPos()
        PosPath = self.PathModell[self.indexSelectedPath].getPos()
        
        if text[0]== '/':
            relative = 1
            F = float(text.lstrip('/'))
        else:
            relative = 0
            F = float(text)
            
        #self.PathEditWindow.listPathsCopy.SetStringItem(item,col,str(F))
        
        Delta = F -float(OldPos)

        if relative == 1:
            if col == 3:                
                self.PathModell[self.indexSelectedPath].setPos(PosPath[0]+F,PosPath[1],PosPath[2])
            if col == 4:
                self.PathModell[self.indexSelectedPath].setPos(PosPath[0],PosPath[1]+F,PosPath[2])
            if col == 5:
                self.PathModell[self.indexSelectedPath].setPos(PosPath[0],PosPath[1],PosPath[2]+F)
            if col == 6:
                self.PathModell[self.indexSelectedPath].setPos(PosPath[0]+F,PosPath[1],PosPath[2])                
            if col == 7:
                self.PathModell[self.indexSelectedPath].setPos(PosPath[0],PosPath[1]+F,PosPath[2]) 
            if col == 8:
                self.PathModell[self.indexSelectedPath].setPos(PosPath[0],PosPath[1],PosPath[2]+F)
        else:
            if col == 3:
                self.PathModell[self.indexSelectedPath].setPos(PosPath[0]+Delta,PosPath[1],PosPath[2])
            if col == 4:
                self.PathModell[self.indexSelectedPath].setPos(PosPath[0],PosPath[1]+Delta,PosPath[2])
            if col == 5:
                self.PathModell[self.indexSelectedPath].setPos(PosPath[0],PosPath[1],PosPath[2]+Delta)
            if col == 6:
                self.PathModell[self.indexSelectedPath].setPos(PosPath[0]+Delta,PosPath[1],PosPath[2])
            if col == 7:
                self.PathModell[self.indexSelectedPath].setPos(PosPath[0],PosPath[1]+Delta,PosPath[2]) 
            if col == 8:
                self.PathModell[self.indexSelectedPath].setPos(PosPath[0],PosPath[1],PosPath[2]+Delta)          
            
        self.KeyPathDic[self.indexSelectedPath][6]= self.PathModell[self.indexSelectedPath].getTransform() 
        
    def OnBeginLabelPathEditWindowListEdit(self,evt):
        # Transformation
        if evt.m_col == 0 :
            evt.Veto()
        else:
            evt.Skip()
    def OnUpdateAfterPathEditWindowListEdit(self,evt):
        # Transformation
        item = evt.m_itemIndex
        col = evt.m_col
        text = evt.GetText()
        self._HelperOnUpdateAfterPathEditWindowListEdit(item,col,text)
        
    def _HelperOnUpdateAfterPathEditWindowListEdit(self,item,col,text):

        if text[0]== '/':
            relative = 1
            F = float(text.lstrip('/'))
        else:
            relative = 0
            F = float(text)
            
        if relative == 1:
            if col == 1:
                self.DeltaMouseRed   = self.DeltaMouseRed+F
            if col == 2:
                self.DeltaMouseGreen = Self.DeltaMouseGreen+F  
            if col == 3:
                self.DeltaMouseBlue  = self.DeltaMouseBlue+F
        else:
            if col == 1:
                self.DeltaMouseRed   = F
            if col == 2:
                self.DeltaMouseGreen = F 
            if col == 3:
                self.DeltaMouseBlue  = F       

    
    def OnPathEditAdd(self,evt):
        self.logger.info('Start OnPathEditAdd')
        
        self.PfeilRed.setPos(self.YellowX,self.YellowY,self.YellowZ)
        self.PfeilBlue.setPos(self.YellowX,self.YellowY,self.YellowZ)
        self.PfeilGreen.setPos(self.YellowX,self.YellowY,self.YellowZ)         
        self.TorusRed.setPos(self.YellowX,self.YellowY,self.YellowZ)
        self.TorusGreen.setPos(self.YellowX,self.YellowY,self.YellowZ)
        self.TorusBlue.setPos(self.YellowX,self.YellowY,self.YellowZ) 

        NewKey = (max(self.KeyPathDic.keys())+1)        
        self.KeyPathDic[NewKey]= copy.deepcopy(self.KeyPathDic[self.indexSelectedPath])

        self.KeyPathDic[self.indexSelectedPath][6] = self.PathModellPreTransform.getChild(0).getTransform()
        self.KeyPathDic[NewKey][0] = str('*'+str(self.KeyPathDic[self.indexSelectedPath][0]))
        
        self.SavePaths('TempPaths.kpat')
        self.LoadPaths('TempPaths.kpat') 
       
        if not(render.find('PathsNode').find('PathNodeCopy').isEmpty()):
            render.find('PathsNode').find('PathNodeCopy').removeNode()
            
        self.btStart.Enable(True)
        self.listKeyPoints.Enable(True)
        self.listPaths.Enable(True)
        
        self.btAxisSetup.Enable(True)
        # obsolet self.btYellowSetup.Enable(True)
        # obsolet self.btGreenSetup.Enable(True)            
        # obsolet self.btCyanSetup.Enable(True)
        # obsolet self.btMagentaSetup.Enable(True)
        self.btPosSetup.Enable(True)
        self.btKeyPointLoad.Enable(True)
        self.btKeyPointSave.Enable(True)
        self.btPathLoad.Enable(True)
        self.btPathSave.Enable(True)         
        
        self.indexSelectedPath = 0
        self.indexSelectedKeyPoint = 0         
        self.EditingPath = 0
        self.PathEditWindow.Close()
        self.dummy.remove_node()
        self.DeltaMouseRed = 0
        self.DeltaMouseGreen = 0
        self.DeltaMouseBlue = 0
        
        self.logger.info('End OnPathEditAdd')
        
    def OnPathEditReplace(self,evt):
        self.logger.info('Start OnPathEditReplace')
        
        self.PfeilRed.setPos(self.YellowX,self.YellowY,self.YellowZ)
        self.PfeilBlue.setPos(self.YellowX,self.YellowY,self.YellowZ)
        self.PfeilGreen.setPos(self.YellowX,self.YellowY,self.YellowZ)         
        self.TorusRed.setPos(self.YellowX,self.YellowY,self.YellowZ)
        self.TorusGreen.setPos(self.YellowX,self.YellowY,self.YellowZ)
        self.TorusBlue.setPos(self.YellowX,self.YellowY,self.YellowZ)  
        
        self.SavePaths('TempPaths.kpat')
        self.LoadPaths('TempPaths.kpat') 
       
        if not(render.find('PathsNode').find('PathNodeCopy').isEmpty()):
            render.find('PathsNode').find('PathNodeCopy').removeNode() 
        
        self.btStart.Enable(True)
        self.listKeyPoints.Enable(True)
        self.listPaths.Enable(True)
        
        self.btAxisSetup.Enable(True)
        # obsolet self.btYellowSetup.Enable(True)
        # obsolet self.btGreenSetup.Enable(True)            
        # obsolet self.btCyanSetup.Enable(True)
        # obsolet self.btMagentaSetup.Enable(True)
        self.btPosSetup.Enable(True)
        self.btKeyPointLoad.Enable(True)
        self.btKeyPointSave.Enable(True)
        self.btPathLoad.Enable(True)
        self.btPathSave.Enable(True)         
        
        self.indexSelectedPath = 0
        self.indexSelectedKeyPoint = 0         
        self.EditingPath = 0
        self.PathEditWindow.Close()
        self.dummy.remove_node()
        self.DeltaMouseRed = 0
        self.DeltaMouseGreen = 0
        self.DeltaMouseBlue = 0        
        
        self.logger.info('End OnPathEditReplace')
        
    def OnPathEditQuit(self,evt):
        self.logger.info('Start OnPathEditQuit')
        #render.find('PathsNode').ls()        
        if not(render.find('PathsNode').find('PathNodeCopy').isEmpty()):
            render.find('PathsNode').find('PathNodeCopy').removeNode()
            render.find('PathsNode').find('PathNode '+str(self.indexSelectedPath)).removeNode()
            self.PathModell[self.indexSelectedPath] = self.PathModellPreTransform.getChild(0)
            self.PathModell[self.indexSelectedPath].reparentTo(render.find('PathsNode'))

        self.PfeilRed.setPos(self.YellowX,self.YellowY,self.YellowZ)
        self.PfeilBlue.setPos(self.YellowX,self.YellowY,self.YellowZ)
        self.PfeilGreen.setPos(self.YellowX,self.YellowY,self.YellowZ)         
        self.TorusRed.setPos(self.YellowX,self.YellowY,self.YellowZ)
        self.TorusGreen.setPos(self.YellowX,self.YellowY,self.YellowZ)
        self.TorusBlue.setPos(self.YellowX,self.YellowY,self.YellowZ)
        for key in self.PathModell.iterkeys(): 
            self.PathModell[key].getChild(3).node().setRenderMode(RopeNode.RMThread)
            self.PathModell[key].getChild(3).node().setThickness(0.3*self.ScaleReps)
            self.PathModell[key].getChild(3).setTexture(self.texPathPink) 
            self.PathModell[key].getChild(0).setTexture(self.texPathPink)
            self.PathModell[key].getChild(1).setTexture(self.texPathPink)
            self.PathModell[key].getChild(2).setTexture(self.texPathPink)
            
        self.btStart.Enable(True)
        self.listKeyPoints.Enable(True)
        self.listPaths.Enable(True)
        
        self.btAxisSetup.Enable(True)
        # obsolet self.btYellowSetup.Enable(True)
        # obsolet self.btGreenSetup.Enable(True)            
        # obsolet self.btCyanSetup.Enable(True)
        # obsolet self.btMagentaSetup.Enable(True)
        self.btPosSetup.Enable(True)
        self.btKeyPointLoad.Enable(True)
        self.btKeyPointSave.Enable(True)
        self.btPathLoad.Enable(True)
        self.btPathSave.Enable(True)        
        
        
        self.indexSelectedPath = None
        self.indexSelectedKeyPoint = 0 
        self.EditingPath = 0
        self.PathEditWindow.Close()
        self.dummy.remove_node()
        self.DeltaMouseRed = 0
        self.DeltaMouseGreen = 0
        self.DeltaMouseBlue = 0
        
        self.logger.info('End OnPathEditQuit')
# ************ Path Edit Window End
    def OnBeginLabelKeyPointWindowListEdit(self,evt):
        if evt.m_col == 0 or evt.m_col == 1 or evt.m_col == 3 or evt.m_col == 5 :
            evt.Veto()
        else:
            Pos = self.PathModell[self.indexSelectedPath].find('KeyPointSuperNodeCopy').find('**/=KeyBall ='+str(evt.m_itemIndex)).getPos(render)
            self.PfeilRed.setPos(render,Pos)
            self.PfeilBlue.setPos(render,Pos)
            self.PfeilGreen.setPos(render,Pos)
            evt.Skip()

    def OnKeyPointWindowListEditSelected(self,evt):
        item = evt.m_itemIndex 
        Pos = self.PathModell[self.indexSelectedPath].find('KeyPointSuperNodeCopy').find('**/=KeyBall ='+str(item)).getPos(render)
        self.indexSelectedKeyPoint = item
        self.UpdateGrenzVel = True
        self.EditKeyPointUpdate(Pos, self.indexSelectedPath,self.indexSelectedKeyPoint)
        evt.Skip()        
        
        
    def OnUpdateAfterKeyPointWindowListEdit(self,evt):
        item = evt.m_itemIndex
        col = evt.m_col
        text = evt.GetText()
        oldText = self.KeyPointWindow.listPoints.GetItem(item,col).GetText()
        self._HelperOnUpdateAfterKeyPointWindowListEdit(item,col,text,oldText) 
        
    def _HelperOnUpdateAfterKeyPointWindowListEdit(self,item,col,text,oldText):
        #if self.KeyPointWindow.listPoints.GetItem(item,0).GetText() == 'Looked' :
            #PosNew = Pos
        #else:
        
        Pos    = self.PathModell[self.indexSelectedPath].find('KeyPointSuperNodeCopy').find('**/=KeyBall ='+str(item)).getPos(render)
        PosOld = self.PathModell[self.indexSelectedPath].find('KeyPointSuperNode').find('**/=KeyBall ='+str(item)).getPos(render)
        
        try:
            Fold = float(oldText)
        except ValueError:
            Fold = 0.0
            pass        
        

        if text == '':
            PosNew = Pos
            self.KeyPointWindow.listPoints.SetStringItem(item,col, '0.0')
            self.EditKeyPointUpdate(PosNew, self.indexSelectedPath,self.indexSelectedKeyPoint)            
        elif text[0]== '/':
            relative = 1
            try:
                F = float(text.lstrip('/'))
            except ValueError:
                F = 0.0
                pass
        elif text[0]=='*':
            relative = 2
            try:
                F = float(text.lstrip('*'))
            except ValueError:
                F = 0.0
                pass            
        else:
            relative = 0
            try:
                F = float(text)
            except ValueError:
                relative = 1
                F = 0.0
                pass
            
            
        if relative == 1:
            if col == 2 :
                PosNew = (Pos[0]+F,Pos[1],Pos[2])
            if col == 4:
                PosNew = (Pos[0],Pos[1]+F,Pos[2])
            if col == 6:
                PosNew = (Pos[0],Pos[1],Pos[2]+F)
        elif relative == 2:
            if col == 2 :
                PosNew = (F,Pos[1],Pos[2])
            if col == 4:
                PosNew = (Pos[0],F,Pos[2])
            if col == 6:
                PosNew = (Pos[0],Pos[1],F) 
        else:
            if col == 2 :
                PosNew = (PosOld[0]+F,PosOld[1],PosOld[2])
            if col == 4:
                PosNew = (PosOld[0],PosOld[1]+F,PosOld[2])
            if col == 6:
                PosNew = (PosOld[0],PosOld[1],PosOld[2]+F+Fold)
                
        self.UpdateGrenzVel = True
        self.EditKeyPointUpdate(PosNew, self.indexSelectedPath,self.indexSelectedKeyPoint)

    def OpenEditingKeyPointWindow(self,indexSelectedPath,indexSelectedKeyPoint):
        self.logger.info('Initialising / KeyPointWindow')

        self.btStart.Enable(False)
        self.btAxisSetup.Enable(False)
        self.btYellowSetup.Enable(False)
        self.btGreenSetup.Enable(False)            
        self.btCyanSetup.Enable(False)
        self.btMagentaSetup.Enable(False)
        self.btPosSetup.Enable(False)
        self.btKeyPointLoad.Enable(False)
        self.btKeyPointSave.Enable(False)
        self.btPosMode.Enable(False)
        self.btPathLoad.Enable(False)
        self.btPathSave.Enable(False)
        self.btPathMode.Enable(False)
        self.listKeyPoints.Enable(False)
        self.listPaths.Enable(False)
        
        res = xrc.XmlResource('VelLayout.xrc')
        self.KeyPointWindow = res.LoadFrame(self.frame,'Mainframe')
        self.KeyPointWindow.panelMainPanel = xrc.XRCCTRL(self.frame,'MainPanel')
        
        self.KeyPointWindow.panelOne = xrc.XRCCTRL(self.KeyPointWindow.panelMainPanel,'PanelOne')
        self.KeyPointWindow.panelVelPath= xrc.XRCCTRL(self.KeyPointWindow.panelOne,'panelVelPath')
        self.KeyPointWindow.VelPath = DiagrammWeg(self.KeyPointWindow.panelVelPath)
        
        self.KeyPointWindow.panelTwo = xrc.XRCCTRL(self.KeyPointWindow.panelMainPanel,'PanelTwo')
        self.KeyPointWindow.panelVelTime= xrc.XRCCTRL(self.KeyPointWindow.panelTwo,'panelVelTime')
        self.KeyPointWindow.VelTime = DiagrammZeit(self.KeyPointWindow.panelVelTime)
        
        
        self.KeyPointWindow.txtPath = xrc.XRCCTRL(self.KeyPointWindow.panelMainPanel,'txtPath')
        self.KeyPointWindow.txtSpeedDesc = xrc.XRCCTRL(self.KeyPointWindow.panelMainPanel,'txtSpeedDesc')
        self.KeyPointWindow.txtStartPosition = xrc.XRCCTRL(self.KeyPointWindow.panelMainPanel,'txtStartPosition')
        self.KeyPointWindow.txtEndPosition = xrc.XRCCTRL(self.KeyPointWindow.panelMainPanel,'txtEndPosition')
        self.KeyPointWindow.txtLength = xrc.XRCCTRL(self.KeyPointWindow.panelMainPanel,'txtLength')
        self.KeyPointWindow.txtVel = xrc.XRCCTRL(self.KeyPointWindow.panelMainPanel,'txtVel')
        self.KeyPointWindow.txtMaxVel = xrc.XRCCTRL(self.KeyPointWindow.panelMainPanel,'txtMaxVel')
        self.KeyPointWindow.txtAcc = xrc.XRCCTRL(self.KeyPointWindow.panelMainPanel,'txtAcc')        
        self.KeyPointWindow.txtMaxAcc= xrc.XRCCTRL(self.KeyPointWindow.panelMainPanel,'txtMaxAcc')
        self.KeyPointWindow.txtTime = xrc.XRCCTRL(self.KeyPointWindow.panelMainPanel,'txtTime')
        self.KeyPointWindow.txtMinTime = xrc.XRCCTRL(self.KeyPointWindow.panelMainPanel,'txtMinTime')  
        self.KeyPointWindow.txtSmoothing = xrc.XRCCTRL(self.KeyPointWindow.panelMainPanel,'txtSmoothing')
        self.KeyPointWindow.txtSmoothingOn = xrc.XRCCTRL(self.KeyPointWindow.panelMainPanel,'txtSmoothingOn')        
        self.KeyPointWindow.txtReserved = xrc.XRCCTRL(self.KeyPointWindow.panelMainPanel,'txtReserved')
        
        
        self.KeyPointWindow.btnMakeCopy  = xrc.XRCCTRL(self.KeyPointWindow,'btnMakeCopy')    
        self.KeyPointWindow.btnReplace  = xrc.XRCCTRL(self.KeyPointWindow,'btnReplace')
        self.KeyPointWindow.btnQuit   = xrc.XRCCTRL(self.KeyPointWindow,'btnQuit')
        
        self.KeyPointWindow.listPoints = xrc.XRCCTRL(self.KeyPointWindow,'listKeyPointWindow')
        self.KeyPointWindow.listPoints.Bind(wx.EVT_LIST_BEGIN_LABEL_EDIT, self.OnBeginLabelKeyPointWindowListEdit)
        self.KeyPointWindow.listPoints.Bind(wx.EVT_LIST_END_LABEL_EDIT ,self.OnUpdateAfterKeyPointWindowListEdit)
        self.KeyPointWindow.listPoints.Bind(wx.EVT_LIST_ITEM_SELECTED ,self.OnKeyPointWindowListEditSelected)
         
        self.KeyPointWindow.listPoints.InsertColumn(0,'Num.',format= wx.LIST_FORMAT_RIGHT,width = 55)
        self.KeyPointWindow.listPoints.InsertColumn(1,'X',format= wx.LIST_FORMAT_CENTER,width = 55)
        self.KeyPointWindow.listPoints.InsertColumn(2,'Delta -X',format= wx.LIST_FORMAT_CENTER,width = 55)
        self.KeyPointWindow.listPoints.InsertColumn(3,'Y',format= wx.LIST_FORMAT_CENTER,width = 55)
        self.KeyPointWindow.listPoints.InsertColumn(4,'Delta-Y',format= wx.LIST_FORMAT_CENTER,width = 55)
        self.KeyPointWindow.listPoints.InsertColumn(5,'Z',format= wx.LIST_FORMAT_CENTER,width = 55)
        self.KeyPointWindow.listPoints.InsertColumn(6,'Delta -Z',format= wx.LIST_FORMAT_CENTER,width = 55)
        
        self.KeyPointWindow.Bind(wx.EVT_BUTTON, self.KeyPointListMakeCopy, id=xrc.XRCID('btnMakeCopy'))
        self.KeyPointWindow.Bind(wx.EVT_BUTTON, self.KeyPointListReplace, id=xrc.XRCID('btnReplace'))
        self.KeyPointWindow.Bind(wx.EVT_BUTTON, self.KeyPointListQuit, id=xrc.XRCID('btnQuit'))
        
        for i in range(0,self.PathModell[indexSelectedPath].find('KeyPointSuperNodeCopy').findAllMatches('**/=KeyBall ').getNumPaths()):
            pos = self.KeyPointWindow.listPoints.InsertStringItem(i, str(i))
            kp = self.PathModell[indexSelectedPath].find('KeyPointSuperNodeCopy').find('**/=KeyBall ='+str(i)).getPos(render)[0]
            self.KeyPointWindow.listPoints.SetStringItem(pos, 1, str('%.2f'%kp))            
            self.KeyPointWindow.listPoints.SetStringItem(pos, 2, '0')
            kp = self.PathModell[indexSelectedPath].find('KeyPointSuperNodeCopy').find('**/=KeyBall ='+str(i)).getPos(render)[1]
            self.KeyPointWindow.listPoints.SetStringItem(pos, 3, str('%.2f'%kp))
            self.KeyPointWindow.listPoints.SetStringItem(pos, 4, '0')
            kp = self.PathModell[indexSelectedPath].find('KeyPointSuperNodeCopy').find('**/=KeyBall ='+str(i)).getPos(render)[2]
            self.KeyPointWindow.listPoints.SetStringItem(pos, 5,  str('%.2f'%kp))
            self.KeyPointWindow.listPoints.SetStringItem(pos, 6, '0')
             
        self.ProzentMaxVel = self.KeyPathDic[indexSelectedPath][11]
        
        
        for i in range(0,self.listPaths.GetItemCount()):
                if (self.listPaths.GetItem(i,2).GetText() == str(indexSelectedPath)):
                    index = i           
        self.KeyPointWindow.txtPath.SetValue(self.listPaths.GetItem(index,0).GetText())
        self.KeyPointWindow.txtPath.Disable()
        self.KeyPointWindow.txtSpeedDesc.SetValue(self.listPaths.GetItem(index,10).GetText())
        self.KeyPointWindow.txtSpeedDesc.Disable()        
        self.KeyPointWindow.txtStartPosition.SetValue(self.listPaths.GetItem(index,3).GetText()+
                                                      ' / '+self.listPaths.GetItem(index,4).GetText()+
                                                      ' / '+self.listPaths.GetItem(index,5).GetText())
        self.KeyPointWindow.txtStartPosition.Disable()
        self.KeyPointWindow.txtEndPosition.SetValue(self.listPaths.GetItem(index,6).GetText()+
                                                      ' / '+self.listPaths.GetItem(index,7).GetText()+
                                                      ' / '+self.listPaths.GetItem(index,8).GetText())
        self.KeyPointWindow.txtEndPosition.Disable()
        self.KeyPointWindow.txtLength.SetValue(self.listPaths.GetItem(index,9).GetText())
        self.KeyPointWindow.txtLength.Disable()
        self.KeyPointWindow.txtVel.SetValue(str(self.ProzentMaxVel))
        self.KeyPointWindow.txtMaxVel.SetValue('computed')
        self.KeyPointWindow.txtMaxVel.Disable()
        self.KeyPointWindow.txtAcc.SetValue(str(self.ProzentMaxAcc))
        self.KeyPointWindow.txtAcc.Disable()
        self.KeyPointWindow.txtMaxAcc.SetValue('computed')
        self.KeyPointWindow.txtMaxAcc.Disable()
        self.KeyPointWindow.txtTime.SetValue('computed')
        #self.KeyPointWindow.txtTime.Disable()
        self.KeyPointWindow.txtMinTime.SetValue('computed')      
        self.KeyPointWindow.txtMinTime.Disable()
        self.KeyPointWindow.txtSmoothing.SetValue(str(self.Smoothing)) 
        self.KeyPointWindow.txtSmoothingOn.SetValue(str(self.SmoothingOn))
        self.KeyPointWindow.txtReserved.SetValue(str(self.DebugGrenzVel))
        
        self.KeyPointWindow.txtVel.Bind(wx.EVT_TEXT_ENTER,self.OnUpdateKeyPointDiagramm)
        self.KeyPointWindow.txtTime.Bind(wx.EVT_TEXT_ENTER,self.OnKeyPointDiagrammTime2Percent)
        self.KeyPointWindow.txtSmoothing.Bind(wx.EVT_TEXT_ENTER,self.OnUpdateKeyPointDiagramm)
        self.KeyPointWindow.txtSmoothingOn.Bind(wx.EVT_TEXT_ENTER,self.OnUpdateKeyPointDiagramm)
        self.KeyPointWindow.txtReserved. Bind(wx.EVT_TEXT_ENTER,self.OnUpdateKeyPointDiagramm)      
        

        
        self.tckpN = copy.deepcopy(self.KeyPathDic[indexSelectedPath][5][0])
        self.tckpNCopy = copy.deepcopy(self.KeyPathDic[indexSelectedPath][5][0]) 
        self.KeyPathDicCopyIndex = copy.deepcopy(self.KeyPathDic[indexSelectedPath])
        
        self.rendertckpN = copy.deepcopy(self.KeyPathDic[indexSelectedPath][5][0])
        
        for i in range(0,len(self.tckpN[1][0])):
            self.rendertckpN[1][0][i] = (render.getRelativePoint(self.PathModell[indexSelectedPath],(self.tckpN[1][0][i],self.tckpN[1][1][i],self.tckpN[1][2][i])))[0]
            self.rendertckpN[1][1][i] = (render.getRelativePoint(self.PathModell[indexSelectedPath],(self.tckpN[1][0][i],self.tckpN[1][1][i],self.tckpN[1][2][i])))[1]
            self.rendertckpN[1][2][i] = (render.getRelativePoint(self.PathModell[indexSelectedPath],(self.tckpN[1][0][i],self.tckpN[1][1][i],self.tckpN[1][2][i])))[2]
      
        self.KeyPointWindow.Show()
        
        Last = self.KeyPointWindow.listPoints.GetItemCount()-1    
        #if self.EditNode == 2:
            #self.KeyPointWindow.listPoints.SetStringItem(Last, 0, 'Looked')
        #else: 
            #self.KeyPointWindow.listPoints.SetStringItem(0, 0, 'Looked')
            
        self.KeyPointWindow.listPoints.SetItemState(indexSelectedKeyPoint,wx.LIST_STATE_SELECTED,wx.LIST_STATE_SELECTED)
        self.KeyPointWindow.listPoints.EnsureVisible(indexSelectedKeyPoint)
        
        self.PfeilRed.setPos(self.PathModell[indexSelectedPath],self.tckpNCopy[1][0][indexSelectedKeyPoint],self.tckpNCopy[1][1][indexSelectedKeyPoint],self.tckpNCopy[1][2][indexSelectedKeyPoint])
        self.PfeilGreen.setPos(self.PathModell[indexSelectedPath],self.tckpNCopy[1][0][indexSelectedKeyPoint],self.tckpNCopy[1][1][indexSelectedKeyPoint],self.tckpNCopy[1][2][indexSelectedKeyPoint])
        self.PfeilBlue.setPos(self.PathModell[indexSelectedPath],self.tckpNCopy[1][0][indexSelectedKeyPoint],self.tckpNCopy[1][1][indexSelectedKeyPoint],self.tckpNCopy[1][2][indexSelectedKeyPoint])
        self.indexSelectedPath = indexSelectedPath
        self.indexSelectedKeyPoint = indexSelectedKeyPoint
    def OnKeyPointDiagrammTime2Percent(self,evt):
        T = max(float(self.KeyPointWindow.txtTime.GetValue()),float(self.KeyPointWindow.txtMinTime.GetValue()))        
        self.ProzentMaxVel = float(self.KeyPointWindow.txtMinTime.GetValue()) / T
        self.KeyPointWindow.txtVel.SetValue('%2.3'%self.ProzentMaxVel)
        self.OnUpdateKeyPointDiagramm(1)
    def OnUpdateKeyPointDiagramm(self,evt):
        
        self.UpdateGrenzVel = True       
        self.UpdateDiagramm(self.indexSelectedPath)
        
    def KeyPointListMakeCopy(self,evt):
        self.logger.info('Start KeyPointListMakeCopy')
        
        dlge = wx.TextEntryDialog(self.frame,'Please enter a Speed Description','Speed Ddescription')
        dlge.SetValue('Default')
        if dlge.ShowModal() == wx.ID_OK:
            self.KeyPathDic[self.indexSelectedPath][7] = dlge.GetValue()
        else:
            dlge.Destroy()
            self.EditKeyPoint(self.indexSelectedPath,self.indexSelectedKeyPoint,'New')
        dlge.Destroy()
        
        self.KeyPathDic[self.indexSelectedPath][4]    =  self.PathLengthGrenzVel
        self.KeyPathDic[self.indexSelectedPath][5][0] =  copy.deepcopy(self.tckpN)
        self.KeyPathDic[self.indexSelectedPath][8]    =  self.ProzentAccGrenzParaMinima
        self.KeyPathDic[self.indexSelectedPath][9]    =  self.VelTimeAvePara
        self.KeyPathDic[self.indexSelectedPath][10]   =  self.SumAveTime
        self.KeyPathDic[self.indexSelectedPath][11]   =  self.ProzentMaxVel
        self.KeyPathDic[self.indexSelectedPath][12]   =  self.Bogen2Param
        
        KeyPathDicTemp = copy.deepcopy(self.KeyPathDic[self.indexSelectedPath])
        self.KeyPathDic[self.indexSelectedPath] = copy.deepcopy(self.KeyPathDicCopyIndex)
        self.KeyPathDic[self.indexSelectedPath+1] = copy.deepcopy(KeyPathDicTemp)

        for i in range(0,4):
            self.PathModell[self.indexSelectedPath].getChild(0).removeNode()      
        self.PathModell[self.ActivePath].find('KeyPointSuperNode').removeNode()
        self.PathModell[self.indexSelectedPath].find('KeyPointSuperNodeCopy').removeNode()
        self.PathModell[self.indexSelectedPath].find('ScratchPath').removeNode()

        self.PfeilRed.setPos(self.YellowX,self.YellowY,self.YellowZ)
        self.PfeilBlue.setPos(self.YellowX,self.YellowY,self.YellowZ)
        self.PfeilGreen.setPos(self.YellowX,self.YellowY,self.YellowZ)
        
        self.SavePaths('TempPaths.kpat')
        self.LoadPaths('TempPaths.kpat') 

        self.OnShowKeyPoints()
        
        self.indexSelectedPath = 0
        self.indexSelectedKeyPoint = 0 
        self.EditingKeyPoint = 0
        self.tckpN = []
        self.KeyPointWindow.Close()
        self.UpdateGrenzVel = True
        self.UpdateFlag = 1
        
        self.btStart.Enable(True)
        
        if self.btStartState:            
            self.btAxisSetup.Enable(False)
            self.btYellowSetup.Enable(False)
            self.btGreenSetup.Enable(False)            
            self.btCyanSetup.Enable(False)
            self.btMagentaSetup.Enable(False)
            self.btPosSetup.Enable(False)
            self.btKeyPointLoad.Enable(False)
            self.btKeyPointSave.Enable(False)
            self.btPosMode.Enable(False)
            self.btPathLoad.Enable(False)
            self.btPathSave.Enable(False)
            self.btPathMode.Enable(False)            
        else:
            self.btAxisSetup.Enable(True)
            self.btYellowSetup.Enable(True)
            self.btGreenSetup.Enable(True)            
            self.btCyanSetup.Enable(True)
            self.btMagentaSetup.Enable(True)
            self.btPosSetup.Enable(True)
        self.btAxisSetup.Enable(True)
        self.btPosSetup.Enable(True)        
        self.btKeyPointLoad.Enable(True)
        self.btKeyPointSave.Enable(True)
        self.btPathLoad.Enable(True)
        self.btPathSave.Enable(True)
        self.listKeyPoints.Enable(True)
        self.listPaths.Enable(True)           
        
        self.logger.info('End KeyPointListMakeCopy')
        
    def KeyPointListReplace(self,evt):
        self.logger.info('Start KeyPointListReplace')
        
        dlge = wx.TextEntryDialog(self.frame,'Please enter a Speed Description','Speed Description')
        dlge.SetValue('Default')
        if dlge.ShowModal() == wx.ID_OK:
            self.KeyPathDic[self.indexSelectedPath][7] = dlge.GetValue()
        else:
            dlge.Destroy()
            self.EditKeyPoint(self.indexSelectedPath,self.indexSelectedKeyPoint,'New')
        dlge.Destroy()    
            
        self.KeyPathDic[self.indexSelectedPath][4]    =  self.PathLengthGrenzVel
        self.KeyPathDic[self.indexSelectedPath][5][0] = copy.deepcopy(self.tckpN)
        self.KeyPathDic[self.indexSelectedPath][8]    =  self.ProzentAccGrenzParaMinima
        self.KeyPathDic[self.indexSelectedPath][9]    =  self.VelTimeAvePara
        self.KeyPathDic[self.indexSelectedPath][10]   =  self.SumAveTime
        self.KeyPathDic[self.indexSelectedPath][11]   =  self.ProzentMaxVel
        self.KeyPathDic[self.indexSelectedPath][12]   =  self.Bogen2Param
        
        for i in range(0,4):
            self.PathModell[self.indexSelectedPath].getChild(0).removeNode()      
        self.PathModell[self.ActivePath].find('KeyPointSuperNode').removeNode()
        self.PathModell[self.indexSelectedPath].find('KeyPointSuperNodeCopy').removeNode()
        self.PathModell[self.indexSelectedPath].find('ScratchPath').removeNode()

        self.PfeilRed.setPos(self.YellowX,self.YellowY,self.YellowZ)
        self.PfeilBlue.setPos(self.YellowX,self.YellowY,self.YellowZ)
        self.PfeilGreen.setPos(self.YellowX,self.YellowY,self.YellowZ)
        
        self.SavePaths('TempPaths.kpat')
        self.LoadPaths('TempPaths.kpat') 

        self.OnShowKeyPoints()
        
        self.indexSelectedPath = 0
        self.indexSelectedKeyPoint = 0 
        self.EditingKeyPoint = 0
        self.tckpN = []
        self.KeyPointWindow.Close()
        self.UpdateGrenzVel = True
        self.UpdateFlag = 1
        
        self.btStart.Enable(True)
        
        if self.btStartState:            
            self.btAxisSetup.Enable(False)
            self.btYellowSetup.Enable(False)
            self.btGreenSetup.Enable(False)            
            self.btCyanSetup.Enable(False)
            self.btMagentaSetup.Enable(False)
            self.btPosSetup.Enable(False)
            self.btKeyPointLoad.Enable(False)
            self.btKeyPointSave.Enable(False)
            self.btPosMode.Enable(False)
            self.btPathLoad.Enable(False)
            self.btPathSave.Enable(False)
            self.btPathMode.Enable(False)            
        else:
            self.btAxisSetup.Enable(True)
            self.btYellowSetup.Enable(True)
            self.btGreenSetup.Enable(True)            
            self.btCyanSetup.Enable(True)
            self.btMagentaSetup.Enable(True)
            self.btPosSetup.Enable(True)
        self.btAxisSetup.Enable(True)
        self.btPosSetup.Enable(True)        
        self.btKeyPointLoad.Enable(True)
        self.btKeyPointSave.Enable(True)
        self.btPathLoad.Enable(True)
        self.btPathSave.Enable(True)
        self.listKeyPoints.Enable(True)
        self.listPaths.Enable(True)           
        
        self.logger.info('End KeyPointListReplace')
        
    def KeyPointListQuit(self,evt):
        self.logger.info('Start KeyPointListQuit')
        self.KeyPathDic[self.indexSelectedPath] = copy.deepcopy(self.KeyPathDicCopyIndex)
        self.KeyPathDicCopyIndex = {}
        
        self.PathModell[self.indexSelectedPath].find('KeyPointSuperNode').removeNode()
        self.PathModell[self.indexSelectedPath].find('KeyPointSuperNodeCopy').removeNode()
        self.PathModell[self.indexSelectedPath].find('ScratchPath').removeNode()
        self.PfeilRed.setPos(self.YellowX,self.YellowY,self.YellowZ)
        self.PfeilBlue.setPos(self.YellowX,self.YellowY,self.YellowZ)
        self.PfeilGreen.setPos(self.YellowX,self.YellowY,self.YellowZ)
        
        for key in self.PathModell.iterkeys(): 
            self.PathModell[key].getChild(3).node().setRenderMode(RopeNode.RMThread)
            self.PathModell[key].getChild(3).node().setThickness(0.3*self.ScaleReps)
            self.PathModell[key].getChild(3).setTexture(self.texPathPink) 
            self.PathModell[key].getChild(0).setTexture(self.texPathPink)
            self.PathModell[key].getChild(1).setTexture(self.texPathPink)
            self.PathModell[key].getChild(2).setTexture(self.texPathPink)
            
        self.indexSelectedPath = 0
        self.indexSelectedKeyPoint = 0 
        self.EditingKeyPoint = 0
        self.tckpN = []
        self.KeyPointWindow.Close()
        self.UpdateGrenzVel = True
        self.UpdateFlag = 1
        
        self.btStart.Enable(True)
        
        if self.btStartState:            
            self.btAxisSetup.Enable(False)
            self.btYellowSetup.Enable(False)
            self.btGreenSetup.Enable(False)            
            self.btCyanSetup.Enable(False)
            self.btMagentaSetup.Enable(False)
            self.btPosSetup.Enable(False)
            self.btKeyPointLoad.Enable(False)
            self.btKeyPointSave.Enable(False)
            self.btPosMode.Enable(False)
            self.btPathLoad.Enable(False)
            self.btPathSave.Enable(False)
            self.btPathMode.Enable(False)            
        else:
            self.btAxisSetup.Enable(True)
            self.btYellowSetup.Enable(True)
            self.btGreenSetup.Enable(True)            
            self.btCyanSetup.Enable(True)
            self.btMagentaSetup.Enable(True)
            self.btPosSetup.Enable(True)
        self.btAxisSetup.Enable(True)
        self.btPosSetup.Enable(True)
        self.btKeyPointLoad.Enable(True)
        self.btKeyPointSave.Enable(True)
        self.btPathLoad.Enable(True)
        self.btPathSave.Enable(True)
        self.listKeyPoints.Enable(True)
        self.listPaths.Enable(True)        
        
        self.logger.info('End KeyPointListQuit')
        
    def EditKeyPoint(self,indexSelectedPath,indexSelectedKeyPoint,State):
        Delta = 0
        PosNew = self.PfeilRed.getPos(render)

        self.KeyPointWindow.listPoints.EnsureVisible(indexSelectedKeyPoint)
        
        if self.PathModell[indexSelectedPath].find('KeyPointSuperNodeCopy').isEmpty():
            KeyPointSuperNodeCopy = self.PathModell[indexSelectedPath].attachNewNode('KeyPointSuperNodeCopy')        
            self.PathModell[indexSelectedPath].find('KeyPointSuperNode').copyTo(KeyPointSuperNodeCopy)       
        
        if self.Drag == 0:
            self.pickerRay.setFromLens(self.frame.p3dViewport.CamPersANP.node(),
                                       self.frame.p3dViewport.camHandlerPers.mousepos.getX(), 
                                       self.frame.p3dViewport .camHandlerPers.mousepos.getY())        
            self.picker.traverse(render)
            num=self.pq.getNumEntries()
            self.pq.sortEntries()
            if num>0 :
                Picked = self.pq.getEntry(0) 
                if (self.camHandler.mouseleft == '1'and# self.camHandler.mousemod == '2' and
                    Picked.getIntoNodePath().findNetTag('key').getNetTag('key') == 'Red'):
                    self.Drag = 1
                elif (self.camHandler.mouseleft == '1'and #self.camHandler.mousemod == '2' and
                    Picked.getIntoNodePath().findNetTag('key').getNetTag('key') == 'Green'):
                    self.Drag = 3
                elif (self.camHandler.mouseleft == '1'and #self.camHandler.mousemod == '2' and
                    Picked.getIntoNodePath().findNetTag('key').getNetTag('key') == 'Blue'):
                    self.Drag = 2 
        if self.camHandler.mouseleft != '1':
            if self.Drag !=0:
                self.UpdateGrenzVel = True 
            self.Drag = 0

        if self.Drag == 1:
            Delta = (self.NewMousePosX - self.OldMousePosX) *100
            PosNew = (self.PfeilRed.getPos(render)[0]+Delta,self.PfeilRed.getPos(render)[1],self.PfeilRed.getPos(render)[2])
            
        if self.Drag == 2:            
            Delta = (self.NewMousePosY - self.OldMousePosY) *100
            PosNew = (self.PfeilRed.getPos(render)[0],self.PfeilRed.getPos(render)[1],self.PfeilRed.getPos(render)[2]+Delta)
              
        if self.Drag == 3:
            Delta = math.sqrt((self.NewMousePosX-self.OldMousePosX)**2+(self.NewMousePosY-self.OldMousePosY)**2) *100
            if (self.NewMousePosX-self.OldMousePosX) < 0:
                Delta = Delta *(-1)
            PosNew = (self.PfeilRed.getPos(render)[0],self.PfeilRed.getPos(render)[1]+Delta,self.PfeilRed.getPos(render)[2])
        
        self.EditKeyPointUpdate(PosNew, indexSelectedPath, indexSelectedKeyPoint)

    def EditKeyPointUpdate(self, PosNew, indexSelectedPath, indexSelectedKeyPoint):
        self.PfeilRed.setPos(render,PosNew)
        self.PfeilGreen.setPos(render,PosNew)
        self.PfeilBlue.setPos(render,PosNew)
        try:
            self.tckpN[1][0][indexSelectedKeyPoint] = self.PfeilRed.getPos(self.PathModell[indexSelectedPath])[0]
            self.tckpN[1][1][indexSelectedKeyPoint] = self.PfeilRed.getPos(self.PathModell[indexSelectedPath])[1] 
            self.tckpN[1][2][indexSelectedKeyPoint] = self.PfeilRed.getPos(self.PathModell[indexSelectedPath])[2]
            
            self.rendertckpN[1][0][indexSelectedKeyPoint] = self.PfeilRed.getPos(render)[0]
            self.rendertckpN[1][1][indexSelectedKeyPoint] = self.PfeilRed.getPos(render)[1] 
            self.rendertckpN[1][2][indexSelectedKeyPoint] = self.PfeilRed.getPos(render)[2]            
        except IndexError:
            pass
        try:
            self.PathModell[indexSelectedPath].find('KeyPointSuperNodeCopy').find('**/=KeyBall ='+str(indexSelectedKeyPoint)).setPos(render,PosNew)
            self.PathModell[indexSelectedPath].find('KeyPointSuperNodeCopy').find('**/=KeyBall ='+str(indexSelectedKeyPoint)).setTexture(self.texBlue)            
            kp = self.PathModell[indexSelectedPath].find('KeyPointSuperNodeCopy').find('**/=KeyBall ='+str(indexSelectedKeyPoint)).getPos(render)[0]
            self.KeyPointWindow.listPoints.SetStringItem(indexSelectedKeyPoint, 1, str('%.2f'%kp))
            kp1 = self.PathModell[indexSelectedPath].find('KeyPointSuperNode').find('**/=KeyBall ='+str(indexSelectedKeyPoint)).getPos(render)[0]
            dkp = kp-kp1
            self.KeyPointWindow.listPoints.SetStringItem(indexSelectedKeyPoint, 2, str('%.2f'%dkp))
            kp = self.PathModell[indexSelectedPath].find('KeyPointSuperNodeCopy').find('**/=KeyBall ='+str(indexSelectedKeyPoint)).getPos(render)[1]
            self.KeyPointWindow.listPoints.SetStringItem(indexSelectedKeyPoint, 3, str('%.2f'%kp))
            kp1 = self.PathModell[indexSelectedPath].find('KeyPointSuperNode').find('**/=KeyBall ='+str(indexSelectedKeyPoint)).getPos(render)[1]
            dkp = kp-kp1
            self.KeyPointWindow.listPoints.SetStringItem(indexSelectedKeyPoint, 4, str('%.2f'%dkp))
            kp = self.PathModell[indexSelectedPath].find('KeyPointSuperNodeCopy').find('**/=KeyBall ='+str(indexSelectedKeyPoint)).getPos(render)[2]
            self.KeyPointWindow.listPoints.SetStringItem(indexSelectedKeyPoint, 5,  str('%.2f'%kp))
            kp1 = self.PathModell[indexSelectedPath].find('KeyPointSuperNode').find('**/=KeyBall ='+str(indexSelectedKeyPoint)).getPos(render)[2]
            dkp = kp-kp1
            self.KeyPointWindow.listPoints.SetStringItem(indexSelectedKeyPoint, 6, str('%.2f'%dkp))                 
        
            self.PathModell[indexSelectedPath].find('ScratchPath').removeNode()
        except:
            pass

        Last = self.KeyPointWindow.listPoints.GetItemCount()-1
        ScratchPath = self.PathModell[indexSelectedPath].attachNewNode('ScratchPath')
        for i in range(0,self.listPaths.GetItemCount()):
                if (self.listPaths.GetItem(i,2).GetText() == str(indexSelectedPath)):
                    index = i        
        self.listPaths.SetStringItem(index, 3,self.KeyPointWindow.listPoints.GetItem(0,1).GetText())
        self.listPaths.SetStringItem(index, 4,self.KeyPointWindow.listPoints.GetItem(0,3).GetText())
        self.listPaths.SetStringItem(index, 5,self.KeyPointWindow.listPoints.GetItem(0,5).GetText())
        self.listPaths.SetStringItem(index, 6,self.KeyPointWindow.listPoints.GetItem(Last,1).GetText())
        self.listPaths.SetStringItem(index, 7,self.KeyPointWindow.listPoints.GetItem(Last,3).GetText())
        self.listPaths.SetStringItem(index, 8,self.KeyPointWindow.listPoints.GetItem(Last,5).GetText())
        
        self.UpdateDiagramm(indexSelectedPath)
        
        #self.listPaths.SetStringItem(index, 9, str('%.2f'%self.PathLengthGrenzVel))
        #self.listPaths.SetStringItem(index, 11, str('%.2f'%self.SumAveTime))
        
        a = []
        try:
            b = len(self.tckpN[1][0])
        except IndexError:
            b = 0
            pass
        for i in range (b) :
            a.append( (None,(self.tckpN[1][0][i],self.tckpN[1][1][i],self.tckpN[1][2][i])))            
        r = Rope()
        try:
            r.setup(4, a,self.tckpN[0])
            r.node().setThickness(1*self.ScaleReps)
            r.setTexture(self.texBlue)         
            r.reparentTo(ScratchPath)            
        except IndexError:
            pass

    def UpdateDiagramm(self, indexSelectedPath):
        if self.UpdateGrenzVel == True and self.UpdateFlag == 0:
            self.KeyPointWindow.VelPath.ShowUpdateNeeded()
            self.KeyPointWindow.VelTime.ShowUpdateNeeded()        
        if self.UpdateGrenzVel == True and self.UpdateFlag == 1:
            self.KeyPointWindow.VelPath.ShowUpdate()
            self.KeyPointWindow.VelTime.ShowUpdate()
            #GrenzVelArray zur Bestimmung der GrenzVel
            YellowPoint  = (self.YellowX,self.YellowY,self.YellowZ)
            GreenPoint   = (self.GreenX,self.GreenY,self.GreenZ)
            CyanPoint    = (self.CyanX,self.CyanY,self.CyanZ)
            MagentaPoint = (self.MagentaX,self.MagentaY,self.MagentaZ)
            
            try:
                b = (float(self.KeyPointWindow.txtVel.GetValue()))
                c = (float(self.KeyPointWindow.txtAcc.GetValue()))                         
                d = int(self.KeyPointWindow.txtSmoothing.GetValue()) 
                e = int(self.KeyPointWindow.txtSmoothingOn.GetValue())
                f = int(self.KeyPointWindow.txtReserved.GetValue())                
            except ValueError:                
                b = self.ProzentMaxVel  
                c = self.ProzentMaxAcc       
                d = self.Smoothing      
                e = self.SmoothingOn    
                f = self.DebugGrenzVel 
                self.KeyPointWindow.txtVel.SetValue(str(b))
                self.KeyPointWindow.txtAcc.SetValue(str(c))                        
                self.KeyPointWindow.txtSmoothing.SetValue(str(d)) 
                self.KeyPointWindow.txtSmoothingOn.SetValue(str(e))
                self.KeyPointWindow.txtReserved.SetValue(str(f))                 
                
            self.ProzentMaxVel = b
            self.ProzentMaxAcc = c
            self.Smoothing     = d
            self.SmoothingOn   = e
            self.DebugGrenzVel = f
            
            Points = (YellowPoint,GreenPoint,CyanPoint,MagentaPoint)  
            
            (A,
             self.Bogen2Param,
             self.ProzentAccGrenzParaMinima,
             self.AccGrenzParaMinima,
             self.PathLengthGrenzVel,
             self.TotalPathTime,
             self.SumAveTime,
             self.meanVel,
             self.AccGrenzData,
             self.AccGrenzPara,
             self.VelTimeAccPara,
             self.VelTimeAvePara,self.AccData)= GrenzVel(self.rendertckpN,
                                                         Points,
                                                         self.maxVel,
                                                         self.ProzentMaxVel,
                                                         self.maxAcc,
                                                         self.ProzentMaxAcc,
                                                         self.Smoothing,
                                                         self.SmoothingOn,
                                                         self.DebugGrenzVel)
             
            self.KeyPointWindow.txtLength.SetValue(str('%3.2f'%self.PathLengthGrenzVel))
            self.KeyPointWindow.txtMaxVel.SetValue(str('%3.2f'%self.meanVel))
            self.KeyPointWindow.txtMaxAcc.SetValue(str('%3.2f'%self.maxAcc))
            self.KeyPointWindow.txtMinTime.SetValue(str('%3.2f'%self.TotalPathTime))                 
            self.KeyPointWindow.txtTime.SetValue(str('%3.2f'%self.SumAveTime))
        
            self.KeyPointWindow.VelPath.SetData(self.ProzentAccGrenzParaMinima,self.PathLengthGrenzVel , self.TotalPathTime , self.meanVel, self.AccGrenzData ,
                                                    self.AccGrenzParaMinima, self.maxVel,self.maxAcc)
            
            self.KeyPointWindow.VelTime.SetData(self.PathLengthGrenzVel , self.SumAveTime , self.meanVel, self.VelTimeAccPara,
                                                self.VelTimeAvePara, self.AccData, self.maxVel,self.maxAcc)            
            self.UpdateGrenzVel = False


    def EditPath(self,indexSelectedPath,node):
        
        Delta = 0

        PosDreibein = self.PathModell[indexSelectedPath].getChild(node).getPos(render)
        self.PfeilRed.setPos(PosDreibein)
        self.PfeilGreen.setPos(PosDreibein)
        self.PfeilBlue.setPos(PosDreibein)
        self.TorusRed.setPos(PosDreibein)
        self.TorusGreen.setPos(PosDreibein)
        self.TorusBlue.setPos(PosDreibein)

        self.dummy.setPos(PosDreibein)
        
        if self.Drag == 0:
            self.pickerRay.setFromLens(self.frame.p3dViewport.CamPersANP.node(),
                                       self.frame.p3dViewport.camHandlerPers.mousepos.getX(), 
                                       self.frame.p3dViewport .camHandlerPers.mousepos.getY())        
            self.picker.traverse(render)
            num=self.pq.getNumEntries()
            self.pq.sortEntries()
            if num>0 :
                Picked = self.pq.getEntry(0) 
                if (self.camHandler.mouseleft == '1'and# self.camHandler.mousemod == '2' and
                    Picked.getIntoNodePath().findNetTag('key').getNetTag('key') == 'Red'):
                    self.Drag = 1
                elif (self.camHandler.mouseleft == '1'and #self.camHandler.mousemod == '2' and
                    Picked.getIntoNodePath().findNetTag('key').getNetTag('key') == 'Green'):
                    self.Drag = 3
                elif (self.camHandler.mouseleft == '1'and #self.camHandler.mousemod == '2' and
                    Picked.getIntoNodePath().findNetTag('key').getNetTag('key') == 'Blue'):
                    self.Drag = 2 
                elif (self.camHandler.mouseleft == '1'and# self.camHandler.mousemod == '2' and
                    Picked.getIntoNodePath().findNetTag('key').getNetTag('key') == 'RedTorus'):
                    self.Drag = 4
                elif (self.camHandler.mouseleft == '1'and #self.camHandler.mousemod == '2' and
                    Picked.getIntoNodePath().findNetTag('key').getNetTag('key') == 'GreenTorus'):
                    self.Drag = 5
                elif (self.camHandler.mouseleft == '1'and #self.camHandler.mousemod == '2' and
                    Picked.getIntoNodePath().findNetTag('key').getNetTag('key') == 'BlueTorus'):
                    self.Drag = 6             

        if self.camHandler.mouseleft != '1':
            self.Drag = 0
    
        if self.Drag == 1:
            Delta = (self.NewMousePosX - self.OldMousePosX) *100
            PosNew = self.PathModell[indexSelectedPath].getPos()
            self.PathModell[indexSelectedPath].setPos(PosNew[0]+Delta,
                                                           PosNew[1],
                                                           PosNew[2])            
        if self.Drag == 2:
            Delta = (self.NewMousePosY - self.OldMousePosY) *100
            PosNew = self.PathModell[indexSelectedPath].getPos()
            self.PathModell[indexSelectedPath].setPos(PosNew[0],
                                                           PosNew[1],
                                                           PosNew[2]+Delta)
        if self.Drag == 3:
            Delta = math.sqrt((self.NewMousePosX-self.OldMousePosX)**2+(self.NewMousePosY-self.OldMousePosY)**2) *100
            if (self.NewMousePosX-self.OldMousePosX) < 0:
                Delta = Delta *(-1)
            PosNew = self.PathModell[indexSelectedPath].getPos()
            self.PathModell[indexSelectedPath].setPos(PosNew[0],
                                                           PosNew[1]+Delta,
                                                           PosNew[2]) 
            
        if self.Drag == 4:
            self.DeltaMouseRed = self.DeltaMouseRed + (self.NewMousePosY - self.OldMousePosY)*200
        if self.Drag == 5:
            self.DeltaMouseGreen = self.DeltaMouseGreen+(self.NewMousePosY - self.OldMousePosY)*200
        if self.Drag == 6:
            self.DeltaMouseBlue = self.DeltaMouseBlue +(self.NewMousePosY - self.OldMousePosY)*200
            
        self.PathModell[indexSelectedPath].wrtReparentTo(self.dummy)
        self.dummy.setHpr(self.DeltaMouseBlue,self.DeltaMouseRed,self.DeltaMouseGreen)
        self.PathModell[indexSelectedPath].wrtReparentTo(render.find('PathsNode'))
        
        for i in range(0,self.listPaths.GetItemCount()):
                if (self.listPaths.GetItem(i,2).GetText() == str(indexSelectedPath)):
                    index = i         
            
        PosNew = self.PathModell[indexSelectedPath].getChild(0).getPos(render)
        self.listPaths.SetStringItem(index, 3, str('%.2f'%PosNew[0]))
        self.listPaths.SetStringItem(index, 4, str('%.2f'%PosNew[1]))
        self.listPaths.SetStringItem(index, 5, str('%.2f'%PosNew[2]))
        self.PathEditWindow.listPathsCopy.SetStringItem(0, 3, str('%.2f'%PosNew[0]))
        self.PathEditWindow.listPathsCopy.SetStringItem(0, 4, str('%.2f'%PosNew[1]))
        self.PathEditWindow.listPathsCopy.SetStringItem(0, 5, str('%.2f'%PosNew[2]))
        PosNew = self.PathModell[indexSelectedPath].getChild(2).getPos(render)
        self.listPaths.SetStringItem(index, 6, str('%.2f'%PosNew[0]))
        self.listPaths.SetStringItem(index, 7, str('%.2f'%PosNew[1]))
        self.listPaths.SetStringItem(index, 8, str('%.2f'%PosNew[2]))
        self.PathEditWindow.listPathsCopy.SetStringItem(0, 6, str('%.2f'%PosNew[0]))
        self.PathEditWindow.listPathsCopy.SetStringItem(0, 7, str('%.2f'%PosNew[1]))
        self.PathEditWindow.listPathsCopy.SetStringItem(0, 8, str('%.2f'%PosNew[2]))        
        
        self.KeyPathDic[indexSelectedPath][6]= self.PathModell[indexSelectedPath].getTransform()

        if self.PathModell[indexSelectedPath].getTransform().isIdentity() :
            TransX = 0.00
            TransY = 0.00
            TransZ = 0.00
            RotX = 0.00
            RotY = 0.00
            RotZ = 0.00
        if self.KeyPathDic[indexSelectedPath][6].hasPos():
            Pos = self.KeyPathDic[indexSelectedPath][6].getPos()
            TransX = Pos[0]
            TransY = Pos[1]
            TransZ = Pos[2]
        else:
            TransX = 0.00
            TransY = 0.00
            TransZ = 0.00            
        if self.dummy.getTransform().hasHpr():
            Rot = self.dummy.getTransform().getHpr()
            RotX = Rot[1]
            RotY = Rot[2]
            RotZ = Rot[0]
        else:
            RotX = 0.00
            RotY = 0.00
            RotZ = 0.00         

        self.PathEditWindow.listPathTransformation.SetStringItem(0,1,str('%.2f'%RotX))
        self.PathEditWindow.listPathTransformation.SetStringItem(0,2,str('%.2f'%RotY))
        self.PathEditWindow.listPathTransformation.SetStringItem(0,3,str('%.2f'%RotZ))

    def EditPoint(self,indexSelected):
        try:
            PosNew = self.KeyPosModell[indexSelected].getPos()
        except:
            self.PfeilRed.setPos(self.YellowX,self.YellowY,self.YellowZ)
            self.PfeilBlue.setPos(self.YellowX,self.YellowY,self.YellowZ)
            self.PfeilGreen.setPos(self.YellowX,self.YellowY,self.YellowZ)
            self.EditingPoint = 0
            return
        self.PfeilRed.setPos(PosNew)
        self.PfeilGreen.setPos(PosNew)
        self.PfeilBlue.setPos(PosNew)
        
        self.pickerRay.setFromLens(self.frame.p3dViewport.CamPersANP.node(),
                                   self.frame.p3dViewport.camHandlerPers.mousepos.getX(), 
                                   self.frame.p3dViewport .camHandlerPers.mousepos.getY())
        
        self.picker.traverse(render)
        num=self.pq.getNumEntries()
        self.pq.sortEntries()
        if num>0 :
            Picked = self.pq.getEntry(0) 
            if (self.camHandler.mouseleft == '1'and# self.camHandler.mousemod == '2' and
                Picked.getIntoNodePath().findNetTag('key').getNetTag('key') == 'Red'):
                self.Drag = 1
            elif (self.camHandler.mouseleft == '1'and #self.camHandler.mousemod == '2' and
                Picked.getIntoNodePath().findNetTag('key').getNetTag('key') == 'Green'):
                self.Drag = 3
            elif (self.camHandler.mouseleft == '1'and #self.camHandler.mousemod == '2' and
                Picked.getIntoNodePath().findNetTag('key').getNetTag('key') == 'Blue'):
                self.Drag = 2            
            elif (Picked.getIntoNodePath().findNetTag('key').getNetTag('key') != 'Blue' or
                  Picked.getIntoNodePath().findNetTag('key').getNetTag('key') != 'Red'  or
                  Picked.getIntoNodePath().findNetTag('key').getNetTag('key') != 'Green'):
                pass
        if self.camHandler.mouseleft != '1':
            self.Drag = 0

        if self.Drag == 1:
            Delta = (self.NewMousePosX - self.OldMousePosX) *100
            PosNew = (self.PfeilRed.getPos()[0]+Delta,self.PfeilRed.getPos()[1],self.PfeilRed.getPos()[2])

        if self.Drag == 2:
            Delta = (self.NewMousePosY - self.OldMousePosY) *100
            PosNew = (self.PfeilRed.getPos()[0],self.PfeilRed.getPos()[1],self.PfeilRed.getPos()[2]+Delta)
          
        if self.Drag == 3:
            Delta = math.sqrt((self.NewMousePosX-self.OldMousePosX)**2+(self.NewMousePosY-self.OldMousePosY)**2) *100
            if (self.NewMousePosX-self.OldMousePosX) < 0:
                Delta = Delta *(-1)
            PosNew = (self.PfeilRed.getPos()[0],self.PfeilRed.getPos()[1]+Delta,self.PfeilRed.getPos()[2])
        self.KeyPosModell[indexSelected].setPos(PosNew)
        self.PfeilRed.setPos(PosNew)
        self.PfeilGreen.setPos(PosNew)
        self.PfeilBlue.setPos(PosNew)
            
        for i in range(0,self.listKeyPoints.GetItemCount()):
                if (self.listKeyPoints.GetItem(i,1).GetText() == str(indexSelected)):
                    index = i 
        self.KeyPosListWindow.listBigKeyPoints.SetStringItem(index, 2, str('%.2f'%PosNew[0]))
        self.KeyPosListWindow.listBigKeyPoints.SetStringItem(index, 3, str('%.2f'%PosNew[1]))
        self.KeyPosListWindow.listBigKeyPoints.SetStringItem(index, 4, str('%.2f'%PosNew[2]))         


    def DeletePoint(self, indexSelected):
        self.KeyPosDic.pop(indexSelected)
        for i in range(0,self.listKeyPoints.GetItemCount()):
            if (self.listKeyPoints.GetItem(i,1).GetText() == str(indexSelected)):
                self.listKeyPoints.DeleteItem(i)
                self.TargetPoint[0]=-1000
                self.TargetPoint[1]=-1000
                self.TargetPoint[2]=-1000
                self.TargetPointOld[0] = -1000
                self.TargetPointOld[1] = -1000
                self.TargetPointOld[2] = -1000
                self.NewTargetPoint = False
                self.posVel= self.aktuelleVel
                break
                   # try:                        
        self.KeyPosModell[indexSelected].detachNode()
        self.KeyPosModell[indexSelected].removeNode()
        self.KeyPosNode2[indexSelected].removeSolid(0)                        
                   # except:
                   #     pass
                    
    def ActivatePath(self,index,Pos): 
        self.OnPathFlag = 0
        for key in self.PathModell.iterkeys(): 
            self.PathModell[key].getChild(3).node().setRenderMode(RopeNode.RMThread)
            self.PathModell[key].getChild(3).node().setThickness(0.3*self.ScaleReps)
            self.PathModell[key].getChild(3).setTexture(self.texPathPink) 
            self.PathModell[key].getChild(0).setTexture(self.texPathPink)
            self.PathModell[key].getChild(1).setTexture(self.texPathPink)
            self.PathModell[key].getChild(2).setTexture(self.texPathPink)
            self.PathModell[key].getChild(1).setScale(self.ScaleReps)
            self.PathModell[key].getChild(0).setScale(self.ScaleReps)
        self.PathModell[index].getChild(3).node().setRenderMode(RopeNode.RMThread)
        self.PathModell[index].getChild(3).node().setNumSlices(12)
        self.PathModell[index].getChild(3).node().setThickness(4.0*self.ScaleReps)
        self.PathModell[index].getChild(3).setTexture(self.texLime)
        
        if Pos == self.PathModell[index].getChild(2).getPos(render) :
            self.PathModell[index].getChild(2).setTexture(self.texLime)
            self.PathModell[index].getChild(2).setScale(1.5*self.ScaleReps)
            self.PathModell[index].getChild(0).setScale(self.ScaleReps)
        else:
            self.PathModell[index].getChild(0).setTexture(self.texLime)
            self.PathModell[index].getChild(0).setScale(1.5*self.ScaleReps)
            self.PathModell[index].getChild(2).setScale(self.ScaleReps)
            
       
        for i in range(self.listPaths.ItemCount):
            if str(index) == self.listPaths.GetItem(i,2).GetText():
                pos = i
        self.listPaths.EnsureVisible(pos)
        self.ActivePath = index
    def OnShowKeyPoints(self):
        if not(self.btStartState):
            self.logger.info('Start Show Key Points')
            KeyErr = 0
            KeyPointNode2={}
            try :
                tckp =  self.KeyPathDic[self.ActivePath][5][0]
            except KeyError:
                KeyErr = 1 
            if KeyErr == 0:
                if self.ShowKeyPointsFlag == 1:
                    self.ShowKeyPointsFlag = 0
                    self.btStart.Enable(True)
                else:
                    self.ShowKeyPointsFlag = 1
                if self.ShowKeyPointsFlag == 1:
                    self.btStart.Enable(False)
                    KeyPointSuperNode = self.PathModell[self.ActivePath].attachNewNode('KeyPointSuperNode')
                    a=[]
                    PathPoints=[]
                    Ax,Ay,Az = splev(0,tckp)
                    Mx,My,Mz = splev(0.5,tckp)
                    Ex,Ey,Ez = splev(1,tckp)            
                    for i in range (len(tckp[1][0])) :
                        a.append( (None,(tckp[1][0][i],tckp[1][1][i],tckp[1][2][i])))
                        if len(tckp[1][0]) <50 :
                            PathPoints.append(loader.loadModel("./models/ball2"))
                            PathPoints[i].setPos(tckp[1][0][i],tckp[1][1][i],tckp[1][2][i])
                            PathPoints[i].setTexture(self.texContGreen)
                            PathPoints[i].setScale(self.ScaleReps)
                            PathPoints[i].setTag('KeyBall ',str(i))
                            PathPoints[i].reparentTo(KeyPointSuperNode)
                            # Attach CollisionSpheres to Points
                            KeyPointSphere = (CollisionSphere(0, 0, 0, 0.3*self.ScaleReps)) 
                            KeyPointNode2[i]=(CollisionNode('KeyPoint '+str(i)))
                            KeyPointNode2[i].addSolid(KeyPointSphere)
                            self.KeyPointCollider= PathPoints[i].attachNewNode(KeyPointNode2[i])        
                            self.KeyPointCollider.node().setCollideMask(BitMask32.allOff())
                            self.KeyPointCollider.node().setFromCollideMask(BitMask32.bit(3))
                            self.KeyPointCollider.node().setIntoCollideMask(BitMask32.bit(3))
                            pass
                        else:
                            PathPoints.append(loader.loadModel("./models/ball2"))
                            PathPoints[0].setPos(Ax,Ay,Az)
                            PathPoints[0].setTexture(self.texPathPink)
                            PathPoints[0].setScale(self.ScaleReps)
                            PathPoints[0].reparentTo(KeyPointSuperNode) 
                            PathPoints.append(loader.loadModel("./models/ball2"))
                            PathPoints[1].setPos(Mx,My,Mz)
                            PathPoints[1].setTexture(self.texPathPink)
                            PathPoints[1].setScale(self.ScaleReps)
                            PathPoints[1].reparentTo(KeyPointSuperNode)                     
                            PathPoints.append(loader.loadModel("./models/ball2"))
                            PathPoints[2].setPos(Ex,Ey,Ez)
                            PathPoints[2].setTexture(self.texPathPink)
                            PathPoints[2].setScale(self.ScaleReps)
                            PathPoints[2].reparentTo(KeyPointSuperNode)
                else:
                    try:
                        self.PathModell[self.ActivePath].find('KeyPointSuperNode').removeNode()
                    except:
                        pass
            self.logger.info('End Show Key Points')
        
    def OnPOVPathSelectDown(self):
        a=self.listPaths.GetTopItem()
        if a != -1:
            for i in range(0,self.listPaths.GetItemCount()):
                self.listPaths.SetItemState(i, 0, wx.LIST_STATE_SELECTED)
        self.listPaths.SetItemState(a+1, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
        self.listPaths.EnsureVisible(a+1) 
        
    def OnPOVPathPointSelectUp(self):
        a=self.listPaths.GetTopItem()
        if a != -1:
            for i in range(0,self.listPaths.GetItemCount()):
                self.listPaths.SetItemState(i, 0, wx.LIST_STATE_SELECTED)
        self.listPaths.SetItemState(a-1, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
        self.listPaths.EnsureVisible(a-1)            
     
    def CalcKeyPosDistance(self):
        Dist=[]
        DistL=[]
        # If Distance of Momentary Position is greater than 0.5m the
        # Position is added to the Dictonary of Key Positions

        for i in range(len(self.KeyPosDic.keys())):
            Dist.append(self.PosVec-self.KeyPosDic.values()[i])
            DistL.append(Dist[i].length())

        for key, val in self.KeyPosDic.items():
            Dist.append(self.PosVec - val)
            DistL.append(Dist[-1].length())
        DistL.sort()
        return DistL

    def InsertKeyPos(self):
        VelVec = Vec3(self.VX,self.VY,self.VZ)
        if len(self.KeyPosDic.items())==0:
            self.indexKeyPos  = 0
            self.KeyPosDic[self.indexKeyPos]=self.PosVec
            self.KeyPosDicTime[self.indexKeyPos]=[self.PosVec,datetime.now(),VelVec]
        else:
            self.indexKeyPos  = max(self.KeyPosDic.keys())+1
            self.KeyPosDic[self.indexKeyPos]=self.PosVec
            self.KeyPosDicTime[self.indexKeyPos]=[self.PosVec,datetime.now(),VelVec]
        
        self.KeyPosModell[self.indexKeyPos] =loader.loadModel("./models/ball2")

        self.KeyPosModell[self.indexKeyPos].setTexture(self.texGrayPink)
        #self.KeyPosModell[self.indexKeyPos].setMaterial(self.myMaterial)
        #self.KeyPosModell[self.indexKeyPos].setColor(0.5, 0, 0, 0.5)
        #self.KeyPosModell.setShaderInput("texDisable",1,1,1,1)
        #self.KeyPosModell[self.indexKeyPos].setShaderOff()
        self.KeyPosModell[self.indexKeyPos].setPos(self.PosVec)
        self.KeyPosModell[self.indexKeyPos].setScale(self.ScaleReps)        
        self.KeyPosModell[self.indexKeyPos].reparentTo(self.KeyPosNode)
            
        self.KeyPosSphere = (CollisionSphere(0, 0, 0, 0.3*self.ScaleReps)) 
        self.KeyPosNode2[self.indexKeyPos]=(CollisionNode('KeyPos '+str(self.indexKeyPos)))
        self.KeyPosNode2[self.indexKeyPos].addSolid(self.KeyPosSphere)       
        self.KeyCollider= self.KeyPosModell[self.indexKeyPos].attachNewNode(self.KeyPosNode2[self.indexKeyPos])        
        self.KeyCollider.node().setCollideMask(BitMask32.allOff())
        self.KeyCollider.node().setFromCollideMask(BitMask32.bit(3))
        self.KeyCollider.node().setIntoCollideMask(BitMask32.bit(3))
        
        pos = self.listKeyPoints.InsertStringItem(self.indexKeyPos, "Description")
        self.listKeyPoints.SetStringItem(pos, 1, str(self.indexKeyPos))
        self.listKeyPoints.SetStringItem(pos, 2, str('%.2f'%self.PosVec.getX()))
        self.listKeyPoints.SetStringItem(pos, 3, str('%.2f'%self.PosVec.getY()))
        self.listKeyPoints.SetStringItem(pos, 4, str('%.2f'%self.PosVec.getZ()))
        self.listKeyPoints.SetStringItem(pos, 5, datetime.now().strftime("%H:%M:%S.%f"))
        self.listKeyPoints.SetStringItem(pos, 6, str('%.2f'%self.VX))
        self.listKeyPoints.SetStringItem(pos, 7, str('%.2f'%self.VY))
        self.listKeyPoints.SetStringItem(pos, 8, str('%.2f'%self.VZ))
        self.listKeyPoints.SetStringItem(pos, 9, str('%.2f'%(math.sqrt(self.VX**2+self.VY**2+self.VZ**2))))
        
        self.listKeyPoints.EnsureVisible(pos)
    
    def OnKeyPointSelected(self,evt):
        
        item = self.listKeyPoints.GetFirstSelected()        
        indexSelected = float(self.listKeyPoints.GetItem(item,1).GetText())
        self.indexSelectedPoint = indexSelected
         
        for i in range (0,len(self.KeyPosDic.keys())):
            self.KeyPosModell[self.KeyPosDic.keys()[i]].setTexture(self.texGrayPink)
            self.KeyPosModell[self.KeyPosDic.keys()[i]].setScale(self.ScaleReps)
        self.KeyPosModell[indexSelected].setTexture(self.texLime)
        self.KeyPosModell[indexSelected].setScale(self.ScaleReps*2.0)        
        
        # ActiveKeypoint auf KeyPoint setzen so das er angefahren werden kann
        self.TargetPoint[0]=float(self.listKeyPoints.GetItem(item,2).GetText())
        self.TargetPoint[1]=float(self.listKeyPoints.GetItem(item,3).GetText())
        self.TargetPoint[2]=float(self.listKeyPoints.GetItem(item,4).GetText())
        
        if self.TargetPoint != self.TargetPointOld:
            self.NewTargetPoint = True
            self.TargetPointOld[0] = self.TargetPoint[0]
            self.TargetPointOld[1] = self.TargetPoint[1]
            self.TargetPointOld[2] = self.TargetPoint[2]
        else:
            self.NewTargetPoint = False          
        # Mod: aVel to KeyPointSpeed
        self.posVel= float(self.listKeyPoints.GetItem(item,9).GetText())
        if self.posVel > self.maxVel: 
            self.posVel = self.maxVel        

        
    def OnKeyPointSave(self,evt):
        self.logger.info('Initialising Save Position')
        dlg = wx.FileDialog(self.frame,'Save Key Positions',os.getcwd(), style=wx.SAVE,wildcard='*.kpos')
        if dlg.ShowModal() == wx.ID_OK:
            self.Keypositions = dlg.GetPath()      
            self.SaveKeyPoints(self.Keypositions)
        self.logger.info('KeyPositions written to file: %s',self.Keypositions)

    def SaveKeyPoints(self,filename):
        self.logger.info('Saving / KeyPoints')
        file = open(filename,'w')
        for i in range(0,self.listKeyPoints.GetItemCount()):
            file.write(self.listKeyPoints.GetItem(i).GetText() +' '+ self.listKeyPoints.GetItem(i,1).GetText()+' '+
                   self.listKeyPoints.GetItem(i,2).GetText() + ' ' +self.listKeyPoints.GetItem(i,3).GetText()+' '+
                   self.listKeyPoints.GetItem(i,4).GetText() + ' '+ self.listKeyPoints.GetItem(i,5).GetText()+' '+
                   self.listKeyPoints.GetItem(i,6).GetText() + ' '+ self.listKeyPoints.GetItem(i,7).GetText()+' '+
                   self.listKeyPoints.GetItem(i,8).GetText() + ' '+ self.listKeyPoints.GetItem(i,9).GetText()+'\n')
        file.close()
        self.logger.info('Saved / KeyPoints')
    def OnKeyPointLoad(self,evt):        
        self.logger.info('Initialising / KeyPointLoad')        
        dlg = wx.FileDialog(self.frame,'Open Key Positions',os.getcwd(), style=wx.OPEN,wildcard='*.kpos')
        if dlg.ShowModal() == wx.ID_OK: 
            self.Keypositions = str(os.path.normcase(dlg.GetPath()))
            self.logger.warn(' Key Positionsfile %s is loaded',self.Keypositions)
            self.LoadKeyPoints(self.Keypositions)        
        self.logger.info('Initialised / KeyPointLoad')

    def LoadKeyPoints(self,filename):
        self.logger.info('Loading / KeyPoints')
        
        file = open(filename,'r')
        positionlist = list(file)
        
        for (k,v) in self.KeyPosModell.items():
            self.KeyPosModell[k].detachNode()
            self.KeyPosModell[k].removeNode() 
        self.KeyPosDic={}
        self.KeyPosModell={}
        self.KeyPosNode2 = {}
        
        self.listKeyPoints.DeleteAllItems()
        for i in range(0,len(positionlist)):
            if positionlist[i] == '\n':
                pass
            else:
                kplist=positionlist[i].split(' ')
                pos = self.listKeyPoints.InsertStringItem(i, kplist[0])
                self.listKeyPoints.SetStringItem(pos, 1, kplist[1])
                self.listKeyPoints.SetStringItem(pos, 2, str('%.2f'%float(kplist[2])))
                self.listKeyPoints.SetStringItem(pos, 3, str('%.2f'%float(kplist[3])))
                self.listKeyPoints.SetStringItem(pos, 4, str('%.2f'%float(kplist[4])))
                self.listKeyPoints.SetStringItem(pos, 5, kplist[5])
                self.listKeyPoints.SetStringItem(pos, 6, str('%.2f'%float(kplist[6])))
                self.listKeyPoints.SetStringItem(pos, 7, str('%.2f'%float(kplist[7])))
                self.listKeyPoints.SetStringItem(pos, 8, str('%.2f'%float(kplist[8])))
                self.listKeyPoints.SetStringItem(pos, 9, str('%.2f'%float(kplist[9])))
                self.listKeyPoints.EnsureVisible(pos)
                kplist[1] = int(kplist [1])
                KPosVec = Vec3( float(kplist[2]),float(kplist[3]),float(kplist[4]))
                KPosVel = Vec3( float(kplist[6]),float(kplist[7]),float(kplist[8]))
                self.KeyPosDic[kplist[1]]=KPosVec
                self.KeyPosDicTime[kplist[1]]=[KPosVec,datetime.strptime(kplist[5].rstrip(),"%H:%M:%S.%f"),KPosVel]
                
                self.KeyPosModell[kplist[1]] =loader.loadModel("./models/ball2")    
                self.KeyPosModell[kplist[1]].setTexture(self.texGrayPink)
                #self.KeyPosModell[kplist[1]].setMaterial(self.myMaterial)
                #self.KeyPosModell[kplist[1]].setColor(0.5, 0, 0, 0.5)
                #self.KeyPosModell.setShaderInput("texDisable",1,1,1,1)
                #self.KeyPosModell[kplist[1]].setShaderOff()    
                self.KeyPosModell[kplist[1]].setPos(KPosVec)
                self.KeyPosModell[kplist[1]].setScale(self.ScaleReps)
                self.KeyPosModell[kplist[1]].reparentTo(self.KeyPosNode)
                    
                self.KeyPosSphere = (CollisionSphere(0, 0, 0, 0.3*self.ScaleReps)) 
                self.KeyPosNode2[kplist[1]]=(CollisionNode('KeyPos '+str(kplist[1])))
                self.KeyPosNode2[kplist[1]].addSolid(self.KeyPosSphere)       
                self.KeyCollider= self.KeyPosModell[kplist[1]].attachNewNode(self.KeyPosNode2[kplist[1]])
                self.KeyCollider.node().setCollideMask(BitMask32.allOff())
                self.KeyCollider.node().setFromCollideMask(BitMask32.bit(3))
                self.KeyCollider.node().setIntoCollideMask(BitMask32.bit(3))
        file.close() 
        self.logger.info('Loaded/ KeyPoints')
        
    def OnKeyPointColumnClick(self,evt):   #Oeffne Fenster fuer Listen ueberblick
        self.logger.info('Initialising / KeyPoint List')
        
        if self.KeyPosListWindow != None:
            self.KeyPosListWindow.Close()
            user32dllHandle.SetFocus(self.pandaWindowHandle)
            
        self.btStart.Enable(False)
        self.btAxisSetup.Enable(False)
        self.btYellowSetup.Enable(False)
        self.btGreenSetup.Enable(False)            
        self.btCyanSetup.Enable(False)
        self.btMagentaSetup.Enable(False)
        self.btPosSetup.Enable(False)
        self.btKeyPointLoad.Enable(False)
        self.btKeyPointSave.Enable(False)
        self.btPosMode.Enable(False)
        self.btPathLoad.Enable(False)
        self.btPathSave.Enable(False)
        self.btPathMode.Enable(False)
        self.listKeyPoints.Enable(False)
        self.listPaths.Enable(False)
        
        File = wx.Menu()
        #Kein Open Key Points List geht nur ueber Hauptfenster
        #openKeyPointList = File.Append(-1,'Open Key Point List','This opens the KeyPoint List')
        #File.AppendSeparator()
        writeKeyPointList = File.Append(-1,'Write Key Point List','This saves the KeyPoint List')
        File.AppendSeparator()        
        exitKeyPointList = File.Append(-1,'Exit','This exits the KeyPoint List without saving anything')

        self.logger.info('Initialising / KeyPointList Window')
        res = xrc.XmlResource('WWLayout0-12a.xrc')
        self.KeyPosListWindow = res.LoadFrame(self.frame,'KeyPointList')        
        menuBar = wx.MenuBar()        
        menuBar.Append(File,'File')
        self.KeyPosListWindow.SetMenuBar(menuBar)
        self.KeyPosListWindow.Show()
        self.logger.info('Initialised / KeyPointList Window')
        
        self.KeyPosListWindow.btnBigKeyPointsDelete = xrc.XRCCTRL(self.KeyPosListWindow,'btnBigKeyPointsDelete')
        self.KeyPosListWindow.btnBigKeyPointsWrite  = xrc.XRCCTRL(self.KeyPosListWindow,'btnBigKeyPointsWrite')
        self.KeyPosListWindow.btnBigKeyPointsQuit   = xrc.XRCCTRL(self.KeyPosListWindow,'btnBigKeyPointsQuit')  
        
        self.KeyPosListWindow.listBigKeyPoints = xrc.XRCCTRL(self.KeyPosListWindow,'listBigKeyPoints')
        self.KeyPosListWindow.listBigKeyPoints.InsertColumn(0,'Description',format= wx.LIST_FORMAT_LEFT,width = 80)
        self.KeyPosListWindow.listBigKeyPoints.InsertColumn(1,'Number',format= wx.LIST_FORMAT_RIGHT,width = 55)
        self.KeyPosListWindow.listBigKeyPoints.InsertColumn(2,'X-Coord',format= wx.LIST_FORMAT_CENTER,width = 60)
        self.KeyPosListWindow.listBigKeyPoints.InsertColumn(3,'Y-Coord',format= wx.LIST_FORMAT_CENTER,width = 60)
        self.KeyPosListWindow.listBigKeyPoints.InsertColumn(4,'Z-Coord',format= wx.LIST_FORMAT_CENTER,width = 60)
        self.KeyPosListWindow.listBigKeyPoints.InsertColumn(5,'Time',format= wx.LIST_FORMAT_CENTER,width = 80)
        self.KeyPosListWindow.listBigKeyPoints.InsertColumn(6,'Vx',format= wx.LIST_FORMAT_CENTER,width = 80)
        self.KeyPosListWindow.listBigKeyPoints.InsertColumn(7,'Vy',format= wx.LIST_FORMAT_CENTER,width = 80)
        self.KeyPosListWindow.listBigKeyPoints.InsertColumn(8,'Vz',format= wx.LIST_FORMAT_CENTER,width = 80)
        self.KeyPosListWindow.listBigKeyPoints.InsertColumn(9,'VAbs',format= wx.LIST_FORMAT_CENTER,width = 80)        
        
        self.KeyPosListWindow.listBigKeyPoints.Bind(wx.EVT_LIST_ITEM_SELECTED ,self.OnKeyPosWindowListEditSelected)
        
        
        for i in range(0,self.listKeyPoints.GetItemCount()):
            pos = self.KeyPosListWindow.listBigKeyPoints.InsertStringItem(i, self.listKeyPoints.GetItem(i).GetText())
            self.KeyPosListWindow.listBigKeyPoints.SetStringItem(pos, 1, self.listKeyPoints.GetItem(pos,1).GetText())
            self.KeyPosListWindow.listBigKeyPoints.SetStringItem(pos, 2, self.listKeyPoints.GetItem(pos,2).GetText())
            self.KeyPosListWindow.listBigKeyPoints.SetStringItem(pos, 3, self.listKeyPoints.GetItem(pos,3).GetText())
            self.KeyPosListWindow.listBigKeyPoints.SetStringItem(pos, 4, self.listKeyPoints.GetItem(pos,4).GetText())
            self.KeyPosListWindow.listBigKeyPoints.SetStringItem(pos, 5, self.listKeyPoints.GetItem(pos,5).GetText())
            self.KeyPosListWindow.listBigKeyPoints.SetStringItem(pos, 6, self.listKeyPoints.GetItem(pos,6).GetText())
            self.KeyPosListWindow.listBigKeyPoints.SetStringItem(pos, 7, self.listKeyPoints.GetItem(pos,7).GetText())
            self.KeyPosListWindow.listBigKeyPoints.SetStringItem(pos, 8, self.listKeyPoints.GetItem(pos,8).GetText())
            self.KeyPosListWindow.listBigKeyPoints.SetStringItem(pos, 9, self.listKeyPoints.GetItem(pos,9).GetText())
            self.KeyPosListWindow.listBigKeyPoints.EnsureVisible(pos)

        self.KeyPosListWindow.listBigKeyPoints.SetItemState(self.indexSelectedPoint,wx.LIST_STATE_SELECTED,wx.LIST_STATE_SELECTED)        
        
        #self.KeyPointListWindow.Bind(wx.EVT_MENU, self.OnKeyPointListOpen, openKeyPointList)
        self.KeyPosListWindow.Bind(wx.EVT_MENU, self.OnKeyPointListWrite, writeKeyPointList)

        self.KeyPosListWindow.Bind(wx.EVT_MENU, self.OnKeyPointListExit, exitKeyPointList)
        self.KeyPosListWindow.Bind(wx.EVT_BUTTON, self.OnKeyPointListDelete, id=xrc.XRCID('btnBigKeyPointsDelete'))
        self.KeyPosListWindow.Bind(wx.EVT_BUTTON, self.OnKeyPointListWrite, id=xrc.XRCID('btnBigKeyPointsWrite'))
        self.KeyPosListWindow.Bind(wx.EVT_BUTTON, self.OnKeyPointListQuit, id=xrc.XRCID('btnBigKeyPointsQuit'))
        self.KeyPosListWindow.Bind(wx.EVT_LIST_BEGIN_LABEL_EDIT, self.OnBeginLabelBigKeyPointListEdit)
        self.KeyPosListWindow.Bind(wx.EVT_LIST_END_LABEL_EDIT, self.OnUpdateAfterBigListEdit)
    
    def OnKeyPosWindowListEditSelected(self,evt):
        item = evt.m_itemIndex
        self.indexSelectedPoint = int(self.KeyPosListWindow.listBigKeyPoints.GetItem(item,1).GetText())
        #self.EditPoint(self.indexSelectedPoint)
        evt.Skip() 
        
    def OnUpdateAfterBigListEdit(self,evt):
        item = evt.m_itemIndex
        col = evt.m_col
        text = evt.GetText()
        self._HelperOnUpdateAfterBigListEdit(item,col,text)
        
    def _HelperOnUpdateAfterBigListEdit(self,item,col,text):
        self.KeyPosListWindow.listBigKeyPoints.SetStringItem(item,col,text)
        self.listKeyPoints.SetStringItem(item,col,text)
        self.SaveKeyPoints('TempKPos.kpos')
        self.LoadKeyPoints('TempKPos.kpos')          
        
        self.logger.info('Initialised / KeyPoint List')
    def OnBeginLabelBigKeyPointListEdit(self,evt):
        if evt.m_col == 1 or evt.m_col == 5 or evt.m_col == 6 or evt.m_col == 7 or evt.m_col == 8 :
            evt.Veto()
        else:
            evt.Skip()        
    def OnKeyPointListSave(self,evt):
        self.logger.info('Initialising / KeyPoint List Write')  
        
        self.listKeyPoints.DeleteAllItems()
        for i in range(0,self.KeyPosListWindow.listBigKeyPoints.GetItemCount()):
            pos = self.listKeyPoints.InsertStringItem(i, self.KeyPosListWindow.listBigKeyPoints.GetItem(i).GetText())
            self.listKeyPoints.SetStringItem(pos, 1, self.KeyPosListWindow.listBigKeyPoints.GetItem(pos,1).GetText())
            self.listKeyPoints.SetStringItem(pos, 2, self.KeyPosListWindow.listBigKeyPoints.GetItem(pos,2).GetText())
            self.listKeyPoints.SetStringItem(pos, 3, self.KeyPosListWindow.listBigKeyPoints.GetItem(pos,3).GetText())
            self.listKeyPoints.SetStringItem(pos, 4, self.KeyPosListWindow.listBigKeyPoints.GetItem(pos,4).GetText())
            self.listKeyPoints.SetStringItem(pos, 5, self.KeyPosListWindow.listBigKeyPoints.GetItem(pos,5).GetText())
            self.listKeyPoints.SetStringItem(pos, 6, self.KeyPosListWindow.listBigKeyPoints.GetItem(pos,6).GetText())
            self.listKeyPoints.SetStringItem(pos, 7, self.KeyPosListWindow.listBigKeyPoints.GetItem(pos,7).GetText())
            self.listKeyPoints.SetStringItem(pos, 8, self.KeyPosListWindow.listBigKeyPoints.GetItem(pos,8).GetText())
            self.listKeyPoints.SetStringItem(pos, 9, self.KeyPosListWindow.listBigKeyPoints.GetItem(pos,9).GetText())
            self.listKeyPoints.EnsureVisible(pos)
            
        self.KeyPosListWindow.Close()
        self.KeyPosListWindow = None
        self.btStart.Enable(True)
        self.EditingPoint = 0
        self.PfeilRed.setPos(self.YellowX,self.YellowY,self.YellowZ)
        self.PfeilBlue.setPos(self.YellowX,self.YellowY,self.YellowZ)
        self.PfeilGreen.setPos(self.YellowX,self.YellowY,self.YellowZ)        
        if self.btStartState:            
            self.btAxisSetup.Enable(False)
            self.btYellowSetup.Enable(False)
            self.btGreenSetup.Enable(False)            
            self.btCyanSetup.Enable(False)
            self.btMagentaSetup.Enable(False)
            self.btPosSetup.Enable(False)
            self.btKeyPointLoad.Enable(False)
            self.btKeyPointSave.Enable(False)
            self.btPosMode.Enable(False)
            self.btPathLoad.Enable(False)
            self.btPathSave.Enable(False)
            self.btPathMode.Enable(False)            
        else:
            self.btAxisSetup.Enable(True)
            self.btYellowSetup.Enable(True)
            self.btGreenSetup.Enable(True)            
            self.btCyanSetup.Enable(True)
            self.btMagentaSetup.Enable(True)
            self.btPosSetup.Enable(True)
        self.btKeyPointLoad.Enable(True)
        self.btKeyPointSave.Enable(True)
        self.btPathLoad.Enable(True)
        self.btPathSave.Enable(True)
        self.listKeyPoints.Enable(True)
        self.listPaths.Enable(True)
         
        user32dllHandle.SetFocus(self.pandaWindowHandle) 

        self.logger.info('Initialised / KeyPoint List Save')
    def OnKeyPointListExit(self,evt):
        self.logger.info('Initialised / KeyPoint List Exit')        

        self.KeyPosListWindow.Close()
        self.KeyPosListWindow = None
        self.btStart.Enable(True)
        self.EditingPoint = 0
        self.PfeilRed.setPos(self.YellowX,self.YellowY,self.YellowZ)
        self.PfeilBlue.setPos(self.YellowX,self.YellowY,self.YellowZ)
        self.PfeilGreen.setPos(self.YellowX,self.YellowY,self.YellowZ)        
        if self.btStartState:            
            self.btAxisSetup.Enable(False)
            self.btYellowSetup.Enable(False)
            self.btGreenSetup.Enable(False)            
            self.btCyanSetup.Enable(False)
            self.btMagentaSetup.Enable(False)
            self.btPosSetup.Enable(False)
            self.btKeyPointLoad.Enable(False)
            self.btKeyPointSave.Enable(False)
            self.btPosMode.Enable(False)
            self.btPathLoad.Enable(False)
            self.btPathSave.Enable(False)
            self.btPathMode.Enable(False)            
        else:
            self.btAxisSetup.Enable(True)
            self.btYellowSetup.Enable(True)
            self.btGreenSetup.Enable(True)            
            self.btCyanSetup.Enable(True)
            self.btMagentaSetup.Enable(True)
            self.btPosSetup.Enable(True)
        self.btKeyPointLoad.Enable(True)
        self.btKeyPointSave.Enable(True)
        self.btPathLoad.Enable(True)
        self.btPathSave.Enable(True)
        self.listKeyPoints.Enable(True)
        self.listPaths.Enable(True)
         
        user32dllHandle.SetFocus(self.pandaWindowHandle)            
            
        self.logger.info('Initialised / KeyPoint List Exit')        
    def OnKeyPointListDelete(self,evt):
        self.logger.info('Deleting list Entries')
        selected=[]
        
        index = self.KeyPosListWindow.listBigKeyPoints.GetFirstSelected()
        if index != -1:
            selected.append(index)
        while index !=-1:
            index = self.KeyPosListWindow.listBigKeyPoints.GetNextSelected(index)
            selected.append(index)

        for j in range(0,len(selected)): 
            self.KeyPosListWindow.listBigKeyPoints.DeleteItem((selected[j]-j))
            
        self.listKeyPoints.DeleteAllItems()
        for i in range(0,self.KeyPosListWindow.listBigKeyPoints.GetItemCount()):
            pos = self.listKeyPoints.InsertStringItem(i, self.KeyPosListWindow.listBigKeyPoints.GetItem(i).GetText())
            self.listKeyPoints.SetStringItem(pos, 1, self.KeyPosListWindow.listBigKeyPoints.GetItem(pos,1).GetText())
            self.listKeyPoints.SetStringItem(pos, 2, self.KeyPosListWindow.listBigKeyPoints.GetItem(pos,2).GetText())
            self.listKeyPoints.SetStringItem(pos, 3, self.KeyPosListWindow.listBigKeyPoints.GetItem(pos,3).GetText())
            self.listKeyPoints.SetStringItem(pos, 4, self.KeyPosListWindow.listBigKeyPoints.GetItem(pos,4).GetText())
            self.listKeyPoints.SetStringItem(pos, 5, self.KeyPosListWindow.listBigKeyPoints.GetItem(pos,5).GetText())
            self.listKeyPoints.SetStringItem(pos, 6, self.KeyPosListWindow.listBigKeyPoints.GetItem(pos,6).GetText())
            self.listKeyPoints.SetStringItem(pos, 7, self.KeyPosListWindow.listBigKeyPoints.GetItem(pos,7).GetText())
            self.listKeyPoints.SetStringItem(pos, 8, self.KeyPosListWindow.listBigKeyPoints.GetItem(pos,8).GetText())
            self.listKeyPoints.SetStringItem(pos, 9, self.KeyPosListWindow.listBigKeyPoints.GetItem(pos,9).GetText())
            self.listKeyPoints.EnsureVisible(pos)
        self.SaveKeyPoints('TempKPos.kpos')
        self.LoadKeyPoints('TempKPos.kpos')
        
        
        
        self.KeyPosListWindow.Close()
        self.KeyPosListWindow = None
        self.btStart.Enable(True)
        self.EditingPoint = 0
        self.PfeilRed.setPos(self.YellowX,self.YellowY,self.YellowZ)
        self.PfeilBlue.setPos(self.YellowX,self.YellowY,self.YellowZ)
        self.PfeilGreen.setPos(self.YellowX,self.YellowY,self.YellowZ)
        
        if self.btStartState:            
            self.btAxisSetup.Enable(False)
            self.btYellowSetup.Enable(False)
            self.btGreenSetup.Enable(False)            
            self.btCyanSetup.Enable(False)
            self.btMagentaSetup.Enable(False)
            self.btPosSetup.Enable(False)
            self.btKeyPointLoad.Enable(False)
            self.btKeyPointSave.Enable(False)
            self.btPosMode.Enable(False)
            self.btPathLoad.Enable(False)
            self.btPathSave.Enable(False)
            self.btPathMode.Enable(False)            
        else:            
            self.btAxisSetup.Enable(True)
            self.btYellowSetup.Enable(True)
            self.btGreenSetup.Enable(True)            
            self.btCyanSetup.Enable(True)
            self.btMagentaSetup.Enable(True)
            self.btPosSetup.Enable(True)
        self.btKeyPointLoad.Enable(True)
        self.btKeyPointSave.Enable(True)
        self.btPathLoad.Enable(True)
        self.btPathSave.Enable(True)
        self.listKeyPoints.Enable(True)
        self.listPaths.Enable(True)
  
        user32dllHandle.SetFocus(self.pandaWindowHandle)
        
        self.logger.info('Deleted list Entries')
    def OnKeyPointListWrite(self,evt):
        self.logger.info('Writing list Entrys')
        self.OnKeyPointListSave(0)
        user32dllHandle.SetFocus(self.pandaWindowHandle)
        self.logger.info('Writen list Entrys')
    def OnKeyPointListQuit(self,evt):
        self.logger.info('Quiting list Entrys')
        #self.indexSelectedPoint = -1000
        #self.listKeyPoints.SetStringItem(indexSelected, 2, str('%.2f'%PosNew[0]))
        #self.listKeyPoints.SetStringItem(indexSelected, 3, str('%.2f'%PosNew[1]))
        #self.listKeyPoints.SetStringItem(indexSelected, 4, str('%.2f'%PosNew[2]))        
        self.OnKeyPointListExit(0)
        user32dllHandle.SetFocus(self.pandaWindowHandle)
        self.logger.info('Quiting list Entrys')
    def OnPosMode (self,evt):
        self.logger.info('Initialising / PosMode')
        self.KeyPointPanel.SetBackgroundColour(wx.Colour(187,187,187))
        self.KeyPointPanel.Refresh()        
        pass
        user32dllHandle.SetFocus(self.pandaWindowHandle)
        self.logger.info('Initialised / PosMode')
    def OnPOVKeyPointSelectDown(self):
        a=self.listKeyPoints.GetTopItem()
        if a != -1:
            for i in range(0,self.listKeyPoints.GetItemCount()):
                self.listKeyPoints.SetItemState(i, 0, wx.LIST_STATE_SELECTED)
        self.listKeyPoints.SetItemState(a+1, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
        self.listKeyPoints.EnsureVisible(a+1)    
            
    def OnPOVKeyPointSelectUp(self):
        a=self.listKeyPoints.GetTopItem()
        if a != -1:
            for i in range(0,self.listKeyPoints.GetItemCount()):
                self.listKeyPoints.SetItemState(i, 0, wx.LIST_STATE_SELECTED)
        self.listKeyPoints.SetItemState(a-1, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
        self.listKeyPoints.EnsureVisible(a-1)    
    def OnPointsToPath(self):
        self.logger.info('Points to Path')

        PathPoints = []
        PathNodeMarkerBeginn = {}
        PathNodeMarker = {}
        PathNodeMarkerEnd = {}        
        b = len(self.KeyPosDic)
        c = len(self.KeyPosDicTime)
        # spline parameters
        s=0.5 # smoothness parameter
        k=3 # spline order
        nest=-1 # estimate of number of knots needed (-1 = maximal)        
        x = []
        y = []
        z = []
        a = []
        Seconds = []
        Velocities = []
        
        #if c >=3:
            #for i in range(c):
                            #Seconds.append((self.KeyPosDicTime.values()[i][1]-self.KeyPosDicTime.values()[0][1]).total_seconds())
                            #Velocities.append(math.sqrt(self.KeyPosDicTime.values()[i][2].x**2+
                                                        #self.KeyPosDicTime.values()[i][2].y**2+
                                                        #self.KeyPosDicTime.values()[i][2].z**2))
            #tckpVel,uVel = splprep([Seconds,Velocities],s=s,k=k,nest=-1)
            #VelData = []
            #VelData.append(self.aktuelleVel)
            #VelData.append(self.aAcc)
            #VelData.append(tckpVel)
        if b > 3:
            
            dlge =wx.ProgressDialog("Calculating Path", "Calculating Path",maximum = 100, parent = self.frame, style=wx.PD_APP_MODAL)
            
            for i in range(b):
                x.append(self.KeyPosDic.values()[i][0])
                y.append(self.KeyPosDic.values()[i][1])
                z.append(self.KeyPosDic.values()[i][2])
            #Duration = self.KeyPosDicTime[b-1][1]-self.KeyPosDicTime[0][1]
            

            tckp,u = splprep([x,y,z],s=s,k=k,nest=-1)
            Ax,Ay,Az = splev(0,tckp)
            Mx,My,Mz = splev(0.5,tckp)
            Ex,Ey,Ez = splev(1,tckp)
                       
            for (k,v) in self.KeyPosModell.items():
                self.KeyPosModell[k].detachNode()
                self.KeyPosModell[k].removeNode() 
            self.KeyPosDic={}
            self.KeyPosModell={}
            self.listKeyPoints.DeleteAllItems()
            
            Transform = TransformState.makePosHpr(VBase3(0,0,0),VBase3(0,0,0))
            
            YellowPoint  = (self.YellowX,self.YellowY,self.YellowZ)
            GreenPoint   = (self.GreenX,self.GreenY,self.GreenZ)
            CyanPoint    = (self.CyanX,self.CyanY,self.CyanZ)
            MagentaPoint = (self.MagentaX,self.MagentaY,self.MagentaZ)
            Points       = (YellowPoint,GreenPoint,CyanPoint,MagentaPoint)
            ProzentMaxVel = 0.8
            ProzentMaxAcc = 1.0
            Smoothing = 200
            SmoothingOn = 1
            DebugGrenzVel = 0 
            
            
            if len(self.KeyPathDic.items())==0:
                indexPath  = 0
                
                (A,
                 self.Bogen2Param,
                 self.ProzentAccGrenzParaMinima,
                 self.AccGrenzParaMinima,
                 self.PathLengthGrenzVel,
                 self.TotalPathTime,
                 self.SumAveTime,
                 self.meanVel,
                 self.AccGrenzData,
                 self.AccGrenzPara,
                 self.VelTimeAccPara,
                 self.VelTimeAvePara,self.AccData)= GrenzVel(tckp,
                                                             Points,
                                                             self.maxVel,
                                                             ProzentMaxVel,
                                                             self.maxAcc,
                                                             ProzentMaxAcc,
                                                             Smoothing,
                                                             SmoothingOn,
                                                             DebugGrenzVel)                
                
                self.KeyPathDic[indexPath]=["Description","X",Vec3(Ax,Ay,Az),Vec3(Ex,Ey,Ez),
                                            self.PathLengthGrenzVel,[tckp,u],Transform,"Default",
                                            self.ProzentAccGrenzParaMinima,self.VelTimeAvePara,self.SumAveTime,ProzentMaxVel,self.Bogen2Param]
                self.PathNode = render.find('PathsNode').attachNewNode("PathNode "+ '0')
                #file = open("RECORD_0.rawvel",'wb')
                #cPickle.dump(VelData,file,protocol = 2)
                #file.close()
                #self.logger.info('Vel File RECORD_0.rawvel saved',)
            else:
                indexPath  = max(self.KeyPathDic.keys())+1                
                (A,
                 self.Bogen2Param,
                 self.ProzentAccGrenzParaMinima,
                 self.AccGrenzParaMinima,
                 self.PathLengthGrenzVel,
                 self.TotalPathTime,
                 self.SumAveTime,
                 self.meanVel,
                 self.AccGrenzData,
                 self.AccGrenzPara,
                 self.VelTimeAccPara,
                 self.VelTimeAvePara,self.AccData)= GrenzVel(tckp,
                                                             Points,
                                                             self.maxVel,
                                                             ProzentMaxVel,
                                                             self.maxAcc,
                                                             ProzentMaxAcc,
                                                             Smoothing,
                                                             SmoothingOn,
                                                             DebugGrenzVel)                
                
                self.KeyPathDic[indexPath]=["Description","X",Vec3(Ax,Ay,Az),Vec3(Ex,Ey,Ez),
                                            self.PathLengthGrenzVel,[tckp,u],Transform,"Default",
                                            self.ProzentAccGrenzParaMinima,self.VelTimeAvePara,self.SumAveTime,ProzentMaxVel,self.Bogen2Param]
                
                self.PathNode =  render.find('PathsNode').attachNewNode("PathNode "+ str(indexPath))
               
                
            pos = self.listPaths.InsertStringItem(indexPath, "Description")
            self.listPaths.SetStringItem(pos, 1, 'X')
            self.listPaths.SetStringItem(pos, 2, str(indexPath))
            self.listPaths.SetStringItem(pos, 3, str('%.2f'%Ax))
            self.listPaths.SetStringItem(pos, 4, str('%.2f'%Ay))
            self.listPaths.SetStringItem(pos, 5, str('%.2f'%Az))
            self.listPaths.SetStringItem(pos, 6, str('%.2f'%Ex))
            self.listPaths.SetStringItem(pos, 7, str('%.2f'%Ey))
            self.listPaths.SetStringItem(pos, 8, str('%.2f'%Ez))
            self.listPaths.SetStringItem(pos, 9, str('%.2f'%self.PathLengthGrenzVel))
            self.listPaths.SetStringItem(pos, 10, str('Default'))
            self.listPaths.SetStringItem(pos, 11, str('%.2f'%self.SumAveTime))
            
            self.listPaths.EnsureVisible(pos)          
            
            for i in range (len(tckp[1][0])) :
                a.append( (None,(tckp[1][0][i],tckp[1][1][i],tckp[1][2][i])))
            #if len(tckp[1][0]) <50 :
            #    PathPoints.append(loader.loadModel("./models/ball2"))
            #    PathPoints[i].setPos(tckp[1][0][i],tckp[1][1][i],tckp[1][2][i])
            #    PathPoints[i].setTexture(self.texPathPink)
            #    PathPoints[i].reparentTo(self.PathNode)
            #else:
            PathPoint0Rep = loader.loadModel("./models/ball2")
            PathPoint1Rep = loader.loadModel("./models/ball2")
            PathPoint2Rep = loader.loadModel("./models/ball2")
            PathPoint0Rep.setScale(self.ScaleReps)
            PathPoint1Rep.setScale(self.ScaleReps)
            PathPoint2Rep.setScale(self.ScaleReps)
            PathPoints.append(PathPoint0Rep)
            PathPoints[0].setPos(Ax,Ay,Az)
            PathPoints[0].setTexture(self.texPathPink)
            PathPoints[0].reparentTo(self.PathNode) 
            PathPoints.append(PathPoint1Rep)
            PathPoints[1].setPos(Mx,My,Mz)
            PathPoints[1].setTexture(self.texPathPink)
            PathPoints[1].reparentTo(self.PathNode)                     
            PathPoints.append(PathPoint2Rep)
            PathPoints[2].setPos(Ex,Ey,Ez)
            PathPoints[2].setTexture(self.texPathPink)
            PathPoints[2].reparentTo(self.PathNode)

            PathSphere = (CollisionSphere(0, 0, 0, 0.3*self.ScaleReps)) 
            PathNodeMarkerBeginn[indexPath]=(CollisionNode('PathMarkerBeginn '+str(indexPath)))
            PathNodeMarkerBeginn[indexPath].addSolid(PathSphere)       
            self.PathMarkerCollider= PathPoints[0].attachNewNode(PathNodeMarkerBeginn[indexPath])        
            self.PathMarkerCollider.node().setCollideMask(BitMask32.allOff())
            self.PathMarkerCollider.node().setFromCollideMask(BitMask32.bit(3))
            self.PathMarkerCollider.node().setIntoCollideMask(BitMask32.bit(3))


            PathNodeMarker[indexPath]=(CollisionNode('PathMarker '+str(indexPath)))
            PathNodeMarker[indexPath].addSolid(PathSphere)       
            self.PathMarkerCollider= PathPoints[1].attachNewNode(PathNodeMarker[indexPath])        
            self.PathMarkerCollider.node().setCollideMask(BitMask32.allOff())
            self.PathMarkerCollider.node().setFromCollideMask(BitMask32.bit(3))
            self.PathMarkerCollider.node().setIntoCollideMask(BitMask32.bit(3))
            
            PathNodeMarkerEnd[indexPath]=(CollisionNode('PathMarkerEnd '+str(indexPath)))
            PathNodeMarkerEnd[indexPath].addSolid(PathSphere)       
            self.PathMarkerCollider= PathPoints[2].attachNewNode(PathNodeMarkerEnd[indexPath])        
            self.PathMarkerCollider.node().setCollideMask(BitMask32.allOff())
            self.PathMarkerCollider.node().setFromCollideMask(BitMask32.bit(3))
            self.PathMarkerCollider.node().setIntoCollideMask(BitMask32.bit(3))            
            
            r = Rope()
            r.setup(4, a,tckp[0])
            r.node().setThickness(1*self.ScaleReps)
            r.setTexture(self.texPathPink)            
            r.reparentTo(self.PathNode)
            
            #self.drawingLine(tckp,PathLength)
            
            self.PathModell[indexPath] = self.PathNode
            dlge.Destroy()
        else:
            dlg=wx.MessageDialog(None,'Not enough points for Spline calculation','Error',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy
            
    def drawingLine(self,tckp,PathLength):
        if self.renderLine:
                self.renderLine.removeNode()
        self.Line = LineSegs()
        self.Line.setThickness(4)
        self.Line.setColor(1,1,1)
        x0,y0,z0=splev(0,tckp)
        z0 = z0 + 10
        self.Line.moveTo(x0,y0,z0)
        for i in range(100):
            x1,y1,z1 = splev(i/100.0,tckp)            
            self.Line.drawTo(x1,y1,z1+10)
        #self.Line = self.Line.create()
        self.Line = self.Line.create()
        self.LineNP = NodePath(self.Line)
        self.LineNP.reparentTo(render)
      
        
    def OnPathSelected(self,evt):
        Pos = [0,0,0]
        item = self.listPaths.GetFirstSelected()
        indexSelected = int(self.listPaths.GetItem(item,2).GetText())
        self.indexSelectedPath = indexSelected
        self.logger.info("Path "+str(indexSelected)+" selected")
        try:
            self.TargetPoint[0] = self.PathModell[indexSelected].getChild(0).getPos(render)[0]
            self.TargetPoint[1] = self.PathModell[indexSelected].getChild(0).getPos(render)[1]
            self.TargetPoint[2] = self.PathModell[indexSelected].getChild(0).getPos(render)[2]
            self.PathTargetPoint[0] = self.TargetPoint[0]
            self.PathTargetPoint[1] = self.TargetPoint[1]
            self.PathTargetPoint[2] = self.TargetPoint[2] 
            if self.TargetPoint != self.TargetPointOld:
                self.NewTargetPoint = True
                self.TargetPointOld[0] = self.TargetPoint[0]
                self.TargetPointOld[1] = self.TargetPoint[1]
                self.TargetPointOld[2] = self.TargetPoint[2]
            else:
                self.NewTargetPoint = False
            #self.PathBogenPos=0.0*self.KeyPathDic[self.ActivePath][4]
            #nicht ganz bis Anfang
            self.PathBogenPos=0.001*self.KeyPathDic[self.ActivePath][4]
        except KeyError:
            pass          
        self.ActivatePath(indexSelected,Pos)

    def OnPathColumnClick(self,evt):
        self.logger.info('Initialising / Path List Window')
        
        self.btStart.Enable(False)
        self.btAxisSetup.Enable(False)
        self.btYellowSetup.Enable(False)
        self.btGreenSetup.Enable(False)            
        self.btCyanSetup.Enable(False)
        self.btMagentaSetup.Enable(False)
        self.btPosSetup.Enable(False)
        self.btKeyPointLoad.Enable(False)
        self.btKeyPointSave.Enable(False)
        self.btPosMode.Enable(False)
        self.btPathLoad.Enable(False)
        self.btPathSave.Enable(False)
        self.btPathMode.Enable(False)
        self.listKeyPoints.Enable(False)
        self.listPaths.Enable(False)
        
        File = wx.Menu()

        writePathList = File.Append(-1,'Write Path List','This saves the Path List')
        File.AppendSeparator()        
        exitPathList = File.Append(-1,'Exit','This exits the Path List without saving anything')


        res = xrc.XmlResource('WWLayout0-12a.xrc')
        self.PathListWindow = res.LoadFrame(self.frame,'PathList')        
        menuBar = wx.MenuBar()        
        menuBar.Append(File,'File')
        self.PathListWindow.SetMenuBar(menuBar)
        self.PathListWindow.Show()
        self.logger.info('Initialised / PathList Window')
        
        self.PathListWindow.btnDelete = xrc.XRCCTRL(self.PathListWindow,'btnDelete')
        self.PathListWindow.btnWrite  = xrc.XRCCTRL(self.PathListWindow,'btnWrite')
        self.PathListWindow.btnQuit   = xrc.XRCCTRL(self.PathListWindow,'btnQuit')  
        
        self.PathListWindow.listPaths = xrc.XRCCTRL(self.PathListWindow,'listPaths')
        self.PathListWindow.listPaths.InsertColumn(0,'Description',format= wx.LIST_FORMAT_LEFT,width = 75)
        self.PathListWindow.listPaths.InsertColumn(1,'Vis',format= wx.LIST_FORMAT_LEFT,width = 30)
        self.PathListWindow.listPaths.InsertColumn(2,'Number',format= wx.LIST_FORMAT_RIGHT,width = 55)
        self.PathListWindow.listPaths.InsertColumn(3,'X-Start',format= wx.LIST_FORMAT_CENTER,width = 55)
        self.PathListWindow.listPaths.InsertColumn(4,'Y-Start',format= wx.LIST_FORMAT_CENTER,width = 55)
        self.PathListWindow.listPaths.InsertColumn(5,'Z-Start',format= wx.LIST_FORMAT_CENTER,width = 55)
        self.PathListWindow.listPaths.InsertColumn(6,'X-End',format= wx.LIST_FORMAT_CENTER,width = 55)
        self.PathListWindow.listPaths.InsertColumn(7,'Y-End',format= wx.LIST_FORMAT_CENTER,width = 55)
        self.PathListWindow.listPaths.InsertColumn(8,'Z-End',format= wx.LIST_FORMAT_CENTER,width = 55)
        self.PathListWindow.listPaths.InsertColumn(9,'Length',format= wx.LIST_FORMAT_CENTER,width = 55)
        self.PathListWindow.listPaths.InsertColumn(10,'Speed Desc.',format= wx.LIST_FORMAT_CENTER,width = 100)
        self.PathListWindow.listPaths.InsertColumn(11,'Duration',format= wx.LIST_FORMAT_CENTER,width = 100)
     
        for i in range(0,self.listPaths.GetItemCount()):
            pos = self.PathListWindow.listPaths.InsertStringItem(i,self.listPaths.GetItem(i).GetText())
            self.PathListWindow.listPaths.SetStringItem(pos, 1, self.listPaths.GetItem(pos,1).GetText() )
            self.PathListWindow.listPaths.SetStringItem(pos, 2, self.listPaths.GetItem(pos,2).GetText() )
            kp = float(self.listPaths.GetItem(pos,3).GetText())
            self.PathListWindow.listPaths.SetStringItem(pos, 3, str('%.2f'%kp) )
            kp = float(self.listPaths.GetItem(pos,4).GetText())
            self.PathListWindow.listPaths.SetStringItem(pos, 4, str('%.2f'%kp) )
            kp = float(self.listPaths.GetItem(pos,5).GetText())
            self.PathListWindow.listPaths.SetStringItem(pos, 5, str('%.2f'%kp) )
            kp = float(self.listPaths.GetItem(pos,6).GetText())
            self.PathListWindow.listPaths.SetStringItem(pos, 6, str('%.2f'%kp) )
            kp = float(self.listPaths.GetItem(pos,7).GetText())
            self.PathListWindow.listPaths.SetStringItem(pos, 7, str('%.2f'%kp) )
            kp = float(self.listPaths.GetItem(pos,8).GetText())
            self.PathListWindow.listPaths.SetStringItem(pos, 8, str('%.2f'%kp) )
            kp = float(self.listPaths.GetItem(pos,9).GetText())
            self.PathListWindow.listPaths.SetStringItem(pos, 9, str('%.2f'%kp) ) 
            kp = (self.listPaths.GetItem(pos,10).GetText())
            self.PathListWindow.listPaths.SetStringItem(pos, 10, kp)  
            kp = float(self.listPaths.GetItem(pos,11).GetText())
            self.PathListWindow.listPaths.SetStringItem(pos, 11, str('%.2f'%kp) )            
            
            #self.PathListWindow.listPaths.SetStringItem(pos, 2, self.listPaths.GetItem(pos,2).GetText())
            #self.PathListWindow.listPaths.SetStringItem(pos, 3, self.listPaths.GetItem(pos,3).GetText())
            #self.PathListWindow.listPaths.SetStringItem(pos, 4, self.listPaths.GetItem(pos,4).GetText())
            #self.PathListWindow.listPaths.SetStringItem(pos, 5, self.listPaths.GetItem(pos,5).GetText())
            #self.PathListWindow.listPaths.SetStringItem(pos, 6, self.listPaths.GetItem(pos,6).GetText())
            #self.PathListWindow.listPaths.SetStringItem(pos, 7, self.listPaths.GetItem(pos,7).GetText())
            #self.PathListWindow.listPaths.SetStringItem(pos, 8, self.listPaths.GetItem(pos,8).GetText())
            #self.PathListWindow.listPaths.SetStringItem(pos, 9, self.listPaths.GetItem(pos,9).GetText())            
            #self.PathListWindow.listPaths.EnsureVisible(pos)
        
        #self.KeyPointListWindow.Bind(wx.EVT_MENU, self.OnKeyPointListOpen, openKeyPointList)
        self.PathListWindow.Bind(wx.EVT_MENU, self.OnPathListSave, writePathList)
        self.PathListWindow.Bind(wx.EVT_MENU, self.OnPathListExit, exitPathList)
        self.PathListWindow.Bind(wx.EVT_BUTTON, self.OnPathListDelete, id=xrc.XRCID('btnDelete'))
        self.PathListWindow.Bind(wx.EVT_BUTTON, self.OnPathListWrite, id=xrc.XRCID('btnWrite'))
        self.PathListWindow.Bind(wx.EVT_BUTTON, self.OnPathListQuit, id=xrc.XRCID('btnQuit'))
        self.PathListWindow.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnPathListDoubleClick , id=xrc.XRCID('listPaths'))
        self.PathListWindow.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnPathListSelect , id=xrc.XRCID('listPaths'))
        
        self.listPaths.EnsureVisible(self.indexSelectedPath)
                
        self.PathListWindow.listPaths.EnsureVisible(self.indexSelectedPath)
        self.PathListWindow.listPaths.SetItemState(self.indexSelectedPath,wx.LIST_STATE_SELECTED,wx.LIST_STATE_SELECTED)
        
        self.logger.info('Initialised / Path List')
    def OnPathListSelect(self,evt):
        
        Pos = [0,0,0]

        indexSelected = int(self.listPaths.GetItem(evt.Index,2).GetText())
        self.indexSelectedPath = indexSelected
        self.logger.info("Path "+str(indexSelected)+" selected")
         
        self.ActivatePath(indexSelected,Pos)        
        
    
    def OnPathListDoubleClick(self,evt):
        pathnumber=int(self.listPaths.GetItem(evt.Index,2).GetText())
        visible=str(self.listPaths.GetItem(evt.Index,1).GetText())
        if visible == 'X':
            self.listPaths.SetStringItem(evt.Index, 1,  'O')
            self.PathListWindow.listPaths.SetStringItem(evt.Index, 1,  'O')
            self.PathModell[pathnumber].hide()            
        else:
            self.listPaths.SetStringItem(evt.Index, 1,  'X')
            self.PathListWindow.listPaths.SetStringItem(evt.Index, 1,  'X')
            self.PathModell[pathnumber].show()
    def OnPathListExit(self,evt):
        self.logger.info('Initialised / Path List Exit')

        self.PathListWindow.Close()
        self.btStart.Enable(True)
        self.listKeyPoints.Enable(True)
        self.listPaths.Enable(True)
        self.btPosSetup.Enable(True)
        self.btKeyPointLoad.Enable(True)
        self.btKeyPointSave.Enable(True)
        self.btPathLoad.Enable(True)
        self.btPathSave.Enable(True)
        
        if self.btStartState:            
            self.btAxisSetup.Enable(False)
            self.btYellowSetup.Enable(False)
            self.btGreenSetup.Enable(False)            
            self.btCyanSetup.Enable(False)
            self.btMagentaSetup.Enable(False)
            self.btPosSetup.Enable(False)
            self.btKeyPointLoad.Enable(False)
            self.btKeyPointSave.Enable(False)
            self.btPosMode.Enable(False)
            self.btPathLoad.Enable(False)
            self.btPathSave.Enable(False)
            self.btPathMode.Enable(False)            
        else:
            self.btAxisSetup.Enable(True)
            self.btYellowSetup.Enable(True)
            self.btGreenSetup.Enable(True)            
            self.btCyanSetup.Enable(True)
            self.btMagentaSetup.Enable(True)
            self.btPosSetup.Enable(True)
        self.btKeyPointLoad.Enable(True)
        self.btKeyPointSave.Enable(True)
        self.btPathLoad.Enable(True)
        self.btPathSave.Enable(True)
        self.listKeyPoints.Enable(True)
        self.listPaths.Enable(True)
         
        user32dllHandle.SetFocus(self.pandaWindowHandle) 
        self.logger.info('Initialised / Path List Exit')        
    def OnPathListDelete(self,evt):
        self.logger.info('Deleting Path list Entries')
        selected=[]
        
        index = self.PathListWindow.listPaths.GetFirstSelected()
        if index != -1:
            selected.append(index)
        while index !=-1:
            index = self.PathListWindow.listPaths.GetNextSelected(index)
            selected.append(index)
        for j in range(0,len(selected)):
            if (selected[j]-j)>=0:
                a=self.PathListWindow.listPaths.GetItem(selected[j]-j,2).GetText()
                if a!='':
                    del self.KeyPathDic[int(a)]
                
            self.PathListWindow.listPaths.DeleteItem((selected[j]-j))
                
                                
        self.listPaths.DeleteAllItems()
        for i in range(0,self.PathListWindow.listPaths.GetItemCount()):
            pass
            pos = self.listPaths.InsertStringItem(i, self.PathListWindow.listPaths.GetItem(i).GetText())
            self.listPaths.SetStringItem(pos, 1, self.PathListWindow.listPaths.GetItem(pos,1).GetText())
            self.listPaths.SetStringItem(pos, 2, self.PathListWindow.listPaths.GetItem(pos,2).GetText())
            self.listPaths.SetStringItem(pos, 3, self.PathListWindow.listPaths.GetItem(pos,3).GetText())
            self.listPaths.SetStringItem(pos, 4, self.PathListWindow.listPaths.GetItem(pos,4).GetText())
            self.listPaths.SetStringItem(pos, 5, self.PathListWindow.listPaths.GetItem(pos,5).GetText())
            self.listPaths.SetStringItem(pos, 6, self.PathListWindow.listPaths.GetItem(pos,6).GetText())
            self.listPaths.SetStringItem(pos, 7, self.PathListWindow.listPaths.GetItem(pos,7).GetText())
            self.listPaths.SetStringItem(pos, 8, self.PathListWindow.listPaths.GetItem(pos,8).GetText())
            self.listPaths.SetStringItem(pos, 9, self.PathListWindow.listPaths.GetItem(pos,9).GetText()) 
            self.listPaths.SetStringItem(pos,10, self.PathListWindow.listPaths.GetItem(pos,10).GetText())
            self.listPaths.SetStringItem(pos,11, self.PathListWindow.listPaths.GetItem(pos,11).GetText())
            self.listPaths.EnsureVisible(pos)
        self.SavePaths('TempPaths.kpat')
        self.LoadPaths('TempPaths.kpat') 
        
        self.PathListWindow.Close()
        self.btStart.Enable(True)
        self.listKeyPoints.Enable(True)
        self.listPaths.Enable(True)
        if self.btStartState:            
            self.btAxisSetup.Enable(False)
            self.btYellowSetup.Enable(False)
            self.btGreenSetup.Enable(False)            
            self.btCyanSetup.Enable(False)
            self.btMagentaSetup.Enable(False)
            self.btPosSetup.Enable(False)
            self.btKeyPointLoad.Enable(False)
            self.btKeyPointSave.Enable(False)
            self.btPosMode.Enable(False)
            self.btPathLoad.Enable(False)
            self.btPathSave.Enable(False)
            self.btPathMode.Enable(False)            
        else:
            self.btAxisSetup.Enable(True)
            self.btYellowSetup.Enable(True)
            self.btGreenSetup.Enable(True)            
            self.btCyanSetup.Enable(True)
            self.btMagentaSetup.Enable(True)
            self.btPosSetup.Enable(True)
        self.btKeyPointLoad.Enable(True)
        self.btKeyPointSave.Enable(True)
        self.btPathLoad.Enable(True)
        self.btPathSave.Enable(True)
        self.listKeyPoints.Enable(True)
        self.listPaths.Enable(True)
         
        user32dllHandle.SetFocus(self.pandaWindowHandle) 
        
        self.logger.info('Deleted Path list Entries')
    def OnPathListSave(self,evt):
        self.logger.info('Initialising / Path List Write')  
        
        self.listPaths.DeleteAllItems()
        for i in range(0,self.PathListWindow.listPaths.GetItemCount()):
            pos = self.listPaths.InsertStringItem(i, self.PathListWindow.listPaths.GetItem(i).GetText())
            self.listPaths.SetStringItem(pos, 1, self.PathListWindow.listPaths.GetItem(pos,1).GetText())
            self.listPaths.SetStringItem(pos, 2, self.PathListWindow.listPaths.GetItem(pos,2).GetText())
            self.listPaths.SetStringItem(pos, 3, self.PathListWindow.listPaths.GetItem(pos,3).GetText())
            self.listPaths.SetStringItem(pos, 4, self.PathListWindow.listPaths.GetItem(pos,4).GetText())
            self.listPaths.SetStringItem(pos, 5, self.PathListWindow.listPaths.GetItem(pos,5).GetText())
            self.listPaths.SetStringItem(pos, 6, self.PathListWindow.listPaths.GetItem(pos,6).GetText())
            self.listPaths.SetStringItem(pos, 7, self.PathListWindow.listPaths.GetItem(pos,7).GetText())
            self.listPaths.SetStringItem(pos, 8, self.PathListWindow.listPaths.GetItem(pos,8).GetText())
            self.listPaths.SetStringItem(pos, 9, self.PathListWindow.listPaths.GetItem(pos,9).GetText())
            self.listPaths.SetStringItem(pos,10, self.PathListWindow.listPaths.GetItem(pos,10).GetText())
            self.listPaths.SetStringItem(pos,11, self.PathListWindow.listPaths.GetItem(pos,11).GetText())             
            self.listPaths.EnsureVisible(pos)
            
        self.PathListWindow.Close()
        self.btStart.Enable(True)
        self.listKeyPoints.Enable(True)
        self.listPaths.Enable(True)        
        if self.btStartState:            
            self.btAxisSetup.Enable(False)
            self.btYellowSetup.Enable(False)
            self.btGreenSetup.Enable(False)            
            self.btCyanSetup.Enable(False)
            self.btMagentaSetup.Enable(False)
            self.btPosSetup.Enable(False)
            self.btKeyPointLoad.Enable(False)
            self.btKeyPointSave.Enable(False)
            self.btPosMode.Enable(False)
            self.btPathLoad.Enable(False)
            self.btPathSave.Enable(False)
            self.btPathMode.Enable(False)            
        else:
            self.btAxisSetup.Enable(True)
            self.btYellowSetup.Enable(True)
            self.btGreenSetup.Enable(True)            
            self.btCyanSetup.Enable(True)
            self.btMagentaSetup.Enable(True)
            self.btPosSetup.Enable(True)
        self.btKeyPointLoad.Enable(True)
        self.btKeyPointSave.Enable(True)
        self.btPathLoad.Enable(True)
        self.btPathSave.Enable(True)
        self.listKeyPoints.Enable(True)
        self.listPaths.Enable(True)
         
        user32dllHandle.SetFocus(self.pandaWindowHandle) 

        self.logger.info('Initialised / Path List Write')        
        
    def OnPathListWrite(self,evt):                  
        self.logger.info('Writing Path list Entrys')
        self.OnPathListSave(0)
        user32dllHandle.SetFocus(self.pandaWindowHandle)
        self.logger.info('Writen Path list Entrys')
    def OnPathListQuit(self,evt):
        self.logger.info('Exiting Path List Entrys')
        self.OnPathListExit(0)
        user32dllHandle.SetFocus(self.pandaWindowHandle)
        self.logger.info('Exited Path List Entrys')
    
    def HidePath(self,index): 
        self.PathModell[index].hide()
        self.KeyPathDic[index][1] = 'O'
        for i in range(self.listPaths.ItemCount):
            if str(index) == self.listPaths.GetItem(i,2).GetText():
                pos = i
        self.listPaths.SetStringItem(pos, 1,  'O')
    def OnPathSave(self,evt):
        self.logger.info('Initialising / PathSave')
        dlg = wx.FileDialog(self.frame,'Save Paths',os.getcwd(), style=wx.SAVE,wildcard='*.kpat')
        if dlg.ShowModal() == wx.ID_OK:
            Keypath = dlg.GetPath()      
            self.SavePaths(Keypath)
        self.logger.info('KeyPath written to file: %s',Keypath)
        self.logger.info('Initialised / PathSave')
    def SavePaths(self,filename):
        file = open(filename,'wb')
        cPickle.dump(self.KeyPathDic,file,protocol = 2)
        file.close()
    def OnPathLoad(self,evt):
        self.logger.info('Initialising / PathLoad')       
        dlg = wx.FileDialog(self.frame,'Open Paths',os.getcwd(), style=wx.OPEN,wildcard='*.kpat')
        if dlg.ShowModal() == wx.ID_OK : 
            Paths = str(os.path.normcase(dlg.GetPath()))
            self.logger.warn(' Pathfile %s is loaded',Paths)
            self.LoadPaths(Paths)
        self.logger.info('Initialised / PathLoad')
    def LoadPaths(self,filename):
        self.logger.info('Loading / Paths')
        fa = "%3.2f" 
        
        for (k,v) in self.PathModell.items():
            self.PathModell[k].detachNode()
            self.PathModell[k].removeNode()
        # DebugPosition for Path
        self.SollPosition.setPos(self.YellowX,self.YellowY,self.YellowZ)
        self.KeyPathDic={}
        self.PathModell={}
        PathNodeMarkerBeginn = {}
        PathNodeMarker = {}
        PathNodeMarkerEnd = {}
        self.listPaths.DeleteAllItems()
        
        file = open(filename,'rb')
        self.KeyPathDic = cPickle.load(file)
        file.close()
        
        i=0
        for key in self.KeyPathDic:
            pos = self.listPaths.InsertStringItem(i, self.KeyPathDic[key][0])
            self.listPaths.SetStringItem(pos, 1,  self.KeyPathDic[key][1])
            self.listPaths.SetStringItem(pos, 2, str(key))
            self.listPaths.SetStringItem(pos, 9, str('%.2f'%self.KeyPathDic[key][4])) 
            self.listPaths.SetStringItem(pos, 10, self.KeyPathDic[key][7] )
            self.listPaths.SetStringItem(pos, 11, str(self.KeyPathDic[key][10] ))
            self.listPaths.EnsureVisible(pos)
            
            self.PathNode = render.find('PathsNode').attachNewNode("PathNode "+ str(key))
            self.PathNode.setTransform(self.KeyPathDic[key][6])
            self.PathModell[key] = self.PathNode

            tckp = self.KeyPathDic[key][5][0]
            a=[]
            PathPoints = []
            for j in range (len(tckp[1][0])) :
                a.append( (None,(tckp[1][0][j],tckp[1][1][j],tckp[1][2][j])))

            Ax,Ay,Az = splev(0,tckp)
            PathPoint0Rep = loader.loadModel("./models/ball2")
            PathPoint1Rep = loader.loadModel("./models/ball2")
            PathPoint2Rep = loader.loadModel("./models/ball2")
            PathPoint0Rep.setScale(self.ScaleReps)
            PathPoint1Rep.setScale(self.ScaleReps)
            PathPoint2Rep.setScale(self.ScaleReps)                
            PathPoints.append(PathPoint0Rep)
            PathPoints[0].setPos(Ax,Ay,Az)
            PathPoints[0].setTexture(self.texPathPink)
            PathPoints[0].reparentTo(self.PathNode)
            Mx,My,Mz = splev(0.5,tckp)
            PathPoints.append(PathPoint1Rep)
            PathPoints[1].setPos(Mx,My,Mz)
            PathPoints[1].setTexture(self.texPathPink)
            PathPoints[1].reparentTo(self.PathNode)                 
            Ex,Ey,Ez = splev(1,tckp)
            PathPoints.append(PathPoint2Rep)
            PathPoints[2].setPos(Ex,Ey,Ez)
            PathPoints[2].setTexture(self.texPathPink)
            PathPoints[2].reparentTo(self.PathNode) 
            
            PathSphere = (CollisionSphere(0, 0, 0, 0.3*self.ScaleReps)) 
            PathNodeMarkerBeginn[key]=(CollisionNode('PathMarkerBeginn '+str(key)))
            PathNodeMarkerBeginn[key].addSolid(PathSphere)       
            self.PathMarkerCollider= PathPoints[0].attachNewNode(PathNodeMarkerBeginn[key])        
            self.PathMarkerCollider.node().setCollideMask(BitMask32.allOff())
            self.PathMarkerCollider.node().setFromCollideMask(BitMask32.bit(3))
            self.PathMarkerCollider.node().setIntoCollideMask(BitMask32.bit(3))


            PathNodeMarker[key]=(CollisionNode('PathMarker '+str(key)))
            PathNodeMarker[key].addSolid(PathSphere)       
            self.PathMarkerCollider= PathPoints[1].attachNewNode(PathNodeMarker[key])        
            self.PathMarkerCollider.node().setCollideMask(BitMask32.allOff())
            self.PathMarkerCollider.node().setFromCollideMask(BitMask32.bit(3))
            self.PathMarkerCollider.node().setIntoCollideMask(BitMask32.bit(3))
            
            PathNodeMarkerEnd[key]=(CollisionNode('PathMarkerEnd '+str(key)))
            PathNodeMarkerEnd[key].addSolid(PathSphere)       
            self.PathMarkerCollider= PathPoints[2].attachNewNode(PathNodeMarkerEnd[key])        
            self.PathMarkerCollider.node().setCollideMask(BitMask32.allOff())
            self.PathMarkerCollider.node().setFromCollideMask(BitMask32.bit(3))
            self.PathMarkerCollider.node().setIntoCollideMask(BitMask32.bit(3))
                    
            r = Rope()
            r.setup(4, a,tckp[0])
            r.node().setThickness(1*self.ScaleReps)
            r.setTexture(self.texPathPink)                   
            r.reparentTo(self.PathNode)
            
            
            PosNew = self.PathModell[key].getChild(0).getPos(render)
            self.listPaths.SetStringItem(pos, 3, str('%.2f'%PosNew[0]))
            self.listPaths.SetStringItem(pos, 4, str('%.2f'%PosNew[1]))
            self.listPaths.SetStringItem(pos, 5, str('%.2f'%PosNew[2]))
            PosNew = self.PathModell[key].getChild(2).getPos(render)
            self.listPaths.SetStringItem(pos, 6, str('%.2f'%PosNew[0]))
            self.listPaths.SetStringItem(pos, 7, str('%.2f'%PosNew[1]))
            self.listPaths.SetStringItem(pos, 8, str('%.2f'%PosNew[2]))  
            
            if self.KeyPathDic[key][1] != 'X':
                self.PathModell[key].hide()
            i=i+1

        self.logger.info('Loaded/ Paths')
        
    def OnPathMode (self,evt):
        #print self.listPaths
        #if self.listPaths
        self.logger.info('Initialising / PathMode')
        self.PathPanel.SetBackgroundColour(wx.Colour(102,204,0))
        self.PathPanel.Refresh()        
        pass
        self.logger.info('Initialised / PathMode')
        
    #def OnEditPath (self):
        #if self.btStartState:
            #print '##################'
            #pass
        #else:
            #self.logger.info('Initialising / Edit Path') 
            #a = []
            #PathPoints = []


            #KeyPointNode = self.PathModell[self.ActivePath].attachNewNode("KeyPointNode")
            #tckp = self.KeyPathDic[self.ActivePath][5][0]
            #for i in range (len(tckp[1][0])) :
                #a.append( (None,(tckp[1][0][i],tckp[1][1][i],tckp[1][2][i])))
                #if len(tckp[1][0]) <50 :
                    #PathPoints.append(loader.loadModel("./models/KeyPoint"))
                    #PathPoints[i].setPos(tckp[1][0][i],tckp[1][1][i],tckp[1][2][i])
                    #PathPoints[i].setTexture(self.texBlue)
                    #PathPoints[i].reparentTo(KeyPointNode)
                #else: 
                    #dlg=wx.MessageDialog(None,'Path to complex for editing','Error',wx.OK|wx.ICON_EXCLAMATION)
                    #result=dlg.ShowModal()
                    #dlg.Destroy
                
            #self.logger.info('Initialised / Edit Path') 

        
    def Seilkraftkorrektur(self):
        x1x=self.YellowX-(self.SollPosX+self.PointBX)
        x1y=self.YellowY-(self.SollPosY+self.PointBY)
        x1z=self.YellowZ-(self.SollPosZ+self.PointBZ)
    
        x2x=self.GreenX-(self.SollPosX+self.PointBX)
        x2y=self.GreenY-(self.SollPosY+self.PointBY)
        x2z=self.GreenZ-(self.SollPosZ+self.PointBZ)
    
        x3x=self.CyanX-(self.SollPosX+self.PointBX)
        x3y=self.CyanY-(self.SollPosY+self.PointBY)
        x3z=self.CyanZ-(self.SollPosZ+self.PointBZ)
    
        x4x=self.MagentaX-(self.SollPosX+self.PointBX)
        x4y=self.MagentaY-(self.SollPosY+self.PointBY)
        x4z=self.MagentaZ-(self.SollPosZ+self.PointBZ)
    
        Seil1=numpy.array([x1x,x1y,x1z])
        Seil2=numpy.array([x2x,x2y,x2z])
        Seil3=numpy.array([x3x,x3y,x3z])
        Seil4=numpy.array([x4x,x4y,x4z])
    
        self.Kamera=numpy.array([self.SollPosX,self.SollPosY,self.SollPosZ])
        Last=numpy.array([0,0,self.Weight])
    
        self.Betraege = self.Kraefteberechnung( Seil1,Seil2,Seil3,Seil4,self.Kamera,Last)
    
        if min(self.Betraege)<= self.MinSeilKraft:
            self.cCorrectionMinKraft[0]=0
            self.cCorrectionMinKraft[1]=0
            self.cCorrectionMinKraft[2]=0
            if self.Betraege[0]<=self.MinSeilKraft:                           
                self.cCorrectionMinKraft[0]=self.cCorrectionMinKraft[0]+self.JNorm*x1x/math.sqrt(numpy.inner(Seil1,Seil1))
                self.cCorrectionMinKraft[1]=self.cCorrectionMinKraft[1]+self.JNorm*x1y/math.sqrt(numpy.inner(Seil1,Seil1))
                self.cCorrectionMinKraft[2]=self.cCorrectionMinKraft[2]+self.JNorm*x1z/math.sqrt(numpy.inner(Seil1,Seil1)) 
                if self.Betraege[1]<=self.MinSeilKraft:                           
                    self.cCorrectionMinKraft[0]=self.cCorrectionMinKraft[0]+self.JNorm*x2x/math.sqrt(numpy.inner(Seil2,Seil2))
                    self.cCorrectionMinKraft[1]=self.cCorrectionMinKraft[1]+self.JNorm*x2y/math.sqrt(numpy.inner(Seil2,Seil2))
                    self.cCorrectionMinKraft[2]=self.cCorrectionMinKraft[2]+self.JNorm*x2z/math.sqrt(numpy.inner(Seil2,Seil2)) 
                if self.Betraege[2]<=self.MinSeilKraft:                           
                    self.cCorrectionMinKraft[0]=self.cCorrectionMinKraft[0]+self.JNorm*x3x/math.sqrt(numpy.inner(Seil3,Seil3))
                    self.cCorrectionMinKraft[1]=self.cCorrectionMinKraft[1]+self.JNorm*x3y/math.sqrt(numpy.inner(Seil3,Seil3))
                    self.cCorrectionMinKraft[2]=self.cCorrectionMinKraft[2]+self.JNorm*x3z/math.sqrt(numpy.inner(Seil3,Seil3))
                if self.Betraege[3]<=self.MinSeilKraft:                           
                    self.cCorrectionMinKraft[0]=self.cCorrectionMinKraft[0]+self.JNorm*x4x/math.sqrt(numpy.inner(Seil4,Seil4))
                    self.cCorrectionMinKraft[1]=self.cCorrectionMinKraft[1]+self.JNorm*x4y/math.sqrt(numpy.inner(Seil4,Seil4))
                    self.cCorrectionMinKraft[2]=self.cCorrectionMinKraft[2]+self.JNorm*x4z/math.sqrt(numpy.inner(Seil4,Seil4))             
            else:
                self.cCorrectionMinKraft[0]=0
                self.cCorrectionMinKraft[1]=0
                self.cCorrectionMinKraft[2]=0

               
        if max(self.Betraege)>=self.MaxSeilKraft*self.MaxSeilKraftProzentsatz*self.MaxSeilKraftProgressionsgrenze:
            self.cCorrectionMaxKraft[0]=0
            self.cCorrectionMaxKraft[1]=0
            self.cCorrectionMaxKraft[2]=min([(-self.JNorm*(max(self.Betraege)/(self.MaxSeilKraft*self.MaxSeilKraftProzentsatz))),0])

        
        else:
            self.cCorrectionMaxKraft[0]=0
            self.cCorrectionMaxKraft[1]=0
            self.cCorrectionMaxKraft[2]=0
            
        self.cCorrectionMinKraft[0]=0
        self.cCorrectionMinKraft[1]=0
        self.cCorrectionMinKraft[2]=0
            
    def TransformJoystick(self,x1,y1,z1,XRot,YRot,ZRot,XScale,YScale,ZScale):
        
        Angle=math.radians(ZRot)
        x= (x1*math.cos(Angle)+y1*math.sin(Angle))*XScale
        y=(-1)*x1*math.sin(Angle)+y1*math.cos(Angle)*YScale
        print z1
        print(ZScale)
        z=z1*ZScale
        return x,y,z
    
    def DebugFileSchreiben(self):
        #Debug File schreiben---------------------------------------------------
        Time=time.clock()
        Delta=(Laenge1-self.Laenge1Old)/self.DiffT
        DeltaPos=(float(self.Yellow.PosIst)-Laenge1)
        DeltaVel=-float(self.Yellow.SpeedIstUI)-YellowVel

        self.VelDatafile.write( "T: %2.6f"%(Time)+"\t SVel: %2.6f"%(YellowVel)+"\t RVel: %2.6f"%(Delta)+
                                "\t IVel: %2.6f"%(-float(self.Yellow.SpeedIstUI))+ "\t SPos: %2.6f"%(Laenge1)+
                                "\t IPos: %2.6f"%(float(self.Yellow.PosIst))+"\t DPos: %2.6f"%(DeltaPos)+"\t DVel: %2.6f"%(DeltaVel)+"\n")
        self.Laenge1Old=Laenge1
        #Debug File schreiben End------------------------------------------------
        
    def JoystickToAxisX(self):
        
        #print self.stick.GetPosition().x
        
        aktuelleVel = float( self.ctrlaVel.GetValue())
        if ((self.Ax0Ax=='X-Axis\n') |(self.Ax0Ax=='X-Axis')):
            a=self.stick.GetPosition().x
            a = (a-self.diff0)
 
            if abs(a) < self.Ax0Deadband:
                a = 0
            elif a<0:
                a=a+self.Ax0Deadband
            else:
                a=a-self.Ax0Deadband
            try:
                a = a/(self.diff0)
            except ZeroDivisionError:
                a = 1
            
            if a>0:            
                a=(a*(1-self.Ax0Progression)+a*a*self.Ax0Progression)*aktuelleVel#*0.5774
            else:
                a=(a*(1-self.Ax0Progression)-a*a*self.Ax0Progression)*aktuelleVel#*0.5774
            if ((self.Ax0Dir=='normal')|(self.Ax0Dir=='normal\n')):
                return a

            else:
                return (-1)*a
        elif ((self.Ax1Ax=='X-Axis\n')|(self.Ax1Ax=='X-Axis')):
            a=self.stick.GetPosition().y
            a = (a-self.diff1)
            if abs(a) < self.Ax1Deadband:
                a = 0
            elif a<0:
                a=a+self.Ax1Deadband
            else:
                a=a-self.Ax1Deadband
            try:
                a = a/(self.diff1)
            except ZeroDivisionError:
                a = 1
            if a>0:            
                a=(a*(1-self.Ax1Progression)+a*a*self.Ax1Progression)*aktuelleVel#*0.5774
            else:
                a=(a*(1-self.Ax1Progression)-a*a*self.Ax1Progression)*aktuelleVel#*0.5774
            if ((self.Ax1Dir=='normal')|(self.Ax1Dir=='normal\n')):              
                return a
            else:
                return (-1)*a
        elif ((self.Ax2Ax=='X-Axis\n')|(self.Ax2Ax=='X-Axis')):
            a=self.stick.GetRudderPosition()
            a = (a-self.diff2)
            if abs(a) < self.Ax2Deadband:
                a = 0
            elif a<0:
                a=a+self.Ax2Deadband
            else:
                a=a-self.Ax2Deadband
            try:
                a = a/(self.diff2)
            except ZeroDivisionError:
                a = 1
            if a>0:            
                a=(a*(1-self.Ax2Progression)+a*a*self.Ax2Progression)*aktuelleVel#*0.5774
            else:
                a=(a*(1-self.Ax2Progression)-a*a*self.Ax2Progression)*aktuelleVel#*0.5774
            if ((self.Ax2Dir=='normal')|(self.Ax2Dir=='normal\n')):
                return a
            else:
                return (-1)*a
        elif ((self.Ax3Ax=='X-Axis\n')|(self.Ax3Ax=='X-Axis')):
            a=self.stick.GetZPosition()
            a = (a-self.diff3)
            if abs(a) < self.Ax3Deadband:
                a = 0
            elif a<0:
                a=a+self.Ax3Deadband
            else:
                a=a-self.Ax3Deadband
            try:
                a = a/(self.diff3)
            except ZeroDivisionError:
                a = 1
            if a>0:            
                a=(a*(1-self.Ax3Progression)+a*a*self.Ax3Progression)*aktuelleVel#*0.5774
            else:
                a=(a*(1-self.Ax3Progression)-a*a*self.Ax3Progression)*aktuelleVel#*0.5774
            if ((self.Ax3Dir=='normal')|(self.Ax3Dir=='normal\n')):
                return a
            else:
                return (-1)*a 
        else:
            ##print "ERROR AXIS ASSIGNMENT"
            return '0'
    def JoystickToAxisY(self):
        
        #print self.stick.GetPosition().x
        
        aktuelleVel = float( self.ctrlaVel.GetValue())
        if ((self.Ax0Ax=='Y-Axis\n') |(self.Ax0Ax=='Y-Axis')):
            a=self.stick.GetPosition().x
            a = (a-self.diff0)
            if abs(a) < self.Ax0Deadband:
                a = 0
            elif a<0:
                a=a+self.Ax0Deadband
            else:
                a=a-self.Ax0Deadband
            try:
                a = a/(self.diff0)
            except ZeroDivisionError:
                a = 1
            if a>0:            
                a=(a*(1-self.Ax0Progression)+a*a*self.Ax0Progression)*aktuelleVel#*0.5774
            else:
                a=(a*(1-self.Ax0Progression)-a*a*self.Ax0Progression)*aktuelleVel#*0.5774
            if ((self.Ax0Dir=='normal')|(self.Ax0Dir=='normal\n')):    
                return (-1)*a
            else:
                return a
        elif ((self.Ax1Ax=='Y-Axis\n')|(self.Ax1Ax=='Y-Axis')):
            a=self.stick.GetPosition().y
            a = (a-self.diff1)
            if abs(a) < self.Ax1Deadband:
                a = 0
            elif a<0:
                a=a+self.Ax1Deadband
            else:
                a=a-self.Ax1Deadband
            try:
                a = a/(self.diff1)
            except ZeroDivisionError:
                a = 1
            if a>0:            
                a=(a*(1-self.Ax1Progression)+a*a*self.Ax1Progression)*aktuelleVel#*0.5774
            else:
                a=(a*(1-self.Ax1Progression)-a*a*self.Ax1Progression)*aktuelleVel#*0.5774
            if ((self.Ax1Dir=='normal')|(self.Ax1Dir=='normal\n')):
                return (-1)*a
            else:
                return a
        elif ((self.Ax2Ax=='Y-Axis\n')|(self.Ax2Ax=='Y-Axis')):
            a=self.stick.GetRudderPosition()
            a = (a-self.diff2)
            if abs(a) < self.Ax2Deadband:
                a = 0
            elif a<0:
                a=a+self.Ax2Deadband
            else:
                a=a-self.Ax2Deadband
            try:
                a = a/(self.diff2)
            except ZeroDivisionError:
                a = 1
            if a>0:            
                a=(a*(1-self.Ax2Progression)+a*a*self.Ax2Progression)*aktuelleVel#*0.5774
            else:
                a=(a*(1-self.Ax2Progression)-a*a*self.Ax2Progression)*aktuelleVel#*0.5774
            if ((self.Ax2Dir=='normal')|(self.Ax2Dir=='normal\n')):
                return (-1)*a
            else:
                return a
        elif ((self.Ax3Ax=='Y-Axis\n')|(self.Ax3Ax=='Y-Axis')):
            a=self.stick.GetZPosition()
            a = (a-self.diff3)
            if abs(a) < self.Ax3Deadband:
                a = 0
            elif a<0:
                a=a+self.Ax3Deadband
            else:
                a=a-self.Ax3Deadband
            try:
                a = a/(self.diff3)
            except ZeroDivisionError:
                a = 1
            if a>0:            
                a=(a*(1-self.Ax3Progression)+a*a*self.Ax3Progression)*aktuelleVel#*0.5774
            else:
                a=(a*(1-self.Ax3Progression)-a*a*self.Ax3Progression)*aktuelleVel#*0.5774
            if ((self.Ax3Dir=='normal')|(self.Ax3Dir=='normal\n')):
                return (-1)*a
            else:
                return a 
        else:
            ##print "ERROR AXIS ASSIGNMENT"
            return '0'        
    def JoystickToAxisZ(self):
        
        #print self.stick.GetPosition().x
        
        aktuelleVel = float( self.ctrlaVel.GetValue())
        if ((self.Ax0Ax=='Z-Axis\n') |(self.Ax0Ax=='Z-Axis')):
            a=self.stick.GetPosition().x
            a = (a-self.diff0)
            if abs(a) < self.Ax0Deadband:
                a = 0
            elif a<0:
                a=a+self.Ax0Deadband
            else:
                a=a-self.Ax0Deadband
            a = a/(self.diff0)
            if a>0:            
                a=(a*(1-self.Ax0Progression)+a*a*self.Ax0Progression)*aktuelleVel#*0.5774
            else:
                a=(a*(1-self.Ax0Progression)-a*a*self.Ax0Progression)*aktuelleVel#*0.5774
            if ((self.Ax0Dir=='normal')|(self.Ax0Dir=='normal\n')):    
                return a
            else:
                return (-1)*a
        elif ((self.Ax1Ax=='Z-Axis\n')|(self.Ax1Ax=='Z-Axis')):
            a=self.stick.GetPosition().y
            a = (a-self.diff1)
            if abs(a) < self.Ax1Deadband:
                a = 0
            elif a<0:
                a=a+self.Ax1Deadband
            else:
                a=a-self.Ax1Deadband
            try:
                a = a/(self.diff1)
            except ZeroDivisionError:
                a = 1
            if a>0:            
                a=(a*(1-self.Ax1Progression)+a*a*self.Ax1Progression)*aktuelleVel#*0.5774
            else:
                a=(a*(1-self.Ax1Progression)-a*a*self.Ax1Progression)*aktuelleVel#*0.5774
            if ((self.Ax1Dir=='normal')|(self.Ax1Dir=='normal\n')):
                return a
            else:
                return (-1)*a
        elif ((self.Ax2Ax=='Z-Axis\n')|(self.Ax2Ax=='Z-Axis')):
            a=self.stick.GetRudderPosition()
            a = (a-self.diff2)
            if abs(a) < self.Ax2Deadband:
                a = 0
            elif a<0:
                a=a+self.Ax2Deadband
            else:
                a=a-self.Ax2Deadband
            try:
                a = a/(self.diff2)
            except ZeroDivisionError:
                a = 1
            if a>0:            
                a=(a*(1-self.Ax2Progression)+a*a*self.Ax2Progression)*aktuelleVel#*0.5774
            else:
                a=(a*(1-self.Ax2Progression)-a*a*self.Ax2Progression)*aktuelleVel#*0.5774
            if ((self.Ax2Dir=='normal')|(self.Ax2Dir=='normal\n')):
                return a
            else:
                return (-1)*a
        elif ((self.Ax3Ax=='Z-Axis\n')|(self.Ax3Ax=='Z-Axis')):
            a=self.stick.GetZPosition()
            a = (a-self.diff3)
            if abs(a) < self.Ax3Deadband:
                a = 0
            elif a<0:
                a=a+self.Ax3Deadband
            else:
                a=a-self.Ax3Deadband
            try:
                a = a/(self.diff3)
            except ZeroDivisionError:
                a = 1
            if a>0:            
                a=(a*(1-self.Ax3Progression)+a*a*self.Ax3Progression)*aktuelleVel#*0.5774
            else:
                a=(a*(1-self.Ax3Progression)-a*a*self.Ax3Progression)*aktuelleVel#*0.5774
            if ((self.Ax3Dir=='normal')|(self.Ax3Dir=='normal\n')):
                return a
            else:
                return (-1)*a 
        else:
            ##print "ERROR AXIS ASSIGNMENT"
            return '0'        

    def JoystickToAxisP(self):
        
        #print self.stick.GetPosition().x
        
        aktuelleVel = float( self.ctrlaVel.GetValue())
        if ((self.Ax0Ax=='Path\n') |(self.Ax0Ax=='Path')):
            a=self.stick.GetPosition().x
            a = (a-self.diff0)
            if abs(a) < self.Ax0Deadband:
                a = 0
            elif a<0:
                a=a+self.Ax0Deadband
            else:
                a=a-self.Ax0Deadband
            try:
                a = a/(self.diff0)
            except ZeroDivisionError:
                a = 1
            
            if a>0:            
                a=(a*(1-self.Ax0Progression)+a*a*self.Ax0Progression)*aktuelleVel#*0.5774
            else:
                a=(a*(1-self.Ax0Progression)-a*a*self.Ax0Progression)*aktuelleVel#*0.5774
            if ((self.Ax0Dir=='normal')|(self.Ax0Dir=='normal\n')):
                return a

            else:
                return (-1)*a
        elif ((self.Ax1Ax=='Path\n')|(self.Ax1Ax=='Path')):
            a=self.stick.GetPosition().y
            a = (a-self.diff1)
            if abs(a) < self.Ax1Deadband:
                a = 0
            elif a<0:
                a=a+self.Ax1Deadband
            else:
                a=a-self.Ax1Deadband
            try:
                a = a/(self.diff1)
            except ZeroDivisionError:
                a = 1
            if a>0:            
                a=(a*(1-self.Ax1Progression)+a*a*self.Ax1Progression)*aktuelleVel#*0.5774
            else:
                a=(a*(1-self.Ax1Progression)-a*a*self.Ax1Progression)*aktuelleVel#*0.5774
            if ((self.Ax1Dir=='normal')|(self.Ax1Dir=='normal\n')):              
                return a
            else:
                return (-1)*a
        elif ((self.Ax2Ax=='Path\n')|(self.Ax2Ax=='Path')):
            a=self.stick.GetRudderPosition()
            a = (a-self.diff2)
            if abs(a) < self.Ax2Deadband:
                a = 0
            elif a<0:
                a=a+self.Ax2Deadband
            else:
                a=a-self.Ax2Deadband
            try:
                a = a/(self.diff2)
            except ZeroDivisionError:
                a = 1
            if a>0:            
                a=(a*(1-self.Ax2Progression)+a*a*self.Ax2Progression)*aktuelleVel#*0.5774
            else:
                a=(a*(1-self.Ax2Progression)-a*a*self.Ax2Progression)*aktuelleVel#*0.5774
            if ((self.Ax2Dir=='normal')|(self.Ax2Dir=='normal\n')):
                return a
            else:
                return (-1)*a
        elif ((self.Ax3Ax=='Path\n')|(self.Ax3Ax=='Path')):
            a=self.stick.GetZPosition()
            a = (a-self.diff3)
            if abs(a) < self.Ax3Deadband:
                a = 0
            elif a<0:
                a=a+self.Ax3Deadband
            else:
                a=a-self.Ax3Deadband
            try:
                a = a/(self.diff3)
            except ZeroDivisionError:
                a = 1
            if a>0:            
                a=(a*(1-self.Ax3Progression)+a*a*self.Ax3Progression)*aktuelleVel#*0.5774
            else:
                a=(a*(1-self.Ax3Progression)-a*a*self.Ax3Progression)*aktuelleVel#*0.5774
            if ((self.Ax3Dir=='normal')|(self.Ax3Dir=='normal\n')):
                return a
            else:
                return (-1)*a 
        else:
            ##print "ERROR AXIS ASSIGNMENT"
            return '0'    
    def appInit(self):
        self.logger.info('Starting Event Log')
        # Create a new event loop (to overide default wxEventLoop)
        self.evtLoop = wx.EventLoop()
        self.oldLoop = wx.EventLoop.GetActive()
        wx.EventLoop.SetActive(self.evtLoop)
        #print 'Add Loop'
        taskMgr.add(self.wxStep, "evtLoopTask")
        self.logger.info('Event Loop Started')
    # Initialise Events
    def initEvents(self):
        self.logger.info('Initialising Events')
        self.TopPanel.Bind(wx.EVT_BUTTON, self.OnStart, id=xrc.XRCID('Start'))
        self.TopPanel.Bind(wx.EVT_BUTTON, self.OnAxisSetup, id=xrc.XRCID('btAxisSetup'))
        self.TopPanel.Bind(wx.EVT_BUTTON, self.OnPosSetup, id=xrc.XRCID('btPosSetup'))
        self.TopPanel.Bind(wx.EVT_BUTTON, self.EStopOpen, id=xrc.XRCID('WStatus'))
                
        self.LeftPanel.Bind(wx.EVT_BUTTON, self.OnYellowSetup, id=xrc.XRCID('btnSetupYellow/NW'))
        self.LeftPanel.Bind(wx.EVT_BUTTON, self.OnGreenSetup, id=xrc.XRCID('btnSetupGreen/SW'))
       
        
        self.RightPanel.Bind(wx.EVT_BUTTON, self.OnCyanSetup, id=xrc.XRCID('btnSetupCyan/NE'))
        self.RightPanel.Bind(wx.EVT_BUTTON, self.OnMagentaSetup, id=xrc.XRCID('btnSetupMagenta/SW'))
        self.RightPanel.Bind(wx.EVT_BUTTON, self.OnGetDef, id=xrc.XRCID('btGetDefHeight'))
        self.RightPanel.Bind(wx.EVT_BUTTON, self.OnSetDef, id=xrc.XRCID('btSetDefHeight'))
        self.RightPanel.Bind(wx.EVT_SPINCTRL, self.OnSpinHeight, id=xrc.XRCID('spHeight'))
        self.RightPanel.Bind(wx.EVT_SPIN_UP, self.OnSpinHeightUp, id=xrc.XRCID('spHeightButton'))
        self.RightPanel.Bind(wx.EVT_SPIN_DOWN, self.OnSpinHeightDown, id=xrc.XRCID('spHeightButton'))
        
        self.BottomPanel.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnKeyPointSelected, id=xrc.XRCID('listKeyPoints'))
        self.BottomPanel.Bind(wx.EVT_LIST_COL_CLICK, self.OnKeyPointColumnClick, id=xrc.XRCID('listKeyPoints'))
        self.BottomPanel.Bind(wx.EVT_BUTTON, self.OnKeyPointSave, id=xrc.XRCID('btKeyPointSave'))
        self.BottomPanel.Bind(wx.EVT_BUTTON, self.OnKeyPointLoad, id=xrc.XRCID('btKeyPointLoad'))        
        self.BottomPanel.Bind(wx.EVT_TOGGLEBUTTON, self.OnPosMode, id=xrc.XRCID('btPosMode'))
        self.BottomPanel.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnPathSelected, id=xrc.XRCID('listPaths'))
        self.BottomPanel.Bind(wx.EVT_LIST_COL_CLICK, self.OnPathColumnClick, id=xrc.XRCID('listPaths'))        
        self.BottomPanel.Bind(wx.EVT_BUTTON, self.OnPathSave, id=xrc.XRCID('btPathSave'))
        self.BottomPanel.Bind(wx.EVT_BUTTON, self.OnPathLoad, id=xrc.XRCID('btPathLoad'))        
        self.BottomPanel.Bind(wx.EVT_TOGGLEBUTTON, self.OnPathMode, id=xrc.XRCID('btPathMode'))
        
        self.frame.Bind(wx.EVT_MENU, self.OnQuit, id=ID_Menu_Exit)
        self.frame.Bind(wx.EVT_MENU, self.OnOpenEnv, id=ID_Menu_OpenEnv)
        self.frame.Bind(wx.EVT_MENU, self.OnOpenPos, id=ID_Menu_OpenPos)
        #Verweis auf restricted information da Open Engines Setup noch nicht programiert ist
        self.frame.Bind(wx.EVT_MENU, self.OnOpenEngines, id=ID_Menu_OpenEngines)
        # Hier gehoert noch ein Frame Open Engines programiert
        self.frame.Bind(wx.EVT_MENU, self.OnSavePos, id=ID_Menu_SavePos)
        #Verweis auf restricted information da Save Engines Setup noch nicht programiert ist
        self.frame.Bind(wx.EVT_MENU, self.OnSaveEngines, id=ID_Menu_SaveEngines)
        # Hier gehoert noch ein Frame Save Engines programiert
        self.logger.info('Events Initialised')

    # Event Handlers

    def OnPosChange(self,evt):
        self.logger.info('Initialising / Changing Positions')
        #try:
        
        self.RemoveOldEnvironment()
        
        self.environ.detachNode()
        self.environ.removeNode()
        
        self.barrier.detachNode()
        self.barrier.removeNode()
        
        #except AttributeError: q=0

        
        self.M1=numpy.array([self.YellowX,self.YellowY,self.YellowZ])
        self.M2=numpy.array([self.GreenX,self.GreenY,self.GreenZ])
        self.M3=numpy.array([self.CyanX,self.CyanY,self.CyanZ])
        self.M4=numpy.array([self.MagentaX,self.MagentaY,self.MagentaZ])
        
        self.InsertFieldOfPlay()
        
        self.InsertPillars()
        self.SetupBorders()

        
        self.ReorderSceneGraph() 
        self.InsertCharacter()
        self.InsertRopes()
        self.RopesForPosTry()
        
        self.logger.info('Positions Initialised / Changed ')
    def RopesForPosTry(self):
        
        x1x=self.YellowX-self.SollPosX
        x1y=self.YellowY-self.SollPosY
        x1z=self.YellowZ-self.SollPosZ
        
        x2x=self.GreenX-self.SollPosX
        x2y=self.GreenY-self.SollPosY
        x2z=self.GreenZ-self.SollPosZ
        
        x3x=self.CyanX-self.SollPosX
        x3y=self.CyanY-self.SollPosY
        x3z=self.CyanZ-self.SollPosZ
        
        x4x=self.MagentaX-self.SollPosX
        x4y=self.MagentaY-self.SollPosY
        x4z=self.MagentaZ-self.SollPosZ
        
        Seil1=numpy.array([x1x,x1y,x1z])
        Seil2=numpy.array([x2x,x2y,x2z])
        Seil3=numpy.array([x3x,x3y,x3z])
        Seil4=numpy.array([x4x,x4y,x4z])
        
        self.Kamera=numpy.array([self.SollPosX,self.SollPosY,self.SollPosZ])
        Last=numpy.array([0,0,self.Weight])
        
        self.Betraege = self.Kraefteberechnung( Seil1,Seil2,Seil3,Seil4,self.Kamera,Last)
        self.ctrlYellowForce.SetValue("%4.2f"%(self.Betraege[0]))
        self.ctrlGreenForce.SetValue("%4.2f"%(self.Betraege[1]))
        self.ctrlCyanForce.SetValue("%4.2f"%(self.Betraege[2]))
        self.ctrlMagentaForce.SetValue("%4.2f"%(self.Betraege[3]))
        
        red, green, blue = self.RGB(min((self.Betraege[0]/(self.MaxSeilKraft*self.MaxSeilKraftProzentsatz)),1.))
        self.ctrlYellowForce.SetBackgroundColour("#%02x%02x%02x"%(red,green,blue))
        self.Rope1.setColor(red/255., green/255.,0,1)
        red, green, blue = self.RGB(min((self.Betraege[1]/(self.MaxSeilKraft*self.MaxSeilKraftProzentsatz)),1.))
        self.ctrlGreenForce.SetBackgroundColour("#%02x%02x%02x"%(red,green,blue))
        self.Rope2.setColor(red/255., green/255.,0,1)
               
        red, green, blue = self.RGB(min((self.Betraege[2]/(self.MaxSeilKraft*self.MaxSeilKraftProzentsatz)),1.))
        self.ctrlCyanForce.SetBackgroundColour("#%02x%02x%02x"%(red,green,blue))
        self.Rope3.setColor(red/255., green/255.,0,1)
        
        red, green, blue = self.RGB(min((self.Betraege[3]/(self.MaxSeilKraft*self.MaxSeilKraftProzentsatz)),1.))
        self.ctrlMagentaForce.SetBackgroundColour("#%02x%02x%02x"%(red,green,blue))
        self.Rope4.setColor(red/255., green/255.,0,1)   

        # Berechnungen fuer Graphik
        a1 = math.degrees( math.atan2(x1y, x1x) )+90 ;
        if (a1 < 0):
            a1 += 360;
        # Range to target.
        x1r1 = math.sqrt( (x1x * x1x ) + (x1y * x1y) );
        x1r = math.sqrt( (x1r1 * x1r1 ) + (x1z * x1z) );
        # Azimuth to target.
        b1 = math.degrees( math.atan2(x1r1, x1z) ) - 90;
        if (b1 < 0):
            b1 += 360;
        a2 = math.degrees( math.atan2(x2y, x2x) )+90 ;
        if (a2 < 0):
            a2 += 360;
        # Range to target.
        x2r1 = math.sqrt( (x2x * x2x ) + (x2y * x2y) );
        x2r = math.sqrt( (x2r1 * x2r1 ) + (x2z * x2z) );
        # Azimuth to target.
        b2 = math.degrees( math.atan2(x2r1, x2z) ) - 90;
        if (b2 < 0):
            b2 += 360;
        a3 = math.degrees( math.atan2(x3y, x3x) )+90 ;
        if (a3 < 0):
            a3 += 360;
            # Range to target.
        x3r1 = math.sqrt( (x3x * x3x ) + (x3y * x3y) );
        x3r = math.sqrt( (x3r1 * x3r1 ) + (x3z * x3z) );
                # Azimuth to target.
        b3 = math.degrees( math.atan2(x3r1, x3z) ) - 90;
        if (b3 < 0):
            b3 += 360;
        a4 = math.degrees( math.atan2(x4y, x4x) )+90 ;
        if (a4 < 0):
            a4 += 360;
        # Range to target.
        x4r1 = math.sqrt( (x4x * x4x ) + (x4y * x4y) );
        x4r = math.sqrt( (x4r1 * x4r1 ) + (x4z * x4z) );
        # Azimuth to target.
        b4 = math.degrees( math.atan2(x4r1, x4z) ) - 90;
        if (b4 < 0):
            b4 += 360;
        self.Rope1.setPosHprScale(self.YellowX,self.YellowY,self.YellowZ,a1,b1,0,0.02*self.ScaleReps,x1r,0.02*self.ScaleReps)
        self.Rope2.setPosHprScale(self.GreenX,self.GreenY,self.GreenZ,a2,b2,0,0.02*self.ScaleReps,x2r,0.02*self.ScaleReps)
        self.Rope3.setPosHprScale(self.CyanX,self.CyanY,self.CyanZ,a3,b3,0,0.02*self.ScaleReps,x3r,0.02*self.ScaleReps) 
        self.Rope4.setPosHprScale(self.MagentaX,self.MagentaY,self.MagentaZ,a4,b4,0,0.02*self.ScaleReps,x4r,0.02*self.ScaleReps)

        
    def CalculateMeanPosition(self):
        self.SeilLaenge1 =float(self.Yellow.PosIst)+self.YellowRopeOffset
        self.ctrlYellowLength.SetValue("%4.2f"%self.SeilLaenge1)
        
        self.SeilLaenge2 =float(self.Green.PosIst)+self.GreenRopeOffset
        self.ctrlGreenLength.SetValue("%4.2f"%self.SeilLaenge2)
        
        self.SeilLaenge3=float(self.Cyan.PosIst)+self.CyanRopeOffset
        self.ctrlCyanLength.SetValue("%4.2f"%self.SeilLaenge3)
        
        self.SeilLaenge4=float(self.Magenta.PosIst)+self.MagentaRopeOffset
        self.ctrlMagentaLength.SetValue("%4.2f"%(self.SeilLaenge4))
        
        Schnitt1=self.Kugelschnitt(self.M1,self.SeilLaenge1,self.M2,self.SeilLaenge2,self.M3,self.SeilLaenge3)
        Schnitt2=self.Kugelschnitt(self.M2,self.SeilLaenge2,self.M3,self.SeilLaenge3,self.M4,self.SeilLaenge4)
        Schnitt3=self.Kugelschnitt(self.M1,self.SeilLaenge1,self.M3,self.SeilLaenge3,self.M4,self.SeilLaenge4)
        Schnitt4=self.Kugelschnitt(self.M1,self.SeilLaenge1,self.M2,self.SeilLaenge2,self.M4,self.SeilLaenge4)

        PosGerechnet,Fehler=self.MittelKugelaus4(Schnitt1,Schnitt2,Schnitt3,Schnitt4)

        
        self.PosX = PosGerechnet[0]
        self.PosY = PosGerechnet[1]
        self.PosZ = PosGerechnet[2]
        self.PosF = Fehler
        
        #if Fehler > 1.5 :
            #App.Yellow.GUINotHalt      = 0
            #App.Green.GUINotHalt       = 0
            #App.Cyan.GUINotHalt        = 0
            #App.Magenta.GUINotHalt     = 0
        #else:
            #App.Yellow.GUINotHalt      = 1
            #App.Green.GUINotHalt       = 1
            #App.Cyan.GUINotHalt        = 1
            #App.Magenta.GUINotHalt     = 1
            
        self.ctrlPosF.SetValue("%4.2f"%(float(Fehler)))
        
        return ( PosGerechnet,Fehler )
    def CalculateRopeVectors(self):
        self.x1x=self.YellowX-self.SollPosX
        self.x1y=self.YellowY-self.SollPosY
        self.x1z=self.YellowZ-self.SollPosZ
        
        self.x2x=self.GreenX-self.SollPosX
        self.x2y=self.GreenY-self.SollPosY
        self.x2z=self.GreenZ-self.SollPosZ
        
        self.x3x=self.CyanX-self.SollPosX
        self.x3y=self.CyanY-self.SollPosY
        self.x3z=self.CyanZ-self.SollPosZ
        
        self.x4x=self.MagentaX-self.SollPosX
        self.x4y=self.MagentaY-self.SollPosY
        self.x4z=self.MagentaZ-self.SollPosZ
        
    def ProjectVelSoltoRopes(self):        
        # Geschwindigkeit Seil1
        YellowVel= (self.x1x*self.VX+self.x1y*self.VY+self.x1z*self.VZ)/self.TSeilLaenge1
        self.Yellow.SpeedSoll= "%2.5f"%(-float(YellowVel))
        self.ctrlYellowVel.SetValue("%4.2f"%(float(self.Yellow.SpeedIstUI)))
        # Geschwindigkeit Seil2
        GreenVel= (self.x2x*self.VX+self.x2y*self.VY+self.x2z*self.VZ)/self.TSeilLaenge2
        self.Green.SpeedSoll= "%2.5f"%(-float(GreenVel))
        self.ctrlGreenVel.SetValue("%4.2f"%(float(self.Green.SpeedIstUI)))        
        # Geschwindigkeit Seil3
        CyanVel= (self.x3x*self.VX+self.x3y*self.VY+self.x3z*self.VZ)/self.TSeilLaenge3   
        self.Cyan.SpeedSoll= "%2.5f"%(-float(CyanVel))
        self.ctrlCyanVel.SetValue("%4.2f"%(float(self.Cyan.SpeedIstUI)))
        # Geschwindigkeit Seil4
        MagentaVel=(self.x4x*self.VX+self.x4y*self.VY+self.x4z*self.VZ)/self.TSeilLaenge4
        self.Magenta.SpeedSoll= "%2.5f"%(-float(MagentaVel))
        self.ctrlMagentaVel.SetValue("%4.2f"%(float(self.Magenta.SpeedIstUI)))
        
    def SollPostoRopeLength(self):
        # Theoretische Seillaengen
        # Seillaenge ist Betrag von Vektor TPos zu Yellow,Green,Cyan,Magenta
        self.Tx1x=self.YellowX-self.SollPosX
        self.Tx1y=self.YellowY-self.SollPosY
        self.Tx1z=self.YellowZ-self.SollPosZ
        
        self.Tx2x=self.GreenX-self.SollPosX
        self.Tx2y=self.GreenY-self.SollPosY
        self.Tx2z=self.GreenZ-self.SollPosZ
        
        self.Tx3x=self.CyanX-self.SollPosX
        self.Tx3y=self.CyanY-self.SollPosY
        self.Tx3z=self.CyanZ-self.SollPosZ
        
        self.Tx4x=self.MagentaX-self.SollPosX
        self.Tx4y=self.MagentaY-self.SollPosY
        self.Tx4z=self.MagentaZ-self.SollPosZ
        
        self.TSeilLaenge1 = math.sqrt(self.Tx1x**2+self.Tx1y**2+self.Tx1z**2)
        self.TSeilLaenge2 = math.sqrt(self.Tx2x**2+self.Tx2y**2+self.Tx2z**2)
        self.TSeilLaenge3 = math.sqrt(self.Tx3x**2+self.Tx3y**2+self.Tx3z**2)
        self.TSeilLaenge4 = math.sqrt(self.Tx4x**2+self.Tx4y**2+self.Tx4z**2)
        
        self.Yellow.PosSoll= "%2.5f"%(self.TSeilLaenge1-self.YellowRopeOffset)
        self.Green.PosSoll= "%2.5f"%(self.TSeilLaenge2-self.GreenRopeOffset)
        self.Cyan.PosSoll= "%2.5f"%(self.TSeilLaenge3-self.CyanRopeOffset)
        self.Magenta.PosSoll= "%2.5f"%(self.TSeilLaenge4-self.MagentaRopeOffset)
        
    def RopesForRender(self):        

        Seil1=numpy.array([self.x1x,self.x1y,self.x1z])
        Seil2=numpy.array([self.x2x,self.x2y,self.x2z])
        Seil3=numpy.array([self.x3x,self.x3y,self.x3z])
        Seil4=numpy.array([self.x4x,self.x4y,self.x4z])
        
        self.Kamera=numpy.array([self.SollPosX,self.SollPosY,self.SollPosZ])
        Last=numpy.array([0,0,self.Weight])
        
        self.Betraege = self.Kraefteberechnung( Seil1,Seil2,Seil3,Seil4,self.Kamera,Last)
        self.ctrlYellowForce.SetValue("%4.2f"%(self.Betraege[0]))
        self.ctrlGreenForce.SetValue("%4.2f"%(self.Betraege[1]))
        self.ctrlCyanForce.SetValue("%4.2f"%(self.Betraege[2]))
        self.ctrlMagentaForce.SetValue("%4.2f"%(self.Betraege[3]))
        
        red, green, blue = self.RGB(min((self.Betraege[0]/(self.MaxSeilKraft*self.MaxSeilKraftProzentsatz)),1.))
        self.ctrlYellowForce.SetBackgroundColour("#%02x%02x%02x"%(red,green,blue))
        self.Rope1.setColor(red/255., green/255.,0,1)

        red, green, blue = self.RGB(min((self.Betraege[1]/(self.MaxSeilKraft*self.MaxSeilKraftProzentsatz)),1.))
        self.ctrlGreenForce.SetBackgroundColour("#%02x%02x%02x"%(red,green,blue))
        self.Rope2.setColor(red/255., green/255.,0,1)
               
        red, green, blue = self.RGB(min((self.Betraege[2]/(self.MaxSeilKraft*self.MaxSeilKraftProzentsatz)),1.))
        self.ctrlCyanForce.SetBackgroundColour("#%02x%02x%02x"%(red,green,blue))
        self.Rope3.setColor(red/255., green/255.,0,1)
        
        red, green, blue = self.RGB(min((self.Betraege[3]/(self.MaxSeilKraft*self.MaxSeilKraftProzentsatz)),1.))
        self.ctrlMagentaForce.SetBackgroundColour("#%02x%02x%02x"%(red,green,blue))
        self.Rope4.setColor(red/255., green/255.,0,1) 

        # Berechnungen fuer Graphik
        a1 = math.degrees( math.atan2(self.x1y, self.x1x) )+90 ;
        if (a1 < 0):
            a1 += 360;
        # Range to target.
        x1r1 = math.sqrt( (self.x1x * self.x1x ) + (self.x1y * self.x1y) );
        x1r = math.sqrt( (x1r1 * x1r1 ) + (self.x1z * self.x1z) );
        # Azimuth to target.
        b1 = math.degrees( math.atan2(x1r1, self.x1z) ) - 90;
        if (b1 < 0):
            b1 += 360;
        a2 = math.degrees( math.atan2(self.x2y, self.x2x) )+90 ;
        if (a2 < 0):
            a2 += 360;
        # Range to target.
        x2r1 = math.sqrt( (self.x2x * self.x2x ) + (self.x2y * self.x2y) );
        x2r = math.sqrt( (x2r1 * x2r1 ) + (self.x2z * self.x2z) );
        # Azimuth to target.
        b2 = math.degrees( math.atan2(x2r1, self.x2z) ) - 90;
        if (b2 < 0):
            b2 += 360;
        a3 = math.degrees( math.atan2(self.x3y, self.x3x) )+90 ;
        if (a3 < 0):
            a3 += 360;
            # Range to target.
        x3r1 = math.sqrt( (self.x3x * self.x3x ) + (self.x3y * self.x3y) );
        x3r = math.sqrt( (x3r1 * x3r1 ) + (self.x3z * self.x3z) );
                # Azimuth to target.
        b3 = math.degrees( math.atan2(x3r1, self.x3z) ) - 90;
        if (b3 < 0):
            b3 += 360;
        a4 = math.degrees( math.atan2(self.x4y, self.x4x) )+90 ;
        if (a4 < 0):
            a4 += 360;
        # Range to target.
        x4r1 = math.sqrt( (self.x4x * self.x4x ) + (self.x4y * self.x4y) );
        x4r = math.sqrt( (x4r1 * x4r1 ) + (self.x4z * self.x4z) );
        # Azimuth to target.
        b4 = math.degrees( math.atan2(x4r1, self.x4z) ) - 90;
        if (b4 < 0):
            b4 += 360;
        self.Rope1.setPosHprScale(self.YellowX,self.YellowY,self.YellowZ,a1,b1,0,0.02*self.ScaleReps,x1r,0.02*self.ScaleReps)
        self.Rope2.setPosHprScale(self.GreenX,self.GreenY,self.GreenZ,a2,b2,0,0.02*self.ScaleReps,x2r,0.02*self.ScaleReps)
        self.Rope3.setPosHprScale(self.CyanX,self.CyanY,self.CyanZ,a3,b3,0,0.02*self.ScaleReps,x3r,0.02*self.ScaleReps) 
        self.Rope4.setPosHprScale(self.MagentaX,self.MagentaY,self.MagentaZ,a4,b4,0,0.02*self.ScaleReps,x4r,0.02*self.ScaleReps)

        self.CPosition.setPos(self.SollPosX,self.SollPosY,self.SollPosZ)
    def RGB(self,mag):
        """ Return a tuple of floats between 0 and 1 for R, G, and B. """
        Wert=int(mag*20)
        red=self.Colours[Wert][0]
        green=self.Colours[Wert][1]
        return red, green,0
    def OnStart(self, evt):
        #PStatClient.connect()
        if self.btStartState and (self.btStartStateOld) :
            self.btStartState = False
        else:
            self.btStartState = True
            self.btStartStateOld = self.btStartState 
            
        
        if self.btStartState:
            self.logger.info('Starting 3D Control')
            self.btStart.SetBitmapLabel(self.btStartBitmapSelected)
            self.btAxisSetup.Enable(False)
            self.btYellowSetup.Enable(False)
            self.btGreenSetup.Enable(False)            
            self.btCyanSetup.Enable(False)
            self.btMagentaSetup.Enable(False)
            self.btPosSetup.Enable(False)
            self.btKeyPointLoad.Enable(False)
            self.btKeyPointSave.Enable(False)
            self.frame.menuBar.EnableTop(pos=0,enable=False)
            self.frame.MenuBar.Disable()
            if self.btPosMode.GetValue():
                pass
            else:
                self.btPosMode.Enable(False)
            self.btPathLoad.Enable(False)
            self.btPathSave.Enable(False)
            self.btPathMode.Enable(False)
            
            self.firstmove = 1
                      
            self.initTraverser()
            user32dllHandle.SetFocus(self.pandaWindowHandle)
            #print 'Sub Select Path'
            taskMgr.remove("SelectPathTask")
            
            self.logger.info('starting MoveTask')
            taskMgr.add(self.move, "MoveTask")
            taskMgr.remove('KeepAlive')
            
            
        else:
            self.logger.info('Stopping 3D Control')
            self.btStart.SetBitmapLabel(self.btStartBitmapLabel)
            self.btAxisSetup.Enable(True)
            self.btYellowSetup.Enable(True)
            self.btGreenSetup.Enable(True)            
            self.btCyanSetup.Enable(True)
            self.btMagentaSetup.Enable(True)
            self.btPosSetup.Enable(True)
            self.btKeyPointLoad.Enable(True)
            self.btKeyPointSave.Enable(True)
            self.frame.menuBar.EnableTop(pos=0,enable=True)
            #self.frame.MenuBar.Enable(id=5011,enable=True)
            self.btPathLoad.Enable(True)
            self.btPathSave.Enable(True)
            #self.listKeyPoints.Enable(True)
            
            self.SaveKeyPoints("scratch.kpos")
            
            taskMgr.add(self.KeepAliveTask,'KeepAlive')
            self.logger.info('stopping MoveTask')
            taskMgr.remove("MoveTask")
            
            #print 'Add Select Path'
            taskMgr.add(self.SelectPathTask, "SelectPathTask")  
        
            

      #   Axis Handling Start------------   
#WWW Axis Handling Beginn---------    
    def OnAxisSetup(self,evt):
        self.logger.warn('Joystick Axis assignment called')

        self.btStart.Enable(False)
        self.btAxisSetup.Enable(False)
        self.btYellowSetup.Enable(False)
        self.btGreenSetup.Enable(False)            
        self.btCyanSetup.Enable(False)
        self.btMagentaSetup.Enable(False)
        self.btPosSetup.Enable(False)
        self.btKeyPointLoad.Enable(False)
        self.btKeyPointSave.Enable(False)
        self.btPosMode.Enable(False)
        self.btPathLoad.Enable(False)
        self.btPathSave.Enable(False)
        self.btPathMode.Enable(False)

        File = wx.Menu()

        openAxis = File.Append(-1,'OpenAxis','This opens the Axis Setups')
        File.AppendSeparator()
        saveAxis = File.Append(-1,'SaveAxis','This saves the Axis Setups')
        File.AppendSeparator()        
        exitAxis = File.Append(-1,'Exit','This exits the Axis Setup without saving anything')

        res = xrc.XmlResource('WWLayout0-12a.xrc')
        self.AxisWindow = res.LoadFrame(self.frame,'AxisSetup')        
        menuBar = wx.MenuBar()        
        menuBar.Append(File,'File')
        self.AxisWindow.SetMenuBar(menuBar)
        self.AxisWindow.Show()

        self.AxisWindow.combAx0Ax=xrc.XRCCTRL(self.AxisWindow,'combAx0Ax')
        self.AxisWindow.combAx1Ax=xrc.XRCCTRL(self.AxisWindow,'combAx1Ax')
        self.AxisWindow.combAx2Ax=xrc.XRCCTRL(self.AxisWindow,'combAx2Ax')
        self.AxisWindow.combAx3Ax=xrc.XRCCTRL(self.AxisWindow,'combAx3Ax')
        self.AxisWindow.combAx0Dir=xrc.XRCCTRL(self.AxisWindow,'combAx0Dir')
        self.AxisWindow.combAx1Dir=xrc.XRCCTRL(self.AxisWindow,'combAx1Dir')
        self.AxisWindow.combAx2Dir=xrc.XRCCTRL(self.AxisWindow,'combAx2Dir')
        self.AxisWindow.combAx3Dir=xrc.XRCCTRL(self.AxisWindow,'combAx3Dir')
        
        self.AxisWindow.txtAx0Deadband=xrc.XRCCTRL(self.AxisWindow,'txtAx0Deadband')
        self.AxisWindow.txtAx0Deadband.SetValidator(NumValidator("positivdigit"))
        self.AxisWindow.txtAx0Progression=xrc.XRCCTRL(self.AxisWindow,'txtAx0Progression')
        self.AxisWindow.txtAx0Progression.SetValidator(NumValidator("positivdigit"))
        self.AxisWindow.txtAx1Deadband=xrc.XRCCTRL(self.AxisWindow,'txtAx1Deadband')        
        self.AxisWindow.txtAx1Deadband.SetValidator(NumValidator("positivdigit"))
        self.AxisWindow.txtAx1Progression=xrc.XRCCTRL(self.AxisWindow,'txtAx1Progression')        
        self.AxisWindow.txtAx1Progression.SetValidator(NumValidator("positivdigit"))        
        self.AxisWindow.txtAx2Deadband=xrc.XRCCTRL(self.AxisWindow,'txtAx2Deadband')        
        self.AxisWindow.txtAx2Deadband.SetValidator(NumValidator("positivdigit"))
        self.AxisWindow.txtAx2Progression=xrc.XRCCTRL(self.AxisWindow,'txtAx2Progression')
        self.AxisWindow.txtAx2Progression.SetValidator(NumValidator("positivdigit"))
        self.AxisWindow.txtAx3Deadband=xrc.XRCCTRL(self.AxisWindow,'txtAx3Deadband')        
        self.AxisWindow.txtAx3Deadband.SetValidator(NumValidator("positivdigit"))
        self.AxisWindow.txtAx3Progression=xrc.XRCCTRL(self.AxisWindow,'txtAx3Progression')
        self.AxisWindow.txtAx3Progression.SetValidator(NumValidator("positivdigit"))
        
        self.AxisWindow.txtAxXScale=xrc.XRCCTRL(self.AxisWindow,'txtAxXScale')
        self.AxisWindow.txtAxXScale.SetValidator(NumValidator("positivdigit"))
        self.AxisWindow.txtAxYScale=xrc.XRCCTRL(self.AxisWindow,'txtAxYScale')
        self.AxisWindow.txtAxYScale.SetValidator(NumValidator("positivdigit"))
        self.AxisWindow.txtAxZScale=xrc.XRCCTRL(self.AxisWindow,'txtAxZScale')        
        self.AxisWindow.txtAxZScale.SetValidator(NumValidator("positivdigit"))        

        self.AxisWindow.txtAxXRot=xrc.XRCCTRL(self.AxisWindow,'txtAxXRot')
        self.AxisWindow.txtAxXRot.SetValidator(NumValidator("positivdigit"))
        self.AxisWindow.txtAxYRot=xrc.XRCCTRL(self.AxisWindow,'txtAxYRot')
        self.AxisWindow.txtAxYRot.SetValidator(NumValidator("positivdigit"))
        self.AxisWindow.txtAxZRot=xrc.XRCCTRL(self.AxisWindow,'txtAxZRot')
        self.AxisWindow.txtAxZRot.SetValidator(NumValidator("positivdigit"))        
        
        self.AxisWindow.combAx0Ax.SetValue(self.Ax0Ax)
        self.AxisWindow.combAx1Ax.SetValue(self.Ax1Ax)       
        self.AxisWindow.combAx2Ax.SetValue(self.Ax2Ax)
        self.AxisWindow.combAx3Ax.SetValue(self.Ax3Ax)
        self.AxisWindow.combAx0Dir.SetValue(self.Ax0Dir)
        self.AxisWindow.combAx1Dir.SetValue(self.Ax1Dir)
        self.AxisWindow.combAx2Dir.SetValue(self.Ax2Dir)
        self.AxisWindow.combAx3Dir.SetValue(self.Ax3Dir)
        
        self.AxisWindow.txtAx0Deadband.SetValue(str(self.Ax0Deadband))
        self.AxisWindow.txtAx0Progression.SetValue(str(self.Ax0Progression))     
        self.AxisWindow.txtAx1Deadband.SetValue(str(self.Ax1Deadband))   
        self.AxisWindow.txtAx1Progression.SetValue(str(self.Ax1Progression))     
        self.AxisWindow.txtAx2Deadband.SetValue(str(self.Ax2Deadband))     
        self.AxisWindow.txtAx2Progression.SetValue(str(self.Ax2Progression))
        self.AxisWindow.txtAx3Deadband.SetValue(str(self.Ax3Deadband))   
        self.AxisWindow.txtAx3Progression.SetValue(str(self.Ax3Progression))
        
        self.AxisWindow.txtAxXScale.SetValue(str(self.AxXScale))
        self.AxisWindow.txtAxYScale.SetValue(str(self.AxYScale))
        self.AxisWindow.txtAxZScale.SetValue(str(self.AxZScale))        
        
        self.AxisWindow.txtAxXRot.SetValue(str(self.AxXRot))
        self.AxisWindow.txtAxYRot.SetValue(str(self.AxYRot))
        self.AxisWindow.txtAxZRot.SetValue(str(self.AxZRot))
        

        self.AxisWindow.Bind(wx.EVT_BUTTON, self.OnAxisDefault, id=xrc.XRCID('btAxisSetupDefault'))
        self.AxisWindow.Bind(wx.EVT_BUTTON, self.OnAxisSaveQuit, id=xrc.XRCID('btAxisSQ'))
        self.AxisWindow.Bind(wx.EVT_BUTTON, self.OnAxisExit, id=xrc.XRCID('btAxisQ'))
        self.AxisWindow.Bind(wx.EVT_MENU, self.OnAxisOpen, openAxis)
        self.AxisWindow.Bind(wx.EVT_MENU, self.OnAxisSave, saveAxis)
        self.AxisWindow.Bind(wx.EVT_MENU, self.OnAxisExit, exitAxis)


    def OnAxisDefault(self,evt): 
        self.AxisWindow.combAx0Ax.SetValue('X-Axis')
        self.AxisWindow.combAx1Ax.SetValue('Y-Axis')       
        self.AxisWindow.combAx2Ax.SetValue('Path')
        self.AxisWindow.combAx3Ax.SetValue('Z-Axis')
        self.AxisWindow.combAx0Dir.SetValue('normal')
        self.AxisWindow.combAx1Dir.SetValue('normal')
        self.AxisWindow.combAx2Dir.SetValue('normal')
        self.AxisWindow.combAx3Dir.SetValue('normal') 
        self.Ax0Ax='X-Axis'
        self.Ax1Ax='Y-Axis'
        self.Ax2Ax='Path'
        self.Ax3Ax='Z-Axis'
        self.Ax0Dir='normal'
        self.Ax1Dir='normal'
        self.Ax2Dir='normal'
        self.Ax3Dir='normal'
        self.Ax0Deadband=200
        self.Ax1Deadband=200
        self.Ax2Deadband=200
        self.Ax3Deadband=200
        self.Ax0Progression=0.0001
        self.Ax1Progression=0.0001
        self.Ax2Progression=0.0001
        self.Ax3Progression=0.0001
        self.AxXScale=1.0
        self.AxYScale=1.0
        self.AxZScale=0.2        
        self.AxXRot=0.0
        self.AxYRot=0.0
        self.AxZRot=0.0
        self.OnAxisExit('0')
        self.logger.warn('Joystick Axis assignment reset to default')
    def OnAxisSaveQuit(self,evt):
        self.OnAxisSaveHelp('0')
        self.btAxisSetup.Enable(True)
        self.btYellowSetup.Enable(True)
        self.btGreenSetup.Enable(True)            
        self.btCyanSetup.Enable(True)
        self.btMagentaSetup.Enable(True)
        self.btPosSetup.Enable(True)
        self.btKeyPointLoad.Enable(True)
        self.btKeyPointSave.Enable(True)
        self.btPathLoad.Enable(True)
        self.btPathSave.Enable(True)
        self.OnAxisExit('0')
        self.logger.warn('Joystick Axis assignment changed to:\t'+str(self.axislist[0]).rstrip()
                 +str(self.axislist[1]).rstrip()+"\n"+"\t"
                 +str(self.axislist[2]).rstrip()
                 +str(self.axislist[3]).rstrip()+"\n"+"\t"
                 +str(self.axislist[4]).rstrip()
                 +str(self.axislist[5]).rstrip()+"\n"+"\t"
                 +str(self.axislist[6]).rstrip()
                 +str(self.axislist[7]).rstrip()+"\n"+"\t"
                 +str(self.axislist[8]).rstrip()
                 +str(self.axislist[9]).rstrip()+"\n"+"\t"
                 +str(self.axislist[10]).rstrip()
                 +str(self.axislist[11]).rstrip()+"\n"+"\t"
                 +str(self.axislist[12]).rstrip()
                 +str(self.axislist[13]).rstrip()+"\n"+"\t"
                 +str(self.axislist[14]).rstrip()
                 +str(self.axislist[15]).rstrip()+"\n"+"\t"
                 +str(self.axislist[16]).rstrip()
                 +str(self.axislist[17]).rstrip()+"\n"+"\t"
                 +str(self.axislist[18]).rstrip()
                 +str(self.axislist[19]).rstrip()+"\n"+"\t"
                 +str(self.axislist[20]).rstrip()
                 +str(self.axislist[21]).rstrip()+"\n"+"\t"
                 +str(self.axislist[22]).rstrip()
                 +str(self.axislist[23]).rstrip()+"\n"+"\t"
                 +str(self.axislist[24]).rstrip()
                 +str(self.axislist[25]).rstrip()+"\n"+"\t"
                 +str(self.axislist[26]).rstrip()
                 +str(self.axislist[27]).rstrip()+"\n"+"\t"
                 +str(self.axislist[28]).rstrip()
                 +str(self.axislist[29]).rstrip()+"\n"+"\t"
                 +str(self.axislist[30]).rstrip()
                 +str(self.axislist[31]).rstrip()+"\n"+"\t"
                 +str(self.axislist[32]).rstrip()
                 +str(self.axislist[33]).rstrip()+"\n"+"\t"
                 +str(self.axislist[34]).rstrip()
                 +str(self.axislist[35]).rstrip()+"\n"+"\t"
                 +str(self.axislist[36]).rstrip()
                 +str(self.axislist[37]).rstrip()+"\n"+"\t"
                 +str(self.axislist[38]).rstrip()
                 +str(self.axislist[39]).rstrip()+"\n"+"\t"
                 +str(self.axislist[40]).rstrip()
                 +str(self.axislist[41]).rstrip()+"\n"+"\t"
                 +str(self.axislist[42]).rstrip()
                 +str(self.axislist[43]).rstrip()+"\n")  
    def OnAxisExit(self,event):
        self.btAxisSetup.Enable(True)
        self.btStart.Enable(True)
        self.btYellowSetup.Enable(True)
        self.btGreenSetup.Enable(True)            
        self.btCyanSetup.Enable(True)
        self.btMagentaSetup.Enable(True)
        self.btPosSetup.Enable(True)
        self.btKeyPointLoad.Enable(True)
        self.btKeyPointSave.Enable(True)
        self.btPathLoad.Enable(True)
        self.btPathSave.Enable(True)
        self.AxisWindow.Close()
        self.logger.warn('Joystick Axis assignment Quit')     
    def OnAxisOpen(self,event):
        dlg = wx.FileDialog(self.frame,'Open Axis Settings',os.getcwd(), style=wx.OPEN,wildcard='*.axi')
        if dlg.ShowModal() == wx.ID_OK:
            self.Axis = dlg.GetPath()
            axfile=open(self.Axis,'r')
            self.axislist = list(axfile)
            self.AxisWindow.combAx0Ax.SetValue(self.axislist[1])
            self.AxisWindow.combAx1Ax.SetValue(self.axislist[3])       
            self.AxisWindow.combAx2Ax.SetValue(self.axislist[5])
            self.AxisWindow.combAx3Ax.SetValue(self.axislist[7])
            self.AxisWindow.combAx0Dir.SetValue(self.axislist[9])
            self.AxisWindow.combAx1Dir.SetValue(self.axislist[11])
            self.AxisWindow.combAx2Dir.SetValue(self.axislist[13])
            self.AxisWindow.combAx3Dir.SetValue(self.axislist[15]) 
            
            self.AxisWindow.txtAx0Deadband.SetValue(self.axislist[17])
            self.AxisWindow.txtAx0Progression.SetValue(self.axislist[19])     
            self.AxisWindow.txtAx1Deadband.SetValue(self.axislist[21])   
            self.AxisWindow.txtAx1Progression.SetValue(self.axislist[23])     
            self.AxisWindow.txtAx2Deadband.SetValue(self.axislist[25])     
            self.AxisWindow.txtAx2Progression.SetValue(self.axislist[27])
            self.AxisWindow.txtAx3Deadband.SetValue(self.axislist[29])   
            self.AxisWindow.txtAx3Progression.SetValue(self.axislist[31])
            
            self.AxisWindow.txtAxXScale.SetValue(self.axislist[33])
            self.AxisWindow.txtAxYScale.SetValue(self.axislist[35])
            self.AxisWindow.txtAxZScale.SetValue(self.axislist[37])
            
            self.AxisWindow.txtAxXRot.SetValue(self.axislist[39])
            self.AxisWindow.txtAxYRot.SetValue(self.axislist[41])
            self.AxisWindow.txtAxZRot.SetValue(self.axislist[43])            

            self.Ax0Ax=self.axislist[1]
            self.Ax1Ax=self.axislist[3]
            self.Ax2Ax=self.axislist[5]
            self.Ax3Ax=self.axislist[7]
            self.Ax0Dir=self.axislist[9]
            self.Ax1Dir=self.axislist[11]
            self.Ax2Dir=self.axislist[13]
            self.Ax3Dir=self.axislist[15]
            try:
                self.Ax0Deadband=float(self.axislist[17])
                self.Ax1Deadband=float(self.axislist[19])
                self.Ax2Deadband=float(self.axislist[21])
                self.Ax3Deadband=float(self.axislist[23])
                
                self.Ax0Progression=float(self.axislist[25])
                self.Ax1Progression=float(self.axislist[27])
                self.Ax2Progression=float(self.axislist[29])
                self.Ax3Progression=float(self.axislist[31])
                
                self.AxXScale=float(self.axislist[33])
                self.AxYScale=float(self.axislist[35])
                self.AxZScale=float(self.axislist[37])            
                
                self.AxXRot=float(self.axislist[39])
                self.AxYRot=float(self.axislist[41])
                self.AxZRot=float(self.axislist[43])

            except ValueError:
                dlg=wx.MessageDialog(None,'Error in Axis File','Syntax ERROR',wx.OK|wx.ICON_EXCLAMATION)
                result=dlg.ShowModal()
                dlg.Destroy                
            
            file.close(axfile)
            
            self.logger.warn('Joystick Axis assignment changed to:\t'+str(self.axislist[0]).rstrip()
                             +str(self.axislist[1]).rstrip()+"\n"+"\t"
                             +str(self.axislist[2]).rstrip()
                             +str(self.axislist[3]).rstrip()+"\n"+"\t"
                             +str(self.axislist[4]).rstrip()
                             +str(self.axislist[5]).rstrip()+"\n"+"\t"
                             +str(self.axislist[6]).rstrip()
                             +str(self.axislist[7]).rstrip()+"\n"+"\t"
                             +str(self.axislist[8]).rstrip()
                             +str(self.axislist[9]).rstrip()+"\n"+"\t"
                             +str(self.axislist[10]).rstrip()
                             +str(self.axislist[11]).rstrip()+"\n"+"\t"
                             +str(self.axislist[12]).rstrip()
                             +str(self.axislist[13]).rstrip()+"\n"+"\t"
                             +str(self.axislist[14]).rstrip()
                             +str(self.axislist[15]).rstrip()+"\n"+"\t"
                             +str(self.axislist[16]).rstrip()
                             +str(self.axislist[17]).rstrip()+"\n"+"\t"
                             +str(self.axislist[18]).rstrip()
                             +str(self.axislist[19]).rstrip()+"\n"+"\t"
                             +str(self.axislist[20]).rstrip()
                             +str(self.axislist[21]).rstrip()+"\n"+"\t"
                             +str(self.axislist[22]).rstrip()
                             +str(self.axislist[23]).rstrip()+"\n"+"\t"
                             +str(self.axislist[24]).rstrip()
                             +str(self.axislist[25]).rstrip()+"\n"+"\t"
                             +str(self.axislist[26]).rstrip()
                             +str(self.axislist[27]).rstrip()+"\n"+"\t"
                             +str(self.axislist[28]).rstrip()
                             +str(self.axislist[29]).rstrip()+"\n"+"\t"
                             +str(self.axislist[30]).rstrip()
                             +str(self.axislist[31]).rstrip()+"\n"+"\t"
                             +str(self.axislist[32]).rstrip()
                             +str(self.axislist[33]).rstrip()+"\n"+"\t"
                             +str(self.axislist[34]).rstrip()
                             +str(self.axislist[35]).rstrip()+"\n"+"\t"
                             +str(self.axislist[36]).rstrip()
                             +str(self.axislist[37]).rstrip()+"\n"+"\t"
                             +str(self.axislist[38]).rstrip()
                             +str(self.axislist[39]).rstrip()+"\n"+"\t"
                             +str(self.axislist[40]).rstrip()
                             +str(self.axislist[41]).rstrip()+"\n"+"\t"
                             +str(self.axislist[42]).rstrip()
                             +str(self.axislist[43]).rstrip()+"\n")  
                             

        dlg.Destroy()
    def OnAxisSave(self,event): 
        
        self.btAxisSetup.Enable(False)
        self.btStart.Enable(False)
        self.btPosSetup.Enable(False)
        self.btYellowSetup.Enable(False)
        self.btGreenSetup.Enable(False)
        self.btCyanSetup.Enable(False)
        self.btMagentaSetup.Enable(False)
        self.btPosSetup.Enable(False)
        self.btPosSetup.Enable(False)
        self.btKeyPointLoad.Enable(False)
        self.btKeyPointSave.Enable(False)
        self.btPosMode.Enable(False)
        self.btPathLoad.Enable(False)
        self.btPathSave.Enable(False)
        self.btPathMode.Enable(False)
        
        dlg = wx.FileDialog(self.frame,'Save Axis',os.getcwd(), style=wx.SAVE,wildcard='*.axi')
        if dlg.ShowModal() == wx.ID_OK:
            self.Axis = dlg.GetPath()          
            file = open(self.Axis,'w')
            file.write('Panel.Left left-right Axis =\n'+str(self.AxisWindow.combAx0Ax.GetValue()).rstrip()+'\n'+
                       'Panel.Left up-Down Axis =\n'+str(self.AxisWindow.combAx1Ax.GetValue()).rstrip()+'\n'+
                       'Panel.Right left-right Axis =\n'+str(self.AxisWindow.combAx2Ax.GetValue()).rstrip()+'\n'+
                       'Panel.Right up-down Axis =\n'+str(self.AxisWindow.combAx3Ax.GetValue()).rstrip()+'\n'+
                       'Panel.Left left-right Direction =\n'+str(self.AxisWindow.combAx0Dir.GetValue()).rstrip()+'\n'+
                       'Panel.Left up-Down Direction =\n'+str(self.AxisWindow.combAx1Dir.GetValue()).rstrip()+'\n'+
                       'Panel.Right left.right Direction =\n'+str(self.AxisWindow.combAx2Dir.GetValue()).rstrip()+'\n'+
                       'Panel.Right up-down Direction =\n'+str(self.AxisWindow.combAx3Dir.GetValue()).rstrip()+'\n'+
                       'Deadband Ax0=\n'+str(self.AxisWindow.txtAx0Deadband.GetValue()).rstrip()+'\n'+
                       'Progression Ax0=\n'+str(self.AxisWindow.txtAx0Progression.GetValue()).rstrip()+'\n'+
                       'Deadband Ax1=\n'+str(self.AxisWindow.txtAx1Deadband.GetValue()).rstrip()+'\n'+
                       'Progression Ax1=\n'+str(self.AxisWindow.txtAx1Progression.GetValue()).rstrip()+'\n'+
                       'Deadband Ax2=\n'+str(self.AxisWindow.txtAx2Deadband.GetValue()).rstrip()+'\n'+
                       'Progression Ax2=\n'+str(self.AxisWindow.txtAx2Progression.GetValue()).rstrip()+'\n'+
                       'Deadband Ax3=\n'+str(self.AxisWindow.txtAx3Deadband.GetValue()).rstrip()+'\n'+
                       'Progression Ax3=\n'+str(self.AxisWindow.txtAx3Progression.GetValue()).rstrip()+'\n'+
                       'X-Axis Scale=\n'+str(self.AxisWindow.txtAxXScale.GetValue()).rstrip()+'\n'+
                       'Y-Axis Scale=\n'+str(self.AxisWindow.txtAxYScale.GetValue()).rstrip()+'\n'+
                       'Z-Axis Scale=\n'+str(self.AxisWindow.txtAxZScale.GetValue()).rstrip()+'\n'+                       
                       'Rotation about X-Axis=\n'+str(self.AxisWindow.txtAxXRot.GetValue()).rstrip()+'\n'+
                       'Rotation about Y-Axis=\n'+str(self.AxisWindow.txtAxYRot.GetValue()).rstrip()+'\n'+
                       'Rotation about Z-Axis=\n'+str(self.AxisWindow.txtAxZRot.GetValue()).rstrip()+'\n')
            
            file.close()
            self.btAxisSetup.Enable(True)
            self.btStart.Enable(True)
            self.btPosSetup.Enable(True)
            self.btYellowSetup.Enable(True)
            self.btGreenSetup.Enable(True)
            self.btCyanSetup.Enable(True)
            self.btMagentaSetup.Enable(True)
            self.btPosSetup.Enable(True)
            self.btPosSetup.Enable(True)
            self.btKeyPointLoad.Enable(True)
            self.btKeyPointSave.Enable(True)
            self.btPathLoad.Enable(True)
            self.btPathSave.Enable(True)
            self.logger.warn ('Joystick Axis assignment written to file %s',self.Axis)
            
        self.OnAxisSaveHelp('0')
    def OnAxisSaveHelp(self,evt):
        self.Ax0Ax=str(self.AxisWindow.combAx0Ax.GetValue())
        self.Ax1Ax=str(self.AxisWindow.combAx1Ax.GetValue())
        self.Ax2Ax=str(self.AxisWindow.combAx2Ax.GetValue())
        self.Ax3Ax=str(self.AxisWindow.combAx3Ax.GetValue())
        self.Ax0Dir=str(self.AxisWindow.combAx0Dir.GetValue())
        self.Ax1Dir=str(self.AxisWindow.combAx1Dir.GetValue())
        self.Ax2Dir=str(self.AxisWindow.combAx2Dir.GetValue())
        self.Ax3Dir=str(self.AxisWindow.combAx3Dir.GetValue())
        
        try:
            self.Ax0Deadband=float(self.AxisWindow.txtAx0Deadband.GetValue())
            self.Ax1Deadband=float(self.AxisWindow.txtAx1Deadband.GetValue())
            self.Ax2Deadband=float(self.AxisWindow.txtAx2Deadband.GetValue())
            self.Ax3Deadband=float(self.AxisWindow.txtAx3Deadband.GetValue())
                
            self.Ax0Progression=float(self.AxisWindow.txtAx0Progression.GetValue())
            self.Ax1Progression=float(self.AxisWindow.txtAx1Progression.GetValue())
            self.Ax2Progression=float(self.AxisWindow.txtAx2Progression.GetValue())
            self.Ax3Progression=float(self.AxisWindow.txtAx3Progression.GetValue())
            
            self.AxXScale=float(self.AxisWindow.txtAxXScale.GetValue())
            self.AxYScale=float(self.AxisWindow.txtAxYScale.GetValue())
            self.AxZScale=float(self.AxisWindow.txtAxZScale.GetValue())        
            
            self.AxXRot=float(self.AxisWindow.txtAxXRot.GetValue())
            self.AxYRot=float(self.AxisWindow.txtAxYRot.GetValue())
            self.AxZRot=float(self.AxisWindow.txtAxZRot.GetValue())
            
        except ValueError:
            dlg=wx.MessageDialog(None,'Please use just numbers, minus and . as comma. Like 123.45  Use <Backspace> to correct the error!','Syntax ERROR',wx.OK|wx.ICON_EXCLAMATION)
            result=dlg.ShowModal()
            dlg.Destroy            
            
      
#WWW Axis Handling End--------------   

#WWW Pos Setup Beginn--------------
    def OnPosSetup(self,event):
        self.logger.debug('Initialising Pos Setup Window')
        
        try:
            self.Yellow
            self.Green
            self.Cyan
            self.Magenta
            AchsenInitialisiert=True            
        except:
            AchsenInitialisiert=False
        if AchsenInitialisiert:
            self.AchsenComunicate()
            if (not(App.Yellow.EsNetwork) or 
                not(App.Green.EsNetwork)or
                not(App.Cyan.EsNetwork) or
                not(App.Magenta.EsNetwork)) and (self.btStartState == True): 
                #print "OnPosSetup"
                self.EStopOpen()
            self.CalculateMeanPosition()
            
            self.TargetPoint[0]=-1000
            self.TargetPoint[1]=-1000
            self.TargetPoint[2]=-1000
            self.TargetPointOld[0] = -1000
            self.TargetPointOld[1] = -1000
            self.TargetPointOld[2] = -1000
            self.NewTargetPoint = False            
            
            
            #self.KeyPointActive = False
            #self.btPosMode.SetValue(False)
            #self.btPathMode.SetValue(False)
            #self.PathActive = False
            #self.OnPathFlag = 0
            #try:
                #self.PathModell[self.ActivePath].getChild(3).setTexture(self.texPathPink)
                #self.PathModell[key].getChild(3).node().setThickness(0.3*self.ScaleReps)
            #except:
                #pass
            #self.KeyPointPanel.SetBackgroundColour(wx.Colour(187,187,187))
            #self.KeyPointPanel.Refresh()
            #self.PathPanel.SetBackgroundColour(wx.Colour(187,187,187))
            #self.PathPanel.Refresh()
            
        self.btAxisSetup.Enable(False)        
        self.btStart.Enable(False)
        self.btPosSetup.Enable(False)
        self.btYellowSetup.Enable(False)
        self.btGreenSetup.Enable(False)
        self.btCyanSetup.Enable(False)
        self.btMagentaSetup.Enable(False)
        self.btMagentaSetup.Enable(False)
        self.btPosSetup.Enable(False)
        self.btKeyPointLoad.Enable(False)
        self.btKeyPointSave.Enable(False)
        self.btPosMode.Enable(False)
        self.btPathLoad.Enable(False)
        self.btPathSave.Enable(False)
        self.btPathMode.Enable(False)
        
        self.frame.menuBar.EnableTop(pos=0,enable=False)
        self.frame.MenuBar.Disable()        
        
        self.SaveKeyPoints('TempKPos.kpos')
        
        res = xrc.XmlResource('WWLayout0-12a.xrc')
        self.PosWindow = res.LoadFrame(self.frame,'PosSetup')
        #self.PosWindow.SetTransparent(125)        
        self.PosWindow.Show()
                
        self.InitPosWindow()
        self.logger.debug('Pos Setup Window Initialised')
               


    def InitPosWindow(self):
        self.PosWindow.txtYellowX=xrc.XRCCTRL(self.PosWindow,'txtYellowX')
        self.PosWindow.txtYellowY=xrc.XRCCTRL(self.PosWindow,'txtYellowY')
        self.PosWindow.txtYellowZ=xrc.XRCCTRL(self.PosWindow,'txtYellowZ')
        self.PosWindow.txtYellowBorderX=xrc.XRCCTRL(self.PosWindow,'txtYellowBorderX')
        self.PosWindow.txtYellowBorderY=xrc.XRCCTRL(self.PosWindow,'txtYellowBorderY')
        self.PosWindow.txtYellowBorderZ=xrc.XRCCTRL(self.PosWindow,'txtYellowBorderZ')
        
        self.PosWindow.txtGreenX=xrc.XRCCTRL(self.PosWindow,'txtGreenX')
        self.PosWindow.txtGreenY=xrc.XRCCTRL(self.PosWindow,'txtGreenY')
        self.PosWindow.txtGreenZ=xrc.XRCCTRL(self.PosWindow,'txtGreenZ')
        self.PosWindow.txtGreenBorderX=xrc.XRCCTRL(self.PosWindow,'txtGreenBorderX')
        self.PosWindow.txtGreenBorderY=xrc.XRCCTRL(self.PosWindow,'txtGreenBorderY')
        self.PosWindow.txtGreenBorderZ=xrc.XRCCTRL(self.PosWindow,'txtGreenBorderZ')
        
        self.PosWindow.txtCyanX=xrc.XRCCTRL(self.PosWindow,'txtCyanX')
        self.PosWindow.txtCyanY=xrc.XRCCTRL(self.PosWindow,'txtCyanY')
        self.PosWindow.txtCyanZ=xrc.XRCCTRL(self.PosWindow,'txtCyanZ')
        self.PosWindow.txtCyanBorderX=xrc.XRCCTRL(self.PosWindow,'txtCyanBorderX')
        self.PosWindow.txtCyanBorderY=xrc.XRCCTRL(self.PosWindow,'txtCyanBorderY')
        self.PosWindow.txtCyanBorderZ=xrc.XRCCTRL(self.PosWindow,'txtCyanBorderZ')
        
        self.PosWindow.txtMagentaX=xrc.XRCCTRL(self.PosWindow,'txtMagentaX')
        self.PosWindow.txtMagentaY=xrc.XRCCTRL(self.PosWindow,'txtMagentaY')
        self.PosWindow.txtMagentaZ=xrc.XRCCTRL(self.PosWindow,'txtMagentaZ')
        self.PosWindow.txtMagentaBorderX=xrc.XRCCTRL(self.PosWindow,'txtMagentaBorderX')
        self.PosWindow.txtMagentaBorderY=xrc.XRCCTRL(self.PosWindow,'txtMagentaBorderY')
        self.PosWindow.txtMagentaBorderZ=xrc.XRCCTRL(self.PosWindow,'txtMagentaBorderZ')
        
        self.PosWindow.txtSetPosX=xrc.XRCCTRL(self.PosWindow,'txtSetPosX')
        self.PosWindow.txtSetPosY=xrc.XRCCTRL(self.PosWindow,'txtSetPosY')
        self.PosWindow.txtSetPosZ=xrc.XRCCTRL(self.PosWindow,'txtSetPosZ')
        
        if self.PosZ > 500:
            self.PosX = 0.005
            self.PosY = 0.005
            self.PosZ = 50.00

        self.PosWindow.txtSetPosX.SetValue("%4.2f"%self.PosX)
        self.PosWindow.txtSetPosY.SetValue("%4.2f"%self.PosY)
        self.PosWindow.txtSetPosZ.SetValue("%4.2f"%self.PosZ)        


        self.PosWindow.txtSetWeight=xrc.XRCCTRL(self.PosWindow,'txtSetWeight')
        self.PosWindow.txtSetWeight.SetValue(str(self.Weight))        
        self.PosWindow.txtmaxSetVel=xrc.XRCCTRL(self.PosWindow,'txtmaxSetVel')
        self.PosWindow.txtmaxSetVel.SetValue(str(self.maxVel))
        self.PosWindow.txtmaxSetAcc=xrc.XRCCTRL(self.PosWindow,'txtmaxSetAcc')
        self.PosWindow.txtmaxSetAcc.SetValue(str(self.maxAcc))
        
                
        self.PosWindow.btEnginesSetup = xrc.XRCCTRL(self.PosWindow,'btEnginesSetup')
        self.PosWindow.btPosTry = xrc.XRCCTRL(self.PosWindow,'btPosTry')
        self.PosWindow.btPosSaveQuit = xrc.XRCCTRL(self.PosWindow,'btPosSaveQuit')
        self.PosWindow.btPosQuit = xrc.XRCCTRL(self.PosWindow,'btPosQuit') 
        self.PosWindow.btPosCalculate = xrc.XRCCTRL(self.PosWindow,'btPosCalculate')
        
        self.PosWindow.btPosSaveQuit.Enable(False)
        
        self.PosWindow.txtYellowX.SetValue(str(self.YellowX))
        self.PosWindow.txtYellowY.SetValue(str(self.YellowY))       
        self.PosWindow.txtYellowZ.SetValue(str(self.YellowZ))
        self.PosWindow.txtYellowBorderX.SetValue(str(self.YellowBorderX))
        self.PosWindow.txtYellowBorderY.SetValue(str(self.YellowBorderY))
        self.PosWindow.txtYellowBorderZ.SetValue(str(self.YellowBorderZ))
        
        self.PosWindow.txtGreenX.SetValue(str(self.GreenX))
        self.PosWindow.txtGreenY.SetValue(str(self.GreenY))       
        self.PosWindow.txtGreenZ.SetValue(str(self.GreenZ))
        self.PosWindow.txtGreenBorderX.SetValue(str(self.GreenBorderX))
        self.PosWindow.txtGreenBorderY.SetValue(str(self.GreenBorderY))
        self.PosWindow.txtGreenBorderZ.SetValue(str(self.GreenBorderZ))
        
        self.PosWindow.txtCyanX.SetValue(str(self.CyanX))
        self.PosWindow.txtCyanY.SetValue(str(self.CyanY))       
        self.PosWindow.txtCyanZ.SetValue(str(self.CyanZ))
        self.PosWindow.txtCyanBorderX.SetValue(str(self.CyanBorderX))
        self.PosWindow.txtCyanBorderY.SetValue(str(self.CyanBorderY))
        self.PosWindow.txtCyanBorderZ.SetValue(str(self.CyanBorderZ))

        self.PosWindow.txtMagentaX.SetValue(str(self.MagentaX))
        self.PosWindow.txtMagentaY.SetValue(str(self.MagentaY))       
        self.PosWindow.txtMagentaZ.SetValue(str(self.MagentaZ))
        self.PosWindow.txtMagentaBorderX.SetValue(str(self.MagentaBorderX))
        self.PosWindow.txtMagentaBorderY.SetValue(str(self.MagentaBorderY))
        self.PosWindow.txtMagentaBorderZ.SetValue(str(self.MagentaBorderZ)) 
        
        self.YellowXOld=self.YellowX
        self.YellowYOld=self.YellowY
        self.YellowZOld=self.YellowZ
        self.YellowBorderXOld=self.YellowBorderX        
        self.YellowBorderYOld=self.YellowBorderY        
        self.YellowBorderZOld=self.YellowBorderZ
        
        self.GreenXOld=self.GreenX
        self.GreenYOld=self.GreenY
        self.GreenZOld=self.GreenZ
        self.GreenBorderXOld=self.GreenBorderX        
        self.GreenBorderYOld=self.GreenBorderY        
        self.GreenBorderZOld=self.GreenBorderZ 
        
        self.CyanXOld=self.CyanX
        self.CyanYOld=self.CyanY
        self.CyanZOld=self.CyanZ
        self.CyanBorderXOld=self.CyanBorderX        
        self.CyanBorderYOld=self.CyanBorderY        
        self.CyanBorderZOld=self.CyanBorderZ
        
        self.MagentaXOld=self.MagentaX
        self.MagentaYOld=self.MagentaY
        self.MagentaZOld=self.MagentaZ
        self.MagentaBorderXOld=self.MagentaBorderX        
        self.MagentaBorderYOld=self.MagentaBorderY        
        self.MagentaBorderZOld=self.MagentaBorderZ
        
        self.SollPosXOld=self.SollPosX
        self.SollPosYOld=self.SollPosY
        self.SollPosZOld=self.SollPosZ
        
        self.WeightOld=self.Weight
        self.maxVelOld=self.maxVel
        self.aVelOld=self.aktuelleVel
        self.maxAccOld=self.maxAcc
        self.aAccOld=self.aAcc
        
        self.PosWindow.Bind(wx.EVT_BUTTON, self.OnEnginesSetup, id=xrc.XRCID('btEnginesSetup')) 
        self.PosWindow.Bind(wx.EVT_TOGGLEBUTTON, self.OnPosTry, id=xrc.XRCID('btPosTry'))
        self.PosWindow.Bind(wx.EVT_BUTTON, self.OnPosSaveQuit, id=xrc.XRCID('btPosSaveQuit'))
        self.PosWindow.Bind(wx.EVT_BUTTON, self.OnPosExit, id=xrc.XRCID('btPosQuit'))
        self.PosWindow.Bind(wx.EVT_BUTTON, self.OnPosCalculate, id=xrc.XRCID('btPosCalculate'))
        
        self.PosWindow.Bind(wx.EVT_TEXT, self.OnPosAChange, self.PosWindow.txtYellowX)
        self.PosWindow.Bind(wx.EVT_TEXT, self.OnPosAChange, self.PosWindow.txtYellowY)
        self.PosWindow.Bind(wx.EVT_TEXT, self.OnPosAChange, self.PosWindow.txtYellowZ)
        self.PosWindow.Bind(wx.EVT_TEXT, self.OnPosAChange, self.PosWindow.txtYellowBorderX)
        self.PosWindow.Bind(wx.EVT_TEXT, self.OnPosAChange, self.PosWindow.txtYellowBorderY)
        self.PosWindow.Bind(wx.EVT_TEXT, self.OnPosAChange, self.PosWindow.txtYellowBorderZ)
        
        self.PosWindow.Bind(wx.EVT_TEXT, self.OnPosAChange, self.PosWindow.txtGreenX)
        self.PosWindow.Bind(wx.EVT_TEXT, self.OnPosAChange, self.PosWindow.txtGreenY)
        self.PosWindow.Bind(wx.EVT_TEXT, self.OnPosAChange, self.PosWindow.txtGreenZ)
        self.PosWindow.Bind(wx.EVT_TEXT, self.OnPosAChange, self.PosWindow.txtGreenBorderX)
        self.PosWindow.Bind(wx.EVT_TEXT, self.OnPosAChange, self.PosWindow.txtGreenBorderY)
        self.PosWindow.Bind(wx.EVT_TEXT, self.OnPosAChange, self.PosWindow.txtGreenBorderZ)
        
        self.PosWindow.Bind(wx.EVT_TEXT, self.OnPosAChange, self.PosWindow.txtCyanX)
        self.PosWindow.Bind(wx.EVT_TEXT, self.OnPosAChange, self.PosWindow.txtCyanY)
        self.PosWindow.Bind(wx.EVT_TEXT, self.OnPosAChange, self.PosWindow.txtCyanZ)
        self.PosWindow.Bind(wx.EVT_TEXT, self.OnPosAChange, self.PosWindow.txtCyanBorderX)
        self.PosWindow.Bind(wx.EVT_TEXT, self.OnPosAChange, self.PosWindow.txtCyanBorderY)
        self.PosWindow.Bind(wx.EVT_TEXT, self.OnPosAChange, self.PosWindow.txtCyanBorderZ)
        
        self.PosWindow.Bind(wx.EVT_TEXT, self.OnPosAChange, self.PosWindow.txtMagentaX)
        self.PosWindow.Bind(wx.EVT_TEXT, self.OnPosAChange, self.PosWindow.txtMagentaY)
        self.PosWindow.Bind(wx.EVT_TEXT, self.OnPosAChange, self.PosWindow.txtMagentaZ)
        self.PosWindow.Bind(wx.EVT_TEXT, self.OnPosAChange, self.PosWindow.txtMagentaBorderX)
        self.PosWindow.Bind(wx.EVT_TEXT, self.OnPosAChange, self.PosWindow.txtMagentaBorderY)
        self.PosWindow.Bind(wx.EVT_TEXT, self.OnPosAChange, self.PosWindow.txtMagentaBorderZ) 
            
        self.PosWindow.Bind(wx.EVT_TEXT, self.OnPosAChange, self.PosWindow.txtSetPosX)
        self.PosWindow.Bind(wx.EVT_TEXT, self.OnPosAChange, self.PosWindow.txtSetPosY)        
        self.PosWindow.Bind(wx.EVT_TEXT, self.OnPosAChange, self.PosWindow.txtSetPosZ)
        
        self.PosWindow.Bind(wx.EVT_TEXT, self.OnPosAChange, self.PosWindow.txtSetWeight)
        self.PosWindow.Bind(wx.EVT_TEXT, self.OnPosAChange, self.PosWindow.txtmaxSetVel)        
        self.PosWindow.Bind(wx.EVT_TEXT, self.OnPosAChange, self.PosWindow.txtmaxSetAcc)
                                

    def OnPosCalculate(self,event):
        """Calculate Position from Rope Length"""
        self.logger.debug('Pos Calculate initialising')

        try:
            self.Yellow
            self.Green
            self.Cyan
            self.Magenta
            AchsenInitialisiert=True            
        except:
            AchsenInitialisiert=False
        if AchsenInitialisiert:
            
            res = xrc.XmlResource('WWLayout0-12a.xrc')
            self.Calculate = res.LoadFrame(self.frame,'Calculate')
            #self.Calculate.SetTransparent(125)        
            self.Calculate.Show()
            
            self.Calculate.txtCalculateYellowLengthIst=xrc.XRCCTRL(self.Calculate,'txtCalculateYellowLengthIst')
            self.Calculate.txtCalculateYellowPosIst=xrc.XRCCTRL(self.Calculate,'txtCalculateYellowPosIst')            
            self.Calculate.txtCalculateGreenLengthIst=xrc.XRCCTRL(self.Calculate,'txtCalculateGreenLengthIst')            
            self.Calculate.txtCalculateGreenPosIst=xrc.XRCCTRL(self.Calculate,'txtCalculateGreenPosIst')            
            self.Calculate.txtCalculateCyanLengthIst=xrc.XRCCTRL(self.Calculate,'txtCalculateCyanLengthIst')
            self.Calculate.txtCalculateCyanPosIst=xrc.XRCCTRL(self.Calculate,'txtCalculateCyanPosIst')            
            self.Calculate.txtCalculateMagentaLengthIst=xrc.XRCCTRL(self.Calculate,'txtCalculateMagentaLengthIst')            
            self.Calculate.txtCalculateMagentaPosIst=xrc.XRCCTRL(self.Calculate,'txtCalculateMagentaPosIst')
            
            self.Calculate.txtCalculatePosX=xrc.XRCCTRL(self.Calculate,'txtCalculatePosX')
            self.Calculate.txtCalculatePosY=xrc.XRCCTRL(self.Calculate,'txtCalculatePosY')            
            self.Calculate.txtCalculatePosZ=xrc.XRCCTRL(self.Calculate,'txtCalculatePosZ')            
            self.Calculate.txtCalculateFehler=xrc.XRCCTRL(self.Calculate,'txtCalculateFehler')
            
            self.Calculate.txtCalculateYellowLengthSoll=xrc.XRCCTRL(self.Calculate,'txtCalculateYellowLengthSoll')
            self.Calculate.txtCalculateYellowPosSoll=xrc.XRCCTRL(self.Calculate,'txtCalculateYellowPosSoll')            
            self.Calculate.txtCalculateGreenLengthSoll=xrc.XRCCTRL(self.Calculate,'txtCalculateGreenLengthSoll')            
            self.Calculate.txtCalculateGreenPosSoll=xrc.XRCCTRL(self.Calculate,'txtCalculateGreenPosSoll')            
            self.Calculate.txtCalculateCyanLengthSoll=xrc.XRCCTRL(self.Calculate,'txtCalculateCyanLengthSoll')
            self.Calculate.txtCalculateCyanPosSoll=xrc.XRCCTRL(self.Calculate,'txtCalculateCyanPosSoll')            
            self.Calculate.txtCalculateMagentaLengthSoll=xrc.XRCCTRL(self.Calculate,'txtCalculateMagentaLengthSoll')            
            self.Calculate.txtCalculateMagentaPosSoll=xrc.XRCCTRL(self.Calculate,'txtCalculateMagentaPosSoll')
            
            self.Calculate.btCalculateTry = xrc.XRCCTRL(self.PosWindow,'btCalculateTry')
            self.Calculate.btCalculateAuto = xrc.XRCCTRL(self.PosWindow,'btCalculateAuto')


            
            self.Calculate.btCalculateQuit = xrc.XRCCTRL(self.PosWindow,'btCalculateQuit') 

            self.Calculate.txtCalculateYellowLengthIst.Enable(False)
            self.Calculate.txtCalculateYellowPosIst.Enable(False)          
            self.Calculate.txtCalculateGreenLengthIst.Enable(False)            
            self.Calculate.txtCalculateGreenPosIst.Enable(False)            
            self.Calculate.txtCalculateCyanLengthIst.Enable(False)
            self.Calculate.txtCalculateCyanPosIst.Enable(False)            
            self.Calculate.txtCalculateMagentaLengthIst.Enable(False)          
            self.Calculate.txtCalculateMagentaPosIst.Enable(False)
            
            self.Calculate.txtCalculatePosX.Enable(False)
            self.Calculate.txtCalculatePosY.Enable(False)           
            self.Calculate.txtCalculatePosZ.Enable(False)           
            self.Calculate.txtCalculateFehler.Enable(False)
            
            self.Calculate.txtCalculateYellowLengthSoll.Enable(False)
            self.Calculate.txtCalculateYellowPosSoll.Enable(False)           
            self.Calculate.txtCalculateGreenLengthSoll.Enable(False)         
            self.Calculate.txtCalculateGreenPosSoll.Enable(False)        
            self.Calculate.txtCalculateCyanLengthSoll.Enable(False)
            self.Calculate.txtCalculateCyanPosSoll.Enable(False)          
            self.Calculate.txtCalculateMagentaLengthSoll.Enable(False)          
            self.Calculate.txtCalculateMagentaPosSoll.Enable(False)  
            
            #self.Calculate.btCalculateAuto.Enable(False)
            
            self.SeilLaenge1 =float(self.Yellow.PosIst)+self.YellowRopeOffset
            self.SeilLaenge2 =float(self.Green.PosIst)+self.GreenRopeOffset
            self.SeilLaenge3=float(self.Cyan.PosIst)+self.CyanRopeOffset
            self.SeilLaenge4=float(self.Magenta.PosIst)+self.MagentaRopeOffset
            
            self.Calculate.txtCalculateYellowLengthIst.SetValue("%4.2f"%self.SeilLaenge1)
            self.Calculate.txtCalculateYellowPosIst.SetValue(self.Yellow.PosIst)         
            self.Calculate.txtCalculateGreenLengthIst.SetValue("%4.2f"%self.SeilLaenge2)           
            self.Calculate.txtCalculateGreenPosIst.SetValue(self.Green.PosIst)           
            self.Calculate.txtCalculateCyanLengthIst.SetValue("%4.2f"%self.SeilLaenge3)
            self.Calculate.txtCalculateCyanPosIst.SetValue(self.Cyan.PosIst)            
            self.Calculate.txtCalculateMagentaLengthIst.SetValue("%4.2f"%self.SeilLaenge4)         
            self.Calculate.txtCalculateMagentaPosIst.SetValue(self.Magenta.PosIst)
            
            Schnitt1=self.Kugelschnitt(self.M1,self.SeilLaenge1,self.M2,self.SeilLaenge2,self.M3,self.SeilLaenge3)
            Schnitt2=self.Kugelschnitt(self.M2,self.SeilLaenge2,self.M3,self.SeilLaenge3,self.M4,self.SeilLaenge4)
            Schnitt3=self.Kugelschnitt(self.M1,self.SeilLaenge1,self.M3,self.SeilLaenge3,self.M4,self.SeilLaenge4)
            Schnitt4=self.Kugelschnitt(self.M1,self.SeilLaenge1,self.M2,self.SeilLaenge2,self.M4,self.SeilLaenge4)

            PosGerechnet,Fehler=self.MittelKugelaus4(Schnitt1,Schnitt2,Schnitt3,Schnitt4)
            
            self.Calculate.txtCalculatePosX.SetValue("%4.2f"%PosGerechnet[0])
            self.Calculate.txtCalculatePosY.SetValue("%4.2f"%PosGerechnet[1])           
            self.Calculate.txtCalculatePosZ.SetValue("%4.2f"%PosGerechnet[2])           
            self.Calculate.txtCalculateFehler.SetValue("%4.2f"%Fehler)
            
            
        else:
            dlge = wx.MessageDialog(self.frame, ' Engines configuration error','Engine assignment error!', wx.OK|wx.ICON_EXCLAMATION)
            self.logger.debug('Tried to Calculate Pos with out engine object')
            if dlge.ShowModal() == wx.ID_OK:
                dlge.Destroy()
                self.logger.info('No SaveQuit for PosSetup due to nonexistence of Axis object')
            

    def OnPosTry(self,event):
        self.logger.debug('Pos Setup Try initialising')

        try:
            self.Yellow
            self.Green
            self.Cyan
            self.Magenta
            AchsenInitialisiert=True            
        except:
            AchsenInitialisiert=False
        if AchsenInitialisiert:
            self.YellowX = float(self.PosWindow.txtYellowX.GetValue())
            self.YellowY = float(self.PosWindow.txtYellowY.GetValue())
            self.YellowZ = float(self.PosWindow.txtYellowZ.GetValue())
            self.YellowBorderX = float(self.PosWindow.txtYellowBorderX.GetValue())        
            self.YellowBorderY = float(self.PosWindow.txtYellowBorderY.GetValue())       
            self.YellowBorderZ = float(self.PosWindow.txtYellowBorderZ.GetValue())
            
            self.GreenX = float(self.PosWindow.txtGreenX.GetValue())
            self.GreenY = float(self.PosWindow.txtGreenY.GetValue())
            self.GreenZ = float(self.PosWindow.txtGreenZ.GetValue())
            self.GreenBorderX = float(self.PosWindow.txtGreenBorderX.GetValue())        
            self.GreenBorderY = float(self.PosWindow.txtGreenBorderY.GetValue())       
            self.GreenBorderZ = float(self.PosWindow.txtGreenBorderZ.GetValue())
            
            self.CyanX = float(self.PosWindow.txtCyanX.GetValue())
            self.CyanY = float(self.PosWindow.txtCyanY.GetValue())
            self.CyanZ = float(self.PosWindow.txtCyanZ.GetValue())
            self.CyanBorderX = float(self.PosWindow.txtCyanBorderX.GetValue())        
            self.CyanBorderY = float(self.PosWindow.txtCyanBorderY.GetValue())       
            self.CyanBorderZ = float(self.PosWindow.txtCyanBorderZ.GetValue())
            
            self.MagentaX = float(self.PosWindow.txtMagentaX.GetValue())
            self.MagentaY = float(self.PosWindow.txtMagentaY.GetValue())
            self.MagentaZ = float(self.PosWindow.txtMagentaZ.GetValue())
            self.MagentaBorderX = float(self.PosWindow.txtMagentaBorderX.GetValue())        
            self.MagentaBorderY = float(self.PosWindow.txtMagentaBorderY.GetValue())       
            self.MagentaBorderZ = float(self.PosWindow.txtMagentaBorderZ.GetValue())
            
            self.PosX = float(self.PosWindow.txtSetPosX.GetValue())
            self.PosY = float(self.PosWindow.txtSetPosY.GetValue())
            self.PosZ = float(self.PosWindow.txtSetPosZ.GetValue())
            #Test Pos X
            self.SollPosX = float(self.PosWindow.txtSetPosX.GetValue())
            self.SollPosY = float(self.PosWindow.txtSetPosY.GetValue())
            self.SollPosZ = float(self.PosWindow.txtSetPosZ.GetValue())
            
            self.Kamera=numpy.array([self.SollPosX,self.SollPosY,self.SollPosZ])
           
            self.Weight = float(self.PosWindow.txtSetWeight.GetValue())
            self.maxAcc = float(self.PosWindow.txtmaxSetAcc.GetValue())
            self.ctrlmaxAcc.SetValue("%4.1f"%self.maxAcc)
            if self.aAcc > self.maxAcc:
                self.aAcc = self.maxAcc
                self.ctrlaAcc.SetValue(str(self.maxAcc))
            self.maxVel = float(self.PosWindow.txtmaxSetVel.GetValue())
            self.ctrlmaxVel.SetValue("%4.1f"%self.maxVel)
            if self.aktuelleVel > self.maxVel:
                self.aktuelleVel = self.maxVel
                self.ctrlaVel.SetValue(str(self.maxVel))
                
            if self.PosWindow.btPosTry.GetValue():
                self.logger.debug('Pos Setup Try->Set')
                self.logger.debug('Positions and Borders are TRIED with:\n\
                YellowX = %s \n\
                YellowY = %s \n\
                YellowZ = %s \n\n\
                YellowBorderX = %s \n\
                YellowBorderY = %s \n\
                YellowBorderZ = %s \n\n\
                GreenX = %s \n\
                GreenY = %s \n\
                GreenZ = %s \n\n\
                GreenBorderX = %s \n\
                GreenBorderY = %s \n\
                GreenBorderZ = %s \n\n\
                CyanX = %s \n\
                CyanY = %s \n\
                CyanZ = %s \n\n\
                CyanBorderX = %s \n\
                CyanBorderY = %s \n\
                CyanBorderZ = %s \n\n\
                MagentaX = %s \n\
                MagentaY = %s \n\
                MagentaZ = %s \n\n\
                MagentaBorderX = %s \n\
                MagentaBorderY = %s \n\
                MagentaBorderZ = %s \n\n',self.YellowX,self.YellowY,self.YellowZ,
                                          self.YellowBorderX,self.YellowBorderY,self.YellowBorderZ,
                                          self.GreenX,self.GreenY,self.GreenZ,
                                          self.GreenBorderX,self.GreenBorderY,self.GreenBorderZ,
                                          self.CyanX,self.CyanY,self.CyanZ,
                                          self.CyanBorderX,self.CyanBorderY,self.CyanBorderZ,
                                          self.MagentaX,self.MagentaY,self.MagentaZ,
                                          self.MagentaBorderX,self.MagentaBorderY,self.MagentaBorderZ)
                
                self.PosWindow.btPosTry.SetLabel('Set!')
                self.PosWindow.btPosSaveQuit.Enable(True)
                #self.PosWindow.SetTransparent(250)
            else:
                self.logger.debug('Pos Setup Try')
                self.PosWindow.btPosTry.SetLabel('Try!')
                self.PosWindow.btPosSaveQuit.Enable(False)
                #self.PosWindow.SetTransparent(255)
            
            self.OnPosChange('0')
            self.PosWindow.btPosSaveQuit.Enable(True)
       
        else:
            dlge = wx.MessageDialog(self.frame, ' Engines configuration error','Engine assignment error!', wx.OK|wx.ICON_EXCLAMATION)
            self.logger.debug('Tried to SaveQuit PosSetup with out engine object')
            if dlge.ShowModal() == wx.ID_OK:
                dlge.Destroy()
                self.logger.info('No SaveQuit for PosSetup due to nonexistence of Axis object')
                self.PosWindow.Close()
                self.OnPosSetup('0')
                

        
                
    def OnPosSaveQuit(self,event):
        self.logger.info('Initialising Pos Setup SaveQuit')

        try:
            self.Yellow
            self.Green
            self.Cyan
            self.Magenta
            AchsenInitialisiert=True            
        except:
            AchsenInitialisiert=False
        if AchsenInitialisiert:
            self.btAxisSetup.Enable(True)
            self.btStart.Enable(True)
            self.btPosSetup.Enable(True)
            self.btYellowSetup.Enable(True)
            self.btGreenSetup.Enable(True)
            self.btCyanSetup.Enable(True)
            self.btMagentaSetup.Enable(True)
            self.btPosSetup.Enable(True)
            self.btKeyPointLoad.Enable(True)
            self.btKeyPointSave.Enable(True)
            self.btPathLoad.Enable(True)
            self.btPathSave.Enable(True)
            self.PosWindow.Close()
            
            self.frame.menuBar.EnableTop(pos=0,enable=True)
            #self.frame.MenuBar.Enable(id=5011,enable=True)             
            
            self.LoadKeyPoints('TempKPos.kpos')

            self.ctrlPosX.SetValue("%4.2f"%self.PosX)
            self.ctrlPosY.SetValue("%4.2f"%self.PosY)
            self.ctrlPosZ.SetValue("%4.2f"%self.PosZ)
            
            self.SollPosX = float(self.PosWindow.txtSetPosX.GetValue())
            self.SollPosY = float(self.PosWindow.txtSetPosY.GetValue())
            self.SollPosZ = float(self.PosWindow.txtSetPosZ.GetValue())
            
            self.TargetPoint[0]=-1000
            self.TargetPoint[1]=-1000
            self.TargetPoint[2]=-1000 
            self.TargetPointOld[0] = -1000
            self.TargetPointOld[1] = -1000
            self.TargetPointOld[2] = -1000
            self.NewTargetPoint = False            
            
            self.YellowRopeOffset   = math.sqrt(numpy.dot((self.Kamera-self.M1),(self.Kamera-self.M1)))-float(self.Yellow.PosIst)
            self.Yellow.Offset      = self.YellowRopeOffset
            self.GreenRopeOffset    = math.sqrt(numpy.dot((self.Kamera-self.M2),(self.Kamera-self.M2)))-float(self.Green.PosIst)
            self.Green.Offset       = self.GreenRopeOffset
            self.CyanRopeOffset     = math.sqrt(numpy.dot((self.Kamera-self.M3),(self.Kamera-self.M3)))-float(self.Cyan.PosIst)
            self.Cyan.Offset       = self.CyanRopeOffset
            self.MagentaRopeOffset  = math.sqrt(numpy.dot((self.Kamera-self.M4),(self.Kamera-self.M4)))-float(self.Magenta.PosIst)
            self.Magenta.Offset       = self.MagentaRopeOffset
        
            self.ctrlmaxAcc.SetValue("%4.2f"%self.maxAcc)
            self.ctrlaAcc.SetValue("%4.1f"%self.aAcc)
            self.ctrlmaxVel.SetValue("%4.2f"%self.maxVel)
            self.ctrlaVel.SetValue("%4.1f"%self.aktuelleVel)
            #print 'Add Select Path'
            taskMgr.add(self.SelectPathTask, "SelectPathTask")
            
            self.frame.p3dViewport.DisplayPersA.setClearColor(VBase4(0.098, 0.098, 0.196, 1))
            self.frame.p3dViewport.DisplayTop.setClearColor(VBase4(0.098, 0.098, 0.196, 1))
            self.frame.p3dViewport.DisplayFront.setClearColor(VBase4(0.098, 0.098, 0.196, 1))            
        
            self.logger.warn('Positions, Borders and Rope Offsets are SET to:\n\
                            YellowX = %s \n\
                            YellowY = %s \n\
                            YellowZ = %s \n\n\
                            YellowBorderX = %s \n\
                            YellowBorderY = %s \n\
                            YellowBorderZ = %s \n\n\
                            GreenX = %s \n\
                            GreenY = %s \n\
                            GreenZ = %s \n\n\
                            GreenBorderX = %s \n\
                            GreenBorderY = %s \n\
                            GreenBorderZ = %s \n\n\
                            CyanX = %s \n\
                            CyanY = %s \n\
                            CyanZ = %s \n\n\
                            CyanBorderX = %s \n\
                            CyanBorderY = %s \n\
                            CyanBorderZ = %s \n\n\
                            MagentaX = %s \n\
                            MagentaY = %s \n\
                            MagentaZ = %s \n\n\
                            MagentaBorderX = %s \n\
                            MagentaBorderY = %s \n\
                            MagentaBorderZ = %s \n\n\
                            YellowRopeOffset = %s \n\
                            GreenRopeOffset =  %s \n\
                            CyanRopeOffset = %s \n\
                            GreenRopeOffset =  %s \n',self.YellowX,self.YellowY,self.YellowZ,
                                                     self.YellowBorderX,self.YellowBorderY,self.YellowBorderZ,
                                                     self.GreenX,self.GreenY,self.GreenZ,
                                                     self.GreenBorderX,self.GreenBorderY,self.GreenBorderZ,
                                                     self.CyanX,self.CyanY,self.CyanZ,
                                                     self.CyanBorderX,self.CyanBorderY,self.CyanBorderZ,
                                                     self.MagentaX,self.MagentaY,self.MagentaZ,
                                                     self.MagentaBorderX,self.MagentaBorderY,self.MagentaBorderZ,
                                                     self.YellowRopeOffset,self.GreenRopeOffset,self.CyanRopeOffset,self.MagentaRopeOffset)
        
        
            self.logger.warn('Pos VelMax und AccMax set to: \n\
                                  PosX = %s \n\
                                  PosY = %s \n\
                                  PosZ = %s \n\
                                  maxAcc = %s \n\
                                  maxVel = %s',self.PosX,self.PosY,self.PosZ,self.maxAcc,self.maxVel)
        else:
            dlge = wx.MessageDialog(self.frame, ' Engines configuration error','Engine assignment error!', wx.OK|wx.ICON_EXCLAMATION)
            self.logger.debug('Tried to SaveQuit PosSetup with out engine object')
            if dlge.ShowModal() == wx.ID_OK:
                dlge.Destroy()
                self.logger.info('No SaveQuit for PosSetup due to nonexistence of Axis object')
                self.PosWindow.Close()
                self.OnPosSetup('0')

        

        
    def OnPosExit(self,event):
        self.logger.info('Initialising Pos Setup Quit')
        try:
            self.Yellow
            self.Green
            self.Cyan
            self.Magenta
            AchsenInitialisiert=True            
        except:
            AchsenInitialisiert=False
        if AchsenInitialisiert:
            self.btAxisSetup.Enable(True)
            self.btStart.Enable(True)
            self.btPosSetup.Enable(True)
            self.btYellowSetup.Enable(True)
            self.btGreenSetup.Enable(True)
            self.btCyanSetup.Enable(True)
            self.btMagentaSetup.Enable(True)
            self.btMagentaSetup.Enable(True)
            self.btPosSetup.Enable(True)
            self.btKeyPointLoad.Enable(True)
            self.btKeyPointSave.Enable(True)
            self.btPathLoad.Enable(True)
            self.btPathSave.Enable(True)
            self.PosWindow.Close()
            
            self.frame.menuBar.EnableTop(pos=0,enable=True)
            #self.frame.MenuBar.Enable(id=5011,enable=True)                         
            
            self.LoadKeyPoints('TempKPos.kpos')
        
            self.YellowX=self.YellowXOld
            self.YellowY=self.YellowYOld
            self.YellowZ=self.YellowZOld
            self.YellowBorderX=self.YellowBorderXOld        
            self.YellowBorderY=self.YellowBorderYOld        
            self.YellowBorderZ=self.YellowBorderZOld
        
            self.GreenX=self.GreenXOld
            self.GreenY=self.GreenYOld
            self.GreenZ=self.GreenZOld
            self.GreenBorderX=self.GreenBorderXOld        
            self.GreenBorderY=self.GreenBorderYOld        
            self.GreenBorderZ=self.GreenBorderZOld
        
            self.CyanX=self.CyanXOld
            self.CyanY=self.CyanYOld
            self.CyanZ=self.CyanZOld
            self.CyanBorderX=self.CyanBorderXOld        
            self.CyanBorderY=self.CyanBorderYOld        
            self.CyanBorderZ=self.CyanBorderZOld
        
            self.MagentaX=self.MagentaXOld
            self.MagentaY=self.MagentaYOld
            self.MagentaZ=self.MagentaZOld
            self.MagentaBorderX=self.MagentaBorderXOld        
            self.MagentaBorderY=self.MagentaBorderYOld        
            self.MagentaBorderZ=self.MagentaBorderZOld
        
            self.SollPosX=self.SollPosXOld
            self.SollPosY=self.SollPosYOld
            self.SollPosZ=self.SollPosZOld
            
            self.ctrlPosX.SetValue("%4.2f"%self.PosX)
            self.ctrlPosY.SetValue("%4.2f"%self.PosY)
            self.ctrlPosZ.SetValue("%4.2f"%self.PosZ)
            #Test Pos X
            #self.SollPosX = float(self.PosWindow.txtSetPosX.GetValue())
            #self.SollPosY = float(self.PosWindow.txtSetPosY.GetValue())
            #self.SollPosZ = float(self.PosWindow.txtSetPosZ.GetValue())
            
            self.Kamera=numpy.array([self.SollPosX,self.SollPosY,self.SollPosZ])
            
            
            self.YellowRopeOffset   = math.sqrt(numpy.dot((self.Kamera-self.M1),(self.Kamera-self.M1)))-float(self.Yellow.PosIst)
            self.GreenRopeOffset    = math.sqrt(numpy.dot((self.Kamera-self.M2),(self.Kamera-self.M2)))-float(self.Green.PosIst)
            self.CyanRopeOffset     = math.sqrt(numpy.dot((self.Kamera-self.M3),(self.Kamera-self.M3)))-float(self.Cyan.PosIst)
            self.MagentaRopeOffset  = math.sqrt(numpy.dot((self.Kamera-self.M4),(self.Kamera-self.M4)))-float(self.Magenta.PosIst)
   
        
            self.Weight=self.WeightOld
            self.maxVel=self.maxVelOld
            self.aktuelleVel=self.aVelOld
            self.ctrlaVel.SetValue("%4.1f"%self.aktuelleVel)
            
            self.maxAcc=self.maxAccOld
            self.aAcc=self.aAccOld
            self.ctrlaAcc.SetValue("%4.1f"%self.aAcc)
            
            self.OnPosChange('0')                
            self.PosWindow.Close()
            self.logger.warn('Positions, Borders and Rope Offsets are RESET to:\n\
                            YellowX = %s \n\
                            YellowY = %s \n\
                            YellowZ = %s \n\n\
                            YellowBorderX = %s \n\
                            YellowBorderY = %s \n\
                            YellowBorderZ = %s \n\n\
                            GreenX = %s \n\
                            GreenY = %s \n\
                            GreenZ = %s \n\n\
                            GreenBorderX = %s \n\
                            GreenBorderY = %s \n\
                            GreenBorderZ = %s \n\n\
                            CyanX = %s \n\
                            CyanY = %s \n\
                            CyanZ = %s \n\n\
                            CyanBorderX = %s \n\
                            CyanBorderY = %s \n\
                            CyanBorderZ = %s \n\n\
                            MagentaX = %s \n\
                            MagentaY = %s \n\
                            MagentaZ = %s \n\n\
                            MagentaBorderX = %s \n\
                            MagentaBorderY = %s \n\
                            MagentaBorderZ = %s \n\n\
                            YellowRopeOffset = %s \n\
                            GreenRopeOffset =  %s \n\
                            CyanRopeOffset = %s \n\
                            GreenRopeOffset =  %s \n',self.YellowX,self.YellowY,self.YellowZ,
                                                     self.YellowBorderX,self.YellowBorderY,self.YellowBorderZ,
                                                     self.GreenX,self.GreenY,self.GreenZ,
                                                     self.GreenBorderX,self.GreenBorderY,self.GreenBorderZ,
                                                     self.CyanX,self.CyanY,self.CyanZ,
                                                     self.CyanBorderX,self.CyanBorderY,self.CyanBorderZ,
                                                     self.MagentaX,self.MagentaY,self.MagentaZ,
                                                     self.MagentaBorderX,self.MagentaBorderY,self.MagentaBorderZ,
                                                     self.YellowRopeOffset,self.GreenRopeOffset,self.CyanRopeOffset,self.MagentaRopeOffset)
        
        else:
            dlge = wx.MessageDialog(self.frame, ' Engines configuration error','Engine assignment error!', wx.OK|wx.ICON_EXCLAMATION)
            self.logger.debug('Tried to quit PosSetup with out engine object')
            if dlge.ShowModal() == wx.ID_OK:
                dlge.Destroy()
                self.logger.info('No SaveQuit for PosSetup due to nonexistence of Axis object')
                self.PosWindow.Close()
                self.OnPosSetup('0')

    
    def OnPosAChange(self,event):
        self.PosWindow.btPosSaveQuit.Enable(False)        
    def OnEnginesSetup(self,event):
        self.logger.info('Initialising Engines Setup')
        
        taskMgr.remove('KeepAlive')
        
        self.frame.menuBar.EnableTop(pos=0,enable=False)
        self.frame.MenuBar.Disable()
        
        if self.PosWindow:
            self.PosWindow.Close()       

        self.btAxisSetup.Enable(False)
        self.btStart.Enable(False)
        self.btPosSetup.Enable(False)
        self.btYellowSetup.Enable(False)
        self.btGreenSetup.Enable(False)
        self.btCyanSetup.Enable(False)
        self.btMagentaSetup.Enable(False)
        self.btPosSetup.Enable(False)
        self.btKeyPointLoad.Enable(False)
        self.btKeyPointSave.Enable(False)
        self.btPosMode.Enable(False)
        self.btPathLoad.Enable(False)
        self.btPathSave.Enable(False)
        self.btPathMode.Enable(False)
        
        res = xrc.XmlResource('WWLayout0-12a.xrc')
        self.EnginesSetupWindow = res.LoadFrame(self.frame,'EnginesSetup')        
        
        self.EnginesSetupWindow.btnEnginesSetupRestart=xrc.XRCCTRL(self.EnginesSetupWindow,'btnEnginesSetupRestart') 
        self.EnginesSetupWindow.btnEnginesSetupQuit=xrc.XRCCTRL(self.EnginesSetupWindow,'btnEnginesSetupQuit')
        #self.EnginesSetupWindow.btnEnginesSetupQuit.Enable(False)
        self.EnginesSetupWindow.Bind(wx.EVT_BUTTON, self.OnEnginesSetupRestart, id=xrc.XRCID('btnEnginesSetupRestart'))
        self.EnginesSetupWindow.Bind(wx.EVT_BUTTON, self.OnEnginesSetupQuit,id=xrc.XRCID('btnEnginesSetupQuit'))
        
        self.EnginesSetupWindow.Show(True)
        
        #+++++++++++++++++++++++++++++      
        #self.YellowEngineInformation   = YellowAxisUI(None, -1., "Yellow Achsen Steuerung")
        self.YellowEngineInformation   = YellowAxisUI(self.EnginesSetupWindow, -1., "Yellow Achsen Steuerung") 
                                                      
        try:
            App.Yellow
            YellowExists=True
        except:
            YellowExists=False
        if YellowExists:
            self.YellowEngineInformation.ReadDatafromAchse()
            self.logger.debug('Yellow Axis is LOADED with properties:\n\
                       Yellow Engine Name = %s\n\
                       Yellow Engine PosHardMax = %s\n\
                       Yellow Engine PosUserMax = %s\n\
                       Yellow Engine PosUserMin = %s\n\
                       Yellow Engine PosHardMin = %s\n\
                       Yellow Engine PosWindow = %s\n\
                       Yellow Engine SpeedMax = %s\n\
                       Yellow Engine AccMax = %s\n\
                       Yellow Engine DccMax = %s\n\
                       Yellow Engine AccMove = %s\n\
                       Yellow Engine MaxAmp = %s\n\
                       Yellow Engine VelWindow = %s\n\
                       Yellow Engine FilterP = %s\n\
                       Yellow Engine FilterI = %s\n\
                       Yellow Engine FilterD = %s\n\
                       Yellow Engine FilterIL = %s\n\
                       Yellow Engine GuidePitch = %s\n\
                       Yellow Engine GuidePosMax = %s\n\
                       Yellow Engine GuidePosMin = %s\n\
                       Yellow Engine GearToUI = %s\n\
                       Yellow Engine SpeedMaxForUI = %s\n\
                       Yellow Engine RopeSWLL = %s\n\
                       Yellow Engine RopeDiameter = %s\n\
                       Yellow Engine RopeNumber = %s\n\
                       Yellow Engine RopeLength = %s\n',
                       self.Yellow.Name,self.Yellow.PosHardMax,self.Yellow.PosUserMax,self.Yellow.PosUserMin,
                       self.Yellow.PosHardMin,self.Yellow.PosWin,self.Yellow.SpeedMax,self.Yellow.AccMax,self.Yellow.DccMax,
                       self.Yellow.AccTot,self.Yellow.MaxAmp,self.Yellow.VelWin,self.Yellow.FilterP,self.Yellow.FilterI,
                       self.Yellow.FilterD,self.Yellow.FilterIL,self.Yellow.GuidePitch,self.Yellow.GuidePosMax,
                       self.Yellow.GuidePosMin,self.Yellow.GearToUI,self.Yellow.SpeedMaxForUI,
                       self.Yellow.RopeSWLL,self.Yellow.RopeDiameter,self.Yellow.RopeNumber,
                       self.Yellow.RopeLength)
            
            #self.YellowEngineInformation.ResetAxis()
            self.YellowEngineInformation.AxisReadJoystick()
        else:
            self.logger.warn('Object Yellow Axis is initialised')
            

        #self.YellowEngineInformation.Bind(wx.EVT_CLOSE, self.OnEnginesSetupQuit)
        #+++++++++++++++++++++++++++
        #self.GreenEngineInformation = GreenAxisUI(None, -1.,"Green Achsen Steuerung")
        self.GreenEngineInformation = GreenAxisUI(self.EnginesSetupWindow, -1.,"Green Achsen Steuerung")
        try:
            App.Green
            GreenExists=True
        except:
            GreenExists=False
        if GreenExists:
            self.GreenEngineInformation.ReadDatafromAchse()
            self.logger.debug('Green Axis is LOADED with properties:\n\
                       Green Engine Name = %s\n\
                       Green Engine PosHardMax = %s\n\
                       Green Engine PosUserMax = %s\n\
                       Green Engine PosUserMin = %s\n\
                       Green Engine PosHardMin = %s\n\
                       Green Engine PosWindow = %s\n\
                       Green Engine SpeedMax = %s\n\
                       Green Engine AccMax = %s\n\
                       Green Engine DccMax = %s\n\
                       Green Engine AccMove = %s\n\
                       Green Engine MaxAmp = %s\n\
                       Green Engine VelWindow = %s\n\
                       Green Engine FilterP = %s\n\
                       Green Engine FilterI = %s\n\
                       Green Engine FilterD = %s\n\
                       Green Engine FilterIL = %s\n\
                       Green Engine GuidePitch = %s\n\
                       Green Engine GuidePosMax = %s\n\
                       Green Engine GuidePosMin = %s\n\
                       Green Engine GearToUI = %s\n\
                       Green Engine SpeedMaxForUI = %s\n\
                       Green Engine RopeSWLL = %s\n\
                       Green Engine RopeDiameter = %s\n\
                       Green Engine RopeNumber = %s\n\
                       Green Engine RopeLength = %s\n',
                       self.Green.Name,self.Green.PosHardMax,self.Green.PosUserMax,self.Green.PosUserMin,
                       self.Green.PosHardMin,self.Green.PosWin,self.Green.SpeedMax,self.Green.AccMax,self.Green.DccMax,
                       self.Green.AccTot,self.Green.MaxAmp,self.Green.VelWin,self.Green.FilterP,self.Green.FilterI,
                       self.Green.FilterD,self.Green.FilterIL,self.Green.GuidePitch,self.Green.GuidePosMax,
                       self.Green.GuidePosMin,self.Green.GearToUI,self.Green.SpeedMaxForUI,
                       self.Green.RopeSWLL,self.Green.RopeDiameter,self.Green.RopeNumber,
                       self.Green.RopeLength)
            
            #self.GreenEngineInformation.ResetAxis()
            self.GreenEngineInformation.AxisReadJoystick()
        else:
            self.logger.warn('Object Green Axis is initialised')
        

        #self.GreenEngineInformation.Bind(wx.EVT_CLOSE, self.OnEnginesSetupQuit)    
        #++++++++++++++++++++++++++
        #self.CyanEngineInformation   = CyanAxisUI(None, -1.,"Cyan Achsen Steuerung")
        self.CyanEngineInformation   = CyanAxisUI(self.EnginesSetupWindow, -1.,"Cyan Achsen Steuerung")
        try:
            App.Cyan
            CyanExists=True
        except:
            CyanExists=False
        if CyanExists:
            self.CyanEngineInformation.ReadDatafromAchse()
            self.logger.debug('Cyan Axis is LOADED with properties:\n\
                       Cyan Engine Name = %s\n\
                       Cyan Engine PosHardMax = %s\n\
                       Cyan Engine PosUserMax = %s\n\
                       Cyan Engine PosUserMin = %s\n\
                       Cyan Engine PosHardMin = %s\n\
                       Cyan Engine PosWindow = %s\n\
                       Cyan Engine SpeedMax = %s\n\
                       Cyan Engine AccMax = %s\n\
                       Cyan Engine DccMax = %s\n\
                       Cyan Engine AccMove = %s\n\
                       Cyan Engine MaxAmp = %s\n\
                       Cyan Engine VelWindow = %s\n\
                       Cyan Engine FilterP = %s\n\
                       Cyan Engine FilterI = %s\n\
                       Cyan Engine FilterD = %s\n\
                       Cyan Engine FilterIL = %s\n\
                       Cyan Engine GuidePitch = %s\n\
                       Cyan Engine GuidePosMax = %s\n\
                       Cyan Engine GuidePosMin = %s\n\
                       Cyan Engine GearToUI = %s\n\
                       Cyan Engine SpeedMaxForUI = %s\n\
                       Cyan Engine RopeSWLL = %s\n\
                       Cyan Engine RopeDiameter = %s\n\
                       Cyan Engine RopeNumber = %s\n\
                       Cyan Engine RopeLength = %s\n',
                       self.Cyan.Name,self.Cyan.PosHardMax,self.Cyan.PosUserMax,self.Cyan.PosUserMin,
                       self.Cyan.PosHardMin,self.Cyan.PosWin,self.Cyan.SpeedMax,self.Cyan.AccMax,self.Cyan.DccMax,self.Cyan.AccTot,
                       self.Cyan.MaxAmp,self.Cyan.VelWin,self.Cyan.FilterP,self.Cyan.FilterI,
                       self.Cyan.FilterD,self.Green.FilterIL,self.Green.GuidePitch,self.Green.GuidePosMax,
                       self.Cyan.GuidePosMin,self.Cyan.GearToUI,self.Cyan.SpeedMaxForUI,
                       self.Cyan.RopeSWLL,self.Cyan.RopeDiameter,self.Cyan.RopeNumber,
                       self.Cyan.RopeLength)
            
            #self.CyanEngineInformation.ResetAxis()
            self.CyanEngineInformation.AxisReadJoystick()
        else:
            self.logger.debug('Object Cyan Axis is initialised')

        #++++++++++++++++++++++++++++
        #self.MagentaEngineInformation   = MagentaAxisUI(None, -1.,"Magenta Achsen Steuerung")
        self.MagentaEngineInformation   = MagentaAxisUI(self.EnginesSetupWindow, -1.,"Magenta Achsen Steuerung")
        
        try:
            App.Magenta
            MagentaExists=True
        except:
            MagentaExists=False
        if MagentaExists:
            self.MagentaEngineInformation.ReadDatafromAchse()
            self.logger.debug('Magenta Axis is LOADED with properties:\n\
                       Magenta Engine Name = %s\n\
                       Magenta Engine PosHardMax = %s\n\
                       Magenta Engine PosUserMax = %s\n\
                       Magenta Engine PosUserMin = %s\n\
                       Magenta Engine PosHardMin = %s\n\
                       Magenta Engine PosWindow = %s\n\
                       Magenta Engine SpeedMax = %s\n\
                       Magenta Engine AccMax = %s\n\
                       Magenta Engine DccMax = %s\n\
                       Magenta Engine AccMove = %s\n\
                       Magenta Engine MaxAmp = %s\n\
                       Magenta Engine VelWindow = %s\n\
                       Magenta Engine FilterP = %s\n\
                       Magenta Engine FilterI = %s\n\
                       Magenta Engine FilterD = %s\n\
                       Magenta Engine FilterIL = %s\n\
                       Magenta Engine GuidePitch = %s\n\
                       Magenta Engine GuidePosMax = %s\n\
                       Magenta Engine GuidePosMin = %s\n\
                       Magenta Engine GearToUI = %s\n\
                       Magenta Engine SpeedMaxForUI = %s\n\
                       Magenta Engine RopeSWLL = %s\n\
                       Magenta Engine RopeDiameter = %s\n\
                       Magenta Engine RopeNumber = %s\n\
                       Magenta Engine RopeLength = %s\n',
                       self.Magenta.Name,self.Magenta.PosHardMax,self.Magenta.PosUserMax,self.Magenta.PosUserMin,
                       self.Magenta.PosHardMin,self.Magenta.PosWin,self.Magenta.SpeedMax,self.Magenta.AccMax,self.Magenta.DccMax,self.Magenta.AccTot,
                       self.Magenta.MaxAmp,self.Magenta.VelWin,self.Magenta.FilterP,self.Magenta.FilterI,
                       self.Magenta.FilterD,self.Magenta.FilterIL,self.Magenta.GuidePitch,self.Magenta.GuidePosMax,
                       self.Magenta.GuidePosMin,self.Magenta.GearToUI,self.Magenta.SpeedMaxForUI,
                       self.Magenta.RopeSWLL,self.Magenta.RopeDiameter,self.Magenta.RopeNumber,
                       self.Magenta.RopeLength)
            
            #self.MagentaEngineInformation.ResetAxis()
            self.MagentaEngineInformation.AxisReadJoystick()
        else:
            self.logger.warn('Object Magenta Axis is initialised')     

        #self.MagentaEngineInformation.Bind(wx.EVT_CLOSE, self.OnEnginesSetupQuit)
        
        

        self.YellowEngineInformation.Show(True)   
        self.SetTopWindow(self.YellowEngineInformation)
        self.GreenEngineInformation.Show(True)  
        self.SetTopWindow(self.GreenEngineInformation)
        self.CyanEngineInformation.Show(True)
        self.SetTopWindow(self.CyanEngineInformation)        
        self.MagentaEngineInformation.Show(True)
        self.SetTopWindow(self.MagentaEngineInformation)

      
        

        
    def OnEnginesSetupRestart(self,evt):
        self.logger.info('Engines Setup Restart')

        self.YellowEngineInformation.OnReSync('0')
        self.GreenEngineInformation.OnReSync('0')
        self.CyanEngineInformation.OnReSync('0')
        self.MagentaEngineInformation.OnReSync('0')
        #self.YellowEngineInformation.OnRecoverClick('0')
        #self.GreenEngineInformation.OnRecoverClick('0')
        #self.CyanEngineInformation.OnRecoverClick('0')
        #self.MagentaEngineInformation.OnRecoverClick('0')        
        
        
        
    def OnEnginesSetupQuit(self,event):
        self.logger.info('Engine Setup Quit')        

        try:
            self.Yellow
            self.Green
            self.Cyan
            self.Magenta
            AchsenInitialisiert=True            
        except:
            AchsenInitialisiert=False
        #print Yellow.PosIst
        #print Yellow.CutPos
        #if AchsenInitialisiert:
            #if Yellow.PosIst == Yellow.CutPos
            
            
            
        if AchsenInitialisiert:
            self.btAxisSetup.Enable(True)
            self.btStart.Enable(True)
            self.btPosSetup.Enable(True)
            self.btYellowSetup.Enable(True)
            self.btGreenSetup.Enable(True)
            self.btCyanSetup.Enable(True)
            self.btMagentaSetup.Enable(True)
            self.btKeyPointLoad.Enable(True)
            self.btKeyPointSave.Enable(True)
            self.btPathLoad.Enable(True)
            self.btPathSave.Enable(True)
                 
                   
            App.Yellow.LTold              = App.Yellow.LTold 
            App.Yellow.Modus              = 0
            #App.Yellow.OwnPID             = 0
            #App.Yellow.ControlingPIDTx    = 0
            App.Yellow.Intent             = 0
            App.Yellow.Enable             = 0
            App.Yellow.GuideControl       = 5
            App.Yellow.SpeedSoll          = 0
            App.Yellow.GuideSpeedSoll     = 0
            taskMgr.remove("YellowAxisTask") 
            
            self.YellowEngineInformation.Destroy()
            self.logger.warn('Yellow Axis is SET-UP with properties:\n\
                       Yellow Engine Name = %s\n\
                       Yellow Engine PosHardMax = %s\n\
                       Yellow Engine PosUserMax = %s\n\
                       Yellow Engine PosUserMin = %s\n\
                       Yellow Engine PosHardMin = %s\n\
                       Yellow Engine PosWindow = %s\n\
                       Yellow Engine SpeedMax = %s\n\
                       Yellow Engine AccMax = %s\n\
                       Yellow Engine DccMax = %s\n\
                       Yellow Engine AccMove = %s\n\
                       Yellow Engine MaxAmp = %s\n\
                       Yellow Engine VelWindow = %s\n\
                       Yellow Engine FilterP = %s\n\
                       Yellow Engine FilterI = %s\n\
                       Yellow Engine FilterD = %s\n\
                       Yellow Engine FilterIL = %s\n\
                       Yellow Engine GuidePitch = %s\n\
                       Yellow Engine GuidePosMax = %s\n\
                       Yellow Engine GuidePosMin = %s\n\
                       Yellow Engine GearToUI = %s\n\
                       Yellow Engine SpeedMaxForUI = %s\n\
                       Yellow Engine RopeSWLL = %s\n\
                       Yellow Engine RopeDiameter = %s\n\
                       Yellow Engine RopeNumber = %s\n\
                       Yellow Engine RopeLength = %s\n',
                       self.Yellow.Name,self.Yellow.PosHardMax,self.Yellow.PosUserMax,self.Yellow.PosUserMin,
                       self.Yellow.PosHardMin,self.Yellow.PosWin,self.Yellow.SpeedMax,self.Yellow.AccMax,self.Yellow.DccMax,
                       self.Yellow.AccTot,self.Yellow.MaxAmp,self.Yellow.VelWin,self.Yellow.FilterP,self.Yellow.FilterI,
                       self.Yellow.FilterD,self.Yellow.FilterIL,self.Yellow.GuidePitch,self.Yellow.GuidePosMax,
                       self.Yellow.GuidePosMin,self.Yellow.GearToUI,self.Yellow.SpeedMaxForUI,
                       self.Yellow.RopeSWLL,self.Yellow.RopeDiameter,self.Yellow.RopeNumber,
                       self.Yellow.RopeLength)
            
            self.ctrlYellowName.SetValue(App.Yellow.Name)
            a=self.Decode.Decode(self.Yellow.Status)                                                          #[2] Axis Status  
            self.ctrlYellowStatus.SetValue(a[1][0][2])
            #self.ctrlYellowStatus.SetToolTipString(str(a[0]))
            self.ctrlYellowStatus.SetBackgroundColour(a[1][0][3])
            self.ctrlYellowName.SetBackgroundColour(a[1][0][3])
            self.ctrlYellowName.Refresh()
            self.ctrlYellowVel.SetValue(App.Yellow.SpeedIstUI)
            self.ctrlYellowForce.SetValue(App.Yellow.ActCurUI)
            self.ctrlYellowLength.SetValue(App.Yellow.PosIst) 
            
            App.Green.LTold              = App.Green.LTold
            App.Green.Modus              = 0
            #App.Green.OwnPID             = 0
            #App.Green.ControlingPIDTx    = 0
            App.Green.Intent             = 0
            App.Green.Enable             = 0
            App.Green.GuideControl       = 5
            App.Green.SpeedSoll          = 0
            App.Green.GuideSpeedSoll     = 0
            taskMgr.remove("GreenAxisTask")
            
            self.ctrlGreenName.SetValue(App.Green.Name)
            a=self.Decode.Decode(self.Green.Status)                                                          #[2] Axis Status  
            self.ctrlGreenStatus.SetValue(a[1][0][2])
            #self.ctrlGreenStatus.SetToolTipString(str(a[0]))
            self.ctrlGreenStatus.SetBackgroundColour(a[1][0][3])
            self.ctrlGreenName.SetBackgroundColour(a[1][0][3])
            self.ctrlGreenName.Refresh()        
            self.ctrlGreenVel.SetValue(App.Green.SpeedIstUI)
            self.ctrlGreenForce.SetValue(App.Green.ActCurUI)
            self.ctrlGreenLength.SetValue(App.Green.PosIst)
    
    
            self.GreenEngineInformation.Destroy()
            self.logger.warn('Green Axis is SET-UP with properties:\n\
                           Green Engine Name = %s\n\
                           Green Engine PosHardMax = %s\n\
                           Green Engine PosUserMax = %s\n\
                           Green Engine PosUserMin = %s\n\
                           Green Engine PosHardMin = %s\n\
                           Green Engine PosWindow = %s\n\
                           Green Engine SpeedMax = %s\n\
                           Green Engine AccMax = %s\n\
                           Green Engine DccMax = %s\n\
                           Green Engine AccMove = %s\n\
                           Green Engine MaxAmp = %s\n\
                           Green Engine VelWindow = %s\n\
                           Green Engine FilterP = %s\n\
                           Green Engine FilterI = %s\n\
                           Green Engine FilterD = %s\n\
                           Green Engine FilterIL = %s\n\
                           Green Engine GuidePitch = %s\n\
                           Green Engine GuidePosMax = %s\n\
                           Green Engine GuidePosMin = %s\n\
                           Green Engine GearToUI = %s\n\
                           Green Engine SpeedMaxForUI = %s\n\
                           Green Engine RopeSWLL = %s\n\
                           Green Engine RopeDiameter = %s\n\
                           Green Engine RopeNumber = %s\n\
                           Green Engine RopeLength = %s\n',
                           self.Green.Name,self.Green.PosHardMax,self.Green.PosUserMax,self.Green.PosUserMin,
                           self.Green.PosHardMin,self.Green.PosWin,self.Green.SpeedMax,self.Green.AccMax,self.Green.DccMax,self.Green.AccTot,
                           self.Green.MaxAmp,self.Green.VelWin,self.Green.FilterP,self.Green.FilterI,
                           self.Green.FilterD,self.Green.FilterIL,self.Green.GuidePitch,self.Green.GuidePosMax,
                           self.Green.GuidePosMin,self.Green.GearToUI,self.Green.SpeedMaxForUI,
                           self.Green.RopeSWLL,self.Green.RopeDiameter,self.Green.RopeNumber,
                           self.Green.RopeLength)
            
            self.Cyan.LTold              = self.Cyan.LTold
            self.Cyan.Modus              = 0
            #self.Cyan.OwnPID             = 0
            #self.Cyan.ControlingPIDTx    = 0
            self.Cyan.Intent             = 0
            self.Cyan.Enable             = 0
            self.Cyan.GuideControl       = 5
            self.Cyan.SpeedSoll          = 0
            self.Cyan.GuideSpeedSoll     = 0
            taskMgr.remove("CyanAxisTask") 
            
            self.CyanEngineInformation.Destroy()
            self.logger.warn('Cyan Axis is SET-UP with properties:\n\
                       Cyan Engine Name = %s\n\
                       Cyan Engine PosHardMax = %s\n\
                       Cyan Engine PosUserMax = %s\n\
                       Cyan Engine PosUserMin = %s\n\
                       Cyan Engine PosHardMin = %s\n\
                       Cyan Engine PosWindow = %s\n\
                       Cyan Engine SpeedMax = %s\n\
                       Cyan Engine AccMax = %s\n\
                       Cyan Engine DccMax = %s\n\
                       Cyan Engine AccMove = %s\n\
                       Cyan Engine MaxAmp = %s\n\
                       Cyan Engine VelWindow = %s\n\
                       Cyan Engine FilterP = %s\n\
                       Cyan Engine FilterI = %s\n\
                       Cyan Engine FilterD = %s\n\
                       Cyan Engine FilterIL = %s\n\
                       Cyan Engine GuidePitch = %s\n\
                       Cyan Engine GuidePosMax = %s\n\
                       Cyan Engine GuidePosMin = %s\n\
                       Cyan Engine GearToUI = %s\n\
                       Cyan Engine SpeedMaxForUI = %s\n\
                       Cyan Engine RopeSWLL = %s\n\
                       Cyan Engine RopeDiameter = %s\n\
                       Cyan Engine RopeNumber = %s\n\
                       Cyan Engine RopeLength = %s\n',
                       self.Cyan.Name,self.Cyan.PosHardMax,self.Cyan.PosUserMax,self.Cyan.PosUserMin,
                       self.Cyan.PosHardMin,self.Cyan.PosWin,self.Cyan.SpeedMax,self.Cyan.AccMax,self.Cyan.DccMax,self.Cyan.AccTot,
                       self.Cyan.MaxAmp,self.Cyan.VelWin,self.Cyan.FilterP,self.Cyan.FilterI,
                       self.Cyan.FilterD,self.Green.FilterIL,self.Green.GuidePitch,self.Green.GuidePosMax,
                       self.Cyan.GuidePosMin,self.Cyan.GearToUI,self.Cyan.SpeedMaxForUI,
                       self.Cyan.RopeSWLL,self.Cyan.RopeDiameter,self.Cyan.RopeNumber,
                       self.Cyan.RopeLength)
            
            self.ctrlCyanName.SetValue(App.Cyan.Name)
            a=self.Decode.Decode(self.Cyan.Status)                                                          #[2] Axis Status  
            self.ctrlCyanStatus.SetValue(a[1][0][2])
            #self.ctrlCyanStatus.SetToolTipString(str(a[0]))
            self.ctrlCyanStatus.SetBackgroundColour(a[1][0][3])
            self.ctrlCyanName.SetBackgroundColour(a[1][0][3])
            self.ctrlCyanName.Refresh()
            self.ctrlCyanVel.SetValue(App.Cyan.SpeedIstUI)
            self.ctrlCyanForce.SetValue(App.Cyan.ActCurUI)
            self.ctrlCyanLength.SetValue(App.Cyan.PosIst)
            
            self.Magenta.LTold              = self.Magenta.LTold
            self.Magenta.Modus              = 0
            #self.Magenta.OwnPID             = 0
            #self.Magenta.ControlingPIDTx    = 0
            self.Magenta.Intent             = 0
            self.Magenta.Enable             = 0
            self.Magenta.GuideControl       = 5
            self.Magenta.SpeedSoll          = 0
            self.Magenta.GuideSpeedSoll     = 0
            taskMgr.remove("MagentaAxisTask")
            
            self.MagentaEngineInformation.Destroy()
            self.logger.warn('Magenta Axis is SET-UP with properties:\n\
                       Magenta Engine Name = %s\n\
                       Magenta Engine PosHardMax = %s\n\
                       Magenta Engine PosUserMax = %s\n\
                       Magenta Engine PosUserMin = %s\n\
                       Magenta Engine PosHardMin = %s\n\
                       Magenta Engine PosWindow = %s\n\
                       Magenta Engine SpeedMax = %s\n\
                       Magenta Engine AccMax = %s\n\
                       Magenta Engine DccMax = %s\n\
                       Magenta Engine AccMove = %s\n\
                       Magenta Engine MaxAmp = %s\n\
                       Magenta Engine VelWindow = %s\n\
                       Magenta Engine FilterP = %s\n\
                       Magenta Engine FilterI = %s\n\
                       Magenta Engine FilterD = %s\n\
                       Magenta Engine FilterIL = %s\n\
                       Magenta Engine GuidePitch = %s\n\
                       Magenta Engine GuidePosMax = %s\n\
                       Magenta Engine GuidePosMin = %s\n\
                       Magenta Engine GearToUI = %s\n\
                       Magenta Engine SpeedMaxForUI = %s\n\
                       Magenta Engine RopeSWLL = %s\n\
                       Magenta Engine RopeDiameter = %s\n\
                       Magenta Engine RopeNumber = %s\n\
                       Magenta Engine RopeLength = %s\n',
                       self.Magenta.Name,self.Magenta.PosHardMax,self.Magenta.PosUserMax,self.Magenta.PosUserMin,
                       self.Magenta.PosHardMin,self.Magenta.PosWin,self.Magenta.SpeedMax,self.Magenta.AccMax,self.Magenta.DccMax,self.Magenta.AccTot,
                       self.Magenta.MaxAmp,self.Magenta.VelWin,self.Magenta.FilterP,self.Magenta.FilterI,
                       self.Magenta.FilterD,self.Magenta.FilterIL,self.Magenta.GuidePitch,self.Magenta.GuidePosMax,
                       self.Magenta.GuidePosMin,self.Magenta.GearToUI,self.Magenta.SpeedMaxForUI,
                       self.Magenta.RopeSWLL,self.Magenta.RopeDiameter,self.Magenta.RopeNumber,
                       self.Magenta.RopeLength)
            
            self.ctrlMagentaName.SetValue(App.Magenta.Name)
            a=self.Decode.Decode(self.Magenta.Status)                                                          #[2] Axis Status  
            self.ctrlMagentaStatus.SetValue(a[1][0][2])
            #self.ctrlMagentaStatus.SetToolTipString(str(a[0]))
            self.ctrlMagentaStatus.SetBackgroundColour(a[1][0][3])
            self.ctrlMagentaName.SetBackgroundColour(a[1][0][3])
            self.ctrlMagentaName.Refresh()
            self.ctrlMagentaVel.SetValue(App.Magenta.SpeedIstUI)
            self.ctrlMagentaForce.SetValue(App.Magenta.ActCurUI)
            self.ctrlMagentaLength.SetValue(App.Magenta.PosIst)
            
            self.EnginesSetupWindow.Destroy()
            
            self.logger.warn(' Engine Setup quits with:\n\
                             Yellow Engine Name = %s \n\
                             Yellow Engine Status = %s \n\
                             Yellow Engine Length = %s \n\n\
                             Green Engine Name = %s \n\
                             Green Engine Status = %s \n\
                             Green Engine Length = %s \n\n\
                             Cyan Engine Name = %s \n\
                             Cyan Engine Status = %s \n\
                             Cyan Engine Length = %s \n\n\
                             Magenta Engine Name = %s \n\
                             Magenta Engine Status = %s \n\
                             Magenta Engine Length = %s \n\n',
                             self.Yellow.Name,self.Yellow.Status,self.Yellow.PosIst,
                             self.Green.Name,self.Green.Status,self.Green.PosIst,
                             self.Cyan.Name,self.Cyan.Status,self.Cyan.PosIst,
                             self.Magenta.Name,self.Magenta.Status,self.Magenta.PosIst)
            
            taskMgr.add(self.KeepAliveTask,'KeepAlive')
            
            self.OnPosSetup('0')
        else:
            dlge = wx.MessageDialog(self.frame, ' Engines configuration error','Engine assignment error!', wx.OK|wx.ICON_EXCLAMATION)
            self.logger.debug('Tried to Quit EngineSetup with out engine object')
            if dlge.ShowModal() == wx.ID_OK:
                dlge.Destroy()
                self.logger.info('No Quit for EngineSetup due to nonexistence of Axis object')
                self.YellowEngineInformation.Destroy()
                self.GreenEngineInformation.Destroy()
                self.CyanEngineInformation.Destroy()
                self.MagentaEngineInformation.Destroy()
                self.EnginesSetupWindow.Destroy()
                self.OnEnginesSetup('0')
      
#WWW Pos Setup End---------------
#WWW EnginesSetup Open und Save Beginn
    def OnOpenEngines(self,evt):
        self.logger.info('Initialising Load Engines Window')
        self.frame.menuBar.EnableTop(pos=0,enable=False)
        self.frame.MenuBar.Disable()        
        dlg = wx.FileDialog(self.frame,'Open Engines',os.getcwd(), style=wx.OPEN,wildcard='*.eng')
        if dlg.ShowModal() == wx.ID_OK:
            self.Engines = str(os.path.normcase(dlg.GetPath()))
            self.logger.warn(' Enginefile %s is loaded',self.Engines)
            Enginedata = list(open(self.Engines,'r')) 

            YellowNameTemp          = str(Enginedata[1])
            YellowPosHardMaxTemp    = str(Enginedata[3])
            YellowPosUserMaxTemp    = str(Enginedata[5])
            YellowPosUserMinTemp    = str(Enginedata[7])
            YellowPosHardMinTemp    = str(Enginedata[9])
            YellowPosWinTemp        = str(Enginedata[11])
            YellowSpeedMaxTemp      = str(Enginedata[13])
            YellowAccMaxTemp        = str(Enginedata[15])
            YellowDccMaxTemp        = str(Enginedata[17])
            YellowAccMoveTemp       = str(Enginedata[19])
            YellowMaxAmpTemp        = str(Enginedata[21])
            YellowVelWinTemp        = str(Enginedata[23])
            YellowFilterPTemp       = str(Enginedata[25])
            YellowFilterITemp       = str(Enginedata[27])
            YellowFilterDTemp       = str(Enginedata[29])
            YellowFilterILTemp      = str(Enginedata[31])
            YellowGuidePitchTemp    = str(Enginedata[33])
            YellowGuidePosMaxTemp   = str(Enginedata[35])
            YellowGuidePosMinTemp   = str(Enginedata[37])
            YellowGearToUITemp      = str(Enginedata[39])
            YellowSpeedMaxForUITemp = str(Enginedata[41])
            YellowRopeSWLLTemp      = str(Enginedata[43])
            YellowRopeDiameterTemp  = str(Enginedata[45])
            YellowRopeNumberTemp    = str(Enginedata[47])
            YellowRopeLengthTemp    = str(Enginedata[49])
                       
            GreenNameTemp           = str(Enginedata[51])
            GreenPosHardMaxTemp     = str(Enginedata[53])
            GreenPosUserMaxTemp     = str(Enginedata[55])
            GreenPosUserMinTemp     = str(Enginedata[57])
            GreenPosHardMinTemp     = str(Enginedata[59])
            GreenPosWinTemp         = str(Enginedata[61])
            GreenSpeedMaxTemp       = str(Enginedata[63])
            GreenAccMaxTemp         = str(Enginedata[65])
            GreenDccMaxTemp         = str(Enginedata[67])
            GreenAccMoveTemp        = str(Enginedata[69])
            GreenMaxAmpTemp         = str(Enginedata[71])
            GreenVelWinTemp         = str(Enginedata[73])
            GreenFilterPTemp        = str(Enginedata[75])
            GreenFilterITemp        = str(Enginedata[77])
            GreenFilterDTemp        = str(Enginedata[79])
            GreenFilterILTemp       = str(Enginedata[81])
            GreenGuidePitchTemp     = str(Enginedata[83])
            GreenGuidePosMaxTemp    = str(Enginedata[85])
            GreenGuidePosMinTemp    = str(Enginedata[87])
            GreenGearToUITemp       = str(Enginedata[89])
            GreenSpeedMaxForUITemp  = str(Enginedata[91])
            GreenRopeSWLLTemp       = str(Enginedata[93])
            GreenRopeDiameterTemp   = str(Enginedata[95])
            GreenRopeNumberTemp     = str(Enginedata[97])
            GreenRopeLengthTemp     = str(Enginedata[99])
                       
            CyanNameTemp            = str(Enginedata[101])
            CyanPosHardMaxTemp      = str(Enginedata[103])
            CyanPosUserMaxTemp      = str(Enginedata[105])
            CyanPosUserMinTemp      = str(Enginedata[107])
            CyanPosHardMinTemp      = str(Enginedata[109])
            CyanPosWinTemp          = str(Enginedata[111])
            CyanSpeedMaxTemp        = str(Enginedata[113])
            CyanAccMaxTemp          = str(Enginedata[115])
            CyanDccMaxTemp          = str(Enginedata[117])
            CyanAccMoveTemp         = str(Enginedata[119])
            CyanMaxAmpTemp          = str(Enginedata[121])
            CyanVelWinTemp          = str(Enginedata[123])
            CyanFilterPTemp         = str(Enginedata[125])
            CyanFilterITemp         = str(Enginedata[127])
            CyanFilterDTemp         = str(Enginedata[129])
            CyanFilterILTemp        = str(Enginedata[131])
            CyanGuidePitchTemp      = str(Enginedata[133])
            CyanGuidePosMaxTemp     = str(Enginedata[135])
            CyanGuidePosMinTemp     = str(Enginedata[137])
            CyanGearToUITemp        = str(Enginedata[139])
            CyanSpeedMaxForUITemp   = str(Enginedata[141])
            CyanRopeSWLLTemp        = str(Enginedata[143])
            CyanRopeDiameterTemp    = str(Enginedata[145])
            CyanRopeNumberTemp      = str(Enginedata[147])
            CyanRopeLengthTemp      = str(Enginedata[149])
                                   
            MagentaNameTemp         = str(Enginedata[151])
            MagentaPosHardMaxTemp   = str(Enginedata[153])
            MagentaPosUserMaxTemp   = str(Enginedata[155])
            MagentaPosUserMinTemp   = str(Enginedata[157])
            MagentaPosHardMinTemp   = str(Enginedata[159])
            MagentaPosWinTemp       = str(Enginedata[161])
            MagentaSpeedMaxTemp     = str(Enginedata[163])
            MagentaAccMaxTemp       = str(Enginedata[165])
            MagentaDccMaxTemp       = str(Enginedata[167])
            MagentaAccMoveTemp      = str(Enginedata[169])
            MagentaMaxAmpTemp       = str(Enginedata[171])
            MagentaVelWinTemp       = str(Enginedata[173])
            MagentaFilterPTemp      = str(Enginedata[175])
            MagentaFilterITemp      = str(Enginedata[177])
            MagentaFilterDTemp      = str(Enginedata[179])
            MagentaFilterILTemp     = str(Enginedata[181])
            MagentaGuidePitchTemp   = str(Enginedata[183])
            MagentaGuidePosMaxTemp  = str(Enginedata[185])
            MagentaGuidePosMinTemp  = str(Enginedata[187])
            MagentaGearToUITemp     = str(Enginedata[189])
            MagentaSpeedMaxForUITemp= str(Enginedata[191])
            MagentaRopeSWLLTemp     = str(Enginedata[193])
            MagentaRopeDiameterTemp = str(Enginedata[195])
            MagentaRopeNumberTemp   = str(Enginedata[197])
            MagentaRopeLengthTemp   = str(Enginedata[199])
            haschTemp               = str(Enginedata[201])
           
            
            m = hashlib.sha224()
            m.update(str(YellowNameTemp))
            m.update(str(YellowPosHardMaxTemp))
            m.update(str(YellowPosUserMaxTemp))
            m.update(str(YellowPosUserMinTemp))
            m.update(str(YellowPosHardMinTemp))
            m.update(str(YellowPosWinTemp))
            m.update(str(YellowSpeedMaxTemp))
            m.update(str(YellowAccMaxTemp))
            m.update(str(YellowDccMaxTemp))
            m.update(str(YellowAccMoveTemp))
            m.update(str(YellowMaxAmpTemp))
            m.update(str(YellowVelWinTemp))
            m.update(str(YellowFilterPTemp))
            m.update(str(YellowFilterITemp))
            m.update(str(YellowFilterDTemp))
            m.update(str(YellowFilterILTemp))
            m.update(str(YellowGuidePitchTemp))
            m.update(str(YellowGuidePosMaxTemp))
            m.update(str(YellowGuidePosMinTemp))
            m.update(str(YellowGearToUITemp))
            m.update(str(YellowSpeedMaxForUITemp))
            m.update(str(YellowRopeSWLLTemp))
            m.update(str(YellowRopeDiameterTemp))
            m.update(str(YellowRopeNumberTemp))
            m.update(str(YellowRopeLengthTemp))
            
            m.update(str(GreenNameTemp))
            m.update(str(GreenPosHardMaxTemp))
            m.update(str(GreenPosUserMaxTemp))
            m.update(str(GreenPosUserMinTemp))
            m.update(str(GreenPosHardMinTemp))
            m.update(str(GreenPosWinTemp))
            m.update(str(GreenSpeedMaxTemp))
            m.update(str(GreenAccMaxTemp))
            m.update(str(GreenDccMaxTemp))
            m.update(str(GreenAccMoveTemp))
            m.update(str(GreenMaxAmpTemp))
            m.update(str(GreenVelWinTemp))
            m.update(str(GreenFilterPTemp))
            m.update(str(GreenFilterITemp))
            m.update(str(GreenFilterDTemp))
            m.update(str(GreenFilterILTemp))
            m.update(str(GreenGuidePitchTemp))
            m.update(str(GreenGuidePosMaxTemp))
            m.update(str(GreenGuidePosMinTemp))
            m.update(str(GreenGearToUITemp))
            m.update(str(GreenSpeedMaxForUITemp))
            m.update(str(GreenRopeSWLLTemp))
            m.update(str(GreenRopeDiameterTemp))
            m.update(str(GreenRopeNumberTemp))
            m.update(str(GreenRopeLengthTemp))
            
            m.update(str(CyanNameTemp))
            m.update(str(CyanPosHardMaxTemp))
            m.update(str(CyanPosUserMaxTemp))
            m.update(str(CyanPosUserMinTemp))
            m.update(str(CyanPosHardMinTemp))
            m.update(str(CyanPosWinTemp))
            m.update(str(CyanSpeedMaxTemp))
            m.update(str(CyanAccMaxTemp))
            m.update(str(CyanDccMaxTemp))
            m.update(str(CyanAccMoveTemp))
            m.update(str(CyanMaxAmpTemp))
            m.update(str(CyanVelWinTemp))
            m.update(str(CyanFilterPTemp))
            m.update(str(CyanFilterITemp))
            m.update(str(CyanFilterDTemp))
            m.update(str(CyanFilterILTemp))
            m.update(str(CyanGuidePitchTemp))
            m.update(str(CyanGuidePosMaxTemp))
            m.update(str(CyanGuidePosMinTemp))
            m.update(str(CyanGearToUITemp))
            m.update(str(CyanSpeedMaxForUITemp))
            m.update(str(CyanRopeSWLLTemp))
            m.update(str(CyanRopeDiameterTemp))
            m.update(str(CyanRopeNumberTemp))
            m.update(str(CyanRopeLengthTemp))
            
            m.update(str(MagentaNameTemp))
            m.update(str(MagentaPosHardMaxTemp))
            m.update(str(MagentaPosUserMaxTemp))
            m.update(str(MagentaPosUserMinTemp))
            m.update(str(MagentaPosHardMinTemp))
            m.update(str(MagentaPosWinTemp))
            m.update(str(MagentaSpeedMaxTemp))
            m.update(str(MagentaAccMaxTemp))
            m.update(str(MagentaDccMaxTemp))
            m.update(str(MagentaAccMoveTemp))
            m.update(str(MagentaMaxAmpTemp))
            m.update(str(MagentaVelWinTemp))
            m.update(str(MagentaFilterPTemp))
            m.update(str(MagentaFilterITemp))
            m.update(str(MagentaFilterDTemp))
            m.update(str(MagentaFilterILTemp))
            m.update(str(MagentaGuidePitchTemp))
            m.update(str(MagentaGuidePosMaxTemp))
            m.update(str(MagentaGuidePosMinTemp))
            m.update(str(MagentaGearToUITemp))
            m.update(str(MagentaSpeedMaxForUITemp))
            m.update(str(MagentaRopeSWLLTemp))
            m.update(str(MagentaRopeDiameterTemp))
            m.update(str(MagentaRopeNumberTemp))
            m.update(str(MagentaRopeLengthTemp))
            hasch = str(m.hexdigest())
            
            if hasch == haschTemp:
                try:
                    del App.Yellow
                    del App.Green
                    del App.Cyan
                    del App.Magenta
                except:
                    pass
                    
                self.logger.info('Engine File has been verified')
                res = xrc.XmlResource('WWLayout0-12a.xrc')
                self.EnginesSetupWindow = res.LoadFrame(self.frame,'EnginesSetup')        
                
                self.EnginesSetupWindow.btnEnginesSetupSyncReset=xrc.XRCCTRL(self.EnginesSetupWindow,'btnEnginesSetupSyncReset')
                self.EnginesSetupWindow.btnEnginesSetupRestart=xrc.XRCCTRL(self.EnginesSetupWindow,'btnEnginesSetupRestart') 
                self.EnginesSetupWindow.btnEnginesSetupQuit=xrc.XRCCTRL(self.EnginesSetupWindow,'btnEnginesSetupQuit')
                #self.EnginesSetupWindow.btnEnginesSetupQuit.Enable(False)
                self.EnginesSetupWindow.Bind(wx.EVT_BUTTON, self.OnEnginesSetupRestart, id=xrc.XRCID('btnEnginesSetupRestart'))
                self.EnginesSetupWindow.Show()                
                self.YellowEngineInformation   = YellowAxisUI(self.EnginesSetupWindow, -1.,"Yellow Achsen Steuerung")
                self.GreenEngineInformation = GreenAxisUI(self.EnginesSetupWindow, -1.,"Green Achsen Steuerung")
                self.CyanEngineInformation   = CyanAxisUI(self.EnginesSetupWindow, -1.,"Cyan Achsen Steuerung")
                self.MagentaEngineInformation   = MagentaAxisUI(self.EnginesSetupWindow, -1.,"Magenta Achsen Steuerung")
                
                self.YellowEngineInformation.Show(True)
                self.GreenEngineInformation.Show(True)
                self.CyanEngineInformation.Show(True)
                self.MagentaEngineInformation.Show(True)
                
                self.YellowEngineInformation.Loadfromfile(YellowNameTemp)
                self.GreenEngineInformation.Loadfromfile(GreenNameTemp)
                self.CyanEngineInformation.Loadfromfile(CyanNameTemp)
                self.MagentaEngineInformation.Loadfromfile(MagentaNameTemp)
                
                self.YellowEngineInformation.txtAxisSetupPosHardMax.SetValue(YellowPosHardMaxTemp)
                self.YellowEngineInformation.txtAxisSetupPosUserMax.SetValue(YellowPosUserMaxTemp)
                self.YellowEngineInformation.txtAxisSetupPosUserMin.SetValue(YellowPosUserMinTemp)
                self.YellowEngineInformation.txtAxisSetupPosHardMin.SetValue(YellowPosHardMinTemp)
                self.YellowEngineInformation.txtAxisSetupPosPosWin.SetValue(YellowPosWinTemp)
                
                self.YellowEngineInformation.txtAxisSetupVelMax.SetValue(YellowSpeedMaxTemp)
                self.YellowEngineInformation.txtAxisSetupAccMax.SetValue(YellowAccMaxTemp)
                self.YellowEngineInformation.txtAxisSetupDccMax.SetValue(YellowDccMaxTemp)
                self.YellowEngineInformation.txtAxisSetupAccTot.SetValue(YellowAccMoveTemp)
                self.YellowEngineInformation.txtAxisSetupMaxAmp.SetValue(YellowMaxAmpTemp)
                self.YellowEngineInformation.txtAxisSetupVelWin.SetValue(YellowVelWinTemp)
                
                self.YellowEngineInformation.txtAxisSetupGuidePitch.SetValue(YellowGuidePitchTemp)
                self.YellowEngineInformation.txtAxisSetupGuidePosMax.SetValue(YellowGuidePosMaxTemp)
                self.YellowEngineInformation.txtAxisSetupGuidePosMin.SetValue(YellowGuidePosMinTemp)
                
                self.YellowEngineInformation.txtAxisSetupFilterP.SetValue(YellowFilterPTemp)
                self.YellowEngineInformation.txtAxisSetupFilterI.SetValue(YellowFilterITemp)
                self.YellowEngineInformation.txtAxisSetupFilterD.SetValue(YellowFilterDTemp)
                self.YellowEngineInformation.txtAxisSetupFilterIL.SetValue(YellowFilterILTemp)
                
                self.YellowEngineInformation.Modus='w'
                
                
                self.GreenEngineInformation.txtAxisSetupPosHardMax.SetValue(GreenPosHardMaxTemp)
                self.GreenEngineInformation.txtAxisSetupPosUserMax.SetValue(GreenPosUserMaxTemp)
                self.GreenEngineInformation.txtAxisSetupPosUserMin.SetValue(GreenPosUserMinTemp)
                self.GreenEngineInformation.txtAxisSetupPosHardMin.SetValue(GreenPosHardMinTemp)
                self.GreenEngineInformation.txtAxisSetupPosPosWin.SetValue(GreenPosWinTemp)
                
                self.GreenEngineInformation.txtAxisSetupVelMax.SetValue(GreenSpeedMaxTemp)
                self.GreenEngineInformation.txtAxisSetupAccMax.SetValue(GreenAccMaxTemp)
                self.GreenEngineInformation.txtAxisSetupDccMax.SetValue(GreenDccMaxTemp)
                self.GreenEngineInformation.txtAxisSetupAccTot.SetValue(GreenAccMoveTemp)
                self.GreenEngineInformation.txtAxisSetupMaxAmp.SetValue(GreenMaxAmpTemp)
                self.GreenEngineInformation.txtAxisSetupVelWin.SetValue(GreenVelWinTemp)
                
                self.GreenEngineInformation.txtAxisSetupGuidePitch.SetValue(GreenGuidePitchTemp)
                self.GreenEngineInformation.txtAxisSetupGuidePosMax.SetValue(GreenGuidePosMaxTemp)
                self.GreenEngineInformation.txtAxisSetupGuidePosMin.SetValue(GreenGuidePosMinTemp)
                
                self.GreenEngineInformation.txtAxisSetupFilterP.SetValue(GreenFilterPTemp)
                self.GreenEngineInformation.txtAxisSetupFilterI.SetValue(GreenFilterITemp)
                self.GreenEngineInformation.txtAxisSetupFilterD.SetValue(GreenFilterDTemp)
                self.GreenEngineInformation.txtAxisSetupFilterIL.SetValue(GreenFilterILTemp)
                
                self.GreenEngineInformation.Modus='w'
                
                self.CyanEngineInformation.txtAxisSetupPosHardMax.SetValue(CyanPosHardMaxTemp)
                self.CyanEngineInformation.txtAxisSetupPosUserMax.SetValue(CyanPosUserMaxTemp)
                self.CyanEngineInformation.txtAxisSetupPosUserMin.SetValue(CyanPosUserMinTemp)
                self.CyanEngineInformation.txtAxisSetupPosHardMin.SetValue(CyanPosHardMinTemp)
                self.CyanEngineInformation.txtAxisSetupPosPosWin.SetValue(CyanPosWinTemp)
                
                self.CyanEngineInformation.txtAxisSetupVelMax.SetValue(CyanSpeedMaxTemp)
                self.CyanEngineInformation.txtAxisSetupAccMax.SetValue(CyanAccMaxTemp)
                self.CyanEngineInformation.txtAxisSetupDccMax.SetValue(CyanDccMaxTemp)
                self.CyanEngineInformation.txtAxisSetupAccTot.SetValue(CyanAccMoveTemp)
                self.CyanEngineInformation.txtAxisSetupMaxAmp.SetValue(CyanMaxAmpTemp)
                self.CyanEngineInformation.txtAxisSetupVelWin.SetValue(CyanVelWinTemp)
                
                self.CyanEngineInformation.txtAxisSetupGuidePitch.SetValue(CyanGuidePitchTemp)
                self.CyanEngineInformation.txtAxisSetupGuidePosMax.SetValue(CyanGuidePosMaxTemp)
                self.CyanEngineInformation.txtAxisSetupGuidePosMin.SetValue(CyanGuidePosMinTemp)
                
                self.CyanEngineInformation.txtAxisSetupFilterP.SetValue(CyanFilterPTemp)
                self.CyanEngineInformation.txtAxisSetupFilterI.SetValue(CyanFilterITemp)
                self.CyanEngineInformation.txtAxisSetupFilterD.SetValue(CyanFilterDTemp)
                self.CyanEngineInformation.txtAxisSetupFilterIL.SetValue(CyanFilterILTemp)
                
                self.CyanEngineInformation.Modus='w'
                
                self.MagentaEngineInformation.txtAxisSetupPosHardMax.SetValue(MagentaPosHardMaxTemp)
                self.MagentaEngineInformation.txtAxisSetupPosUserMax.SetValue(MagentaPosUserMaxTemp)
                self.MagentaEngineInformation.txtAxisSetupPosUserMin.SetValue(MagentaPosUserMinTemp)
                self.MagentaEngineInformation.txtAxisSetupPosHardMin.SetValue(MagentaPosHardMinTemp)
                self.MagentaEngineInformation.txtAxisSetupPosPosWin.SetValue(MagentaPosWinTemp)
                
                self.MagentaEngineInformation.txtAxisSetupVelMax.SetValue(MagentaSpeedMaxTemp)
                self.MagentaEngineInformation.txtAxisSetupAccMax.SetValue(MagentaAccMaxTemp)
                self.MagentaEngineInformation.txtAxisSetupDccMax.SetValue(MagentaDccMaxTemp)
                self.MagentaEngineInformation.txtAxisSetupAccTot.SetValue(MagentaAccMoveTemp)
                self.MagentaEngineInformation.txtAxisSetupMaxAmp.SetValue(MagentaMaxAmpTemp)
                self.MagentaEngineInformation.txtAxisSetupVelWin.SetValue(MagentaVelWinTemp)
                
                self.MagentaEngineInformation.txtAxisSetupGuidePitch.SetValue(MagentaGuidePitchTemp)
                self.MagentaEngineInformation.txtAxisSetupGuidePosMax.SetValue(MagentaGuidePosMaxTemp)
                self.MagentaEngineInformation.txtAxisSetupGuidePosMin.SetValue(MagentaGuidePosMinTemp)
                
                self.MagentaEngineInformation.txtAxisSetupFilterP.SetValue(MagentaFilterPTemp)
                self.MagentaEngineInformation.txtAxisSetupFilterI.SetValue(MagentaFilterITemp)
                self.MagentaEngineInformation.txtAxisSetupFilterD.SetValue(MagentaFilterDTemp)
                self.MagentaEngineInformation.txtAxisSetupFilterIL.SetValue(MagentaFilterILTemp)
                
                self.MagentaEngineInformation.Modus='w' 
                
                self.YellowEngineInformation.Bind(wx.EVT_CLOSE, self.OnOpenEnginesQuit)
                self.GreenEngineInformation.Bind(wx.EVT_CLOSE, self.OnOpenEnginesQuit)
                self.CyanEngineInformation.Bind(wx.EVT_CLOSE, self.OnOpenEnginesQuit)
                self.MagentaEngineInformation.Bind(wx.EVT_CLOSE, self.OnOpenEnginesQuit)
                self.EnginesSetupWindow.Bind(wx.EVT_BUTTON, self.OnOpenEnginesQuit,id=xrc.XRCID('btnEnginesSetupQuit'))


            else:
                self.logger.info('Engine File has been manipulated')
                dlg=wx.MessageDialog(None,'Engine File has been manipulated','Engine assignment error!',wx.OK|wx.ICON_EXCLAMATION)
                result=dlg.ShowModal()
                dlg.Destroy 
        else:
            self.frame.menuBar.EnableTop(pos=0,enable=True)
            #self.frame.MenuBar.Enable() 
            
        self.logger.info('Load Engines Window Initialised')
    
    def OnOpenEnginesQuit(self,evt):
        self.logger.info('Quiting Load Engines Window')
     
        #taskMgr.add(self.KeepAliveTask,'KeepAlive')
        
        self.btAxisSetup.Enable(True)
        self.btStart.Enable(True)
        self.btPosSetup.Enable(True)
        self.btYellowSetup.Enable(True)
        self.btGreenSetup.Enable(True)
        self.btCyanSetup.Enable(True)
        self.btMagentaSetup.Enable(True)
        
        self.YellowEngineInformation.LoadFromFileQuit()
        self.GreenEngineInformation.LoadFromFileQuit()
        self.CyanEngineInformation.LoadFromFileQuit()
        self.MagentaEngineInformation.LoadFromFileQuit()
        
        self.YellowEngineInformation.Destroy()
        self.GreenEngineInformation.Destroy()
        self.CyanEngineInformation.Destroy()
        self.MagentaEngineInformation.Destroy()
        self.EnginesSetupWindow.Destroy()
        
                
        App.Yellow.LTold              =  App.Yellow.LTold
        App.Yellow.Modus              = 'r'
        App.Yellow.Intent             = 0
        App.Yellow.Enable             = 0
        App.Yellow.GuideControl       = 5
        App.Yellow.SpeedSoll          = 0
        App.Yellow.GuideSpeedSoll     = 0
        taskMgr.remove("YellowAxisTask")
        
        
        
        App.Green.LTold              = App.Green.LTold
        App.Green.Modus              = 'r'
        App.Green.Intent             = 0
        App.Green.Enable             = 0
        App.Green.GuideControl       = 5
        App.Green.SpeedSoll          = 0
        App.Green.GuideSpeedSoll     = 0
        taskMgr.remove("GreenAxisTask")
        
       
        App.Cyan.LTold              = App.Cyan.LTold
        App.Cyan.Modus              = 'r'
        App.Cyan.Intent             = 0
        App.Cyan.Enable             = 0
        App.Cyan.GuideControl       = 5
        App.Cyan.SpeedSoll          = 0
        App.Cyan.GuideSpeedSoll     = 0
        taskMgr.remove("CyanAxisTask") 
        
        
        App.Magenta.LTold              = App.Magenta.LTold
        App.Magenta.Modus              = 'r'
        App.Magenta.Intent             = 0
        App.Magenta.Enable             = 0
        App.Magenta.GuideControl       = 5
        App.Magenta.SpeedSoll          = 0
        App.Magenta.GuideSpeedSoll     = 0 
        taskMgr.remove("MagentaAxisTask")
        
        taskMgr.add(self.KeepAliveTask,'KeepAlive')
        
        self.logger.info('Load Engines Window closed')
        self.OnPosSetup('loadEng')
        
    def OnSaveEngines(self,evt):
        self.logger.info('Save Engines Window Initialised')        
        self.btAxisSetup.Enable(False)
        self.btStart.Enable(False)
        self.btPosSetup.Enable(False)
        self.btYellowSetup.Enable(False)
        self.btGreenSetup.Enable(False)
        self.btCyanSetup.Enable(False)
        self.btMagentaSetup.Enable(False)
        self.btKeyPointLoad.Enable(False)
        self.btKeyPointSave.Enable(False)
        self.btPosMode.Enable(False)
        self.btPathLoad.Enable(False)
        self.btPathSave.Enable(False)
        self.btPathMode.Enable(False)
        dlg = wx.FileDialog(self.frame,'Save Engines',os.getcwd(), style=wx.SAVE,wildcard='*.eng')
        try:
            App.Yellow
            App.Green
            App.Cyan
            App.Magenta
            n=True

        except:
            dlge = wx.MessageDialog(self.frame, ' Unable to save engines configuration','Engine assignment error!', wx.OK|wx.ICON_EXCLAMATION)
            dlge.ShowModal()
            self.logger.debug('Tried to write Engines file with out engines objects')
            if dlge.ShowModal() == wx.ID_OK:
                dlge.Destroy()
            n=False
        if n:
            if dlg.ShowModal() == wx.ID_OK:
                self.Engines = dlg.GetPath() 

                m = hashlib.sha224()
                m.update(str(App.Yellow.Name)+'\n')
                m.update(str(App.Yellow.PosHardMax)+'\n')
                m.update(str(App.Yellow.PosUserMax)+'\n')
                m.update(str(App.Yellow.PosUserMin)+'\n')
                m.update(str(App.Yellow.PosHardMin)+'\n')
                m.update(str(App.Yellow.PosWin)+'\n')
                m.update(str(App.Yellow.SpeedMax)+'\n')
                m.update(str(App.Yellow.AccMax)+'\n')
                m.update(str(App.Yellow.DccMax)+'\n')
                m.update(str(App.Yellow.AccTot)+'\n')
                m.update(str(App.Yellow.MaxAmp)+'\n')
                m.update(str(App.Yellow.VelWin)+'\n')
                m.update(str(App.Yellow.FilterP)+'\n')
                m.update(str(App.Yellow.FilterI)+'\n')
                m.update(str(App.Yellow.FilterD)+'\n')
                m.update(str(App.Yellow.FilterIL)+'\n')
                m.update(str(App.Yellow.GuidePitch)+'\n')
                m.update(str(App.Yellow.GuidePosMax)+'\n')
                m.update(str(App.Yellow.GuidePosMin)+'\n')
                m.update(str(App.Yellow.GearToUI)+'\n')
                m.update(str(App.Yellow.SpeedMaxForUI)+'\n')
                m.update(str(App.Yellow.RopeSWLL)+'\n')
                m.update(str(App.Yellow.RopeDiameter)+'\n')
                m.update(str(App.Yellow.RopeNumber)+'\n')
                m.update(str(App.Yellow.RopeLength)+'\n')
                
                m.update(str(App.Green.Name)+'\n')
                m.update(str(App.Green.PosHardMax)+'\n')
                m.update(str(App.Green.PosUserMax)+'\n')
                m.update(str(App.Green.PosUserMin)+'\n')
                m.update(str(App.Green.PosHardMin)+'\n')
                m.update(str(App.Green.PosWin)+'\n')
                m.update(str(App.Green.SpeedMax)+'\n')
                m.update(str(App.Green.AccMax)+'\n')
                m.update(str(App.Green.DccMax)+'\n')
                m.update(str(App.Green.AccTot)+'\n')
                m.update(str(App.Green.MaxAmp)+'\n')
                m.update(str(App.Green.VelWin)+'\n')
                m.update(str(App.Green.FilterP)+'\n')
                m.update(str(App.Green.FilterI)+'\n')
                m.update(str(App.Green.FilterD)+'\n')
                m.update(str(App.Green.FilterIL)+'\n')
                m.update(str(App.Green.GuidePitch)+'\n')
                m.update(str(App.Green.GuidePosMax)+'\n')
                m.update(str(App.Green.GuidePosMin)+'\n')
                m.update(str(App.Green.GearToUI)+'\n')
                m.update(str(App.Green.SpeedMaxForUI)+'\n')
                m.update(str(App.Green.RopeSWLL)+'\n')
                m.update(str(App.Green.RopeDiameter)+'\n')
                m.update(str(App.Green.RopeNumber)+'\n')
                m.update(str(App.Green.RopeLength)+'\n')
                
                m.update(str(App.Cyan.Name)+'\n')
                m.update(str(App.Cyan.PosHardMax)+'\n')
                m.update(str(App.Cyan.PosUserMax)+'\n')
                m.update(str(App.Cyan.PosUserMin)+'\n')
                m.update(str(App.Cyan.PosHardMin)+'\n')
                m.update(str(App.Cyan.PosWin)+'\n')
                m.update(str(App.Cyan.SpeedMax)+'\n')
                m.update(str(App.Cyan.AccMax)+'\n')
                m.update(str(App.Cyan.DccMax)+'\n')
                m.update(str(App.Cyan.AccTot)+'\n')
                m.update(str(App.Cyan.MaxAmp)+'\n')
                m.update(str(App.Cyan.VelWin)+'\n')
                m.update(str(App.Cyan.FilterP)+'\n')
                m.update(str(App.Cyan.FilterI)+'\n')
                m.update(str(App.Cyan.FilterD)+'\n')
                m.update(str(App.Cyan.FilterIL)+'\n')
                m.update(str(App.Cyan.GuidePitch)+'\n')
                m.update(str(App.Cyan.GuidePosMax)+'\n')
                m.update(str(App.Cyan.GuidePosMin)+'\n')
                m.update(str(App.Cyan.GearToUI)+'\n')
                m.update(str(App.Cyan.SpeedMaxForUI)+'\n')
                m.update(str(App.Cyan.RopeSWLL)+'\n')
                m.update(str(App.Cyan.RopeDiameter)+'\n')
                m.update(str(App.Cyan.RopeNumber)+'\n')
                m.update(str(App.Cyan.RopeLength)+'\n')
                
                m.update(str(App.Magenta.Name)+'\n')
                m.update(str(App.Magenta.PosHardMax)+'\n')
                m.update(str(App.Magenta.PosUserMax)+'\n')
                m.update(str(App.Magenta.PosUserMin)+'\n')
                m.update(str(App.Magenta.PosHardMin)+'\n')
                m.update(str(App.Magenta.PosWin)+'\n')
                m.update(str(App.Magenta.SpeedMax)+'\n')
                m.update(str(App.Magenta.AccMax)+'\n')
                m.update(str(App.Magenta.DccMax)+'\n')
                m.update(str(App.Magenta.AccTot)+'\n')
                m.update(str(App.Magenta.MaxAmp)+'\n')
                m.update(str(App.Magenta.VelWin)+'\n')
                m.update(str(App.Magenta.FilterP)+'\n')
                m.update(str(App.Magenta.FilterI)+'\n')
                m.update(str(App.Magenta.FilterD)+'\n')
                m.update(str(App.Magenta.FilterIL)+'\n')
                m.update(str(App.Magenta.GuidePitch)+'\n')
                m.update(str(App.Magenta.GuidePosMax)+'\n')
                m.update(str(App.Magenta.GuidePosMin)+'\n')
                m.update(str(App.Magenta.GearToUI)+'\n')
                m.update(str(App.Magenta.SpeedMaxForUI)+'\n')
                m.update(str(App.Magenta.RopeSWLL)+'\n')
                m.update(str(App.Magenta.RopeDiameter)+'\n')
                m.update(str(App.Magenta.RopeNumber)+'\n')
                m.update(str(App.Magenta.RopeLength)+'\n')
                hasch = m.hexdigest()

                file = open(self.Engines,'w')
                file.write('Yellow Engine =\n'+str(App.Yellow.Name)+'\n'+
                       'Y.PosHardMax =\n'+str(App.Yellow.PosHardMax)+'\n'+
                       'Y.PosUserMax =\n'+str(App.Yellow.PosUserMax)+'\n'+
                       'Y.PosUserMin =\n'+str(App.Yellow.PosUserMin)+'\n'+
                       'Y.PosHardMin =\n'+str(App.Yellow.PosHardMin)+'\n'+
                       'Y.PosWin =\n'+str(App.Yellow.PosWin)+'\n'+
                       'Y.SpeedMax =\n'+str(App.Yellow.SpeedMax)+'\n'+
                       'Y.AccMax =\n'+str(App.Yellow.AccMax)+'\n'+
                       'Y.DccMax =\n'+str(App.Yellow.DccMax)+'\n'+                       
                       'Y.AccTot =\n'+str(App.Yellow.AccTot)+'\n'+
                       'Y.MaxAmp =\n'+str(App.Yellow.MaxAmp)+'\n'+
                       'Y.VelWin =\n'+str(App.Yellow.VelWin)+'\n'+
                       'Y.FilterP =\n'+str(App.Yellow.FilterP)+'\n'+                       
                       'Y.FilterI =\n'+str(App.Yellow.FilterI)+'\n'+
                       'Y.FilterD =\n'+str(App.Yellow.FilterD)+'\n'+
                       'Y.FilterIL =\n'+str(App.Yellow.FilterIL)+'\n'+      
                       'Y.GuidePitch =\n'+str(App.Yellow.GuidePitch)+'\n'+
                       'Y.GuidePosMax =\n'+str(App.Yellow.GuidePosMax)+'\n'+
                       'Y.GuidePosMin =\n'+str(App.Yellow.GuidePosMin)+'\n'+
                       'Y.GearToUI =\n'+str(App.Yellow.GearToUI)+'\n'+
                       'Y.SpeedMaxForUI =\n'+str(App.Yellow.SpeedMaxForUI)+'\n'+
                       'Y.RopeSWLL =\n'+str(App.Yellow.RopeSWLL)+'\n'+
                       'Y.RopeDiameter =\n'+str(App.Yellow.RopeDiameter)+'\n'+
                       'Y.RopeNumber =\n'+str(App.Yellow.RopeNumber)+'\n'+
                       'Y.RopeLength =\n'+str(App.Yellow.RopeLength)+'\n'+
                       
                       'Green Engine =\n'+str(App.Green.Name)+'\n'+
                       'G.PosHardMax =\n'+str(App.Green.PosHardMax)+'\n'+
                       'G.PosUserMax =\n'+str(App.Green.PosUserMax)+'\n'+
                       'G.PosUserMin =\n'+str(App.Green.PosUserMin)+'\n'+
                       'G.PosHardMin =\n'+str(App.Green.PosHardMin)+'\n'+
                       'G.PosWin =\n'+str(App.Green.PosWin)+'\n'+
                       'G.SpeedMax =\n'+str(App.Green.SpeedMax)+'\n'+
                       'G.AccMax =\n'+str(App.Green.AccMax)+'\n'+
                       'G.DccMax =\n'+str(App.Green.DccMax)+'\n'+                       
                       'G.AccTot =\n'+str(App.Green.AccTot)+'\n'+
                       'G.MaxAmp =\n'+str(App.Green.MaxAmp)+'\n'+
                       'G.VelWin =\n'+str(App.Green.VelWin)+'\n'+
                       'G.FilterP =\n'+str(App.Green.FilterP)+'\n'+                       
                       'G.FilterI =\n'+str(App.Green.FilterI)+'\n'+
                       'G.FilterD =\n'+str(App.Green.FilterD)+'\n'+
                       'G.FilterIL =\n'+str(App.Green.FilterIL)+'\n'+      
                       'G.GuidePitch =\n'+str(App.Green.GuidePitch)+'\n'+
                       'G.GuidePosMax =\n'+str(App.Green.GuidePosMax)+'\n'+
                       'G.GuidePosMin =\n'+str(App.Green.GuidePosMin)+'\n'+
                       'G.GearToUI =\n'+str(App.Green.GearToUI)+'\n'+
                       'G.SpeedMaxForUI =\n'+str(App.Green.SpeedMaxForUI)+'\n'+
                       'G.RopeSWLL =\n'+str(App.Green.RopeSWLL)+'\n'+
                       'G.RopeDiameter =\n'+str(App.Green.RopeDiameter)+'\n'+
                       'G.RopeNumber =\n'+str(App.Green.RopeNumber)+'\n'+
                       'G.RopeLength =\n'+str(App.Green.RopeLength)+'\n'+
                       
                       'Cyan Engine =\n'+str(App.Cyan.Name)+'\n'+
                       'C.PosHardMax =\n'+str(App.Cyan.PosHardMax)+'\n'+
                       'C.PosUserMax =\n'+str(App.Cyan.PosUserMax)+'\n'+
                       'C.PosUserMin =\n'+str(App.Cyan.PosUserMin)+'\n'+
                       'C.PosHardMin =\n'+str(App.Cyan.PosHardMin)+'\n'+
                       'C.PosWin =\n'+str(App.Cyan.PosWin)+'\n'+
                       'C.SpeedMax =\n'+str(App.Cyan.SpeedMax)+'\n'+
                       'C.AccMax =\n'+str(App.Cyan.AccMax)+'\n'+
                       'C.DccMax =\n'+str(App.Cyan.DccMax)+'\n'+                       
                       'C.AccTot =\n'+str(App.Cyan.AccTot)+'\n'+
                       'C.MaxAmp =\n'+str(App.Cyan.MaxAmp)+'\n'+
                       'C.VelWin =\n'+str(App.Cyan.VelWin)+'\n'+
                       'C.FilterP =\n'+str(App.Cyan.FilterP)+'\n'+                       
                       'C.FilterI =\n'+str(App.Cyan.FilterI)+'\n'+
                       'C.FilterD =\n'+str(App.Cyan.FilterD)+'\n'+
                       'C.FilterIL =\n'+str(App.Cyan.FilterIL)+'\n'+      
                       'C.GuidePitch =\n'+str(App.Cyan.GuidePitch)+'\n'+
                       'C.GuidePosMax =\n'+str(App.Cyan.GuidePosMax)+'\n'+
                       'C.GuidePosMin =\n'+str(App.Cyan.GuidePosMin)+'\n'+
                       'C.GearToUI =\n'+str(App.Cyan.GearToUI)+'\n'+
                       'C.SpeedMaxForUI =\n'+str(App.Cyan.SpeedMaxForUI)+'\n'+
                       'C.RopeSWLL =\n'+str(App.Cyan.RopeSWLL)+'\n'+
                       'C.RopeDiameter =\n'+str(App.Cyan.RopeDiameter)+'\n'+
                       'C.RopeNumber =\n'+str(App.Cyan.RopeNumber)+'\n'+
                       'C.RopeLength =\n'+str(App.Cyan.RopeLength)+'\n'+
                       
                       'Magenta Engine =\n'+str(App.Magenta.Name)+'\n'+
                       'M.PosHardMax =\n'+str(App.Magenta.PosHardMax)+'\n'+
                       'M.PosUserMax =\n'+str(App.Magenta.PosUserMax)+'\n'+
                       'M.PosUserMin =\n'+str(App.Magenta.PosUserMin)+'\n'+
                       'M.PosHardMin =\n'+str(App.Magenta.PosHardMin)+'\n'+
                       'M.PosWin =\n'+str(App.Magenta.PosWin)+'\n'+
                       'M.SpeedMax =\n'+str(App.Magenta.SpeedMax)+'\n'+
                       'M.AccMax =\n'+str(App.Magenta.AccMax)+'\n'+
                       'M.DccMax =\n'+str(App.Magenta.DccMax)+'\n'+                       
                       'M.AccTot =\n'+str(App.Magenta.AccTot)+'\n'+
                       'M.MaxAmp =\n'+str(App.Magenta.MaxAmp)+'\n'+
                       'M.VelWin =\n'+str(App.Magenta.VelWin)+'\n'+
                       'M.FilterP =\n'+str(App.Magenta.FilterP)+'\n'+                       
                       'M.FilterI =\n'+str(App.Magenta.FilterI)+'\n'+
                       'M.FilterD =\n'+str(App.Magenta.FilterD)+'\n'+
                       'M.FilterIL =\n'+str(App.Magenta.FilterIL)+'\n'+      
                       'M.GuidePitch =\n'+str(App.Magenta.GuidePitch)+'\n'+
                       'M.GuidePosMax =\n'+str(App.Magenta.GuidePosMax)+'\n'+
                       'M.GuidePosMin =\n'+str(App.Magenta.GuidePosMin)+'\n'+
                       'M.GearToUI =\n'+str(App.Magenta.GearToUI)+'\n'+
                       'M.SpeedMaxForUI =\n'+str(App.Magenta.SpeedMaxForUI)+'\n'+
                       'M.RopeSWLL =\n'+str(App.Magenta.RopeSWLL)+'\n'+
                       'M.RopeDiameter =\n'+str(App.Magenta.RopeDiameter)+'\n'+
                       'M.RopeNumber =\n'+str(App.Magenta.RopeNumber)+'\n'+
                       'M.RopeLength =\n'+str(App.Magenta.RopeLength)+'\n'+
                       'Hasch = \n'+ hasch)

                self.logger.info('File '+self.Engines+'written to disk')
                file.close()
            dlg.Destroy()
        self.btAxisSetup.Enable(True)
        self.btStart.Enable(True)
        self.btPosSetup.Enable(True)
        self.btYellowSetup.Enable(True)
        self.btGreenSetup.Enable(True)
        self.btCyanSetup.Enable(True)
        self.btMagentaSetup.Enable(True)
        self.btKeyPointLoad.Enable(True)
        self.btKeyPointSave.Enable(True)
        self.btPathLoad.Enable(True)
        self.btPathSave.Enable(True)
 
 

    def OnSaveEnginesQuit(self,evt):
        self.logger.info('Quiting Save Engines Window')
        self.btAxisSetup.Enable(True)
        self.btStart.Enable(True)
        self.btPosSetup.Enable(True)
        self.btYellowSetup.Enable(True)
        self.btGreenSetup.Enable(True)
        self.btCyanSetup.Enable(True)
        self.btMagentaSetup.Enable(True)
        self.SaveEnginesWindow.Close()
        self.logger.info('Load Engines Window closed')
    def KeepAliveTask(self,task):
        App.Yellow.comunicateServer()
        App.Green.comunicateServer()
        App.Cyan.comunicateServer()
        App.Magenta.comunicateServer()

        return task.cont  
#WWW EnginesSetup Open and Save End
#WWW Point Handling Beginn----------
    #  Yellow-------------------------    
    def OnYellowSetup(self,evt):
        self.logger.info('Initialising Yellow Setup Window')
        self.btAxisSetup.Enable(False)
        self.btStart.Enable(False)
        self.btPosSetup.Enable(False)
        self.btYellowSetup.Enable(False)
        self.btGreenSetup.Enable(False)
        self.btCyanSetup.Enable(False)
        self.btMagentaSetup.Enable(False)
        self.btKeyPointLoad.Enable(False)
        self.btKeyPointSave.Enable(False)
        self.btPosMode.Enable(False)
        self.btPathLoad.Enable(False)
        self.btPathSave.Enable(False)
        self.btPathMode.Enable(False)
        
        res = xrc.XmlResource('WWLayout0-12a.xrc')
        self.YellowWindow = res.LoadFrame(self.frame,'Yellow/NW')        
        self.YellowWindow.Show()
        
        self.YellowWindow.txtYellowStatus=xrc.XRCCTRL(self.YellowWindow,'txtYellowStatus')
        self.YellowWindow.btYellowEngineInformation=xrc.XRCCTRL(self.YellowWindow,'btYellowEngineInformation')
        
        self.YellowWindow.txtYellowX=xrc.XRCCTRL(self.YellowWindow,'txtYellowX')
        self.YellowWindow.txtYellowY=xrc.XRCCTRL(self.YellowWindow,'txtYellowY')
        self.YellowWindow.txtYellowZ=xrc.XRCCTRL(self.YellowWindow,'txtYellowZ')
        self.YellowWindow.txtYellowBorderX=xrc.XRCCTRL(self.YellowWindow,'txtYellowBorderX')
        self.YellowWindow.txtYellowBorderY=xrc.XRCCTRL(self.YellowWindow,'txtYellowBorderY')
        self.YellowWindow.txtYellowBorderZ=xrc.XRCCTRL(self.YellowWindow,'txtYellowBorderZ')

        self.YellowWindow.btYellowTry = xrc.XRCCTRL(self.YellowWindow,'btSetupYellowTry')
        self.YellowWindow.btYellowSaveQuit = xrc.XRCCTRL(self.YellowWindow,'btYellowSaveQuit')
        self.YellowWindow.btYellowTry = xrc.XRCCTRL(self.YellowWindow,'btYellowQuit') 
        
        self.YellowWindow.btYellowSaveQuit.Enable(False)               
        
        self.YellowWindow.txtYellowX.SetValue(str(self.YellowX))
        self.YellowWindow.txtYellowY.SetValue(str(self.YellowY))       
        self.YellowWindow.txtYellowZ.SetValue(str(self.YellowZ))
        self.YellowWindow.txtYellowBorderX.SetValue(str(self.YellowBorderX))
        self.YellowWindow.txtYellowBorderY.SetValue(str(self.YellowBorderY))
        self.YellowWindow.txtYellowBorderZ.SetValue(str(self.YellowBorderZ))
        
        self.YellowXOld=self.YellowX
        self.YellowYOld=self.YellowY
        self.YellowZOld=self.YellowZ
        self.YellowBorderXOld=self.YellowBorderX        
        self.YellowBorderYOld=self.YellowBorderY        
        self.YellowBorderZOld=self.YellowBorderZ
               
        self.YellowWindow.Bind(wx.EVT_BUTTON, self.OnYellowEngineInformation, id=xrc.XRCID('btYellowEngineInformation'))        
        self.YellowWindow.Bind(wx.EVT_BUTTON, self.OnYellowTry, id=xrc.XRCID('btYellowTry'))
        self.YellowWindow.Bind(wx.EVT_BUTTON, self.OnYellowSaveQuit, id=xrc.XRCID('btYellowSaveQuit'))
        self.YellowWindow.Bind(wx.EVT_BUTTON, self.OnYellowExit, id=xrc.XRCID('btYellowQuit'))
        
        
        self.YellowWindow.Bind(wx.EVT_TEXT, self.OnYellowChange, self.YellowWindow.txtYellowX)
        self.YellowWindow.Bind(wx.EVT_TEXT, self.OnYellowChange, self.YellowWindow.txtYellowY)
        self.YellowWindow.Bind(wx.EVT_TEXT, self.OnYellowChange, self.YellowWindow.txtYellowZ)
        self.YellowWindow.Bind(wx.EVT_TEXT, self.OnYellowChange, self.YellowWindow.txtYellowBorderX)
        self.YellowWindow.Bind(wx.EVT_TEXT, self.OnYellowChange, self.YellowWindow.txtYellowBorderY)
        self.YellowWindow.Bind(wx.EVT_TEXT, self.OnYellowChange, self.YellowWindow.txtYellowBorderZ)
        
        self.logger.info('Yellow Setup Window Initialised')
        
    def OnYellowTry(self,event):
        
        self.YellowX = float(self.YellowWindow.txtYellowX.GetValue())
        self.YellowY = float(self.YellowWindow.txtYellowY.GetValue())
        self.YellowZ = float(self.YellowWindow.txtYellowZ.GetValue())
        self.YellowBorderX = float(self.YellowWindow.txtYellowBorderX.GetValue())        
        self.YellowBorderY = float(self.YellowWindow.txtYellowBorderY.GetValue())       
        self.YellowBorderZ = float(self.YellowWindow.txtYellowBorderZ.GetValue())
        
        self.logger.warn('Yellow Positions and Borders are TRIED with:\n\
                          YellowX = %s \n\
                          YellowY = %s \n\
                          YellowZ = %s \n\n\
                          YellowBorderX = %s \n\
                          YellowBorderY = %s \n\
                          YellowBorderZ = %s \n',self.YellowX,self.YellowY,self.YellowZ,
                                      self.YellowBorderX,self.YellowBorderY,self.YellowBorderZ)

        
        self.OnPosChange('0')
        self.YellowWindow.btYellowSaveQuit.Enable(True) 
                        
    def OnYellowSaveQuit(self,event):
        self.btAxisSetup.Enable(True)
        self.btStart.Enable(True)
        self.btPosSetup.Enable(True)
        self.btYellowSetup.Enable(True)
        self.btGreenSetup.Enable(True)
        self.btCyanSetup.Enable(True)
        self.btMagentaSetup.Enable(True)
        self.btKeyPointLoad.Enable(True)
        self.btKeyPointSave.Enable(True)
        self.btPathLoad.Enable(True)
        self.btPathSave.Enable(True)

        self.YellowWindow.Close()
        
        self.logger.warn('Yellow Positions and Borders are SET-UP with:\n\
                          YellowX = %s \n\
                          YellowY = %s \n\
                          YellowZ = %s \n\n\
                          YellowBorderX = %s \n\
                          YellowBorderY = %s \n\
                          YellowBorderZ = %s \n',self.YellowX,self.YellowY,self.YellowZ,
                                      self.YellowBorderX,self.YellowBorderY,self.YellowBorderZ)
                
    def OnYellowExit(self,event):
        self.btAxisSetup.Enable(True)
        self.btStart.Enable(True)
        self.btPosSetup.Enable(True)
        self.btYellowSetup.Enable(True)
        self.btGreenSetup.Enable(True)
        self.btCyanSetup.Enable(True)
        self.btMagentaSetup.Enable(True)
        self.btKeyPointLoad.Enable(True)
        self.btKeyPointSave.Enable(True)
        self.btPathLoad.Enable(True)
        self.btPathSave.Enable(True)
                
        self.YellowX=self.YellowXOld
        self.YellowY=self.YellowYOld
        self.YellowZ=self.YellowZOld
        self.YellowBorderX=self.YellowBorderXOld        
        self.YellowBorderY=self.YellowBorderYOld        
        self.YellowBorderZ=self.YellowBorderZOld
        self.OnPosChange('0')                
        self.YellowWindow.Close() 
        
        self.logger.warn('Yellow Positions and Borders are RESET with:\n\
                          YellowX = %s \n\
                          YellowY = %s \n\
                          YellowZ = %s \n\n\
                          YellowBorderX = %s \n\
                          YellowBorderY = %s \n\
                          YellowBorderZ = %s \n',self.YellowX,self.YellowY,self.YellowZ,
                                      self.YellowBorderX,self.YellowBorderY,self.YellowBorderZ)
    def OnYellowChange(self,event):
        self.YellowWindow.btYellowSaveQuit.Enable(False)
 
    def OnYellowEngineInformation(self,event):

        
        self.YellowEngineInformation   = YellowAxisUI(None, -1.,"Yellow Achsen Steuerung")
        self.YellowWindow.Close()      
        try:
            App.Yellow
            YellowExists=True
        except:
            YellowExists=False
        if YellowExists:
            self.YellowEngineInformation.ReadDatafromAchse()
            self.logger.debug('Yellow Axis is LOADED with properties:\n\
                       Yellow Engine Name = %s\n\
                       Yellow Engine PosHardMax = %s\n\
                       Yellow Engine PosUserMax = %s\n\
                       Yellow Engine PosUserMin = %s\n\
                       Yellow Engine PosHardMin = %s\n\
                       Yellow Engine PosWindow = %s\n\
                       Yellow Engine SpeedMax = %s\n\
                       Yellow Engine AccMax = %s\n\
                       Yellow Engine DccMax = %s\n\
                       Yellow Engine AccMove = %s\n\
                       Yellow Engine MaxAmp = %s\n\
                       Yellow Engine VelWindow = %s\n\
                       Yellow Engine FilterP = %s\n\
                       Yellow Engine FilterI = %s\n\
                       Yellow Engine FilterD = %s\n\
                       Yellow Engine FilterIL = %s\n\
                       Yellow Engine GuidePitch = %s\n\
                       Yellow Engine GuidePosMax = %s\n\
                       Yellow Engine GuidePosMin = %s\n\
                       Yellow Engine GearToUI = %s\n\
                       Yellow Engine SpeedMaxForUI = %s\n\
                       Yellow Engine RopeSWLL = %s\n\
                       Yellow Engine RopeDiameter = %s\n\
                       Yellow Engine RopeNumber = %s\n\
                       Yellow Engine RopeLength = %s\n',
                       self.Yellow.Name,self.Yellow.PosHardMax,self.Yellow.PosUserMax,self.Yellow.PosUserMin,
                       self.Yellow.PosHardMin,self.Yellow.PosWin,self.Yellow.SpeedMax,self.Yellow.AccMax,self.Yellow.DccMax,
                       self.Yellow.AccTot,self.Yellow.MaxAmp,self.Yellow.VelWin,self.Yellow.FilterP,self.Yellow.FilterI,
                       self.Yellow.FilterD,self.Yellow.FilterIL,self.Yellow.GuidePitch,self.Yellow.GuidePosMax,
                       self.Yellow.GuidePosMin,self.Yellow.GearToUI,self.Yellow.SpeedMaxForUI,
                       self.Yellow.RopeSWLL,self.Yellow.RopeDiameter,self.Yellow.RopeNumber,
                       self.Yellow.RopeLength)
            
            #self.YellowEngineInformation.ResetAxis()
            self.YellowEngineInformation.AxisReadJoystick()
        else:
            self.logger.warn('Object Yellow Axis is initialised')
        self.YellowEngineInformation.Show(True)   
        self.SetTopWindow(self.YellowEngineInformation)
        self.YellowEngineInformation.Bind(wx.EVT_CLOSE, self.OnYellowEngineQuit)

    def OnYellowEngineQuit(self,event):
                
        self.btAxisSetup.Enable(True)
        self.btStart.Enable(True)
        self.btPosSetup.Enable(True)
        self.btYellowSetup.Enable(True)
        self.btGreenSetup.Enable(True)
        self.btCyanSetup.Enable(True)
        self.btMagentaSetup.Enable(True)
       
        
        self.YellowEngineInformation.LoadFromFileQuit()        
        App.Yellow.LTold              = App.Yellow.LTold
        App.Yellow.Modus              = 'r'
        App.Yellow.OwnPID             = 0
        App.Yellow.ControlingPIDTx    = 0
        App.Yellow.Intent             = 0
        App.Yellow.Enable             = 0
        App.Yellow.GuideControl       = 5
        App.Yellow.SpeedSoll          = 0
        App.Yellow.GuideSpeedSoll     = 0
        
        self.YellowEngineInformation.Destroy()
        self.logger.debug('Yellow Axis is LOADED with properties:\n\
                   Yellow Engine Name = %s\n\
                   Yellow Engine PosHardMax = %s\n\
                   Yellow Engine PosUserMax = %s\n\
                   Yellow Engine PosUserMin = %s\n\
                   Yellow Engine PosHardMin = %s\n\
                   Yellow Engine PosWindow = %s\n\
                   Yellow Engine SpeedMax = %s\n\
                   Yellow Engine AccMax = %s\n\
                   Yellow Engine DccMax = %s\n\
                   Yellow Engine AccMove = %s\n\
                   Yellow Engine MaxAmp = %s\n\
                   Yellow Engine VelWindow = %s\n\
                   Yellow Engine FilterP = %s\n\
                   Yellow Engine FilterI = %s\n\
                   Yellow Engine FilterD = %s\n\
                   Yellow Engine FilterIL = %s\n\
                   Yellow Engine GuidePitch = %s\n\
                   Yellow Engine GuidePosMax = %s\n\
                   Yellow Engine GuidePosMin = %s\n\
                   Yellow Engine GearToUI = %s\n\
                   Yellow Engine SpeedMaxForUI = %s\n\
                   Yellow Engine RopeSWLL = %s\n\
                   Yellow Engine RopeDiameter = %s\n\
                   Yellow Engine RopeNumber = %s\n\
                   Yellow Engine RopeLength = %s\n',
                   self.Yellow.Name,self.Yellow.PosHardMax,self.Yellow.PosUserMax,self.Yellow.PosUserMin,
                   self.Yellow.PosHardMin,self.Yellow.PosWin,self.Yellow.SpeedMax,self.Yellow.AccMax,self.Yellow.DccMax,
                   self.Yellow.AccTot,self.Yellow.MaxAmp,self.Yellow.VelWin,self.Yellow.FilterP,self.Yellow.FilterI,
                   self.Yellow.FilterD,self.Yellow.FilterIL,self.Yellow.GuidePitch,self.Yellow.GuidePosMax,
                   self.Yellow.GuidePosMin,self.Yellow.GearToUI,self.Yellow.SpeedMaxForUI,
                   self.Yellow.RopeSWLL,self.Yellow.RopeDiameter,self.Yellow.RopeNumber,
                   self.Yellow.RopeLength)
            
            
        self.ctrlYellowName.SetValue(App.Yellow.Name)
        self.ctrlYellowStatus.SetValue(App.Yellow.Status )
        self.ctrlYellowVel.SetValue(App.Yellow.SpeedIstUI)
        self.ctrlYellowForce.SetValue(App.Yellow.ActCurUI)
        self.ctrlYellowLength.SetValue(App.Yellow.PosIst)
        
        self.logger.warn('Yellow Engine Setup quits with:\n\
                         Yellow Engine Name = %s \n\
                         Yellow Engine Status = %s \n\
                         Yellow Engine Length = %s \n',
                         self.Yellow.Name,self.Yellow.Status,self.Yellow.PosIst)


                             
 
    #  End Yellow--------------------
 
    #  Green-------------------------    
    def OnGreenSetup(self,evt):
        self.logger.info('Initialising Green Setup Window')
        self.btAxisSetup.Enable(False)
        self.btStart.Enable(False)
        self.btPosSetup.Enable(False)
        self.btYellowSetup.Enable(False)
        self.btGreenSetup.Enable(False)
        self.btCyanSetup.Enable(False)
        self.btMagentaSetup.Enable(False)
        self.btKeyPointLoad.Enable(False)
        self.btKeyPointSave.Enable(False)
        self.btPosMode.Enable(False)
        self.btPathLoad.Enable(False)
        self.btPathSave.Enable(False)
        self.btPathMode.Enable(False)
        
        res = xrc.XmlResource('WWLayout0-12a.xrc')
        self.GreenWindow = res.LoadFrame(self.frame,'Green/SW')        
        self.GreenWindow.Show()

        self.GreenWindow.txtGreenStatus=xrc.XRCCTRL(self.GreenWindow,'txtGreenStatus')
        self.GreenWindow.btGreenEngineInformation=xrc.XRCCTRL(self.GreenWindow,'btGreenEngineInformation')
        
        self.GreenWindow.txtGreenX=xrc.XRCCTRL(self.GreenWindow,'txtGreenX')
        self.GreenWindow.txtGreenY=xrc.XRCCTRL(self.GreenWindow,'txtGreenY')
        self.GreenWindow.txtGreenZ=xrc.XRCCTRL(self.GreenWindow,'txtGreenZ')
        self.GreenWindow.txtGreenBorderX=xrc.XRCCTRL(self.GreenWindow,'txtGreenBorderX')
        self.GreenWindow.txtGreenBorderY=xrc.XRCCTRL(self.GreenWindow,'txtGreenBorderY')
        self.GreenWindow.txtGreenBorderZ=xrc.XRCCTRL(self.GreenWindow,'txtGreenBorderZ')

        self.GreenWindow.btGreenTry = xrc.XRCCTRL(self.GreenWindow,'btSetupGreenTry')
        self.GreenWindow.btGreenSaveQuit = xrc.XRCCTRL(self.GreenWindow,'btGreenSaveQuit')
        self.GreenWindow.btGreenTry = xrc.XRCCTRL(self.GreenWindow,'btGreenQuit') 
        
        self.GreenWindow.btGreenSaveQuit.Enable(False)               
        
        self.GreenWindow.txtGreenX.SetValue(str(self.GreenX))
        self.GreenWindow.txtGreenY.SetValue(str(self.GreenY))       
        self.GreenWindow.txtGreenZ.SetValue(str(self.GreenZ))
        self.GreenWindow.txtGreenBorderX.SetValue(str(self.GreenBorderX))
        self.GreenWindow.txtGreenBorderY.SetValue(str(self.GreenBorderY))
        self.GreenWindow.txtGreenBorderZ.SetValue(str(self.GreenBorderZ))
        
        self.GreenXOld=self.GreenX
        self.GreenYOld=self.GreenY
        self.GreenZOld=self.GreenZ
        self.GreenBorderXOld=self.GreenBorderX        
        self.GreenBorderYOld=self.GreenBorderY        
        self.GreenBorderZOld=self.GreenBorderZ       

        self.GreenWindow.Bind(wx.EVT_BUTTON, self.OnGreenEngineInformation, id=xrc.XRCID('btGreenEngineInformation'))         
        self.GreenWindow.Bind(wx.EVT_BUTTON, self.OnGreenTry, id=xrc.XRCID('btGreenTry'))
        self.GreenWindow.Bind(wx.EVT_BUTTON, self.OnGreenSaveQuit, id=xrc.XRCID('btGreenSaveQuit'))
        self.GreenWindow.Bind(wx.EVT_BUTTON, self.OnGreenExit, id=xrc.XRCID('btGreenQuit'))
        
        
        self.GreenWindow.Bind(wx.EVT_TEXT, self.OnGreenChange, self.GreenWindow.txtGreenX)
        self.GreenWindow.Bind(wx.EVT_TEXT, self.OnGreenChange, self.GreenWindow.txtGreenY)
        self.GreenWindow.Bind(wx.EVT_TEXT, self.OnGreenChange, self.GreenWindow.txtGreenZ)
        self.GreenWindow.Bind(wx.EVT_TEXT, self.OnGreenChange, self.GreenWindow.txtGreenBorderX)
        self.GreenWindow.Bind(wx.EVT_TEXT, self.OnGreenChange, self.GreenWindow.txtGreenBorderY)
        self.GreenWindow.Bind(wx.EVT_TEXT, self.OnGreenChange, self.GreenWindow.txtGreenBorderZ)
        
        self.logger.info('Green Setup Window Initialised')
        
    def OnGreenTry(self,event):
        ##print('GreenTry')
        
        self.GreenX = float(self.GreenWindow.txtGreenX.GetValue())
        self.GreenY = float(self.GreenWindow.txtGreenY.GetValue())
        self.GreenZ = float(self.GreenWindow.txtGreenZ.GetValue())
        self.GreenBorderX = float(self.GreenWindow.txtGreenBorderX.GetValue())        
        self.GreenBorderY = float(self.GreenWindow.txtGreenBorderY.GetValue())       
        self.GreenBorderZ = float(self.GreenWindow.txtGreenBorderZ.GetValue())
        
        self.logger.warn('GreenPositions and Borders are TRIED with:\n\
                          GreenX = %s \n\
                          GreenY = %s \n\
                          GreenZ = %s \n\n\
                          GreenBorderX = %s \n\
                          GreenBorderY = %s \n\
                          GreenBorderZ = %s \n',self.GreenX,self.GreenY,self.GreenZ,
                                      self.GreenBorderX,self.GreenBorderY,self.GreenBorderZ,)
        
        self.OnPosChange('0')
        self.GreenWindow.btGreenSaveQuit.Enable(True) 
                        
    def OnGreenSaveQuit(self,event):
        self.btAxisSetup.Enable(True)
        self.btStart.Enable(True)
        self.btPosSetup.Enable(True)
        self.btYellowSetup.Enable(True)
        self.btGreenSetup.Enable(True)
        self.btCyanSetup.Enable(True)
        self.btMagentaSetup.Enable(True)
        self.btKeyPointLoad.Enable(True)
        self.btKeyPointSave.Enable(True)
        self.btPathLoad.Enable(True)
        self.btPathSave.Enable(True)
        self.GreenWindow.Close()
        
        self.logger.warn('GreenPositions and Borders are SET-UP with:\n\
                          GreenX = %s \n\
                          GreenY = %s \n\
                          GreenZ = %s \n\n\
                          GreenBorderX = %s \n\
                          GreenBorderY = %s \n\
                          GreenBorderZ = %s \n',self.GreenX,self.GreenY,self.GreenZ,
                                      self.GreenBorderX,self.GreenBorderY,self.GreenBorderZ,)
                
    def OnGreenExit(self,event):
        self.btAxisSetup.Enable(True)
        self.btStart.Enable(True)
        self.btPosSetup.Enable(True)
        self.btYellowSetup.Enable(True)
        self.btGreenSetup.Enable(True)
        self.btCyanSetup.Enable(True)
        self.btMagentaSetup.Enable(True)
        self.btKeyPointLoad.Enable(True)
        self.btKeyPointSave.Enable(True)
        self.btPathLoad.Enable(True)
        self.btPathSave.Enable(True)
        
        self.GreenX=self.GreenXOld
        self.GreenY=self.GreenYOld
        self.GreenZ=self.GreenZOld
        self.GreenBorderX=self.GreenBorderXOld        
        self.GreenBorderY=self.GreenBorderYOld        
        self.GreenBorderZ=self.GreenBorderZOld
        self.OnPosChange('0')                
        self.GreenWindow.Close()         
    def OnGreenChange(self,event):
        self.GreenWindow.btGreenSaveQuit.Enable(False)
    
    
    def OnGreenEngineInformation(self,event):

        
        self.GreenEngineInformation = GreenAxisUI(None, -1.,"Green Achsen Steuerung")
        self.GreenWindow.Close()
        
        try:
            App.Green
            GreenExists=True
        except:
            GreenExists=False
        if GreenExists:
            self.GreenEngineInformation.ReadDatafromAchse()
            self.logger.debug('Green Axis is LOADED with properties:\n\
                       Green Engine Name = %s\n\
                       Green Engine PosHardMax = %s\n\
                       Green Engine PosUserMax = %s\n\
                       Green Engine PosUserMin = %s\n\
                       Green Engine PosHardMin = %s\n\
                       Green Engine PosWindow = %s\n\
                       Green Engine SpeedMax = %s\n\
                       Green Engine AccMax = %s\n\
                       Green Engine DccMax = %s\n\
                       Green Engine AccMove = %s\n\
                       Green Engine MaxAmp = %s\n\
                       Green Engine VelWindow = %s\n\
                       Green Engine FilterP = %s\n\
                       Green Engine FilterI = %s\n\
                       Green Engine FilterD = %s\n\
                       Green Engine FilterIL = %s\n\
                       Green Engine GuidePitch = %s\n\
                       Green Engine GuidePosMax = %s\n\
                       Green Engine GuidePosMin = %s\n\
                       Green Engine GearToUI = %s\n\
                       Green Engine SpeedMaxForUI = %s\n\
                       Green Engine RopeSWLL = %s\n\
                       Green Engine RopeDiameter = %s\n\
                       Green Engine RopeNumber = %s\n\
                       Green Engine RopeLength = %s\n',
                       self.Green.Name,self.Green.PosHardMax,self.Green.PosUserMax,self.Green.PosUserMin,
                       self.Green.PosHardMin,self.Green.PosWin,self.Green.SpeedMax,self.Green.AccMax,self.Green.DccMax,
                       self.Green.AccTot,self.Green.MaxAmp,self.Green.VelWin,self.Green.FilterP,self.Green.FilterI,
                       self.Green.FilterD,self.Green.FilterIL,self.Green.GuidePitch,self.Green.GuidePosMax,
                       self.Green.GuidePosMin,self.Green.GearToUI,self.Green.SpeedMaxForUI,
                       self.Green.RopeSWLL,self.Green.RopeDiameter,self.Green.RopeNumber,
                       self.Green.RopeLength)
            
            #self.GreenEngineInformation.ResetAxis()
            self.GreenEngineInformation.AxisReadJoystick()
        else:
            self.logger.warn('Object Green Axis is initialised')
        
        self.GreenEngineInformation.Show(True)
        self.SetTopWindow(self.GreenEngineInformation)
        self.GreenEngineInformation.Bind(wx.EVT_CLOSE, self.OnGreenEngineQuit)
    def OnGreenEngineQuit(self,event):
        
        self.btAxisSetup.Enable(True)
        self.btStart.Enable(True)
        self.btPosSetup.Enable(True)
        self.btYellowSetup.Enable(True)
        self.btGreenSetup.Enable(True)
        self.btCyanSetup.Enable(True)
        self.btMagentaSetup.Enable(True)
         

        self.GreenEngineInformation.LoadFromFileQuit()        
        App.Green.LTold              = App.Green.LTold
        App.Green.Modus              = 'r'
        App.Green.OwnPID             = 0
        App.Green.ControlingPIDTx    = 0
        App.Green.Intent             = 0
        App.Green.Enable             = 0
        App.Green.GuideControl       = 5
        App.Green.SpeedSoll          = 0
        App.Green.GuideSpeedSoll     = 0

        self.GreenEngineInformation.Destroy()
        self.logger.debug('Green Axis is LOADED with properties:\n\
                   Green Engine Name = %s\n\
                   Green Engine PosHardMax = %s\n\
                   Green Engine PosUserMax = %s\n\
                   Green Engine PosUserMin = %s\n\
                   Green Engine PosHardMin = %s\n\
                   Green Engine PosWindow = %s\n\
                   Green Engine SpeedMax = %s\n\
                   Green Engine AccMax = %s\n\
                   Green Engine DccMax = %s\n\
                   Green Engine AccMove = %s\n\
                   Green Engine MaxAmp = %s\n\
                   Green Engine VelWindow = %s\n\
                   Green Engine FilterP = %s\n\
                   Green Engine FilterI = %s\n\
                   Green Engine FilterD = %s\n\
                   Green Engine FilterIL = %s\n\
                   Green Engine GuidePitch = %s\n\
                   Green Engine GuidePosMax = %s\n\
                   Green Engine GuidePosMin = %s\n\
                   Green Engine GearToUI = %s\n\
                   Green Engine SpeedMaxForUI = %s\n\
                   Green Engine RopeSWLL = %s\n\
                   Green Engine RopeDiameter = %s\n\
                   Green Engine RopeNumber = %s\n\
                   Green Engine RopeLength = %s\n',
                   self.Green.Name,self.Green.PosHardMax,self.Green.PosUserMax,self.Green.PosUserMin,
                   self.Green.PosHardMin,self.Green.PosWin,self.Green.SpeedMax,self.Green.AccMax,self.Green.DccMax,
                   self.Green.AccTot,self.Green.MaxAmp,self.Green.VelWin,self.Green.FilterP,self.Green.FilterI,
                   self.Green.FilterD,self.Green.FilterIL,self.Green.GuidePitch,self.Green.GuidePosMax,
                   self.Green.GuidePosMin,self.Green.GearToUI,self.Green.SpeedMaxForUI,
                   self.Green.RopeSWLL,self.Green.RopeDiameter,self.Green.RopeNumber,
                   self.Green.RopeLength)
        
                          
        self.ctrlGreenName.SetValue(App.Green.Name)
        self.ctrlGreenStatus.SetValue(App.Green.Status )
        self.ctrlGreenVel.SetValue(App.Green.SpeedIstUI)
        self.ctrlGreenForce.SetValue(App.Green.ActCurUI)
        self.ctrlGreenLength.SetValue(App.Green.PosIst)
        
        self.logger.warn('Green Engine Setup quits with:\n\
                         Green Engine Name = %s \n\
                         Green Engine Status = %s \n\
                         Green Engine Length = %s \n',
                         self.Green.Name,self.Green.Status,self.Green.PosIst)




                
    #  End Green---------------------
 
    #  Cyan--------------------------   
    def OnCyanSetup(self,evt):
        self.logger.info('Initialising Cyan Setup Window')
        self.btAxisSetup.Enable(False)
        self.btStart.Enable(False)
        self.btPosSetup.Enable(False)
        self.btYellowSetup.Enable(False)
        self.btGreenSetup.Enable(False)
        self.btCyanSetup.Enable(False)
        self.btMagentaSetup.Enable(False)
        self.btKeyPointLoad.Enable(False)
        self.btKeyPointSave.Enable(False)
        self.btPosMode.Enable(False)
        self.btPathLoad.Enable(False)
        self.btPathSave.Enable(False)
        self.btPathMode.Enable(False)
        
        res = xrc.XmlResource('WWLayout0-12a.xrc')
        self.CyanWindow = res.LoadFrame(self.frame,'Cyan/NE')        
        self.CyanWindow.Show()
        
        self.CyanWindow.txtCyanStatus=xrc.XRCCTRL(self.CyanWindow,'txtCyanStatus')
        self.CyanWindow.btCyanEngineInformation=xrc.XRCCTRL(self.CyanWindow,'btCyanEngineInformation')
        
        
        self.CyanWindow.txtCyanX=xrc.XRCCTRL(self.CyanWindow,'txtCyanX')
        self.CyanWindow.txtCyanY=xrc.XRCCTRL(self.CyanWindow,'txtCyanY')
        self.CyanWindow.txtCyanZ=xrc.XRCCTRL(self.CyanWindow,'txtCyanZ')
        self.CyanWindow.txtCyanBorderX=xrc.XRCCTRL(self.CyanWindow,'txtCyanBorderX')
        self.CyanWindow.txtCyanBorderY=xrc.XRCCTRL(self.CyanWindow,'txtCyanBorderY')
        self.CyanWindow.txtCyanBorderZ=xrc.XRCCTRL(self.CyanWindow,'txtCyanBorderZ')

        self.CyanWindow.btCyanTry = xrc.XRCCTRL(self.CyanWindow,'btSetupCyanTry')
        self.CyanWindow.btCyanSaveQuit = xrc.XRCCTRL(self.CyanWindow,'btCyanSaveQuit')
        self.CyanWindow.btCyanTry = xrc.XRCCTRL(self.CyanWindow,'btCyanQuit') 
        
        self.CyanWindow.btCyanSaveQuit.Enable(False)               
        
        self.CyanWindow.txtCyanX.SetValue(str(self.CyanX))
        self.CyanWindow.txtCyanY.SetValue(str(self.CyanY))       
        self.CyanWindow.txtCyanZ.SetValue(str(self.CyanZ))
        self.CyanWindow.txtCyanBorderX.SetValue(str(self.CyanBorderX))
        self.CyanWindow.txtCyanBorderY.SetValue(str(self.CyanBorderY))
        self.CyanWindow.txtCyanBorderZ.SetValue(str(self.CyanBorderZ))
        
        self.CyanXOld=self.CyanX
        self.CyanYOld=self.CyanY
        self.CyanZOld=self.CyanZ
        self.CyanBorderXOld=self.CyanBorderX        
        self.CyanBorderYOld=self.CyanBorderY        
        self.CyanBorderZOld=self.CyanBorderZ       

        self.CyanWindow.Bind(wx.EVT_BUTTON, self.OnCyanEngineInformation, id=xrc.XRCID('btCyanEngineInformation'))        
        self.CyanWindow.Bind(wx.EVT_BUTTON, self.OnCyanTry, id=xrc.XRCID('btCyanTry'))
        self.CyanWindow.Bind(wx.EVT_BUTTON, self.OnCyanSaveQuit, id=xrc.XRCID('btCyanSaveQuit'))
        self.CyanWindow.Bind(wx.EVT_BUTTON, self.OnCyanExit, id=xrc.XRCID('btCyanQuit'))
        
        
        self.CyanWindow.Bind(wx.EVT_TEXT, self.OnCyanChange, self.CyanWindow.txtCyanX)
        self.CyanWindow.Bind(wx.EVT_TEXT, self.OnCyanChange, self.CyanWindow.txtCyanY)
        self.CyanWindow.Bind(wx.EVT_TEXT, self.OnCyanChange, self.CyanWindow.txtCyanZ)
        self.CyanWindow.Bind(wx.EVT_TEXT, self.OnCyanChange, self.CyanWindow.txtCyanBorderX)
        self.CyanWindow.Bind(wx.EVT_TEXT, self.OnCyanChange, self.CyanWindow.txtCyanBorderY)
        self.CyanWindow.Bind(wx.EVT_TEXT, self.OnCyanChange, self.CyanWindow.txtCyanBorderZ)
        
        self.logger.info('Cyan Setup Window Initialised')
        
    def OnCyanTry(self,event):
        ##print('CyanTry')
        
        self.CyanX = float(self.CyanWindow.txtCyanX.GetValue())
        self.CyanY = float(self.CyanWindow.txtCyanY.GetValue())
        self.CyanZ = float(self.CyanWindow.txtCyanZ.GetValue())
        self.CyanBorderX = float(self.CyanWindow.txtCyanBorderX.GetValue())        
        self.CyanBorderY = float(self.CyanWindow.txtCyanBorderY.GetValue())       
        self.CyanBorderZ = float(self.CyanWindow.txtCyanBorderZ.GetValue())
        
        self.logger.warn('Cyan Positions and Borders are TRIED with:\n\
                           CyanX = %s \n\
                           CyanY = %s \n\
                           CyanZ = %s \n\n\
                           CyanBorderX = %s \n\
                           CyanBorderY = %s \n\
                           CyanBorderZ = %s \n',self.CyanX,self.CyanY,self.CyanZ,
                                      self.CyanBorderX,self.CyanBorderY,self.CyanBorderZ)

        
        self.OnPosChange('0')
        self.CyanWindow.btCyanSaveQuit.Enable(True) 
                        
    def OnCyanSaveQuit(self,event):
        self.btAxisSetup.Enable(True)
        self.btStart.Enable(True)
        self.btPosSetup.Enable(True)
        self.btYellowSetup.Enable(True)
        self.btGreenSetup.Enable(True)
        self.btCyanSetup.Enable(True)
        self.btMagentaSetup.Enable(True)
        self.btKeyPointLoad.Enable(True)
        self.btKeyPointSave.Enable(True)
        self.btPathLoad.Enable(True)
        self.btPathSave.Enable(True)
        self.CyanWindow.Close()
        
        self.logger.warn('Cyan Positions and Borders are SET-UP with:\n\
                           CyanX = %s \n\
                           CyanY = %s \n\
                           CyanZ = %s \n\n\
                           CyanBorderX = %s \n\
                           CyanBorderY = %s \n\
                           CyanBorderZ = %s \n',self.CyanX,self.CyanY,self.CyanZ,
                                      self.CyanBorderX,self.CyanBorderY,self.CyanBorderZ)

                
    def OnCyanExit(self,event):
        self.btAxisSetup.Enable(True)
        self.btStart.Enable(True)
        self.btPosSetup.Enable(True)
        self.btYellowSetup.Enable(True)
        self.btGreenSetup.Enable(True)
        self.btCyanSetup.Enable(True)
        self.btMagentaSetup.Enable(True)
        self.btKeyPointLoad.Enable(True)
        self.btKeyPointSave.Enable(True)
        self.btPathLoad.Enable(True)
        self.btPathSave.Enable(True)
                
        self.CyanX=self.CyanXOld
        self.CyanY=self.CyanYOld
        self.CyanZ=self.CyanZOld
        self.CyanBorderX=self.CyanBorderXOld        
        self.CyanBorderY=self.CyanBorderYOld        
        self.CyanBorderZ=self.CyanBorderZOld
        self.OnPosChange('0')                
        self.CyanWindow.Close()

        self.logger.warn('Cyan Positions and Borders are RESET with:\n\
                           CyanX = %s \n\
                           CyanY = %s \n\
                           CyanZ = %s \n\n\
                           CyanBorderX = %s \n\
                           CyanBorderY = %s \n\
                           CyanBorderZ = %s \n',self.CyanX,self.CyanY,self.CyanZ,
                                      self.CyanBorderX,self.CyanBorderY,self.CyanBorderZ)
    def OnCyanChange(self,event):
        self.CyanWindow.btCyanSaveQuit.Enable(False)
 
    def OnCyanEngineInformation(self,event):
        self.CyanEngineInformation   = CyanAxisUI(None, -1.,"Cyan Achsen Steuerung")
        self.CyanWindow.Close()
        
        try:
            App.Cyan
            CyanExists=True
        except:
            CyanExists=False
        if CyanExists:
            self.CyanEngineInformation.ReadDatafromAchse()
            self.logger.debug('Cyan Axis is LOADED with properties:\n\
                       Cyan Engine Name = %s\n\
                       Cyan Engine PosHardMax = %s\n\
                       Cyan Engine PosUserMax = %s\n\
                       Cyan Engine PosUserMin = %s\n\
                       Cyan Engine PosHardMin = %s\n\
                       Cyan Engine PosWindow = %s\n\
                       Cyan Engine SpeedMax = %s\n\
                       Cyan Engine AccMax = %s\n\
                       Cyan Engine DccMax = %s\n\
                       Cyan Engine AccMove = %s\n\
                       Cyan Engine MaxAmp = %s\n\
                       Cyan Engine VelWindow = %s\n\
                       Cyan Engine FilterP = %s\n\
                       Cyan Engine FilterI = %s\n\
                       Cyan Engine FilterD = %s\n\
                       Cyan Engine FilterIL = %s\n\
                       Cyan Engine GuidePitch = %s\n\
                       Cyan Engine GuidePosMax = %s\n\
                       Cyan Engine GuidePosMin = %s\n\
                       Cyan Engine GearToUI = %s\n\
                       Cyan Engine SpeedMaxForUI = %s\n\
                       Cyan Engine RopeSWLL = %s\n\
                       Cyan Engine RopeDiameter = %s\n\
                       Cyan Engine RopeNumber = %s\n\
                       Cyan Engine RopeLength = %s\n',
                       self.Cyan.Name,self.Cyan.PosHardMax,self.Cyan.PosUserMax,self.Cyan.PosUserMin,
                       self.Cyan.PosHardMin,self.Cyan.PosWin,self.Cyan.SpeedMax,self.Cyan.AccMax,self.Cyan.DccMax,self.Cyan.AccTot,
                       self.Cyan.MaxAmp,self.Cyan.VelWin,self.Cyan.FilterP,self.Cyan.FilterI,
                       self.Cyan.FilterD,self.Green.FilterIL,self.Green.GuidePitch,self.Green.GuidePosMax,
                       self.Cyan.GuidePosMin,self.Cyan.GearToUI,self.Cyan.SpeedMaxForUI,
                       self.Cyan.RopeSWLL,self.Cyan.RopeDiameter,self.Cyan.RopeNumber,
                       self.Cyan.RopeLength)
            
            #self.CyanEngineInformation.ResetAxis()
            self.CyanEngineInformation.AxisReadJoystick()
        else:
            self.logger.warn('Object Cyan Axis is initialised')
        self.CyanEngineInformation.Show(True)
        self.SetTopWindow(self.CyanEngineInformation)
        self.CyanEngineInformation.Bind(wx.EVT_CLOSE, self.OnCyanEngineQuit)

    def OnCyanEngineQuit(self,event):
        self.btAxisSetup.Enable(True)
        self.btStart.Enable(True)
        self.btPosSetup.Enable(True)
        self.btYellowSetup.Enable(True)
        self.btGreenSetup.Enable(True)
        self.btCyanSetup.Enable(True)
        self.btMagentaSetup.Enable(True)        
        
        self.CyanEngineInformation.LoadFromFileQuit()        
        self.Cyan.LTold              = self.Cyan.LTold
        self.Cyan.Modus              = 'r'
        self.Cyan.OwnPID             = 0
        self.Cyan.ControlingPIDTx    = 0
        self.Cyan.Intent             = 0
        self.Cyan.Enable             = 0
        self.Cyan.GuideControl       = 5
        self.Cyan.SpeedSoll          = 0
        self.Cyan.GuideSpeedSoll     = 0
        
        self.CyanEngineInformation.Destroy()
        
        self.logger.debug('Cyan Axis is LOADED with properties:\n\
                   Cyan Engine Name = %s\n\
                   Cyan Engine PosHardMax = %s\n\
                   Cyan Engine PosUserMax = %s\n\
                   Cyan Engine PosUserMin = %s\n\
                   Cyan Engine PosHardMin = %s\n\
                   Cyan Engine PosWindow = %s\n\
                   Cyan Engine SpeedMax = %s\n\
                   Cyan Engine AccMax = %s\n\
                   Cyan Engine DccMax = %s\n\
                   Cyan Engine AccMove = %s\n\
                   Cyan Engine MaxAmp = %s\n\
                   Cyan Engine VelWindow = %s\n\
                   Cyan Engine FilterP = %s\n\
                   Cyan Engine FilterI = %s\n\
                   Cyan Engine FilterD = %s\n\
                   Cyan Engine FilterIL = %s\n\
                   Cyan Engine GuidePitch = %s\n\
                   Cyan Engine GuidePosMax = %s\n\
                   Cyan Engine GuidePosMin = %s\n\
                   Cyan Engine GearToUI = %s\n\
                   Cyan Engine SpeedMaxForUI = %s\n\
                   Cyan Engine RopeSWLL = %s\n\
                   Cyan Engine RopeDiameter = %s\n\
                   Cyan Engine RopeNumber = %s\n\
                   Cyan Engine RopeLength = %s\n',
                   self.Cyan.Name,self.Cyan.PosHardMax,self.Cyan.PosUserMax,self.Cyan.PosUserMin,
                   self.Cyan.PosHardMin,self.Cyan.PosWin,self.Cyan.SpeedMax,self.Cyan.AccMax,self.Cyan.DccMax,self.Cyan.AccTot,
                   self.Cyan.MaxAmp,self.Cyan.VelWin,self.Cyan.FilterP,self.Cyan.FilterI,
                   self.Cyan.FilterD,self.Green.FilterIL,self.Green.GuidePitch,self.Green.GuidePosMax,
                   self.Cyan.GuidePosMin,self.Cyan.GearToUI,self.Cyan.SpeedMaxForUI,
                   self.Cyan.RopeSWLL,self.Cyan.RopeDiameter,self.Cyan.RopeNumber,
                   self.Cyan.RopeLength)
        
        
        self.ctrlCyanName.SetValue(App.Cyan.Name)
        self.ctrlCyanStatus.SetValue(App.Cyan.Status )
        self.ctrlCyanVel.SetValue(App.Cyan.SpeedIstUI)
        self.ctrlCyanForce.SetValue(App.Cyan.ActCurUI)
        self.ctrlCyanLength.SetValue(App.Cyan.PosIst)
        
        self.logger.warn(' Engine Setup quits with:\n\
                         Cyan Engine Name = %s \n\
                         Cyan Engine Status = %s \n\
                         Cyan Engine Length = %s \n',
                         self.Cyan.Name,self.Cyan.Status,self.Cyan.PosIst)
    # End Cyan----------------------
 
    #  Magenta----------------------  
    def OnMagentaSetup(self,evt):
        self.logger.info('Initialising Magenta Setup Window')
        self.btAxisSetup.Enable(False)
        self.btStart.Enable(False)
        self.btPosSetup.Enable(False)
        self.btYellowSetup.Enable(False)
        self.btGreenSetup.Enable(False)
        self.btCyanSetup.Enable(False)
        self.btMagentaSetup.Enable(False)
        self.btKeyPointLoad.Enable(False)
        self.btKeyPointSave.Enable(False)
        self.btPosMode.Enable(False)
        self.btPathLoad.Enable(False)
        self.btPathSave.Enable(False)
        self.btPathMode.Enable(False)
        
        res = xrc.XmlResource('WWLayout0-12a.xrc')
        self.MagentaWindow = res.LoadFrame(self.frame,'Magenta/SE')        
        self.MagentaWindow.Show()
        
        self.MagentaWindow.txtMagentaStatus=xrc.XRCCTRL(self.MagentaWindow,'txtMagentaStatus')
        self.MagentaWindow.btMagentaEngineInformation=xrc.XRCCTRL(self.MagentaWindow,'btMagentaEngineInformation')
        
        self.MagentaWindow.txtMagentaX=xrc.XRCCTRL(self.MagentaWindow,'txtMagentaX')
        self.MagentaWindow.txtMagentaY=xrc.XRCCTRL(self.MagentaWindow,'txtMagentaY')
        self.MagentaWindow.txtMagentaZ=xrc.XRCCTRL(self.MagentaWindow,'txtMagentaZ')
        self.MagentaWindow.txtMagentaBorderX=xrc.XRCCTRL(self.MagentaWindow,'txtMagentaBorderX')
        self.MagentaWindow.txtMagentaBorderY=xrc.XRCCTRL(self.MagentaWindow,'txtMagentaBorderY')
        self.MagentaWindow.txtMagentaBorderZ=xrc.XRCCTRL(self.MagentaWindow,'txtMagentaBorderZ')

        self.MagentaWindow.btMagentaTry = xrc.XRCCTRL(self.MagentaWindow,'btSetupMagentaTry')
        self.MagentaWindow.btMagentaSaveQuit = xrc.XRCCTRL(self.MagentaWindow,'btMagentaSaveQuit')
        self.MagentaWindow.btMagentaTry = xrc.XRCCTRL(self.MagentaWindow,'btMagentaQuit') 
        
        self.MagentaWindow.btMagentaSaveQuit.Enable(False)               
        
        self.MagentaWindow.txtMagentaX.SetValue(str(self.MagentaX))
        self.MagentaWindow.txtMagentaY.SetValue(str(self.MagentaY))       
        self.MagentaWindow.txtMagentaZ.SetValue(str(self.MagentaZ))
        self.MagentaWindow.txtMagentaBorderX.SetValue(str(self.MagentaBorderX))
        self.MagentaWindow.txtMagentaBorderY.SetValue(str(self.MagentaBorderY))
        self.MagentaWindow.txtMagentaBorderZ.SetValue(str(self.MagentaBorderZ))
        
        self.MagentaXOld=self.MagentaX
        self.MagentaYOld=self.MagentaY
        self.MagentaZOld=self.MagentaZ
        self.MagentaBorderXOld=self.MagentaBorderX        
        self.MagentaBorderYOld=self.MagentaBorderY        
        self.MagentaBorderZOld=self.MagentaBorderZ       

        self.MagentaWindow.Bind(wx.EVT_BUTTON, self.OnMagentaEngineInformation, id=xrc.XRCID('btMagentaEngineInformation'))         
        self.MagentaWindow.Bind(wx.EVT_BUTTON, self.OnMagentaTry, id=xrc.XRCID('btMagentaTry'))
        self.MagentaWindow.Bind(wx.EVT_BUTTON, self.OnMagentaSaveQuit, id=xrc.XRCID('btMagentaSaveQuit'))
        self.MagentaWindow.Bind(wx.EVT_BUTTON, self.OnMagentaExit, id=xrc.XRCID('btMagentaQuit'))
        
        
        self.MagentaWindow.Bind(wx.EVT_TEXT, self.OnMagentaChange, self.MagentaWindow.txtMagentaX)
        self.MagentaWindow.Bind(wx.EVT_TEXT, self.OnMagentaChange, self.MagentaWindow.txtMagentaY)
        self.MagentaWindow.Bind(wx.EVT_TEXT, self.OnMagentaChange, self.MagentaWindow.txtMagentaZ)
        self.MagentaWindow.Bind(wx.EVT_TEXT, self.OnMagentaChange, self.MagentaWindow.txtMagentaBorderX)
        self.MagentaWindow.Bind(wx.EVT_TEXT, self.OnMagentaChange, self.MagentaWindow.txtMagentaBorderY)
        self.MagentaWindow.Bind(wx.EVT_TEXT, self.OnMagentaChange, self.MagentaWindow.txtMagentaBorderZ)
        
        self.logger.info('Magenta Setup Window Initialised')
        
    def OnMagentaTry(self,event):
        ##print('MagentaTry')
        
        self.MagentaX = float(self.MagentaWindow.txtMagentaX.GetValue())
        self.MagentaY = float(self.MagentaWindow.txtMagentaY.GetValue())
        self.MagentaZ = float(self.MagentaWindow.txtMagentaZ.GetValue())
        self.MagentaBorderX = float(self.MagentaWindow.txtMagentaBorderX.GetValue())        
        self.MagentaBorderY = float(self.MagentaWindow.txtMagentaBorderY.GetValue())       
        self.MagentaBorderZ = float(self.MagentaWindow.txtMagentaBorderZ.GetValue())
        
        self.logger.warn(' Magenta Positions and Borders are TRIED with:\n\
                           MagentaX = %s \n\
                           MagentaY = %s \n\
                           MagentaZ = %s \n\n\
                           MagentaBorderX = %s \n\
                           MagentaBorderY = %s \n\
                           MagentaBorderZ = %s \n\n',self.MagentaX,self.MagentaY,self.MagentaZ,
                                      self.MagentaBorderX,self.MagentaBorderY,self.MagentaBorderZ)
        
        self.OnPosChange('0')
        self.MagentaWindow.btMagentaSaveQuit.Enable(True) 
                        
    def OnMagentaSaveQuit(self,event):
        self.btAxisSetup.Enable(True)
        self.btStart.Enable(True)
        self.btPosSetup.Enable(True)
        self.btYellowSetup.Enable(True)
        self.btGreenSetup.Enable(True)
        self.btCyanSetup.Enable(True)
        self.btMagentaSetup.Enable(True)
        self.btKeyPointLoad.Enable(True)
        self.btKeyPointSave.Enable(True)
        self.btPathLoad.Enable(True)
        self.btPathSave.Enable(True)
        self.MagentaWindow.Close()
        
        self.logger.warn(' Magenta Positions and Borders are SET-UP with:\n\
                           MagentaX = %s \n\
                           MagentaY = %s \n\
                           MagentaZ = %s \n\n\
                           MagentaBorderX = %s \n\
                           MagentaBorderY = %s \n\
                           MagentaBorderZ = %s \n\n',self.MagentaX,self.MagentaY,self.MagentaZ,
                                      self.MagentaBorderX,self.MagentaBorderY,self.MagentaBorderZ)
                
    def OnMagentaExit(self,event):
        self.btAxisSetup.Enable(True)
        self.btStart.Enable(True)
        self.btPosSetup.Enable(True)
        self.btYellowSetup.Enable(True)
        self.btGreenSetup.Enable(True)
        self.btCyanSetup.Enable(True)
        self.btMagentaSetup.Enable(True)
        self.btKeyPointLoad.Enable(True)
        self.btKeyPointSave.Enable(True)
        #self.btPosMode.Enable(True)
        self.btPathLoad.Enable(True)
        self.btPathSave.Enable(True)
        #self.btPathMode.Enable(True)
        
        self.MagentaX=self.MagentaXOld
        self.MagentaY=self.MagentaYOld
        self.MagentaZ=self.MagentaZOld
        self.MagentaBorderX=self.MagentaBorderXOld        
        self.MagentaBorderY=self.MagentaBorderYOld        
        self.MagentaBorderZ=self.MagentaBorderZOld
        self.OnPosChange('0')                
        self.MagentaWindow.Close()
        
        self.logger.warn(' Magenta Positions and Borders are RESET with:\n\
                           MagentaX = %s \n\
                           MagentaY = %s \n\
                           MagentaZ = %s \n\n\
                           MagentaBorderX = %s \n\
                           MagentaBorderY = %s \n\
                           MagentaBorderZ = %s \n\n',self.MagentaX,self.MagentaY,self.MagentaZ,
                                      self.MagentaBorderX,self.MagentaBorderY,self.MagentaBorderZ)
        
    def OnMagentaChange(self,event):
        self.MagentaWindow.btMagentaSaveQuit.Enable(False)
    def OnMagentaEngineInformation(self,event):
        
        self.MagentaEngineInformation   = MagentaAxisUI(None, -1.,"Magenta Achsen Steuerung")
        self.MagentaWindow.Close()
        
        try:
            App.Magenta
            MagentaExists=True
        except:
            MagentaExists=False
        if MagentaExists:
            self.MagentaEngineInformation.ReadDatafromAchse()
            self.logger.debug('Magenta Axis is LOADED with properties:\n\
                       Magenta Engine Name = %s\n\
                       Magenta Engine PosHardMax = %s\n\
                       Magenta Engine PosUserMax = %s\n\
                       Magenta Engine PosUserMin = %s\n\
                       Magenta Engine PosHardMin = %s\n\
                       Magenta Engine PosWindow = %s\n\
                       Magenta Engine SpeedMax = %s\n\
                       Magenta Engine AccMax = %s\n\
                       Magenta Engine DccMax = %s\n\
                       Magenta Engine AccMove = %s\n\
                       Magenta Engine MaxAmp = %s\n\
                       Magenta Engine VelWindow = %s\n\
                       Magenta Engine FilterP = %s\n\
                       Magenta Engine FilterI = %s\n\
                       Magenta Engine FilterD = %s\n\
                       Magenta Engine FilterIL = %s\n\
                       Magenta Engine GuidePitch = %s\n\
                       Magenta Engine GuidePosMax = %s\n\
                       Magenta Engine GuidePosMin = %s\n\
                       Magenta Engine GearToUI = %s\n\
                       Magenta Engine SpeedMaxForUI = %s\n\
                       Magenta Engine RopeSWLL = %s\n\
                       Magenta Engine RopeDiameter = %s\n\
                       Magenta Engine RopeNumber = %s\n\
                       Magenta Engine RopeLength = %s\n',
                       self.Magenta.Name,self.Magenta.PosHardMax,self.Magenta.PosUserMax,self.Magenta.PosUserMin,
                       self.Magenta.PosHardMin,self.Magenta.PosWin,self.Magenta.SpeedMax,self.Magenta.AccMax,self.Magenta.DccMax,self.Magenta.AccTot,
                       self.Magenta.MaxAmp,self.Magenta.VelWin,self.Magenta.FilterP,self.Magenta.FilterI,
                       self.Magenta.FilterD,self.Magenta.FilterIL,self.Magenta.GuidePitch,self.Magenta.GuidePosMax,
                       self.Magenta.GuidePosMin,self.Magenta.GearToUI,self.Magenta.SpeedMaxForUI,
                       self.Magenta.RopeSWLL,self.Magenta.RopeDiameter,self.Magenta.RopeNumber,
                       self.Magenta.RopeLength)
            
            #self.MagentaEngineInformation.ResetAxis()
            self.MagentaEngineInformation.AxisReadJoystick()
        else:
            self.logger.warn('Object Magenta Axis is initialised')        
        self.MagentaEngineInformation.Show(True)
        self.SetTopWindow(self.MagentaEngineInformation)
        self.MagentaEngineInformation.Bind(wx.EVT_CLOSE, self.OnMagentaEngineQuit)

    def OnMagentaEngineQuit(self,event):
        
        self.btAxisSetup.Enable(True)
        self.btStart.Enable(True)
        self.btPosSetup.Enable(True)
        self.btYellowSetup.Enable(True)
        self.btGreenSetup.Enable(True)
        self.btCyanSetup.Enable(True)
        self.btMagentaSetup.Enable(True)
         
        
        self.MagentaEngineInformation.LoadFromFileQuit()        
        self.Magenta.LTold              = self.Magenta.LTold
        self.Magenta.Modus              = 'r'
        self.Magenta.OwnPID             = 0
        self.Magenta.ControlingPIDTx    = 0
        self.Magenta.Intent             = 0
        self.Magenta.Enable             = 0
        self.Magenta.GuideControl       = 5
        self.Magenta.SpeedSoll          = 0
        self.Magenta.GuideSpeedSoll     = 0
        
        self.MagentaEngineInformation.Destroy()
        
        self.logger.debug('Magenta Axis is LOADED with properties:\n\
                   Magenta Engine Name = %s\n\
                   Magenta Engine PosHardMax = %s\n\
                   Magenta Engine PosUserMax = %s\n\
                   Magenta Engine PosUserMin = %s\n\
                   Magenta Engine PosHardMin = %s\n\
                   Magenta Engine PosWindow = %s\n\
                   Magenta Engine SpeedMax = %s\n\
                   Magenta Engine AccMax = %s\n\
                   Magenta Engine DccMax = %s\n\
                   Magenta Engine AccMove = %s\n\
                   Magenta Engine MaxAmp = %s\n\
                   Magenta Engine VelWindow = %s\n\
                   Magenta Engine FilterP = %s\n\
                   Magenta Engine FilterI = %s\n\
                   Magenta Engine FilterD = %s\n\
                   Magenta Engine FilterIL = %s\n\
                   Magenta Engine GuidePitch = %s\n\
                   Magenta Engine GuidePosMax = %s\n\
                   Magenta Engine GuidePosMin = %s\n\
                   Magenta Engine GearToUI = %s\n\
                   Magenta Engine SpeedMaxForUI = %s\n\
                   Magenta Engine RopeSWLL = %s\n\
                   Magenta Engine RopeDiameter = %s\n\
                   Magenta Engine RopeNumber = %s\n\
                   Magenta Engine RopeLength = %s\n',
                   self.Magenta.Name,self.Magenta.PosHardMax,self.Magenta.PosUserMax,self.Magenta.PosUserMin,
                   self.Magenta.PosHardMin,self.Magenta.PosWin,self.Magenta.SpeedMax,self.Magenta.AccMax,self.Magenta.DccMax,self.Magenta.AccTot,
                   self.Magenta.MaxAmp,self.Magenta.VelWin,self.Magenta.FilterP,self.Magenta.FilterI,
                   self.Magenta.FilterD,self.Magenta.FilterIL,self.Magenta.GuidePitch,self.Magenta.GuidePosMax,
                   self.Magenta.GuidePosMin,self.Magenta.GearToUI,self.Magenta.SpeedMaxForUI,
                   self.Magenta.RopeSWLL,self.Magenta.RopeDiameter,self.Magenta.RopeNumber,
                   self.Magenta.RopeLength)
        
        
        self.ctrlMagentaName.SetValue(App.Magenta.Name)
        self.ctrlMagentaStatus.SetValue(App.Magenta.Status )
        self.ctrlMagentaVel.SetValue(App.Magenta.SpeedIstUI)
        self.ctrlMagentaForce.SetValue(App.Magenta.ActCurUI)
        self.ctrlMagentaLength.SetValue(App.Magenta.PosIst)

        self.logger.warn(' Engine Setup quits with:\n\
                         Magenta Engine Name = %s \n\
                         Magenta Engine Status = %s \n\
                         Magenta Engine Length = %s \n\n',
                         self.Magenta.Name,self.Magenta.Status,self.Magenta.PosIst)

        
     
                
    # End Magenta-----------------------
#WWW Point Handling End-------------- 
#WWW Height Handling Beginn----------
    def OnGetDef(self,event):
        self.logger.info('Floor Handling DefHeight->ActHeight')
        self.ActHeight=self.DefHeight
        self.ctrlActHeight.SetValue(str(self.ActHeight))
        #self.ctrlspHeight.SetValue(0)
        self.txtspHeight.SetValue('0')
        self.HeightHandling()
    def OnSetDef(self,event):
        self.logger.info('Floor Handling ActHeight->DefHeight')        
        self.DefHeight=self.ActHeight
        self.ctrlDefHeight.SetValue(str(self.DefHeight))
        #self.ctrlspHeight.SetValue(0)
        self.txtspHeight.SetValue('0')
        self.HeightHandling()
    def OnSpinHeight(self,event):
        self.logger.info('Floor Handling SpinHeight->ActHeight')        
        self.ActHeight=self.DefHeight+float(self.txtspHeight.GetValue())
        self.ctrlActHeight.SetValue(str(self.ActHeight))
        self.HeightHandling()
    def OnSpinHeightUp(self,evt):
        self.txtspHeight.SetValue(str(float(self.txtspHeight.GetValue())+0.5))
        self.OnSpinHeight(1)
    def OnSpinHeightDown(self,evt):
        self.txtspHeight.SetValue(str(float(self.txtspHeight.GetValue())-0.5))
        self.OnSpinHeight(1)
    def HeightHandling(self):
        
        self.WallBottom.detachNode()
        self.WallBottom.removeNode()
        
        self.cPlaneBottom = CollisionPolygon(
            Point3(self.GreenX,self.GreenY,self.ActHeight),
            Point3(self.MagentaX,self.MagentaY,self.ActHeight),
            Point3(self.CyanX,self.CyanY,self.ActHeight),
            Point3(self.YellowX,self.YellowY,self.ActHeight))

        self.cNode8 = CollisionNode('Wall6Collider')
        self.cNode8.addSolid(self.cPlaneBottom)        
        self.WallBottom = self.environ.attachNewNode(self.cNode8)
        self.WallBottom.setCollideMask(BitMask32.allOff())
        self.WallBottom.node().setIntoCollideMask(BitMask32.bit(0))        
        self.WallBottom.node().setIntoCollideMask(BitMask32.bit(1))
        self.logger.info('Floor Handling Collision Limit set to %s',self.ActHeight)
        #self.WallBottom.show()
                                      
#WWW Height Handling End-------------
    def Kraefteberechnung( self,Seil1,Seil2,Seil3,Seil4,Kamera,Last):  
        Seil1Normiert=Seil1/numpy.dot(Seil1,Seil1)
        Seil2Normiert=Seil2/numpy.dot(Seil2,Seil2)
        Seil3Normiert=Seil3/numpy.dot(Seil3,Seil3)
        Seil4Normiert=Seil4/numpy.dot(Seil4,Seil4)
        
        Seil1NormiertTransponiert=Seil1Normiert.reshape(3,1)
        Seil2NormiertTransponiert=Seil2Normiert.reshape(3,1)        
        Seil3NormiertTransponiert=Seil3Normiert.reshape(3,1)        
        Seil4NormiertTransponiert=Seil4Normiert.reshape(3,1)
        
        M1=Seil1Normiert*Seil1NormiertTransponiert
        M2=Seil2Normiert*Seil2NormiertTransponiert
        M3=Seil3Normiert*Seil3NormiertTransponiert        
        M4=Seil4Normiert*Seil4NormiertTransponiert
        
        SumM=M1+M2+M3+M4        
                
        A=numpy.matrix(SumM)
        
        StackM=numpy.transpose(numpy.vstack((M1,M2,M3,M4)))
        
        IntermediateM=Last*A.I
        
        SolutionM=IntermediateM*StackM
        
        F1=numpy.array([SolutionM[0,0],SolutionM[0,1],SolutionM[0,2]])
        BetragF1=math.sqrt(numpy.dot(F1,F1))
        F2=numpy.array([SolutionM[0,3],SolutionM[0,4],SolutionM[0,5]])
        BetragF2=math.sqrt(numpy.dot(F2,F2))
        F3=numpy.array([SolutionM[0,6],SolutionM[0,7],SolutionM[0,8]])
        BetragF3=math.sqrt(numpy.dot(F3,F3))
        F4=numpy.array([SolutionM[0,9],SolutionM[0,10],SolutionM[0,11]])
        BetragF4=math.sqrt(numpy.dot(F4,F4))
        return [BetragF1,BetragF2,BetragF3,BetragF4]  
    def Kugelschnitt(self,M1,R1,M2,R2,M3,R3):
        try:
            M21 = M2-M1;
            M31 = M3-M1;
            c  = numpy.cross(M21,M31);
            c2 = numpy.dot(c,c)
            a  =(numpy.dot(M21,M21)+R1**2-R2**2)*M31
            b  =(numpy.dot(M31,M31)+R1**2-R3**2)*M21
            d  = (a-b)/2
            u1 = numpy.cross(d,c)/c2
            Wurzel=(R1**2)-(numpy.dot(u1,u1))
            if Wurzel >=0:
                v  = math.sqrt((R1**2)-(numpy.dot(u1,u1)))*c/math.sqrt(c2)
                i1 = M1+u1+v
                i2 = M1+u1-v       
                if i1[2] <= i2[2]:
                    Schnittpunkt = i1
                else:
                    Schnittpunkt = i2
            else:Schnittpunkt=numpy.array([0,0,1000])
        except:
            Schnittpunkt =numpy.array([0,0,1000])
        return Schnittpunkt
    def MittelKugelaus4(self,M1,M2,M3,M4):
        if (M1[2] != 1000 and M2[2] != 1000 and M3[2] != 1000 and M4[2] != 1000) : 
            Mittelpunkt = (M1+M2+M3+M4)/4
            a= M1-Mittelpunkt
            b= M2-Mittelpunkt
            c= M3-Mittelpunkt
            d= M4-Mittelpunkt
            Betraga=math.sqrt(numpy.sum(numpy.dot(a,a)))
            Betragb=math.sqrt(numpy.sum(numpy.dot(b,b)))
            Betragc=math.sqrt(numpy.sum(numpy.dot(c,c)))
            Betragd=math.sqrt(numpy.sum(numpy.dot(d,d)))
            Radius= max(Betraga,Betragb,Betragc,Betragd)
        elif (M1[2] == 1000 and M2[2] != 1000 and M3[2] != 1000 and M4[2] != 1000) : 
            Mittelpunkt = (M2+M3+M4)/3
            a= M2-Mittelpunkt
            b= M3-Mittelpunkt
            c= M4-Mittelpunkt
            Betraga=math.sqrt(numpy.sum(numpy.dot(a,a)))+1000
            Betragb=math.sqrt(numpy.sum(numpy.dot(b,b)))+1000
            Betragc=math.sqrt(numpy.sum(numpy.dot(c,c)))+1000
            Radius= max(Betraga,Betragb,Betragc)
        elif (M1[2] != 1000 and M2[2] == 1000 and M3[2] != 1000 and M4[2] != 1000) : 
            Mittelpunkt = (M1+M3+M4)/3
            a= M1-Mittelpunkt
            b= M3-Mittelpunkt
            c= M4-Mittelpunkt
            Betraga=math.sqrt(numpy.sum(numpy.dot(a,a)))+1000
            Betragb=math.sqrt(numpy.sum(numpy.dot(b,b)))+1000
            Betragc=math.sqrt(numpy.sum(numpy.dot(c,c)))+1000
            Radius= max(Betraga,Betragb,Betragc)
        elif (M1[2] != 1000 and M2[2] != 1000 and M3[2] == 1000 and M4[2] != 1000) : 
            Mittelpunkt = (M1+M2+M4)/3
            a= M1-Mittelpunkt
            b= M2-Mittelpunkt
            c= M4-Mittelpunkt
            Betraga=math.sqrt(numpy.sum(numpy.dot(a,a)))+1000
            Betragb=math.sqrt(numpy.sum(numpy.dot(b,b)))+1000
            Betragc=math.sqrt(numpy.sum(numpy.dot(c,c)))+1000
            Radius= max(Betraga,Betragb,Betragc)
        elif (M1[2] != 1000 and M2[2] != 1000 and M3[2] != 1000 and M4[2] == 1000) : 
            Mittelpunkt = (M1+M2+M3)/3
            a= M1-Mittelpunkt
            b= M2-Mittelpunkt
            c= M3-Mittelpunkt
            Betraga=math.sqrt(numpy.sum(numpy.dot(a,a)))+1000
            Betragb=math.sqrt(numpy.sum(numpy.dot(b,b)))+1000
            Betragc=math.sqrt(numpy.sum(numpy.dot(c,c)))+1000
            Radius= max(Betraga,Betragb,Betragc) 
        elif (M1[2] == 1000 and M2[2] == 1000 and M3[2] != 1000 and M4[2] != 1000) : 
            Mittelpunkt = (M3+M4)/2
            a= M3-Mittelpunkt
            b= M4-Mittelpunkt
            Betraga=math.sqrt(numpy.sum(numpy.dot(a,a)))+10000
            Betragb=math.sqrt(numpy.sum(numpy.dot(b,b)))+10000
            Radius= max(Betraga,Betragb)
        elif (M1[2] != 1000 and M2[2] != 1000 and M3[2] == 1000 and M4[2] == 1000) : 
            Mittelpunkt = (M1+M2)/2
            a= M1-Mittelpunkt
            b= M2-Mittelpunkt
            Betraga=math.sqrt(numpy.sum(numpy.dot(a,a)))+10000
            Betragb=math.sqrt(numpy.sum(numpy.dot(b,b)))+10000
            Radius= max(Betraga,Betragb) 
        elif (M1[2] != 1000 and M2[2] == 1000 and M3[2] != 1000 and M4[2] == 1000) : 
            Mittelpunkt = (M1+M3)/2
            a= M1-Mittelpunkt
            b= M3-Mittelpunkt
            Betraga=math.sqrt(numpy.sum(numpy.dot(a,a)))+10000
            Betragb=math.sqrt(numpy.sum(numpy.dot(b,b)))+10000
            Radius= max(Betraga,Betragb) 
        elif (M1[2] != 1000 and M2[2] == 1000 and M3[2] == 1000 and M4[2] != 1000) : 
            Mittelpunkt = (M1+M4)/2
            a= M1-Mittelpunkt
            b= M4-Mittelpunkt
            Betraga=math.sqrt(numpy.sum(numpy.dot(a,a)))+10000
            Betragb=math.sqrt(numpy.sum(numpy.dot(b,b)))+10000
            Radius= max(Betraga,Betragb) 
        elif (M1[2] == 1000 and M2[2] != 1000 and M3[2] != 1000 and M4[2] == 1000) : 
            Mittelpunkt = (M2+M3)/2
            a= M2-Mittelpunkt
            b= M3-Mittelpunkt
            Betraga=math.sqrt(numpy.sum(numpy.dot(a,a)))+10000
            Betragb=math.sqrt(numpy.sum(numpy.dot(b,b)))+10000
            Radius= max(Betraga,Betragb) 
        elif (M1[2] == 1000 and M2[2] != 1000 and M3[2] == 1000 and M4[2] != 1000) : 
            Mittelpunkt = (M2+M4)/2
            a= M2-Mittelpunkt
            b= M4-Mittelpunkt
            Betraga=math.sqrt(numpy.sum(numpy.dot(a,a)))+10000
            Betragb=math.sqrt(numpy.sum(numpy.dot(b,b)))+10000
            Radius= max(Betraga,Betragb)
        elif (M1[2] == 1000 and M2[2] == 1000 and M3[2] != 1000 and M4[2] != 1000) : 
            Mittelpunkt = (M3+M4)/2
            a= M3-Mittelpunkt
            b= M4-Mittelpunkt
            Betraga=math.sqrt(numpy.sum(numpy.dot(a,a)))+10000
            Betragb=math.sqrt(numpy.sum(numpy.dot(b,b)))+10000
            Radius= max(Betraga,Betragb) 
        elif (M1[2] != 1000 and M2[2] == 1000 and M3[2] == 1000 and M4[2] == 1000) : 
            Mittelpunkt = M1
            Radius= 100000
        elif (M1[2] == 1000 and M2[2] != 1000 and M3[2] == 1000 and M4[2] == 1000) : 
            Mittelpunkt = M2
            Radius= 100000
        elif (M1[2] == 1000 and M2[2] == 1000 and M3[2] != 1000 and M4[2] == 1000) : 
            Mittelpunkt = M3
            Radius= 100000            
        elif (M1[2] == 1000 and M2[2] == 1000 and M3[2] == 1000 and M4[2] != 1000) : 
            Mittelpunkt = M4
            Radius= 100000
        elif (M1[2] == 1000 and M2[2] == 1000 and M3[2] == 1000 and M4[2] == 1000) : 
            Mittelpunkt = M4
            Radius= 10000000            
            
        return Mittelpunkt,Radius   
    
    def OnOpenEnv(self,event):
        self.logger.info('Initialising Open environment')
        dlg = wx.FileDialog(self.frame,'Open environment',os.getcwd(), style=wx.OPEN,wildcard='*.egg')
        if dlg.ShowModal() == wx.ID_OK:

            self.RemoveOldEnvironment()
            self.environ.detachNode()
            self.environ.removeNode()
            
            self.barrier.detachNode()
            self.barrier.removeNode()
            
            self.environment = Filename.fromOsSpecific(dlg.GetPath())           
            self.frame.SetTitle('LARA 3D ----'+ dlg.GetPath())            
            self.InsertFieldOfPlay()
            self.initCtrls()
            self.initPositions()
            #self.initEvents()
            #self.initJoystick()        
            #self.Shadow()
            #self.InitViewPoint()
            #self.Anzeige()

            self.InsertPillars()
            self.SetupBorders()
            self.ReorderSceneGraph() 
            #self.InsertGrid()
            self.InsertCharacter()
            self.InsertRopes()
            self.logger.warn(' Environment %s loaded',self.environment)
        dlg.Destroy()
        self.logger.info('Open environment closed')
    def initPositions(self):
        self.logger.info('Init Positions')
        self.positionlist = list(open(self.Positions,'r'))         
        self.YellowX=float(self.positionlist[1])
        self.YellowY=float(self.positionlist[3])            
        self.YellowZ=float(self.positionlist[5]) 
        self.GreenX=float(self.positionlist[7])
        self.GreenY=float(self.positionlist[9])            
        self.GreenZ=float(self.positionlist[11])
        self.CyanX=float(self.positionlist[13])
        self.CyanY=float(self.positionlist[15])            
        self.CyanZ=float(self.positionlist[17])
        self.MagentaX=float(self.positionlist[19])
        self.MagentaY=float(self.positionlist[21])            
        self.MagentaZ=float(self.positionlist[23])
        self.YellowBorderX=float(self.positionlist[25])
        self.YellowBorderY=float(self.positionlist[27])            
        self.YellowBorderZ=float(self.positionlist[29])
        self.GreenBorderX=float(self.positionlist[31])
        self.GreenBorderY=float(self.positionlist[33])            
        self.GreenBorderZ=float(self.positionlist[35])
        self.CyanBorderX=float(self.positionlist[37])
        self.CyanBorderY=float(self.positionlist[39])            
        self.CyanBorderZ=float(self.positionlist[41])
        self.MagentaBorderX=float(self.positionlist[43])
        self.MagentaBorderY=float(self.positionlist[45])            
        self.MagentaBorderZ=float(self.positionlist[47])
        self.ctrlPosX.SetValue(str(float(self.positionlist[49])))
        self.ctrlPosY.SetValue(str(float(self.positionlist[51])))            
        self.ctrlPosZ.SetValue(str(float(self.positionlist[53])))
        self.txtspHeight.SetValue(str(float(self.positionlist[55])))
        #self.PosVec=Vec3( float(self.positionlist[49]),float(self.positionlist[51]),float(self.positionlist[53]))
        self.logger.info('Positions and Borders are INITIALISED with:\n\
            YellowX = %s \n\
            YellowY = %s \n\
            YellowZ = %s \n\n\
            YellowBorderX = %s \n\
            YellowBorderY = %s \n\
            YellowBorderZ = %s \n\n\
            GreenX = %s \n\
            GreenY = %s \n\
            GreenZ = %s \n\n\
            GreenBorderX = %s \n\
            GreenBorderY = %s \n\
            GreenBorderZ = %s \n\n\
            CyanX = %s \n\
            CyanY = %s \n\
            CyanZ = %s \n\n\
            CyanBorderX = %s \n\
            CyanBorderY = %s \n\
            CyanBorderZ = %s \n\n\
            MagentaX = %s \n\
            MagentaY = %s \n\
            MagentaZ = %s \n\n\
            MagentaBorderX = %s \n\
            MagentaBorderY = %s \n\
            MagentaBorderZ = %s \n\
            PosX = %s \n\
            PosY = %s \n\
            PosZ = %s \n\
            Bottom = %s \n',self.YellowX,self.YellowY,self.YellowZ,
                        self.YellowBorderX,self.YellowBorderY,self.YellowBorderZ,
                        self.GreenX,self.GreenY,self.GreenZ,
                        self.GreenBorderX,self.GreenBorderY,self.GreenBorderZ,
                        self.CyanX,self.CyanY,self.CyanZ,
                        self.CyanBorderX,self.CyanBorderY,self.CyanBorderZ,
                        self.MagentaX,self.MagentaY,self.MagentaZ,
                        self.MagentaBorderX,self.MagentaBorderY,self.MagentaBorderZ,
                        self.PosX,self.PosY,self.PosZ,str(self.txtspHeight.GetValue()))
        
        self.M1=numpy.array([self.YellowX,self.YellowY,self.YellowZ])
        self.M2=numpy.array([self.GreenX,self.GreenY,self.GreenZ])
        self.M3=numpy.array([self.CyanX,self.CyanY,self.CyanZ])
        self.M4=numpy.array([self.MagentaX,self.MagentaY,self.MagentaZ])
    
#WWW Positionen abspeichern/Laden Beginn
    def OnOpenPos(self,event):
        self.logger.info('Initialising Open Positions')
        dlg = wx.FileDialog(self.frame,'Open Positions',os.getcwd(), style=wx.OPEN,wildcard='*.pos')
        if dlg.ShowModal() == wx.ID_OK: 
            self.positions = str(os.path.normcase(dlg.GetPath()))
            self.logger.warn(' Positionsfile %s is loaded',self.Positions)
            positionlist = list(open(self.positions,'r')) 
            self.YellowX=float(positionlist[1])
            self.YellowY=float(positionlist[3])            
            self.YellowZ=float(positionlist[5]) 
            self.GreenX=float(positionlist[7])
            self.GreenY=float(positionlist[9])            
            self.GreenZ=float(positionlist[11])
            self.CyanX=float(positionlist[13])
            self.CyanY=float(positionlist[15])            
            self.CyanZ=float(positionlist[17])
            self.MagentaX=float(positionlist[19])
            self.MagentaY=float(positionlist[21])            
            self.MagentaZ=float(positionlist[23])
            self.YellowBorderX=float(positionlist[25])
            self.YellowBorderY=float(positionlist[27])            
            self.YellowBorderZ=float(positionlist[29])
            self.GreenBorderX=float(positionlist[31])
            self.GreenBorderY=float(positionlist[33])            
            self.GreenBorderZ=float(positionlist[35])
            self.CyanBorderX=float(positionlist[37])
            self.CyanBorderY=float(positionlist[39])            
            self.CyanBorderZ=float(positionlist[41])
            self.MagentaBorderX=float(positionlist[43])
            self.MagentaBorderY=float(positionlist[45])            
            self.MagentaBorderZ=float(positionlist[47])
            self.ctrlPosX.SetValue(str(float(positionlist[49])))
            self.ctrlPosY.SetValue(str(float(positionlist[51])))            
            self.ctrlPosZ.SetValue(str(float(positionlist[53])))
            self.SollPosX = float(positionlist[49])
            self.SollPosY = float(positionlist[51])        
            self.SollPosZ = float(positionlist[53])
            self.txtspHeight.SetValue(positionlist[55])
            #self.PosVec=Vec3( float(positionlist[49]),float(positionlist[51]),float(positionlist[53]))

            self.logger.info('Positions and Borders are LOADED with:\n\
                              YellowX = %s \n\
                              YellowY = %s \n\
                              YellowZ = %s \n\n\
                              YellowBorderX = %s \n\
                              YellowBorderY = %s \n\
                              YellowBorderZ = %s \n\n\
                              GreenX = %s \n\
                              GreenY = %s \n\
                              GreenZ = %s \n\n\
                              GreenBorderX = %s \n\
                              GreenBorderY = %s \n\
                              GreenBorderZ = %s \n\n\
                              CyanX = %s \n\
                              CyanY = %s \n\
                              CyanZ = %s \n\n\
                              CyanBorderX = %s \n\
                              CyanBorderY = %s \n\
                              CyanBorderZ = %s \n\n\
                              MagentaX = %s \n\
                              MagentaY = %s \n\
                              MagentaZ = %s \n\n\
                              MagentaBorderX = %s \n\
                              MagentaBorderY = %s \n\
                              MagentaBorderZ = %s \n\n\
                              PosX = %s \n\
                              PosY = %s \n\
                              PosZ = %s \n\
                              Bottom = %s \n',self.YellowX,self.YellowY,self.YellowZ,
                        self.YellowBorderX,self.YellowBorderY,self.YellowBorderZ,
                        self.GreenX,self.GreenY,self.GreenZ,
                        self.GreenBorderX,self.GreenBorderY,self.GreenBorderZ,
                        self.CyanX,self.CyanY,self.CyanZ,
                        self.CyanBorderX,self.CyanBorderY,self.CyanBorderZ,
                        self.MagentaX,self.MagentaY,self.MagentaZ,
                        self.MagentaBorderX,self.MagentaBorderY,self.MagentaBorderZ,
                        self.PosX,self.PosY,self.PosZ,str(self.txtspHeight.GetValue()))
        # Nicht nur Laden sondern auch herzeigen
            self.OnPosChange('0')
        dlg.Destroy()
        self.logger.info('Open Positions closed')
    def OnSavePos(self,event):
        self.logger.info('Initialising Save Position')
        dlg = wx.FileDialog(self.frame,'Save Positions',os.getcwd(), style=wx.SAVE,wildcard='*.pos')
        if dlg.ShowModal() == wx.ID_OK:
            self.positions = dlg.GetPath()      
            file = open(self.positions,'w')
            file.write('YellowX =\n'+str(self.YellowX)+'\n'+
                       'YellowY =\n'+str(self.YellowY)+'\n'+
                       'YellowZ =\n'+str(self.YellowZ)+'\n'+
                       'GreenX =\n'+str(self.GreenX)+'\n'+
                       'GreenY =\n'+str(self.GreenY)+'\n'+
                       'GreenZ =\n'+str(self.GreenZ)+'\n'+
                       'CyanX =\n'+str(self.CyanX)+'\n'+
                       'CyanY =\n'+str(self.CyanY)+'\n'+
                       'CyanZ =\n'+str(self.CyanZ)+'\n'+                
                       'MagentaX =\n'+str(self.MagentaX)+'\n'+
                       'MagentaY =\n'+str(self.MagentaY)+'\n'+
                       'MagentaZ =\n'+str(self.MagentaZ)+'\n'+            
                       'YellowBorderX =\n'+str(self.YellowBorderX)+'\n'+
                       'YellowBorderY =\n'+str(self.YellowBorderY)+'\n'+
                       'YellowBorderZ =\n'+str(self.YellowBorderZ)+'\n'+
                       'GreenBorderX =\n'+str(self.GreenBorderX)+'\n'+
                       'GreenBorderY =\n'+str(self.GreenBorderY)+'\n'+
                       'GreenBorderZ =\n'+str(self.GreenBorderZ)+'\n'+
                       'CyanBorderX =\n'+str(self.CyanBorderX)+'\n'+
                       'CyanBorderY =\n'+str(self.CyanBorderY)+'\n'+
                       'CyanBorderZ =\n'+str(self.CyanBorderZ)+'\n'+                
                       'MagentaBorderX =\n'+str(self.MagentaBorderX)+'\n'+
                       'MagentaBorderY =\n'+str(self.MagentaBorderY)+'\n'+
                       'MagentaBorderZ =\n'+str(self.MagentaBorderZ)+'\n'+                 
                       'PosX =\n'+str(self.PosX)+'\n'+
                       'PosY =\n'+str(self.PosY)+'\n'+
                       'PosZ =\n'+str(self.PosZ)+'\n'+
                       'Bottom =\n'+str(self.txtspHeight.GetValue())+'\n')
            file.close()
            self.logger.info('Positions written to file: %s',self.positions)
        dlg.Destroy()
#WWW Positionen abspeichern/Laden End
    def RemoveOldEnvironment(self):
        self.logger.info('Initialising Removing Old Environment')

        
        self.Pillar1.detachNode()
        self.Pillar1.removeNode()
        self.Pillar2.detachNode()
        self.Pillar2.removeNode()
        self.Pillar3.detachNode()
        self.Pillar3.removeNode()
        self.Pillar4.detachNode()
        self.Pillar4.removeNode()
        self.Rope1.detachNode()
        self.Rope1.removeNode()
        self.Rope2.detachNode()
        self.Rope2.removeNode()
        self.Rope3.detachNode()
        self.Rope3.removeNode()            
        self.Rope4.detachNode()
        self.Rope4.removeNode()
        self.Wall1_2.detachNode()
        self.Wall1_2.removeNode()
        self.Wall1_3.detachNode()
        self.Wall1_3.removeNode()
        self.Wall1_4.detachNode()
        self.Wall1_4.removeNode()
        self.Wall2_4.detachNode()
        self.Wall2_4.removeNode()
        self.Wall1_2_a.detachNode()
        self.Wall1_2_a.removeNode()
        self.Wall1_3_a.detachNode()
        self.Wall1_3_a.removeNode()
        self.Wall1_4_a.detachNode()
        self.Wall1_4_a.removeNode()
        self.Wall2_4_a.detachNode()
        self.Wall2_4_a.removeNode()        
        self.WallTop.detachNode()
        self.WallTop.removeNode()
        self.WallBottom.detachNode()
        self.WallBottom.removeNode()
        self.CPosition.detachNode()
        self.CPosition.removeNode()
        self.BorderYellow.detachNode()
        self.BorderYellow.removeNode()
        self.BorderGreen.detachNode()
        self.BorderGreen.removeNode()
        self.BorderCyan.detachNode()
        self.BorderCyan.removeNode()
        self.BorderMagenta.detachNode()
        self.BorderMagenta.removeNode()
        self.corner.detachNode()
        self.corner.removeNode()

        #self.terrain.getRoot().detachNode()
        #self.terrain.getRoot().removeNode()
        for (k,v) in self.KeyPosModell.items():
            self.KeyPosModell[k].detachNode()
            self.KeyPosModell[k].removeNode() 
        self.KeyPosDic={}
        self.KeyPosModell={}
        self.listKeyPoints.DeleteAllItems()
        self.logger.info('Old Environment removed ')
        
    def onDestroy(self, evt):
        self.logger.info('Restarting standard wx Eventloop')
        # called on wx window destroy
        wx.EventLoop.SetActive(self.oldLoop)   
    def OnQuit(self,event):
        self.logger.info('Quiting')        
        self.onDestroy(event)     
    # to close Panda
        try:
            base
        except NameError:
            sys.exit()
        base.userExit()
    # WX TaskLoop
    def wxStep(self, task = None):
        while self.evtLoop.Pending():
            self.evtLoop.Dispatch()
        #user32dllHandle.SetFocus(self.pandaWindowHandle)
        time.sleep(0.001)
        self.ProcessIdle()
        if task != None: return task.cont

    def RasterPrepare (self):
        self.logger.info(' prepearing a Raster for top collision (Deckel)')
        self.P4=numpy.array([self.YellowX,self.YellowY,self.YellowZ])
        self.P1=numpy.array([self.GreenX,self.GreenY,self.GreenZ])
        self.P3=numpy.array([self.CyanX,self.CyanY,self.CyanZ])
        self.P2=numpy.array([self.MagentaX,self.MagentaY,self.MagentaZ])
        
    def Raster (self):
        self.logger.info(' prepearing a Raster for top collision (Deckel Part 2)')
        n= self.n
        self.R=numpy.empty((n+1,n+1,3))
        for i in range(n+1):
            self.R[i,0]=self.P1+i/float(n)*(self.P2-self.P1)
        for i in range(n+1):
            self.R[n,i]=self.P2+i/float(n)*(self.P3-self.P2)
        for i in range(n+1):
            self.R[i,n]=self.P4+i/float(n)*(self.P3-self.P4)
        for i in range(n+1):
            self.R[0,i]=self.P1+i/float(n)*(self.P4-self.P1)
        for i in range(n-1):
            for j in range(n-1):
                self.R[i+1,j+1]=self.R[0,j+1]+(i+1)/float(n)*(self.R[n,j+1]-self.R[0,j+1])
        ##print self.R                
            
    #def KraefterechnungPrepare(self):
        #self.logger.info(' Deckel aussehen')
        #f = open('KraefteTest','w')
        #f1 = open('KraefteTestFile','w')
        #Last=numpy.array([0,0,self.Weight])
        #img = PNMImage(self.n-1,self.n-1)
        #img.makeGrayscale()
        #for i in range(self.n-1):
            #for j in range(self.n-1):
                #z=0.
                #self.Betraege=(0,0,0,0)
                #f1.write(str(self.R[j,i][0])+','+str(self.R[j,i][1])+','+str(self.R[j,i][2])+'\n')
                #while max(self.Betraege)<= (self.MaxSeilKraft*self.MaxSeilKraftProzentsatz):
                    #self.R[j+1,i+1][2]=z
                    #Kamera = self.R[j+1,i+1]
                    ##print (i,j)
                    #Seil1 = self.P1-Kamera
               ##     ##print (Seil1)
                    #Seil2 = self.P2-Kamera
               ##     ##print (Seil2)
                    #Seil3 = self.P3-Kamera
               ##     ##print (Seil3)
                    #Seil4 = self.P4-Kamera
               ##     ##print (Seil4)
                    #self.Betraege = self.Kraefteberechnung( Seil1,Seil2,Seil3,Seil4,Kamera,Last)
                    ## self.Betraege=(5000,1)
                    ## ('Betraege '+str(self.Betraege))
                    #img.setGrayVal(i,j,max((z-30)*11,0))
                    #z=z+1
        ##img = PNMImage(self.n+1,self.n+1,1,(2<<16)-1)
        #f = open('KraefteTest','w')
        #cPickle.dump(self.R,f,protocol = 2)
        #f.close()
        #f1.close()
        ##print self.R
        #img.write('KraefteTest.png')                          
                  
                    
                    
        

class Decode():
    def Decode(self,value): 
        if value=="SIMUL":
            message=(0,"SIMUL","SIMUL",(0,200,0))
            
            state1="Output powered: SIMUL"
            state2="AMP ready: SIMUL"
            state3="Referenced: SIMUL"
            state4="In Position: SIMUL"
            state5="Break lifted: SIMUL"
            state6="Right End Switch contacted: SIMUL"
            state7="Left End Switch contacted: SIMUL"
            
            bit0=1
            bit1=1
            bit2=1
            bit3=1
            bit4=1
            bit6=1
            bit7=1
        elif value=="0":
            message=(0,"NA","NA",(255,255,255))
            
            state1="Output powered: NoConn"
            state2="AMP ready: NoConn"
            state3="Referenced: NoConn"
            state4="In Position: NoConn"
            state5="Break lifted: NoConn"
            state6="Right End Switch contacted: NoConn"
            state7="Left End Switch contacted: NoConn"
            
            bit0=0
            bit1=0
            bit2=0
            bit3=0
            bit4=0
            bit6=0
            bit7=0            

        else:
            value = int(value) 
            if value%2==0:
                state1 = "Output powered: 0"
                bit0=0
            else:
                state1 = "Output powered: 1"
                bit0=1
            if (value>>1)%2==0:
                state2 = "AMP ready: 0"
                bit1=0
            else:
                state2 = "AMP ready: 1"
                bit1=1
            if (value>>2)%2 ==0:
                state3 = "Referenced: 0"
                bit2=0
            else:
                state3 = "Referenced: 1"
                bit2=1
            if (value>>3)%2==0:
                state4 = "In Position: 0"
                bit3=0
            else:
                state4 = "In Position: 1"
                bit3=1
            if (value>>4)%2==0:
                state5="Brake lifted: 0"
                bit4=0
            else:
                state5="Brake lifted: 1"
                bit4=1
            if (value>>6)%2==0:
                state6="Right e-switch contacted: 0"
                bit6=0
            else:
                state6="Right e-switch contacted: 1"
                bit6=1
            if (value>>7)%2==0:
                state7="Left e-switch contacted: 0"
                bit7=0
            else:
                state7="Left e-switch contacted: 1"
                bit7=1
            if (value>>5)%2==0:
             #   Fehler Bit nicht gesetzt
                Zustand = value>>8
                if Zustand==0:
                    message =  (0,str(Zustand),"Not Ready",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
                elif Zustand==1:
                    message =  (0,str(Zustand),"Locked",(0,150,0))#txtCtrl gehoert Rot eingefaerbt
                elif Zustand==2:
                    message =  (0,str(Zustand),"Not Enabled",(255,240,0))#txtCtrl gehoert Rot eingefaerbt
                elif Zustand==3:
                    message =  (0,str(Zustand),"Heating",(255,255,255))#txtCtrl gehoert Neutral eingefaerbt
                elif Zustand==4:
                    message =  (0,str(Zustand),"VCC-Mode",(255,255,255))#txtCtrl gehoert Neutral eingefaerbt
                elif Zustand==5:
                    message =  (0,str(Zustand),"Guider",(0,150,0))#txtCtrl gehoert Neutral eingefaerbt
                elif Zustand==6:
                    message =  (0,str(Zustand),"M-Regelung",(255,255,255))#txtCtrl gehoert Neutral eingefaerbt
                elif Zustand==7:
                    message =  (0,str(Zustand),"Holding",(255,255,255))#txtCtrl gehoert Neutral eingefaerbt
                elif Zustand==8:
                    message =  (0,str(Zustand),"Factory Reset",(255,255,255))#txtCtrl gehoert Neutral eingefaerbt
                elif Zustand==9:
                    message =  (0,str(Zustand),"Stops contacted",(255,255,255)) #txtCtrl gehoert Neutral eingefaerbt 
                elif Zustand==10:
                    message =  (0,str(Zustand),"Ready",(0,150,0))#SEW-Tech Option  gehoert Gruen eingefaerbt
                elif Zustand==11:
                    message =  (0,str(Zustand),"Referenzfahrt",(255,255,255))#txtCtrl gehoert Neutral eingefaerbt
                elif Zustand==12:
                    message =  (0,str(Zustand),"Fangen",(255,255,255))#txtCtrl gehoert Neutral eingefaerbt
                elif Zustand==13:
                    message =  (0,str(Zustand),"Geber einmessen",(255,255,255))#txtCtrl gehoert Neutral eingefaerbt
                elif Zustand==14:
                    message =  (0,str(Zustand),"Fehler",(255,255,255))#txtCtrl gehoert Neutral eingefaerbt
                elif Zustand==15:
                    message =  (0,str(Zustand),"Handbetrieb",(255,255,255))#txtCtrl gehoert Neutral eingefaerbt
                elif Zustand==16:
                    message =  (0,str(Zustand),"TimeOut",(255,255,255))#txtCtrl gehoert Neutral eingefaerbt
                elif Zustand==17:
                    message =  (0,str(Zustand),"Save Stop",(250,198,12))#txtCtrl gehoert Gelb eingefaerbt
                else:
                    message =  ("0",str(Zustand),"Unknown",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
            else:
                Zustand = value >> 8
                if Zustand==1:
                    message=("1",str(Zustand),"-Ueberstrom",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
                elif str(Zustand)=="3":
                    message=("1",str(Zustand),"-Erdschluss",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
                elif str(Zustand)=="4":
                    message=("1",str(Zustand),"-Bremschopper",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
                elif str(Zustand)=="6":
                    message=("1",str(Zustand),"-Netzphasenausfall",(255,0,0))#txtCtrl gehoert Rot eingefaerbt                                       
                elif str(Zustand)=="7":
                    message=("1",str(Zustand),"-Zwischenkreis Ueberspannung",(255,0,0))#txtCtrl gehoert Rot eingefaerbt                
                elif str(Zustand)=="8":
                    message=("1",str(Zustand),"-Drehzahlueberwachung",(255,0,0))#txtCtrl gehoert Rot eingefaerbt                
                elif str(Zustand)=="9":
                    message=("1",str(Zustand),"-Inbetriebnahme",(255,0,0))#txtCtrl gehoert Rot eingefaerbt        
                elif str(Zustand)=="10":
                    message=("1",str(Zustand),"-IPOS-ILLOP",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
                elif str(Zustand)=="11":
                    message=("1",str(Zustand),"-Uebertemperatur",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
                elif str(Zustand)=="13":
                    message=("1",str(Zustand),"-Steuerquelle",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
                elif str(Zustand)=="14":
                    message=("1",str(Zustand),"-Geber",(255,0,0))#txtCtrl gehoert Rot eingefaerbt                                        
                elif str(Zustand)=="17":
                    message=("1",str(Zustand),"-Stack Overflow",(255,0,0))#txtCtrl gehoert Rot eingefaerbt                
                elif str(Zustand)=="18":
                    message=("1",str(Zustand),"-Stack Underflow",(255,0,0))#txtCtrl gehoert Rot eingefaerbt                
                elif str(Zustand)=="19":
                    message=("1",str(Zustand),"-External NMI",(255,0,0))#txtCtrl gehoert Rot eingefaerbt        
                elif str(Zustand)=="20":
                    message=("1",str(Zustand),"-Undefined OP-Code",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
                elif str(Zustand)=="21":
                    message=("1",str(Zustand),"-Protection Fault",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
                elif str(Zustand)=="22":
                    message=("1",str(Zustand),"-Illegal Word Operand",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
                elif str(Zustand)=="23":
                    message=("1",str(Zustand),"-Illegal Instruction Access",(255,0,0))#txtCtrl gehoert Rot eingefaerbt                                        
                elif str(Zustand)=="24":
                    message=("1",str(Zustand),"-Illegal External Bus Access",(255,0,0))#txtCtrl gehoert Rot eingefaerbt                
                elif str(Zustand)=="25":
                    message=("1",str(Zustand),"-EEPROM",(255,0,0))#txtCtrl gehoert Rot eingefaerbt                
                elif str(Zustand)=="26":
                    message=("1",str(Zustand),"-Externe Klemme",(255,0,0))#txtCtrl gehoert Rot eingefaerbt        
                elif str(Zustand)=="27":
                    message=("1",str(Zustand),"-Endschalter fehlen",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
                elif str(Zustand)=="28":
                    message=("1",str(Zustand),"-Feldbus Timeout",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
                elif str(Zustand)=="29":
                    message=("1",str(Zustand),"-Endschalter angefahren",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
                elif str(Zustand)=="30":
                    message=("1",str(Zustand),"-Notstop Timout",(255,0,0))#txtCtrl gehoert Rot eingefaerbt                                        
                elif str(Zustand)=="31":
                    message=("1",str(Zustand),"-TF/TH Ausloeser",(255,0,0))#txtCtrl gehoert Rot eingefaerbt               
                elif str(Zustand)=="32":
                    message=("1",str(Zustand),"-IPOS-Index Overflow",(255,0,0))#txtCtrl gehoert Rot eingefaerbt                
                elif str(Zustand)=="33":
                    message=("1",str(Zustand),"-Sollwert Quelle",(255,0,0))#txtCtrl gehoert Rot eingefaerbt        
                elif str(Zustand)=="34":
                    message=("1",str(Zustand),"-Rampen Timeout",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
                elif str(Zustand)=="35":
                    message=("1",str(Zustand),"-Betriebsart",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
                elif str(Zustand)=="36":
                    message=("1",str(Zustand),"-Option Missing",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
                elif str(Zustand)=="37":
                    message=("1",str(Zustand),"-System Watchdog",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
                elif str(Zustand)=="38":
                    message=("1",str(Zustand),"-System Software",(255,0,0))#txtCtrl gehoert Rot eingefaerbt                                        
                elif str(Zustand)=="39":
                    message=("1",str(Zustand),"-Referenzfahrt",(255,0,0))#txtCtrl gehoert Rot eingefaerbt                
                elif str(Zustand)=="40":
                    message=("1",str(Zustand),"-Boot Synchronisation",(255,0,0))#txtCtrl gehoert Rot eingefaerbt               
                elif str(Zustand)=="41":
                    message=("1",str(Zustand),"-Watchdog Option",(255,0,0))#txtCtrl gehoert Rot eingefaerbt        
                elif str(Zustand)=="42":
                    message=("1",str(Zustand),"-Schleppfehler",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
                elif str(Zustand)=="43":
                    message=("1",str(Zustand),"-RS485 Timeout",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
                elif str(Zustand)=="44":
                    message=("1",str(Zustand),"-Geraeteauslastung",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
                elif str(Zustand)=="45":
                    message=("1",str(Zustand),"-Initialisierung",(255,0,0))#txtCtrl gehoert Rot eingefaerbt                                       
                elif str(Zustand)=="46":
                    message=("1",str(Zustand),"-Systembus 2 Timeout",(255,0,0))#txtCtrl gehoert Rot eingefaerbt                
                elif str(Zustand)=="47":
                    message=("1",str(Zustand),"-Systembus 1 Timeout",(255,0,0))#txtCtrl gehoert Rot eingefaerbt                
                elif str(Zustand)=="48":
                    message=("1",str(Zustand),"-Hardware DRS",(255,0,0))#txtCtrl gehoert Rot eingefaerbt        
                elif str(Zustand)=="77":
                    message=("1",str(Zustand),"-IPOS.Steuerwort",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
                elif str(Zustand)=="78":
                    message=("1",str(Zustand),"-IPOS.SW Endschalter",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
                elif str(Zustand)=="79":
                    message=("1",str(Zustand),"-Hardware Konfiguration",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
                elif str(Zustand)=="80":
                    message=("1",str(Zustand),"-RAM-Test",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
                elif str(Zustand)=="81":
                    message=("1",str(Zustand),"-Starting Kondition",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
                elif str(Zustand)=="82":
                    message=("1",str(Zustand),"-Ausgang offen",(255,0,0))#txtCtrl gehoert Rot eingefaerbt                                       
                elif str(Zustand)=="84":
                    message=("1",str(Zustand),"-Motorschutz",(255,0,0))#txtCtrl gehoert Rot eingefaerbt                
                elif str(Zustand)=="86":
                    message=("1",str(Zustand),"-Speichermodul",(255,0,0))#txtCtrl gehoert Rot eingefaerbt                
                elif str(Zustand)=="87":
                    message=("1",str(Zustand),"-Technologie Option",(255,0,0))#txtCtrl gehoert Rot eingefaerbt        
                elif str(Zustand)=="88":
                    message=("1",str(Zustand),"-Fangen",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
                elif str(Zustand)=="92":
                    message=("1",str(Zustand),"-DIP Geber Problem",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
                elif str(Zustand)=="93":
                    message=("1",str(Zustand),"-DIP Geber Fehler",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
                elif str(Zustand)=="94":
                    message=("1",str(Zustand),"-Checksum EEPROM",(255,0,0))#txtCtrl gehoert Rot eingefaerbt                                        
                elif str(Zustand)=="95":
                    message=("1",str(Zustand),"-DIP-Plausibilitaetsfehler",(255,0,0))#txtCtrl gehoert Rot eingefaerbt                
                elif str(Zustand)=="97":
                    message=("1",str(Zustand),"-Kopierfehler",(255,0,0))#txtCtrl gehoert Rot eingefaerbt                
                elif str(Zustand)=="98":
                    message=("1",str(Zustand),"-CRC Error",(255,0,0))#txtCtrl gehoert Rot eingefaerbt        
                elif str(Zustand)=="99":
                    message=("1",str(Zustand),"-IPOS.Rampenberechnung",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
                elif str(Zustand)=="100":
                    message=("1",str(Zustand),"-Schwingungs Warnung",(255,0,0))#txtCtrl gehoert Rot eingefaerbt                
                elif str(Zustand)=="101":
                    message=("1",str(Zustand),"-Schwingungs Fehler",(255,0,0))#txtCtrl gehoert Rot eingefaerbt        
                elif str(Zustand)=="102":
                    message=("1",str(Zustand),"-Oelalterung Warnung",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
                elif str(Zustand)=="103":
                    message=("1",str(Zustand),"-Oelalterung Fehler",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
                elif str(Zustand)=="104":
                    message=("1",str(Zustand),"-Oelalterung Ueberthemperatur",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
                elif str(Zustand)=="105":
                    message=("1",str(Zustand),"-Oelalterung Sensor",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
                elif str(Zustand)=="106":
                    message=("1",str(Zustand),"-Bremsen Verschleiss",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
                elif str(Zustand)=="107":
                    message=("1",str(Zustand),"-Netzkomponenten",(255,0,0))#txtCtrl gehoert Rot eingefaerbt                                        
                elif str(Zustand)=="108":
                    message=("1",str(Zustand),"-Fehler DCS",(255,0,0))#txtCtrl gehoert Rot eingefaerbt                
                elif str(Zustand)=="109":
                    message=("1",str(Zustand),"-Alarm DCS",(255,0,0))#txtCtrl gehoert Rot eingefaerbt                
                elif str(Zustand)=="110":
                    message=("1",str(Zustand),"-Error EX.Schutz",(255,0,0))#txtCtrl gehoert Rot eingefaerbt       
                elif str(Zustand)=="113":
                    message=("1",str(Zustand),"-Drahtbruch Analogeingang",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
                elif str(Zustand)=="116":
                    message=("1",str(Zustand),"-Timout MoviPLC",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
                elif str(Zustand)=="123":
                    message=("1",str(Zustand),"-Positionierunterbrechung",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
                elif str(Zustand)=="124":
                    message=("1",str(Zustand),"-Umgebungsbedingungen",(255,0,0))#txtCtrl gehoert Rot eingefaerbt                                        
                elif str(Zustand)=="196":
                    message=("1",str(Zustand),"-Leistungsteil",(255,0,0))#txtCtrl gehoert Rot eingefaerbt                
                elif str(Zustand)=="197":
                    message=("1",str(Zustand),"-Netz",(255,0,0))#txtCtrl gehoert Rot eingefaerbt                
                elif str(Zustand)=="199":
                    message=("1",str(Zustand),"-Zwischenkreisaufladung",(255,0,0))#txtCtrl gehoert Rot eingefaerbt        
                else:
                    message=("1",str(Zustand),"-Unknown Error",(255,0,0))#txtCtrl gehoert Rot eingefaerbt
        return ((message ,state1,state2,state3,state4,state5,state6,state7),(message,bit0,bit1,bit2,bit3,bit4,bit6,bit7))    
    
app = App()
run()


